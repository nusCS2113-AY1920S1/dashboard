[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    //id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"duke.Main\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    compile \u0027com.jfoenix:jfoenix:9.0.8\u0027 // Java 9"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    compile ("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            [group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-core\u0027, version: \u00272.4.1\u0027],"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            [group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-annotations\u0027, version: \u00272.4.1\u0027],"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            [group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.4.1\u0027],"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            [group: \u0027org.ocpsoft.prettytime\u0027, name: \u0027prettytime\u0027, version: \u00274.0.1.Final\u0027],"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            [group: \u0027org.ocpsoft.prettytime\u0027, name: \u0027prettytime-nlp\u0027, version: \u00274.0.2.Final\u0027],"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            [group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "//checkstyle {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "//    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "//}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 2,
      "liushiru": 2,
      "-": 51
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.Config;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.Logic;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.LogicManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.BakingHome;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.ReadOnlyBakingHome;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.storage.BakingHomeStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.storage.JsonBakingHomeStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.ui.UiManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Launcher class for the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class Launcher extends Application {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    protected BakingHomeStorage storage \u003d new JsonBakingHomeStorage(Config.BAKING_HOME_DATA_PATH);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Launcher.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing BakingHome ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        model \u003d initModelManager(storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Model initModelManager(BakingHomeStorage storage) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Optional\u003cReadOnlyBakingHome\u003e bakingHomeOptional;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ReadOnlyBakingHome initialData \u003d new BakingHome();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            bakingHomeOptional \u003d storage.readBakingHome();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (bakingHomeOptional.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                logger.info(\"Data file not found.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                initialData \u003d bakingHomeOptional.get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            logger.warning(\"Data file not in the correct format\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            logger.warning(\"Problem while reading from the file\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new ModelManager(initialData);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        logger.info(\"Starting BakingHome\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        launch(Launcher.class, args);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 58,
      "liushiru": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Launcher.main(args);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 11,
      "-": 8
    }
  },
  {
    "path": "src/main/java/duke/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Config values used by the app."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Path of BakingHome data."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final Path BAKING_HOME_DATA_PATH \u003d Paths.get(\"data\", \"baking.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 14
    }
  },
  {
    "path": "src/main/java/duke/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Adapted from AddressBook 4."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String LOG_FILE \u003d \"BakingHome.log\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 102
    }
  },
  {
    "path": "src/main/java/duke/commons/core/Message.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class Message {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"This is an unknown command.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Command format is wrong.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final String MESSAGE_INVALID_PREFIX \u003d \"Prefix %s does not exist.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"Date is invalid.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String MESSAGE_ITEM_MISSING_NAME_OR_QUANTITY \u003d \"Item name or quantity is not specified.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String MESSAGE_INVALID_NUMBER_FORMAT \u003d \"Number format is invalid.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is invalid.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String MESSAGE_INVALID_RANGE \u003d \"Range is invalid.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String MESSAGE_INVALID_STATUS \u003d \"Status is invalid.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String MESSAGE_INVALID_CRITERIA \u003d \"This is not a valid sorting criteria.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String MESSAGE_INDEX_OUT_OF_BOUND \u003d \"Index is out of bound.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 17,
      "liushiru": 1
    }
  },
  {
    "path": "src/main/java/duke/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Represents a zero-based or one-based index. Adapted from AddressBook 4."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 54
    }
  },
  {
    "path": "src/main/java/duke/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A container for app specific utility functions. Adapted from AddressBook 4."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String VALIDATION_NON_EMPTY_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static void checkEmpty(String test, String errorMessage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        checkArgument(test.matches(VALIDATION_NON_EMPTY_REGEX), errorMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static void checkNegativeDouble(Double number, String errorMessage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        if (number \u003c 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 34,
      "eugenelim97": 6
    }
  },
  {
    "path": "src/main/java/duke/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Utility methods related to Collections. Adapted from AddressBook 4."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Checks that the specified object references are all not null."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 39
    }
  },
  {
    "path": "src/main/java/duke/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Writes and reads files. Adapted from AddressBook 4."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates parent directories of file if it has a parent directory."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Assumes file exists."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 83
    }
  },
  {
    "path": "src/main/java/duke/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Converts a Java object instance to JSON and vice versa."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Adapted from AddressBook 4."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "         * Gets the logging level that matches loggingLevelString."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 143
    }
  },
  {
    "path": "src/main/java/duke/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Adapted from AddressBook 4."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String[] wordsInPreppedSentence \u003d sentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns true if {@code s} is non-empty and has length no more than {@code maxLength}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static boolean isValidString(String s, int maxLength) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return s.length() \u003c\u003d maxLength \u0026\u0026 !s.isEmpty();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 79
    }
  },
  {
    "path": "src/main/java/duke/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.AutoCompleter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.inventory.Ingredient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Order;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.sale.Sale;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * API of the Logic component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    Boolean isAutoCompletable(AutoCompleter.UserInputState currentState);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    AutoCompleter.UserInputState complete();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    ObservableList\u003cOrder\u003e getFilteredOrderList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    ObservableList\u003cSale\u003e getFilteredSaleList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    ObservableList\u003cProduct\u003e getFilteredProductList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    ObservableList\u003cItem\u003cIngredient\u003e\u003e getFilteredInventoryList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    ObservableList\u003cItem\u003cIngredient\u003e\u003e getFilteredShoppingList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 32,
      "liushiru": 3,
      "chekjun": 2,
      "eugenelim97": 5
    }
  },
  {
    "path": "src/main/java/duke/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.RedoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.UndoCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.inventory.AddInventoryCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.inventory.ClearInventoryCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.inventory.DeleteInventoryCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.inventory.EditInventoryCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.inventory.InventoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.order.AddOrderCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.order.CompleteOrderCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.order.DeleteOrderCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.order.EditOrderCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.order.OrderCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.order.ShowOrderCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.order.SortOrderCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.product.AddProductCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.product.EditProductCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.product.ProductCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.command.sale.AddSaleCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.command.sale.DeleteSaleCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.command.sale.EditSaleCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.command.sale.FilterSaleCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.command.sale.ShowSaleCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.shopping.AddShoppingCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.shopping.BuyShoppingCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.shopping.ClearShoppingCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.shopping.DeleteShoppingCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.shopping.EditShoppingCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.shopping.ShoppingCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.shortcut.ExecuteShortcutCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.shortcut.SetShortcutCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.AutoCompleter;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.BakingHomeParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.inventory.Ingredient;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Order;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.sale.Sale;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.storage.BakingHomeStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final BakingHomeStorage storage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final BakingHomeParser bakingHomeParser;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final AutoCompleter autoCompleter;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates a logic manager."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public LogicManager(Model model, BakingHomeStorage storage) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.bakingHomeParser \u003d new BakingHomeParser();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.autoCompleter \u003d new AutoCompleter();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        addCommandsToAutoComplete();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Command command \u003d bakingHomeParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            storage.saveBakingHome(model.getBakingHome());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new CommandException(ioe.getMessage(), ioe);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Boolean isAutoCompletable(AutoCompleter.UserInputState currentState) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return autoCompleter.isAutoCompletable(currentState);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public AutoCompleter.UserInputState complete() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return autoCompleter.complete();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public ObservableList\u003cOrder\u003e getFilteredOrderList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return model.getFilteredOrderList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public ObservableList\u003cSale\u003e getFilteredSaleList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return model.getFilteredSaleList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public ObservableList\u003cProduct\u003e getFilteredProductList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        model.updateFilteredProductList(Model.PREDICATE_SHOW_ACTIVE_PRODUCTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return model.getFilteredProductList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public ObservableList\u003cItem\u003cIngredient\u003e\u003e getFilteredInventoryList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return model.getFilteredInventoryList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public ObservableList\u003cItem\u003cIngredient\u003e\u003e getFilteredShoppingList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return model.getFilteredShoppingList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void addCommandsToAutoComplete() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //Order commands"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        autoCompleter.addCommandClass(OrderCommand.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        autoCompleter.addCommandClass(SortOrderCommand.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        autoCompleter.addCommandClass(AddOrderCommand.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        autoCompleter.addCommandClass(DeleteOrderCommand.class);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        autoCompleter.addCommandClass(EditOrderCommand.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        autoCompleter.addCommandClass(CompleteOrderCommand.class);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        autoCompleter.addCommandClass(ShowOrderCommand.class);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //Shortcut commands"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        autoCompleter.addCommandClass(SetShortcutCommand.class);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        autoCompleter.addCommandClass(ExecuteShortcutCommand.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //Sale commands"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        autoCompleter.addCommandClass(AddSaleCommand.class);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        autoCompleter.addCommandClass(DeleteSaleCommand.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        autoCompleter.addCommandClass(EditSaleCommand.class);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        autoCompleter.addCommandClass(FilterSaleCommand.class);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        autoCompleter.addCommandClass(ShowSaleCommand.class);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //Product commands"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        autoCompleter.addCommandClass(ProductCommand.class);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        autoCompleter.addCommandClass(AddProductCommand.class);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        autoCompleter.addCommandClass(EditProductCommand.class);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //Inventory commands"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        autoCompleter.addCommandClass(InventoryCommand.class);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        autoCompleter.addCommandClass(AddInventoryCommand.class);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        autoCompleter.addCommandClass(EditInventoryCommand.class);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        autoCompleter.addCommandClass(DeleteInventoryCommand.class);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        autoCompleter.addCommandClass(ClearInventoryCommand.class);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        autoCompleter.addCommandClass(ShoppingCommand.class);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        autoCompleter.addCommandClass(AddShoppingCommand.class);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        autoCompleter.addCommandClass(EditShoppingCommand.class);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        autoCompleter.addCommandClass(DeleteShoppingCommand.class);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        autoCompleter.addCommandClass(ClearShoppingCommand.class);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        autoCompleter.addCommandClass(BuyShoppingCommand.class);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //Undo and Redo"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        autoCompleter.addCommandClass(UndoCommand.class);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        autoCompleter.addCommandClass(RedoCommand.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 125,
      "liushiru": 7,
      "chekjun": 15,
      "eugenelim97": 14
    }
  },
  {
    "path": "src/main/java/duke/logic/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 19
    }
  },
  {
    "path": "src/main/java/duke/logic/command/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this(feedbackToUser, DisplayedPage.SAME, false);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * The page that should be displayed to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final DisplayedPage displayedPage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public CommandResult(String feedbackToUser, DisplayedPage displayedPage, boolean exit) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.displayedPage \u003d displayedPage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public CommandResult(String feedbackToUser, DisplayedPage displayedPage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this(feedbackToUser, displayedPage, false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * The page shown to the user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public enum DisplayedPage {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        PRODUCT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ORDER,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        INVENTORY,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        SHOPPING,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        SALE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        SAME"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public DisplayedPage getDisplayedPage() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return displayedPage;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 62,
      "liushiru": 1,
      "eugenelim97": 1
    }
  },
  {
    "path": "src/main/java/duke/logic/command/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Reverts the {@code model}\u0027s baking home to its previously undone state."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_REDO_SUCCESS \u003d \"Redo: %s\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_REDO_STACK_EMPTY \u003d \"No more tasks to be redone.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!model.canRedo()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new CommandException(MESSAGE_REDO_STACK_EMPTY);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REDO_SUCCESS, model.redo()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 23
    }
  },
  {
    "path": "src/main/java/duke/logic/command/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Reverts the {@code model}\u0027s baking home to its previous state."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_UNDO_SUCCESS \u003d \"Undo: %s\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_UNDO_STACK_EMPTY \u003d \"No more tasks to be undone.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!model.canUndo()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new CommandException(MESSAGE_UNDO_STACK_EMPTY);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UNDO_SUCCESS, model.undo()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 23
    }
  },
  {
    "path": "src/main/java/duke/logic/command/Undoable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * API for all commands that supports redo and undo operations."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public interface Undoable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Reverses the action of an earlier action."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    void undo(Model model) throws CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Restores any actions that have been previously undone using undo."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    void redo(Model model) throws CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 27
    }
  },
  {
    "path": "src/main/java/duke/logic/command/decrypted/AddSale.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//package duke.logic.command.decrypted;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.command.Undoable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.commons.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.entities.Sale;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.parser.decrypted.CommandParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.storage.decrpted.BakingList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.storage.decrpted.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//public class AddSale implements Undoable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private Map\u003cString, List\u003cString\u003e\u003e params;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private Sale sale;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public AddSale(Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        this.params \u003d params;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void execute(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        sale \u003d new Sale();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        CommandParser.modifySale(params, sale);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        addSale(sale, bakingList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ui.refreshSaleList(bakingList.getSaleList(), bakingList.getSaleList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void undo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        bakingList.getSaleList().remove(sale);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ui.refreshSaleList(bakingList.getSaleList(), bakingList.getSaleList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void redo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        execute(bakingList, storage, ui);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private void addSale(Sale sale, BakingList bakingList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        bakingList.getSaleList().add(0, sale);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 46
    }
  },
  {
    "path": "src/main/java/duke/logic/command/decrypted/CompleteOrder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//package duke.logic.command.decrypted;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.commons.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.command.Undoable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.model.order.Order;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.parser.decrypted.CommandParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.storage.decrpted.BakingList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.storage.decrpted.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.Map;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "///**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "// * A command to set the status of an \u003ccode\u003eOrder\u003c/code\u003e object to \u003ccode\u003eCOMPLETED\u003c/code\u003e."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "// */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//public class CompleteOrder extends Command implements Undoable {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private List\u003cOrder\u003e orders;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private Map\u003cString, List\u003cString\u003e\u003e params;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * Class constructor."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * @param params The parameters specifying details of the order."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public CompleteOrder(Map\u003cString, List\u003cString\u003e\u003e params) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        this.params \u003d params;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void undo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void redo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void execute(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        orders \u003d CommandParser.getOrders(bakingList.getOrderList(), params);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        for (Order order : orders) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            order.setStatus(Order.Status.COMPLETED);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ui.refreshOrderList(bakingList.getOrderList(), bakingList.getOrderList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 51
    }
  },
  {
    "path": "src/main/java/duke/logic/command/decrypted/DeleteSale.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//package duke.logic.command.decrypted;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.command.Undoable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.commons.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.entities.Sale;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.parser.decrypted.CommandParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.storage.decrpted.BakingList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.storage.decrpted.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//public class DeleteSale implements Undoable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private Sale sale;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private Map\u003cString, List\u003cString\u003e\u003e params;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public DeleteSale(Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        this.params \u003d params;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        checkParameters();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void execute(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        this.sale \u003d CommandParser.getSaleByIndexOrId(bakingList.getSaleList(), params);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        this.index \u003d CommandParser.getSaleIndex(bakingList.getSaleList(), params);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        bakingList.getSaleList().remove(sale);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ui.refreshSaleList(bakingList.getSaleList(), bakingList.getSaleList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void undo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        bakingList.getSaleList().add(index, sale);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ui.refreshOrderList(bakingList.getOrderList(), bakingList.getOrderList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void redo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        execute(bakingList, storage, ui);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private void checkParameters() throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (!(params.containsKey(\"secondary\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                ^ params.containsKey(\"i\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                ^ params.containsKey(\"id\"))) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throw new DukeException(\"Too many parameters\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (!params.containsKey(\"secondary\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                \u0026\u0026 !params.containsKey(\"i\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                \u0026\u0026 !params.containsKey(\"id\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throw new DukeException(\"Too few parameters\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private Sale getSale(List\u003cSale\u003e sales) throws DukeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (params.containsKey(\"secondary\") || params.containsKey(\"i\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            return getSaleByIndexParameter(sales);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } else if (params.containsKey(\"id\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throw new DukeException(\"Please specify an order\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        return null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private Sale getSaleByIndexParameter(List\u003cSale\u003e sales) throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        String indexParameter;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (params.containsKey(\"secondary\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            indexParameter \u003d params.get(\"secondary\").get(0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            indexParameter \u003d params.get(\"i\").get(0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            index \u003d Integer.parseInt(indexParameter) - 1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            return sales.get(index);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throw new DukeException(\"Please enter a valid index.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } catch (IndexOutOfBoundsException i) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throw new DukeException(\"Index out of bound\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 86
    }
  },
  {
    "path": "src/main/java/duke/logic/command/decrypted/EditSale.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//package duke.logic.command.decrypted;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.command.Undoable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.commons.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.entities.Sale;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.parser.commons.TimeParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.parser.decrypted.CommandParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.storage.decrpted.BakingList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.storage.decrpted.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//public class EditSale implements Undoable {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private Map\u003cString, List\u003cString\u003e\u003e params;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private Sale sale;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private Sale unmodifiedSale \u003d new Sale();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public EditSale(Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (!(params.containsKey(\"i\") \u003d\u003d !params.containsKey(\"id\"))) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throw new DukeException(\"Please specify order ID or index\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        this.params \u003d params;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void execute(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        sale \u003d getSale(bakingList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        copySale(unmodifiedSale, sale);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        CommandParser.modifySale(params, sale);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ui.refreshSaleList(bakingList.getSaleList(), bakingList.getSaleList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void undo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        copySale(sale, unmodifiedSale);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ui.refreshSaleList(bakingList.getSaleList(), bakingList.getSaleList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void redo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        sale \u003d getSale(bakingList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        CommandParser.modifySale(params, sale);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ui.refreshOrderList(bakingList.getOrderList(), bakingList.getOrderList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private Sale getSale(BakingList bakingList) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (params.containsKey((\"i\"))) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            return getSaleByIndex(bakingList, params.get(\"i\").get(0));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            return getSaleById(bakingList, params.get(\"id\").get(0));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private Sale getSaleById(BakingList bakingList, String i) throws DukeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        long id;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            id \u003d Long.parseLong(params.get(\"id\").get(0));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throw new DukeException(\"Please provide a valid order ID\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        for (Sale sale : bakingList.getSaleList()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            if (sale.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                return sale;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        throw new DukeException(\"Unknown ID\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private Sale getSaleByIndex(BakingList bakingList, String i) throws DukeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        int index;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            index \u003d Integer.parseInt(params.get(\"i\").get(0)) - 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throw new DukeException(\"Please provide a valid index\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (index \u003c 0 || index \u003e\u003d bakingList.getSaleList().size()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throw new DukeException(\"Index out of bound.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        return bakingList.getSaleList().get(index);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private void modifySale(Sale sale, Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (params.containsKey(\"desc\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            sale.setDescription(params.get(\"desc\").get(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (params.containsKey(\"contact\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            sale.setValue(Double.parseDouble(params.get(\"value\").get(0)));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (params.containsKey(\"rmk\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            sale.setRemarks(params.get(\"rmk\").get(0));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (params.containsKey(\"at\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            sale.setSaleDate(TimeParser.convertStringToDate(params.get(\"at\").get(0)));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private void copySale(Sale to, Sale from) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        to.setId(from.getId());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        to.setDescription(from.getDescription());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        to.setValue(from.getValue());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        to.setSaleDate(from.getSaleDate());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        to.setRemarks(from.getRemarks());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 114
    }
  },
  {
    "path": "src/main/java/duke/logic/command/decrypted/ExecuteShortcut.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//package duke.logic.command.decrypted;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.command.Undoable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.commons.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.parser.decrypted.OldParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.storage.decrpted.BakingList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.storage.decrpted.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.ListIterator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "///**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "// * A command to execute a user-defined set of commands."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "// */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//public class ExecuteShortcut extends Command implements Undoable {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private List\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private List\u003cCommand\u003e commands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * Class constructor."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * @param lines A list containing user inputs. Each entry represents a line of user input is to be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     *              converted to a \u003ccode\u003eCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * @throws DukeException if fails to convert any line into a \u003ccode\u003eCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public ExecuteShortcut(@JsonProperty(\"lines\") List\u003cString\u003e lines) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        this.lines \u003d lines;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        for (String line : lines) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                Command command \u003d OldParser.getCommand(line.strip(), new HashMap\u003cString, ExecuteShortcut\u003e());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                commands.add(command);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            } catch (DukeException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                //TODO: Improve catching"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                throw new DukeException(\"Error when adding shortcut: \" + e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void undo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ListIterator\u003cCommand\u003e itr \u003d commands.listIterator(commands.size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        while (itr.hasPrevious()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            Command command \u003d itr.previous();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            if (command instanceof Undoable) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                ((Undoable) command).undo(bakingList, storage, ui);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ui.showMessage(\"Undo: Execute shortcut\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void redo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        execute(bakingList, storage, ui);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ui.showMessage(\"Redo: Execute shortcut\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void execute(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        for (Command command : commands) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            command.execute(bakingList, storage, ui);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ui.showMessage(\"Shortcut executed successfully\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * Returns a list containing user inputs."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * @return A list containing user inputs. Each entry represents a line of user input is to be converted to"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * a \u003ccode\u003eCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public List\u003cString\u003e getLines() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        return lines;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * Sets a set of inputs to be converted to \u003ccode\u003eCommand\u003c/code\u003e objects."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * @param lines A list containing user inputs. Each entry represents a line of user input is to be"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     *              converted to a \u003ccode\u003eCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void setLines(List\u003cString\u003e lines) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        this.lines \u003d lines;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 91
    }
  },
  {
    "path": "src/main/java/duke/logic/command/decrypted/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//package duke.logic.command.decrypted;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.commons.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.storage.decrpted.BakingList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.storage.decrpted.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "///**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "// * A command that restores any actions that have been previously undone using undo."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "// */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void execute(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 20
    }
  },
  {
    "path": "src/main/java/duke/logic/command/decrypted/SetShortcut.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//package duke.logic.command.decrypted;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.command.Undoable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.commons.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.storage.decrpted.BakingList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.storage.decrpted.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "///**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "// * A command to set a new shortcut. A shortcut is a set of user-defined commands that can be executed by"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "// * entering the shortcut keyword."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "// */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//public class SetShortcut extends Command implements Undoable {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private ExecuteShortcut unmodifiedExecuteShortCutCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private List\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private final Set\u003cString\u003e reservedWords \u003d Set.of("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            \"undo\", \"redo\", \"order\", \"recipe\", \"add\", \"remove\", \"edit\", \"done\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    );"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * Class constructor."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * @param line A line of user input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * @throws DukeException if shortcut name contains the application\u0027s reserved words."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public SetShortcut(String line) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        splitIntoLines(line);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (containsReservedWords(name)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throw new DukeException(\"Cannot contain reserved words\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void undo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (unmodifiedExecuteShortCutCommand \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            System.out.println(\"here\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            bakingList.getShortcuts().remove(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            bakingList.getShortcuts().put(name, unmodifiedExecuteShortCutCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ui.showMessage(\"Undo: Set shortcut\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void redo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        execute(bakingList, storage, ui);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ui.showMessage(\"Redo: Set shortcut\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void execute(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ExecuteShortcut executeShortcutCommand \u003d new ExecuteShortcut(lines);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (bakingList.getShortcuts().containsKey(name)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            unmodifiedExecuteShortCutCommand \u003d bakingList.getShortcuts().get(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        bakingList.getShortcuts().put(name, executeShortcutCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ui.showMessage(\"Shortcut added\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private void splitIntoLines(String line) throws DukeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        Pattern pattern \u003d Pattern.compile(\"^\\\\w+\\\\s+(\\\\w+)\\\\s+\\\\\\\"(.*?)\\\\\\\"\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        Matcher matcher \u003d pattern.matcher(line);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (!matcher.find()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throw new DukeException(\"Please enter valid parameters\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        this.name \u003d matcher.group(1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        this.lines \u003d Arrays.asList(matcher.group(2).split(\";\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private boolean containsReservedWords(String str) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        return reservedWords.contains(str.strip());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 86
    }
  },
  {
    "path": "src/main/java/duke/logic/command/decrypted/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//package duke.logic.command.decrypted;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.commons.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.storage.decrpted.BakingList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.storage.decrpted.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "///**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "// * A command that reverses the action of an earlier action."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "// */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void execute(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 20
    }
  },
  {
    "path": "src/main/java/duke/logic/command/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.command.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 14
    }
  },
  {
    "path": "src/main/java/duke/logic/command/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.command.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Represents an error during conversion of data from one format to another."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 11
    }
  },
  {
    "path": "src/main/java/duke/logic/command/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.command.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 21
    }
  },
  {
    "path": "src/main/java/duke/logic/command/inventory/AddInventoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "package duke.logic.command.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.message.InventoryMessageUtils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.CliSyntax;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.Prefix;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.inventory.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "public class AddInventoryCommand extends InventoryCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String AUTO_COMPLETE_INDICATOR \u003d InventoryCommand.COMMAND_WORD + \" \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final Prefix[] AUTO_COMPLETE_PARAMETERS \u003d {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        CliSyntax.PREFIX_INVENTORY_NAME,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        CliSyntax.PREFIX_INVENTORY_QUANTITY,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        CliSyntax.PREFIX_INVENTORY_REMARKS"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    };"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private final Item\u003cIngredient\u003e toAdd;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public AddInventoryCommand(Item\u003cIngredient\u003e toAdd) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        if (model.hasInventory(toAdd)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            throw new CommandException(String.format(InventoryMessageUtils.MESSAGE_DUPLICATE_INVENTORY,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                    toAdd.getItem().getName()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        model.addInventory(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        model.commit(InventoryMessageUtils.MESSAGE_COMMIT_ADD_INVENTORY);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return new CommandResult(String.format(InventoryMessageUtils.MESSAGE_SUCCESS_ADD_INVENTORY,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                toAdd.getItem().getName()),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                CommandResult.DisplayedPage.INVENTORY);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 1,
      "eugenelim97": 46
    }
  },
  {
    "path": "src/main/java/duke/logic/command/inventory/ClearInventoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "package duke.logic.command.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.message.InventoryMessageUtils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.inventory.Ingredient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "public class ClearInventoryCommand extends InventoryCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private final List\u003cItem\u003cIngredient\u003e\u003e emptyList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public ClearInventoryCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        emptyList \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        model.clearInventory(emptyList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        model.commit(InventoryMessageUtils.MESSAGE_SUCCESS_CLEAR_INVENTORY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return new CommandResult(String.format(InventoryMessageUtils.MESSAGE_SUCCESS_CLEAR_INVENTORY),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                CommandResult.DisplayedPage.INVENTORY);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenelim97": 35
    }
  },
  {
    "path": "src/main/java/duke/logic/command/inventory/DeleteInventoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "package duke.logic.command.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.message.InventoryMessageUtils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.inventory.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "public class DeleteInventoryCommand extends InventoryCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public DeleteInventoryCommand(Index index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        List\u003cItem\u003cIngredient\u003e\u003e inventoryList \u003d model.getFilteredInventoryList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d inventoryList.size()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            throw new CommandException(Message.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        Item\u003cIngredient\u003e toDelete \u003d inventoryList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        model.deleteInventory(toDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        model.commit(InventoryMessageUtils.MESSAGE_COMMIT_REMOVE_INVENTORY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return new CommandResult(String.format(InventoryMessageUtils.MESSAGE_SUCCESS_REMOVE_INVENTORY,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                toDelete.getItem().getName()),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                CommandResult.DisplayedPage.INVENTORY);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenelim97": 46
    }
  },
  {
    "path": "src/main/java/duke/logic/command/inventory/EditInventoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "package duke.logic.command.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.message.InventoryMessageUtils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.CliSyntax;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.Prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.inventory.Ingredient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static duke.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "public class EditInventoryCommand extends InventoryCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String AUTO_COMPLETE_INDICATOR \u003d InventoryCommand.COMMAND_WORD + \" \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final Prefix[] AUTO_COMPLETE_PARAMETERS \u003d {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        CliSyntax.PREFIX_INVENTORY_NAME,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        CliSyntax.PREFIX_INVENTORY_QUANTITY,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        CliSyntax.PREFIX_INVENTORY_REMARKS"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    };"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public final Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public final InventoryDescriptor inventoryDescriptor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public EditInventoryCommand(Index index, InventoryDescriptor edited) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireAllNonNull(index, edited);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        inventoryDescriptor \u003d edited;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireAllNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        List\u003cItem\u003cIngredient\u003e\u003e lastShownList \u003d model.getFilteredInventoryList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            throw new CommandException(Message.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        Item\u003cIngredient\u003e toEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        Item\u003cIngredient\u003e edited \u003d InventoryCommandUtil.createNewInventory(toEdit, inventoryDescriptor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        model.setInventory(toEdit, edited);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        model.commit(InventoryMessageUtils.MESSAGE_COMMIT_EDIT_INVENTORY);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return new CommandResult(String.format(InventoryMessageUtils.MESSAGE_SUCCESS_EDIT_INVENTORY,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                edited.getItem().getName()),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                CommandResult.DisplayedPage.INVENTORY);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenelim97": 59
    }
  },
  {
    "path": "src/main/java/duke/logic/command/inventory/InventoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "package duke.logic.command.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": " * A abstract base class for commands that manages the inventory list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "public abstract class InventoryCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"inv\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenelim97": 10
    }
  },
  {
    "path": "src/main/java/duke/logic/command/inventory/InventoryCommandUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "package duke.logic.command.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.commons.Quantity;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.inventory.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "public class InventoryCommandUtil {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static Item\u003cIngredient\u003e createNewInventory(Item\u003cIngredient\u003e toEdit, InventoryDescriptor edited) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        assert toEdit !\u003d null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        String name \u003d edited.getName().orElse(toEdit.getItem().getName());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        Double quantity \u003d edited.getQuantity().orElse(toEdit.getQuantity().getNumber());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        String remarks \u003d edited.getRemarks().orElse(toEdit.getItem().getRemarks());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return new Item\u003cIngredient\u003e((new Ingredient(name, remarks)), new Quantity(quantity));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenelim97": 18
    }
  },
  {
    "path": "src/main/java/duke/logic/command/inventory/InventoryDescriptor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "package duke.logic.command.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import org.ocpsoft.prettytime.shade.org.apache.commons.lang.StringUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "public class InventoryDescriptor {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private Double quantity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private String remarks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public InventoryDescriptor() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * Creates an InventoryDescriptor constructor and sets its values with toCopy\u0027s values"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public InventoryDescriptor(InventoryDescriptor toCopy) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        setName(toCopy.name);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        setQuantity(toCopy.quantity);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        setRemarks(toCopy.remarks);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public Optional\u003cString\u003e getName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        this.name \u003d StringUtils.capitalize(name.toLowerCase());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public Optional\u003cDouble\u003e getQuantity() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return Optional.ofNullable(quantity);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void setQuantity(Double quantity) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public Optional\u003cString\u003e getRemarks() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return Optional.ofNullable(remarks);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void setRemarks(String remarks) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenelim97": 48
    }
  },
  {
    "path": "src/main/java/duke/logic/command/inventory/ShowInventoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "package duke.logic.command.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.message.InventoryMessageUtils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": " * A command that displays the inventory list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "public class ShowInventoryCommand extends InventoryCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return new CommandResult(InventoryMessageUtils.MESSAGE_SUCCESS_SHOW_INVENTORY,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                CommandResult.DisplayedPage.INVENTORY);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenelim97": 20
    }
  },
  {
    "path": "src/main/java/duke/logic/command/order/AddOrderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.command.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.CliSyntax;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.Prefix;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.inventory.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Customer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Order;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A command to add an order to order list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class AddOrderCommand extends OrderCommand {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String AUTO_COMPLETE_INDICATOR \u003d OrderCommand.COMMAND_WORD + \" \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final Prefix[] AUTO_COMPLETE_PARAMETERS \u003d {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        CliSyntax.PREFIX_CUSTOMER_NAME,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        CliSyntax.PREFIX_CUSTOMER_CONTACT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        CliSyntax.PREFIX_ORDER_DEADLINE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        CliSyntax.PREFIX_ORDER_STATUS,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        CliSyntax.PREFIX_ORDER_ITEM,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        CliSyntax.PREFIX_ORDER_REMARKS,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        CliSyntax.PREFIX_ORDER_TOTAL"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    };"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_COMMIT \u003d \"Add order\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"New order added [Order ID: %s]\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String DEFAULT_CUSTOMER_NAME \u003d \"customer\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String DEFAULT_CUSTOMER_CONTACT \u003d \"N/A\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final Date DEFAULT_DELIVERY_DATE \u003d Calendar.getInstance().getTime();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String DEFAULT_REMARKS \u003d \"N/A\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final Order.Status DEFAULT_STATUS \u003d Order.Status.ACTIVE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final OrderDescriptor addOrderDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AddOrderCommand.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates an AddOrderCommand to add the specified {@code Order}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param addOrderDescriptor details of the order to add"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public AddOrderCommand(OrderDescriptor addOrderDescriptor) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(addOrderDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.addOrderDescriptor \u003d addOrderDescriptor;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Executes the add order command and returns the result message."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Order toAdd \u003d createOrder(addOrderDescriptor,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            model.getFilteredProductList(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            model.getFilteredInventoryList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        model.addOrder(toAdd);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        model.commit(MESSAGE_COMMIT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        logger.info(String.format(\"Added new order [%s]\", toAdd.getId()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.getId()), CommandResult.DisplayedPage.ORDER);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates an order from {@code descriptor}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * {@code inventoryList} is used to detect if there are enough ingredients for the order."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws CommandException if items specified in the descriptor are not in {@code productList}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Order createOrder(OrderDescriptor descriptor,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                              List\u003cProduct\u003e productList, ObservableList\u003cItem\u003cIngredient\u003e\u003e inventoryList)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        throws CommandException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Set\u003cItem\u003cProduct\u003e\u003e productItems \u003d OrderCommandUtil.getProductItems(productList,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                descriptor.getItems().orElse(new HashSet\u003c\u003e()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        double total \u003d descriptor.getTotal().orElse(calculateTotal(productItems));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Order order \u003d new Order("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            new Customer(descriptor.getCustomerName().orElse(DEFAULT_CUSTOMER_NAME),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                descriptor.getCustomerContact().orElse(DEFAULT_CUSTOMER_CONTACT)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            descriptor.getDeliveryDate().orElse(DEFAULT_DELIVERY_DATE),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            descriptor.getStatus().orElse(DEFAULT_STATUS),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            descriptor.getRemarks().orElse(DEFAULT_REMARKS),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            productItems,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            total"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        order.listenToInventory(inventoryList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return order;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns the total retail price of {@code productItems}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static double calculateTotal(Set\u003cItem\u003cProduct\u003e\u003e productItems) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(productItems);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        double total \u003d 0;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (Item\u003cProduct\u003e productItem : productItems) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            total +\u003d productItem.getItem().getRetailPrice() * productItem.getQuantity().getNumber();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return total;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 125
    }
  },
  {
    "path": "src/main/java/duke/logic/command/order/CompleteOrderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.command.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Order;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.command.order.OrderCommandUtil.deductInventory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A command to set {@code Status} of order(s) to {@code COMPLETED} and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * creates a corresponding sale entry."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * @see Order#getStatus()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class CompleteOrderCommand extends OrderCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_COMMIT \u003d \"Complete order\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_COMPLETE_SUCCESS \u003d \"%s order(s) completed.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_COMPLETE_INSUFFICIENT_INVENTORY \u003d \"%s order(s) completed. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        + \"Insufficient ingredients are deducted to zero in inventory.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_INDEX_OUT_OF_BOUND \u003d \"Index [%d] out of bound.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Set\u003cIndex\u003e indices;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(CompleteOrderCommand.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates a {@code CompleteOrderCommand}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param indices of orders in order list to set to {@code COMPLETED}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public CompleteOrderCommand(Set\u003cIndex\u003e indices) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(indices);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.indices \u003d indices;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String executeResult \u003d MESSAGE_COMPLETE_SUCCESS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (Index index : indices) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d model.getFilteredOrderList().size()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                logger.warning(String.format(\"Index [%d] out of bound\", index.getOneBased()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_INDEX_OUT_OF_BOUND, index.getOneBased()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            OrderDescriptor descriptor \u003d new OrderDescriptor();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            descriptor.setStatus(Order.Status.COMPLETED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            //deducts ingredients used in this order from inventory."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            boolean isIngredientsUsedUp \u003d deductInventory("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                model.getFilteredOrderList().get(index.getZeroBased()),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            );"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (isIngredientsUsedUp) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                executeResult \u003d MESSAGE_COMPLETE_INSUFFICIENT_INVENTORY;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            model.setOrder(index,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    OrderCommandUtil.modifyOrder("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        model.getFilteredOrderList().get(index.getZeroBased()),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        descriptor,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        model.getFilteredProductList(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        model.getFilteredInventoryList()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            );"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            //Add new sale entry"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            model.addSaleFromOrder(model.getFilteredOrderList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        model.commit(MESSAGE_COMMIT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        logger.info(String.format(\"Completed %d order(s)\", indices.size()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new CommandResult(String.format(executeResult, indices.size()),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                CommandResult.DisplayedPage.ORDER);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 91
    }
  },
  {
    "path": "src/main/java/duke/logic/command/order/DeleteOrderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.command.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Order;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//@@author liujiajun"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A command to delete orders from Order List."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class DeleteOrderCommand extends OrderCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_COMMIT \u003d \"Delete order\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_DELETE_SUCCESS \u003d \"%s order(s) removed.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Set\u003cIndex\u003e indices;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates a {@code DeleteProductCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param indices of the orders to delete"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public DeleteOrderCommand(Set\u003cIndex\u003e indices) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(indices);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.indices \u003d indices;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        List\u003cOrder\u003e toDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (Index index : indices) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d model.getFilteredOrderList().size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new CommandException(Message.MESSAGE_INDEX_OUT_OF_BOUND);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            toDelete.add(model.getFilteredOrderList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (Order order : toDelete) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            model.deleteOrder(order);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        model.commit(MESSAGE_COMMIT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_SUCCESS, indices.size()),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            CommandResult.DisplayedPage.ORDER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "liujiajun": 59
    }
  },
  {
    "path": "src/main/java/duke/logic/command/order/EditOrderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.command.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.CliSyntax;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.Prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Order;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.command.order.OrderCommandUtil.deductInventory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A command to edit the details of an existing order."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class EditOrderCommand extends OrderCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String AUTO_COMPLETE_INDICATOR \u003d OrderCommand.COMMAND_WORD + \" \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final Prefix[] AUTO_COMPLETE_PARAMETERS \u003d {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        CliSyntax.PREFIX_CUSTOMER_NAME,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        CliSyntax.PREFIX_CUSTOMER_CONTACT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        CliSyntax.PREFIX_ORDER_DEADLINE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        CliSyntax.PREFIX_ORDER_ITEM,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        CliSyntax.PREFIX_ORDER_REMARKS,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        CliSyntax.PREFIX_ORDER_TOTAL,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        CliSyntax.PREFIX_ORDER_STATUS"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    };"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_COMMIT \u003d \"Edit order\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Order [%1$s]\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_CANNOT_EDIT_COMPLETED_ORDER \u003d \"Completed orders cannot be modified.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final OrderDescriptor orderDescriptor;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates an EditOrderCommand to modify the details of an {@code Order}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param index               of the the order in the filtered order list"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param orderDescriptor details to edit the order with"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public EditOrderCommand(Index index, OrderDescriptor orderDescriptor) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireAllNonNull(index, orderDescriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.orderDescriptor \u003d new OrderDescriptor(orderDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        List\u003cOrder\u003e lastShownList \u003d model.getFilteredOrderList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new CommandException(Message.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Order orderToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //Completed order cannot be modified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (orderToEdit.getStatus().equals(Order.Status.COMPLETED)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new CommandException(MESSAGE_CANNOT_EDIT_COMPLETED_ORDER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Order editedOrder \u003d OrderCommandUtil.modifyOrder("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            orderToEdit,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            orderDescriptor,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            model.getFilteredProductList(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            model.getFilteredInventoryList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        model.setOrder(orderToEdit, editedOrder);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //Deduct inventory if order is set to complete."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (editedOrder.getStatus() \u003d\u003d Order.Status.COMPLETED) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            deductInventory(editedOrder, model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        model.updateFilteredOrderList(Model.PREDICATE_SHOW_ALL_ORDERS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        model.commit(MESSAGE_COMMIT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedOrder.getId()),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                CommandResult.DisplayedPage.ORDER);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 94
    }
  },
  {
    "path": "src/main/java/duke/logic/command/order/OrderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.command.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * An abstract base class for commands that manage orders."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public abstract class OrderCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"order\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 10
    }
  },
  {
    "path": "src/main/java/duke/logic/command/order/OrderCommandUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.command.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.inventory.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Customer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Order;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "class OrderCommandUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_ITEM_NOT_FOUND \u003d \"[%s] is not an existing product. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            + \"Add it to Product List first? \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns a set of product items from product names."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param allProducts that are available."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param items containing the name of the products."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws CommandException if one or more product names in {@code items} are not found in {@code allProducts}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    static Set\u003cItem\u003cProduct\u003e\u003e getProductItems(List\u003cProduct\u003e allProducts,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                              Set\u003cItem\u003cString\u003e\u003e items)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireAllNonNull(allProducts, items);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Set\u003cItem\u003cProduct\u003e\u003e products \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (Item\u003cString\u003e item : items) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (!allProducts.contains(new Product(item.getItem()))) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_ITEM_NOT_FOUND, item.getItem()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                products.add(new Item\u003c\u003e(allProducts.get(allProducts.indexOf(new Product(item.getItem()))),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        item.getQuantity()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return products;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Modifies the {@code original} order based on {@code orderDescriptor}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * {@code inventoryList} is used to detect if there are enough ingredients for the order."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws CommandException if if items specified in the descriptor are not in {@code productList}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    static Order modifyOrder(Order original, OrderDescriptor orderDescriptor,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                             List\u003cProduct\u003e productList,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                             ObservableList\u003cItem\u003cIngredient\u003e\u003e inventoryList)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        assert original !\u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Customer newCustomer \u003d new Customer("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                orderDescriptor.getCustomerName().orElse(original.getCustomer().name),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                orderDescriptor.getCustomerContact().orElse(original.getCustomer().contact)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Date newDate \u003d orderDescriptor.getDeliveryDate().orElse(original.getDeliveryDate());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Set\u003cItem\u003cProduct\u003e\u003e newItems;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (orderDescriptor.getItems().isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            newItems \u003d getProductItems(productList, orderDescriptor.getItems().get());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            newItems \u003d original.getItems();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String newRemarks \u003d orderDescriptor.getRemarks().orElse(original.getRemarks());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Order.Status newStatus \u003d orderDescriptor.getStatus().orElse(original.getStatus());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        double newTotal \u003d orderDescriptor.getTotal().orElse(original.getTotal());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Order order \u003d new Order(newCustomer, newDate, newStatus, newRemarks, newItems, newTotal);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        order.listenToInventory(inventoryList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return order;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Deducts the amount of ingredients used in this {@code order} from inventory in {@code model}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * If ingredients in inventory are not enough, deducts to zero."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @return true if ingredients in inventory are enough."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    static boolean deductInventory(Order order, Model model) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        boolean isInventoryEnough \u003d true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (Item\u003cProduct\u003e productItem : order.getItems()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            for (Item\u003cIngredient\u003e ingredientItem : productItem.getItem().getIngredients()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                if (model.hasIngredient(ingredientItem.getItem())) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    double amount \u003d productItem.getQuantity().getNumber() * ingredientItem.getQuantity().getNumber();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    if (model.deductIngredient(ingredientItem.getItem(), amount)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        isInventoryEnough \u003d false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return isInventoryEnough;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 101
    }
  },
  {
    "path": "src/main/java/duke/logic/command/order/OrderDescriptor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.command.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Order;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A class that stores the details an order."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class OrderDescriptor {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private String customerName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private String customerContact;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Date deliveryDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Set\u003cItem\u003cString\u003e\u003e items;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private String remarks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Order.Status status;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Double total;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public OrderDescriptor() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param toCopy the OrderDescriptor to copy from"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public OrderDescriptor(OrderDescriptor toCopy) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        setCustomerName(toCopy.customerName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        setCustomerContact(toCopy.customerContact);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        setDeliveryDate(toCopy.deliveryDate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        setItems(toCopy.items);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        setRemarks(toCopy.remarks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        setStatus(toCopy.status);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        setTotal(toCopy.total);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    Optional\u003cString\u003e getCustomerName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Optional.ofNullable(customerName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setCustomerName(String name) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.customerName \u003d name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    Optional\u003cString\u003e getCustomerContact() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Optional.ofNullable(customerContact);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setCustomerContact(String contact) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.customerContact \u003d contact;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    Optional\u003cDate\u003e getDeliveryDate() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Optional.ofNullable(deliveryDate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setDeliveryDate(Date deliveryDate) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.deliveryDate \u003d deliveryDate;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Optional\u003cSet\u003cItem\u003cString\u003e\u003e\u003e getItems() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Optional.ofNullable(items);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setItems(Set\u003cItem\u003cString\u003e\u003e items) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.items \u003d (items !\u003d null) ? new HashSet\u003c\u003e(items) : null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Optional\u003cString\u003e getRemarks() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Optional.ofNullable(remarks);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setRemarks(String remarks) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Optional\u003cOrder.Status\u003e getStatus() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Optional.ofNullable(status);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setStatus(Order.Status status) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    Optional\u003cDouble\u003e getTotal() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Optional.ofNullable(total);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setTotal(Double total) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.total \u003d total;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        OrderDescriptor that \u003d (OrderDescriptor) o;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Objects.equals(customerName, that.customerName)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                \u0026\u0026 Objects.equals(customerContact, that.customerContact)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                \u0026\u0026 Objects.equals(deliveryDate, that.deliveryDate)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                \u0026\u0026 Objects.equals(items, that.items)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                \u0026\u0026 Objects.equals(remarks, that.remarks)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                \u0026\u0026 status \u003d\u003d that.status"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                \u0026\u0026 total.equals(that.total);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Objects.hash(customerName, customerContact, deliveryDate, items, remarks, status, total);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 120
    }
  },
  {
    "path": "src/main/java/duke/logic/command/order/ShowOrderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.command.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.CliSyntax;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.Prefix;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Order;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A command that displays orders of specified status and their indices."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class ShowOrderCommand extends OrderCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String AUTO_COMPLETE_INDICATOR \u003d OrderCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final Prefix[] AUTO_COMPLETE_PARAMETERS \u003d {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        CliSyntax.PREFIX_ORDER_STATUS"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    };"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_LIST_SUCCESS \u003d \"Showing %d order(s).\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Order.Status status;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates a ShowOrderCommand that displays orders with specified {@code status}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public ShowOrderCommand(Order.Status status) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates a ShowOrderCommand that displays all orders."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public ShowOrderCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (status \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            model.updateFilteredOrderList(model.PREDICATE_SHOW_ALL_ORDERS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } else if (Order.Status.COMPLETED.equals(status)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            model.updateFilteredOrderList(model.PREDICATE_SHOW_COMPLETED_ORDERS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } else if (Order.Status.ACTIVE.equals(status)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            model.updateFilteredOrderList(model.PREDICATE_SHOW_ACTIVE_ORDERS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } else if (Order.Status.CANCELED.equals(status)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            model.updateFilteredOrderList(model.PREDICATE_SHOW_CANCELED_ORDERS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            String.format(MESSAGE_LIST_SUCCESS, model.getFilteredOrderList().size()),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            CommandResult.DisplayedPage.ORDER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 56
    }
  },
  {
    "path": "src/main/java/duke/logic/command/order/SortOrderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.command.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.CliSyntax;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.Prefix;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class SortOrderCommand extends OrderCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String AUTO_COMPLETE_INDICATOR \u003d OrderCommand.COMMAND_WORD + \" \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final Prefix[] AUTO_COMPLETE_PARAMETERS \u003d {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        CliSyntax.PREFIX_ORDER_SORT_DECREASE"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    };"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String COMMIT_MESSAGE \u003d \"Sort orders\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Orders are sorted.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final SortCriteria criteria;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final boolean isIncreasing;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates a {@code SortOrderCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param criteria     to sort the orders."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param isIncreasing true if orders are to be sorted in increasing order."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public SortOrderCommand(SortCriteria criteria, boolean isIncreasing) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        assert (criteria !\u003d null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.criteria \u003d criteria;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.isIncreasing \u003d isIncreasing;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        model.sortOrders(criteria, isIncreasing);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        model.commit(COMMIT_MESSAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, CommandResult.DisplayedPage.ORDER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * The criteria by which to sort order list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public enum SortCriteria {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        STATUS,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        TOTAL,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        DEADLINE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        CREATION"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 50
    }
  },
  {
    "path": "src/main/java/duke/logic/command/product/AddProductCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.logic.command.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.message.ProductMessageUtils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.commons.CliSyntax;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.commons.Prefix;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class AddProductCommand extends ProductCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private final Product toAdd;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final String AUTO_COMPLETE_INDICATOR \u003d ProductCommand.COMMAND_WORD + \" \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final Prefix[] AUTO_COMPLETE_PARAMETERS \u003d {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        CliSyntax.PREFIX_PRODUCT_NAME,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        CliSyntax.PREFIX_PRODUCT_INGREDIENT,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        CliSyntax.PREFIX_PRODUCT_INGREDIENT_COST,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        CliSyntax.PREFIX_PRODUCT_RETAIL_PRICE"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    };"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Constructs a AddProductCommand with the given ProductDescriptor"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public AddProductCommand(ProductDescriptor descriptor) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        requireNonNull(descriptor);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.toAdd \u003d ProductCommandUtil.getProductFromDescriptor(descriptor);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        if (model.hasProduct(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            throw new CommandException(String.format(ProductMessageUtils.MESSAGE_DUPLICATE_PRODUCT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                toAdd.getProductName()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        ProductCommandUtil.verifyNewIngredients(model, toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        toAdd.setIngredientCost(ProductCommandUtil.getIngredientCost(model, toAdd));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        model.addProduct(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        model.commit(ProductMessageUtils.MESSAGE_COMMIT_ADD_PRODUCT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return new CommandResult(String.format(ProductMessageUtils.MESSAGE_ADD_PRODUCT_SUCCESS, toAdd.getProductName()),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                CommandResult.DisplayedPage.PRODUCT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                || (other instanceof AddProductCommand)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddProductCommand) other).toAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 4,
      "liushiru": 63
    }
  },
  {
    "path": "src/main/java/duke/logic/command/product/DeleteProductCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.logic.command.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.message.ProductMessageUtils;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.lang.ref.PhantomReference;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class DeleteProductCommand extends ProductCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private static final String MESSAGE_DELETE_SUCCESS \u003d \"Product(s) removed.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private static final String MESSAGE_INDEX_OUT_OF_BOUND \u003d \"Index [%d] is out of bound.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private final Set\u003cIndex\u003e indices;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /** Creates a DeleteProductCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @param indices of the products to delete"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public DeleteProductCommand(Set\u003cIndex\u003e indices) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        requireNonNull(indices);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.indices \u003d indices;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        List\u003cProduct\u003e toDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        for (Index index : indices) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d model.getFilteredProductList().size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_INDEX_OUT_OF_BOUND, index.getOneBased()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            toDelete.add(model.getFilteredProductList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        for (Product product : toDelete) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            model.deleteProduct(product);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        model.commit(ProductMessageUtils.MESSAGE_COMMIT_DELETE_PRODUCT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_SUCCESS, indices.size()),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                CommandResult.DisplayedPage.PRODUCT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liushiru": 51
    }
  },
  {
    "path": "src/main/java/duke/logic/command/product/EditProductCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.logic.command.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.message.ProductMessageUtils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.exceptions.DuplicateEntityException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import static duke.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class EditProductCommand extends ProductCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final String MESSAGE_EDIT_PRODUCT_SUCCESS \u003d \"Edited Products %s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public final Index index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public final ProductDescriptor productDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Creates an EditProductCommand to modify the details of an {@code comProduct}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     *  @param index                 of the product in the filtered product list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @param productDescriptor details to edit the product with"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public EditProductCommand(Index index, ProductDescriptor productDescriptor) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        requireAllNonNull(index, productDescriptor);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.productDescriptor \u003d new ProductDescriptor(productDescriptor);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        requireAllNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        List\u003cProduct\u003e lastShownList \u003d model.getFilteredProductList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            throw new CommandException(Message.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        Product toEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        Product editedProduct \u003d ProductCommandUtil.getUpdatedProduct(toEdit, productDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        ProductCommandUtil.verifyNewIngredients(model, editedProduct);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            model.setProduct(toEdit, editedProduct);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        } catch (DuplicateEntityException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            throw new CommandException(String.format(ProductMessageUtils.MESSAGE_DUPLICATE_PRODUCT,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                editedProduct.getProductName()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        model.updateFilteredProductList(Model.PREDICATE_SHOW_ACTIVE_PRODUCTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        model.commit(ProductMessageUtils.MESSAGE_COMMIT_EDIT_PRODUCT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PRODUCT_SUCCESS, editedProduct.getProductName()),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                CommandResult.DisplayedPage.PRODUCT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 1,
      "liushiru": 65
    }
  },
  {
    "path": "src/main/java/duke/logic/command/product/ListProductCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.logic.command.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.message.ProductMessageUtils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.commons.CliSyntax;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.commons.Prefix;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class ListProductCommand extends ProductCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public enum Scope {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        ALL,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        ACTIVE,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        ARCHIVE"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private Scope scope;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final String AUTO_COMPLETE_INDICATOR \u003d ProductCommand.COMMAND_WORD + \" \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final Prefix[] AUTO_COMPLETE_PARAMETERS \u003d {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        CliSyntax.PREFIX_PRODUCT_SCOPE"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    };"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public ListProductCommand(Scope scope) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.scope \u003d scope;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        switch (scope) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        case ALL:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            model.updateFilteredProductList(Model.PREDICATE_SHOW_ALL_PRODUCTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        case ACTIVE:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            model.updateFilteredProductList(Model.PREDICATE_SHOW_ACTIVE_PRODUCTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        case ARCHIVE:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            model.updateFilteredProductList(Model.PREDICATE_SHOW_ARCHIVE_PRODUCTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        model.getFilteredProductList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return new CommandResult(String.format(ProductMessageUtils.MESSAGE_LIST_SCOPE, scope),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            CommandResult.DisplayedPage.PRODUCT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liushiru": 56
    }
  },
  {
    "path": "src/main/java/duke/logic/command/product/ProductCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.logic.command.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": " * A abstract base class for commands that manages products."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public abstract class ProductCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"product\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liushiru": 10
    }
  },
  {
    "path": "src/main/java/duke/logic/command/product/ProductCommandUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.logic.command.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.message.ProductMessageUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.commons.Quantity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.inventory.Ingredient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.product.IngredientItemList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class ProductCommandUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Creates a new Product using information from a productDescriptor and previous product."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @param toEdit the product to be edited."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @param productDescriptor contains the information to edit with."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @return edited product."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static Product getUpdatedProduct(Product toEdit, ProductDescriptor productDescriptor) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        assert toEdit !\u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        String newProductName \u003d productDescriptor.getProductName().orElse(toEdit.getProductName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        Double newRetailPrice \u003d productDescriptor.getRetailPrice().orElse(toEdit.getRetailPrice());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        Double newIngredientCost \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                productDescriptor.getIngredientCost().orElse(toEdit.getIngredientCost());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        IngredientItemList ingredientItemList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                productDescriptor.getIngredientItemList().orElse(toEdit.getIngredients());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        Product.Status newStatus \u003d productDescriptor.getStatus().orElse(toEdit.getStatus());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return new Product(newProductName, newRetailPrice, newIngredientCost, ingredientItemList, newStatus);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Creates a new Product using information from a productDescriptor."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @param productDescriptor contains the information to edit with"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @return edited product"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static Product getProductFromDescriptor(ProductDescriptor productDescriptor) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        Product product \u003d new Product();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        if (!productDescriptor.getProductName().isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            throw new ParseException(ProductMessageUtils.MESSAGE_MISSING_PRODUCT_NAME);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        product.setProductName(productDescriptor.getProductName().get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        product.setIngredientCost(productDescriptor.getIngredientCost().orElse(Product.DEFAULT_INGREDIENT_COST));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        product.setRetailPrice(productDescriptor.getRetailPrice().orElse(Product.DEFAULT_RETAIL_PRICE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        product.setIngredients(productDescriptor.getIngredientItemList().orElse(new IngredientItemList()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return product;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Verifies whether the Ingredient already exists in the InventoryList. If not, adds a new Inventory"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * containing the ingredient to the model."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @return true if new Ingredient is added to the inventory"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static void verifyNewIngredients(Model model, Product product) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        IngredientItemList ingredients \u003d product.getIngredients();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        for(Item\u003cIngredient\u003e ingredient : ingredients) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            if (!model.hasIngredient(ingredient.getItem())) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                Item\u003cIngredient\u003e newIngredient \u003d  new Item\u003cIngredient\u003e(ingredient.getItem(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                        Quantity.getDefaultQuantity());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                model.addInventory(newIngredient);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Calculates the default Ingredient cost of a product using ingredients in the product."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static Double getIngredientCost(Model model, Product product) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        requireNonNull(product);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        IngredientItemList ingredients \u003d product.getIngredients();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        if (ingredients.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            return Product.DEFAULT_INGREDIENT_COST;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return model.getIngredientCost(ingredients);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 5,
      "liushiru": 76
    }
  },
  {
    "path": "src/main/java/duke/logic/command/product/ProductDescriptor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.logic.command.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.product.IngredientItemList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "/** Stores the details to edit the product with. Each non-empty field value will replace the previous"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": " * field value of the product."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class ProductDescriptor {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private String productName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private IngredientItemList ingredientItemList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private Double ingredientCost;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private Double retailPrice;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private Product.Status status;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public ProductDescriptor() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @param toCopy the ProductDescriptor to copy from"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public ProductDescriptor(ProductDescriptor toCopy) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        setProductName(toCopy.productName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        setIngredientCost(toCopy.ingredientCost);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        setRetailPrice(toCopy.retailPrice);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        setIngredientItemList(toCopy.ingredientItemList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        setStatus(toCopy.status);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void setProductName(String newProductName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.productName \u003d newProductName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void setIngredientCost(Double newIngredientCost) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.ingredientCost \u003d newIngredientCost;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void setRetailPrice(Double newRetailPrice) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.retailPrice \u003d newRetailPrice;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void setStatus(Product.Status newStatus) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.status \u003d newStatus;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void setIngredientItemList(IngredientItemList ingredientItemList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.ingredientItemList \u003d ingredientItemList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Optional\u003cString\u003e getProductName() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return Optional.ofNullable(productName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Optional\u003cDouble\u003e getIngredientCost() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return Optional.ofNullable(ingredientCost);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Optional\u003cIngredientItemList\u003e getIngredientItemList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return Optional.ofNullable(ingredientItemList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Optional\u003cDouble\u003e getRetailPrice() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return Optional.ofNullable(retailPrice);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Optional\u003cProduct.Status\u003e getStatus() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return Optional.ofNullable(status);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        ProductDescriptor that \u003d (ProductDescriptor) o;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return Objects.equals(productName, that.productName)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                //\u0026\u0026 Objects.equals(items, that.items)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                \u0026\u0026 status \u003d\u003d that.status;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return Objects.hash(productName, status);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liushiru": 93
    }
  },
  {
    "path": "src/main/java/duke/logic/command/product/ShowProductCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.logic.command.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import static duke.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class ShowProductCommand extends ProductCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"show\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final String MESSAGE_SHOW_PRODUCT_SUCCESS \u003d \"Showing product %s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public final Index index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public final ProductDescriptor productDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public ShowProductCommand(Index index, ProductDescriptor productDescriptor) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        requireAllNonNull(index, productDescriptor);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.productDescriptor \u003d new ProductDescriptor(productDescriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public ShowProductCommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        requireAllNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        List\u003cProduct\u003e lastShownList \u003d model.getFilteredProductList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            throw new CommandException(Message.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        Product toShow \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return new ShowProductCommandResult(String.format(MESSAGE_SHOW_PRODUCT_SUCCESS, toShow.getProductName()),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                CommandResult.DisplayedPage.PRODUCT, index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liushiru": 49
    }
  },
  {
    "path": "src/main/java/duke/logic/command/product/ShowProductCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.logic.command.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class ShowProductCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public ShowProductCommandResult(String feedbackToUser, DisplayedPage displayedPage, Index index) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        super(feedbackToUser, displayedPage);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Index getIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return this.index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liushiru": 16
    }
  },
  {
    "path": "src/main/java/duke/logic/command/product/SwitchProductPageCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.logic.command.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class SwitchProductPageCommand extends ProductCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Products are listed\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        model.getFilteredProductList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, CommandResult.DisplayedPage.PRODUCT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 1,
      "liushiru": 23
    }
  },
  {
    "path": "src/main/java/duke/logic/command/sale/AddSaleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chekjun"
        },
        "content": "package duke.logic.command.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.model.sale.Sale;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chekjun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chekjun"
        },
        "content": " * A command to add a sale to BakingHome."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chekjun"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chekjun"
        },
        "content": "public class AddSaleCommand extends SaleCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private static final String MESSAGE_COMMIT \u003d \"Add sale\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"New sale added [Sale ID: %s]\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private static final String DEFAULT_DESCRIPTION \u003d \"N/A\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private static final double DEFAULT_VALUE \u003d 0.0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private static final boolean DEFAULT_TRUTH \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private static final Date DEFAULT_SALE_DATE \u003d Calendar.getInstance().getTime();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private static final String DEFAULT_REMARKS \u003d \"N/A\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private final SaleDescriptor addSaleDescriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * Creates an AddSaleCommand to add the specified {@code Sale}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * @param addSaleDescriptor details of the sale to add"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public AddSaleCommand(SaleDescriptor addSaleDescriptor) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        requireNonNull(addSaleDescriptor);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.addSaleDescriptor \u003d addSaleDescriptor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * Executes the add order command and returns the result message."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        Sale toAdd \u003d createSale(addSaleDescriptor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        model.addSale(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        model.commit(MESSAGE_COMMIT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.getId()), CommandResult.DisplayedPage.SALE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private Sale createSale(SaleDescriptor saleDescriptor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        String description \u003d saleDescriptor.getDescription().orElse(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        double value \u003d saleDescriptor.getValue().orElse(DEFAULT_VALUE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        boolean isSpend \u003d saleDescriptor.isSpend().orElse(DEFAULT_TRUTH);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        Date saleDate \u003d saleDescriptor.getSaleDate().orElse(DEFAULT_SALE_DATE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        String remarks \u003d saleDescriptor.getRemarks().orElse(DEFAULT_REMARKS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return new Sale(description, value, isSpend, saleDate, remarks);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chekjun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chekjun": 64
    }
  },
  {
    "path": "src/main/java/duke/logic/command/sale/DeleteSaleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chekjun"
        },
        "content": "package duke.logic.command.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.model.sale.Sale;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chekjun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chekjun"
        },
        "content": " * A command to delete sales from Sale List."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chekjun"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chekjun"
        },
        "content": "public class DeleteSaleCommand extends SaleCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public static final String MESSAGE_COMMIT \u003d \"Delete sale\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private static final String MESSAGE_DELETE_SUCCESS \u003d \"%s sale(s) removed.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private static final String MESSAGE_INDEX_OUT_OF_BOUND \u003d \"Index [%d] is out of bound.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private final Set\u003cIndex\u003e indices;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * Creates a {@code DeleteProductCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * @param indices of the sales to delete"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public DeleteSaleCommand(Set\u003cIndex\u003e indices) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        requireNonNull(indices);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.indices \u003d indices;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        List\u003cSale\u003e toDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        for (Index index : indices) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d model.getFilteredSaleList().size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_INDEX_OUT_OF_BOUND, index.getOneBased()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            toDelete.add(model.getFilteredSaleList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        for (Sale sale : toDelete) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            model.deleteSale(sale);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        model.commit(MESSAGE_COMMIT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_SUCCESS, indices.size()),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                CommandResult.DisplayedPage.SALE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chekjun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chekjun": 57
    }
  },
  {
    "path": "src/main/java/duke/logic/command/sale/EditSaleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chekjun"
        },
        "content": "package duke.logic.command.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.model.sale.Sale;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import static duke.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chekjun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chekjun"
        },
        "content": " * A command to edit the details of an existing sale."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chekjun"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chekjun"
        },
        "content": "public class EditSaleCommand extends SaleCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private static final String MESSAGE_COMMIT \u003d \"Edit sale\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Sale [%1$s]\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private final SaleDescriptor saleDescriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * Creates an EditSaleCommand to modify the details of an {@code Sale}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * @param index               of the the sale in the filtered sale list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * @param saleDescriptor details to edit the sale with"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public EditSaleCommand(Index index, SaleDescriptor saleDescriptor) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        requireAllNonNull(index, saleDescriptor);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.saleDescriptor \u003d new SaleDescriptor(saleDescriptor);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        List\u003cSale\u003e lastShownList \u003d model.getFilteredSaleList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            throw new CommandException(Message.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        Sale saleToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        Sale editedSale \u003d SaleCommandUtil.modifySale(saleToEdit, saleDescriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        model.setSale(saleToEdit, editedSale);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        model.updateFilteredSaleList(Model.PREDICATE_SHOW_ALL_SALES);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        model.commit(MESSAGE_COMMIT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedSale.getId()),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                CommandResult.DisplayedPage.SALE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chekjun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chekjun": 63
    }
  },
  {
    "path": "src/main/java/duke/logic/command/sale/FilterSaleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chekjun"
        },
        "content": "package duke.logic.command.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import static duke.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chekjun"
        },
        "content": "public class FilterSaleCommand extends SaleCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private static final String MESSAGE_COMMIT \u003d \"Filter sale\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private static final String MESSAGE_FILTER_SUCCESS \u003d \"Showing between \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private final Pair\u003cDate, Date\u003e fromToDates;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public FilterSaleCommand(Pair\u003cDate, Date\u003e pairDate) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        requireAllNonNull(pairDate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.fromToDates \u003d pairDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        model.updateFilteredSaleList(model.getSalesBetween(this.fromToDates.getKey(), this.fromToDates.getValue()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        model.commit(MESSAGE_COMMIT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return new CommandResult(MESSAGE_FILTER_SUCCESS"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                + fromToDates.getKey().toString()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                + \" and \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                + fromToDates.getValue().toString(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                CommandResult.DisplayedPage.SALE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chekjun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chekjun": 40
    }
  },
  {
    "path": "src/main/java/duke/logic/command/sale/SaleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chekjun"
        },
        "content": "package duke.logic.command.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chekjun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chekjun"
        },
        "content": " * A abstract base class for commands that manages sales."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chekjun"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chekjun"
        },
        "content": "public abstract class SaleCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sale\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chekjun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chekjun": 10
    }
  },
  {
    "path": "src/main/java/duke/logic/command/sale/SaleCommandUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chekjun"
        },
        "content": "package duke.logic.command.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.model.sale.Sale;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chekjun"
        },
        "content": "public class SaleCommandUtil {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * Modifies the {@code original} sale based on {@code saleDescriptor}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public static Sale modifySale(Sale original, SaleDescriptor saleDescriptor) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        assert original !\u003d null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        String newDescription \u003d saleDescriptor.getDescription().orElse(original.getDescription());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        Date newDate \u003d saleDescriptor.getSaleDate().orElse(original.getSaleDate());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        double newValue \u003d saleDescriptor.getValue().orElse(original.getValue());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        boolean newIsSpend \u003d saleDescriptor.isSpend().orElse(original.isSpend());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        String newRemarks \u003d saleDescriptor.getRemarks().orElse(original.getRemarks());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        Sale sale \u003d new Sale(newDescription, newValue, newIsSpend, newDate, newRemarks);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return sale;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chekjun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chekjun": 23
    }
  },
  {
    "path": "src/main/java/duke/logic/command/sale/SaleDescriptor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chekjun"
        },
        "content": "package duke.logic.command.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chekjun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chekjun"
        },
        "content": " * A class that stores details in a Sale."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chekjun"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chekjun"
        },
        "content": "public class SaleDescriptor {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private Double value;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private boolean isSpend;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private Date saleDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private String remarks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public SaleDescriptor() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * @param toCopy the SaleDescriptor to copy from"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public SaleDescriptor(SaleDescriptor toCopy) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        setDescription(toCopy.description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        setValue(toCopy.value);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        setSpend(toCopy.isSpend);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        setSaleDate(toCopy.saleDate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        setRemarks(toCopy.remarks);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public Optional\u003cString\u003e getDescription() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public Optional\u003cDouble\u003e getValue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return Optional.ofNullable(value);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void setValue(Double value) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public Optional\u003cBoolean\u003e isSpend() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return Optional.ofNullable(isSpend);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void setSpend(boolean isSpend) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.isSpend \u003d isSpend;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public Optional\u003cDate\u003e getSaleDate() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return Optional.ofNullable(saleDate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void setSaleDate(Date saleDate) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.saleDate \u003d saleDate;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public Optional\u003cString\u003e getRemarks() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return Optional.ofNullable(remarks);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void setRemarks(String remarks) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        SaleDescriptor that \u003d (SaleDescriptor) o;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return Objects.equals(description, that.description)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                \u0026\u0026 Objects.equals(value, that.value)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                \u0026\u0026 Objects.equals(saleDate, that.saleDate)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                \u0026\u0026 Objects.equals(remarks, that.remarks);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return Objects.hash(description, value, saleDate, remarks);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chekjun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chekjun": 92
    }
  },
  {
    "path": "src/main/java/duke/logic/command/sale/ShowSaleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chekjun"
        },
        "content": "package duke.logic.command.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chekjun"
        },
        "content": "public class ShowSaleCommand extends SaleCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private static final String MESSAGE_LIST_SUCCESS \u003d \"Showing all sales.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_LIST_SUCCESS), CommandResult.DisplayedPage.SALE);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chekjun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chekjun": 15
    }
  },
  {
    "path": "src/main/java/duke/logic/command/shopping/AddShoppingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "package duke.logic.command.shopping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.message.ShoppingMessageUtils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.CliSyntax;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.Prefix;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.inventory.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "public class AddShoppingCommand extends ShoppingCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String AUTO_COMPLETE_INDICATOR \u003d ShoppingCommand.COMMAND_WORD + \" \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final Prefix[] AUTO_COMPLETE_PARAMETERS \u003d {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        CliSyntax.PREFIX_SHOPPING_NAME,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        CliSyntax.PREFIX_SHOPPING_QUANTITY,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        CliSyntax.PREFIX_SHOPPING_COST,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        CliSyntax.PREFIX_SHOPPING_REMARKS"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    };"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private final Item\u003cIngredient\u003e toAdd;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public AddShoppingCommand(Item\u003cIngredient\u003e toAdd) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        if (model.hasShoppingList(toAdd)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            throw new CommandException(String.format(ShoppingMessageUtils.MESSAGE_DUPLICATE_SHOPPING,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                    toAdd.getItem().getName()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        model.addShoppingList(toAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        model.commit(ShoppingMessageUtils.MESSAGE_COMMIT_ADD_SHOPPING);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return new CommandResult(String.format(ShoppingMessageUtils.MESSAGE_SUCCESS_ADD_SHOPPING,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                toAdd.getItem().getName()),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                CommandResult.DisplayedPage.SHOPPING);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenelim97": 48
    }
  },
  {
    "path": "src/main/java/duke/logic/command/shopping/BuyShoppingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "package duke.logic.command.shopping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.message.ShoppingMessageUtils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.inventory.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "public class BuyShoppingCommand extends ShoppingCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"buy\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private static final Double ZERO_QUANTITY \u003d 0.00;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private final Set\u003cIndex\u003e indices;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private Double totalCost \u003d 0.00;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private ArrayList\u003cItem\u003cIngredient\u003e\u003e toBuyList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public BuyShoppingCommand(Set\u003cIndex\u003e indices) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireNonNull(indices);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        this.indices \u003d indices;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        toBuyList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        List\u003cItem\u003cIngredient\u003e\u003e shoppingList \u003d model.getFilteredShoppingList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        List\u003cItem\u003cIngredient\u003e\u003e inventoryList \u003d model.getFilteredInventoryList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        for (Index index : indices) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d shoppingList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                throw new CommandException(Message.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        for (Index index : indices) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            Item\u003cIngredient\u003e toBuy \u003d shoppingList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            toBuyList.add(toBuy);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            if (inventoryList.contains(toBuy)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                Double addedQuantity \u003d toBuy.getQuantity().getNumber();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                Integer inventoryIndex \u003d inventoryList.indexOf(toBuy);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                Double currentQuantity \u003d inventoryList.get(inventoryIndex).getQuantity().getNumber();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                Double totalQuantity \u003d currentQuantity + addedQuantity;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                Item\u003cIngredient\u003e addedIngredient \u003d ShoppingCommandUtil.createNewIngredient(toBuy, totalQuantity);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                model.setInventory(toBuy, addedIngredient);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                model.addInventory(toBuy);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            model.setShoppingList(toBuy, ShoppingCommandUtil.createNewIngredient(toBuy, ZERO_QUANTITY));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        totalCost \u003d model.computeTotalCost(toBuyList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        model.addSaleFromShopping(totalCost, toBuyList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        model.commit(ShoppingMessageUtils.MESSAGE_COMMIT_BUY_SHOPPING);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return new CommandResult(String.format(ShoppingMessageUtils.MESSAGE_COMMIT_BUY_SHOPPING,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                totalCost, CommandResult.DisplayedPage.SHOPPING));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenelim97": 72
    }
  },
  {
    "path": "src/main/java/duke/logic/command/shopping/ClearShoppingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "package duke.logic.command.shopping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.message.ShoppingMessageUtils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.inventory.Ingredient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "public class ClearShoppingCommand extends ShoppingCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private final List\u003cItem\u003cIngredient\u003e\u003e emptyList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public ClearShoppingCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        emptyList \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        model.clearShoppingList(emptyList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        model.commit(ShoppingMessageUtils.MESSAGE_SUCCESS_CLEAR_SHOPPING);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return new CommandResult(String.format(ShoppingMessageUtils.MESSAGE_SUCCESS_CLEAR_SHOPPING),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                CommandResult.DisplayedPage.SHOPPING);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenelim97": 35
    }
  },
  {
    "path": "src/main/java/duke/logic/command/shopping/DeleteShoppingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "package duke.logic.command.shopping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.message.ShoppingMessageUtils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.inventory.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "public class DeleteShoppingCommand extends ShoppingCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public DeleteShoppingCommand(Index index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        List\u003cItem\u003cIngredient\u003e\u003e shoppingList \u003d model.getFilteredShoppingList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d shoppingList.size()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            throw new CommandException(Message.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        Item\u003cIngredient\u003e toDelete \u003d shoppingList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        model.deleteShoppingList(toDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        model.commit(ShoppingMessageUtils.MESSAGE_COMMIT_REMOVE_SHOPPING);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return new CommandResult(String.format(ShoppingMessageUtils.MESSAGE_SUCCESS_REMOVE_SHOPPING,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                toDelete.getItem().getName()),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                CommandResult.DisplayedPage.SHOPPING);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "eugenelim97": 47
    }
  },
  {
    "path": "src/main/java/duke/logic/command/shopping/EditShoppingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "package duke.logic.command.shopping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.message.ShoppingMessageUtils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.CliSyntax;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.Prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.inventory.Ingredient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static duke.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "public class EditShoppingCommand extends ShoppingCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String AUTO_COMPLETE_INDICATOR \u003d ShoppingCommand.COMMAND_WORD + \" \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final Prefix[] AUTO_COMPLETE_PARAMETERS \u003d {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        CliSyntax.PREFIX_SHOPPING_NAME,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        CliSyntax.PREFIX_SHOPPING_QUANTITY,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        CliSyntax.PREFIX_SHOPPING_COST,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        CliSyntax.PREFIX_SHOPPING_REMARKS"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    };"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public final Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public final ShoppingDescriptor shoppingDescriptor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public EditShoppingCommand(Index index, ShoppingDescriptor edited) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireAllNonNull(index, edited);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        shoppingDescriptor \u003d edited;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        List\u003cItem\u003cIngredient\u003e\u003e lastShownList \u003d model.getFilteredShoppingList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            throw new CommandException(Message.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        Item\u003cIngredient\u003e toEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        Item\u003cIngredient\u003e edited \u003d ShoppingCommandUtil.createNewIngredient(toEdit, shoppingDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        model.setShoppingList(toEdit, edited);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        model.commit(ShoppingMessageUtils.MESSAGE_COMMIT_EDIT_SHOPPING);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return new CommandResult(String.format(ShoppingMessageUtils.MESSAGE_SUCCESS_EDIT_SHOPPING,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                edited.getItem().getName()),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                CommandResult.DisplayedPage.SHOPPING);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 1,
      "eugenelim97": 61
    }
  },
  {
    "path": "src/main/java/duke/logic/command/shopping/ListShoppingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "package duke.logic.command.shopping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.message.ShoppingMessageUtils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "public class ListShoppingCommand extends ShoppingCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        model.updateFilteredShoppingList(Model.PREDICATE_SHOW_AVAILABLE_SHOPPING);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return new CommandResult(String.format(ShoppingMessageUtils.MESSAGE_SUCCESS_lIST_SHOPPING),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                CommandResult.DisplayedPage.SHOPPING);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenelim97": 23
    }
  },
  {
    "path": "src/main/java/duke/logic/command/shopping/ShoppingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "package duke.logic.command.shopping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": " * A abstract base class for commands that manages the shopping list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "public abstract class ShoppingCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"shop\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenelim97": 10
    }
  },
  {
    "path": "src/main/java/duke/logic/command/shopping/ShoppingCommandUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "package duke.logic.command.shopping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.commons.Quantity;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.inventory.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "public class ShoppingCommandUtil {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static Item\u003cIngredient\u003e createNewIngredient(Item\u003cIngredient\u003e toEdit, ShoppingDescriptor edited) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        assert toEdit !\u003d null;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        String name \u003d edited.getName().orElse(toEdit.getItem().getName());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        Double quantity \u003d edited.getQuantity().orElse(toEdit.getQuantity().getNumber());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        String remarks \u003d edited.getRemarks().orElse(toEdit.getItem().getRemarks());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        Double unitCost \u003d edited.getUnitCost().orElse(toEdit.getItem().getUnitPrice());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return new Item\u003cIngredient\u003e((new Ingredient(name, unitCost, remarks)), new Quantity(quantity));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static Item\u003cIngredient\u003e createNewIngredient(Item\u003cIngredient\u003e toEdit, Double newQuantity) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        assert toEdit !\u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        String name \u003d toEdit.getItem().getName();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        Double quantity \u003d newQuantity;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        String remarks \u003d toEdit.getItem().getRemarks();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        Double unitCost \u003d toEdit.getItem().getUnitPrice();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return new Item\u003cIngredient\u003e((new Ingredient(name, unitCost, remarks)), new Quantity(quantity));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenelim97": 29
    }
  },
  {
    "path": "src/main/java/duke/logic/command/shopping/ShoppingDescriptor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "package duke.logic.command.shopping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import org.ocpsoft.prettytime.shade.org.apache.commons.lang.StringUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "public class ShoppingDescriptor {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private Double quantity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private String remarks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private Double unitCost;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public ShoppingDescriptor() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * Creates a ShoppingDescriptor constructor and sets its values with toCopy\u0027s values"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public ShoppingDescriptor(ShoppingDescriptor toCopy) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        setName(toCopy.name);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        setQuantity(toCopy.quantity);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        setRemarks(toCopy.remarks);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        setUnitCost(toCopy.unitCost);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public Optional\u003cString\u003e getName() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        this.name \u003d StringUtils.capitalize(name.toLowerCase());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public Optional\u003cDouble\u003e getQuantity() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return Optional.ofNullable(quantity);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void setQuantity(Double quantity) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public Optional\u003cString\u003e getRemarks() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return Optional.ofNullable(remarks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void setRemarks(String remarks) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public Optional\u003cDouble\u003e getUnitCost() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return Optional.ofNullable(unitCost);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void setUnitCost(Double unitCost) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        this.unitCost \u003d unitCost;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenelim97": 58
    }
  },
  {
    "path": "src/main/java/duke/logic/command/shopping/ShowShoppingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "package duke.logic.command.shopping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.message.ShoppingMessageUtils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": " * A command that displays the shopping list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "public class ShowShoppingCommand extends ShoppingCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        model.updateFilteredShoppingList(Model.PREDICATE_SHOW_ALL_SHOPPING);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return new CommandResult(ShoppingMessageUtils.MESSAGE_SUCCESS_SHOW_SHOPPING,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                CommandResult.DisplayedPage.SHOPPING);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenelim97": 23
    }
  },
  {
    "path": "src/main/java/duke/logic/command/shortcut/ExecuteShortcutCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.command.shortcut;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.BakingHomeParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.shortcut.Shortcut;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A command to execute a series of pre-specified commands."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class ExecuteShortcutCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"do\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_COMMIT \u003d \"Execute shortcut\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_SHORTCUT_NOT_FOUND \u003d \"Shortcut not found\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Shortcut executed successfully\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_EXECUTION_FAILED \u003d \"Execution of [%s] failed: [%s]\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final String shortcutName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Shortcut toExecute;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates {@code ExecuteShortcutCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param shortcutName The name of the shortcut. Must be non-empty."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public ExecuteShortcutCommand(String shortcutName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(shortcutName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.shortcutName \u003d shortcutName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        getShortcut(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //Disable version control so that commands executed are not added to undo/redo list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        model.setVersionControl(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        BakingHomeParser parser \u003d new BakingHomeParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (String line : toExecute.getUserInputs()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                Command command \u003d parser.parseCommand(line);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                command.execute(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_EXECUTION_FAILED, line, e.getMessage()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //Enable version control."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        model.setVersionControl(true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        model.commit(MESSAGE_COMMIT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void getShortcut(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (Shortcut shortcut : model.getShortcutList()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (shortcut.getName().equals(shortcutName)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                this.toExecute \u003d shortcut;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        throw new CommandException(MESSAGE_SHORTCUT_NOT_FOUND);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 73
    }
  },
  {
    "path": "src/main/java/duke/logic/command/shortcut/SetShortcutCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.command.shortcut;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.shortcut.Shortcut;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A command to remove or add a {@code Shortcut}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class SetShortcutCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"short\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_COMMIT \u003d \"Set shortcut\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_SET_SUCCESS \u003d \"Shortcut [%s] is set.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_REMOVE_SUCCESS \u003d \"Shortcut [%s] is removed.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_EMPTY_SHORTCUT \u003d \"Shortcut cannot be empty.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_CANNOT_CONTAIN_DO_COMMAND \u003d \"Commands cannot contain do commands.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Shortcut shortcut;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final boolean isEmptyShortcut;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates a {@code SetShortCutCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param shortcut to add or remove."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *                 If {@code shortcut} has empty {@code userInputs} and it is in"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *                 the Shortcut List, it will be removed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *                 If {@code shortcut} has non-empty {@code userInputs}, it will be added to Shortcut List,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *                 or override an existing shortcut in Shortcut List."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public SetShortcutCommand(Shortcut shortcut) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.shortcut \u003d shortcut;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        isEmptyShortcut \u003d shortcut.getUserInputs().get(0).equals(\"\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //If shortcut has empty user inputs and it is in the Shortcut List"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (isEmptyShortcut \u0026\u0026 model.hasShortcut(shortcut)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            model.removeShortcut(shortcut);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_REMOVE_SUCCESS, shortcut.getName()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } else if (isEmptyShortcut) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return new CommandResult(MESSAGE_EMPTY_SHORTCUT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            checkShortcut();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            model.setShortcut(shortcut);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            model.commit(MESSAGE_COMMIT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SET_SUCCESS, shortcut.getName()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Prevents possible dead loops when a shortcut has a reference to another shortcut command in its user inputs."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws CommandException if the shortcut has a reference to another shortcut command."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void checkShortcut() throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (String line : shortcut.getUserInputs()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (line.split(\" \")[0].equals(ExecuteShortcutCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new CommandException(MESSAGE_CANNOT_CONTAIN_DO_COMMAND);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 66
    }
  },
  {
    "path": "src/main/java/duke/logic/message/InventoryMessageUtils.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "package duke.logic.message;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "public class InventoryMessageUtils {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String MESSAGE_COMMIT_ADD_INVENTORY \u003d \"New ingredient added\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String MESSAGE_COMMIT_EDIT_INVENTORY \u003d \"Ingredient edited\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String MESSAGE_COMMIT_REMOVE_INVENTORY \u003d \"Ingredient removed\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INVENTORY \u003d \"%s already exists in the inventory list\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String MESSAGE_SUCCESS_ADD_INVENTORY \u003d \"New ingredient added: %s\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String MESSAGE_SUCCESS_CLEAR_INVENTORY \u003d \"Inventory list is cleared\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String MESSAGE_SUCCESS_EDIT_INVENTORY \u003d \"Ingredient edited: %s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String MESSAGE_SUCCESS_REMOVE_INVENTORY \u003d \"Ingredient removed: %s\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String MESSAGE_SUCCESS_SHOW_INVENTORY \u003d \"Inventory list is shown\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenelim97": 13
    }
  },
  {
    "path": "src/main/java/duke/logic/message/ProductMessageUtils.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.logic.message;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class ProductMessageUtils {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PRODUCT \u003d \"Product with name \\\"%s\\\" already exists in the \""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        + \"product list\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final String MESSAGE_ADD_PRODUCT_SUCCESS \u003d \"New product: %s added\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final String MESSAGE_INVALID_STATUS_VALUE \u003d \"Invalid status\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final String MESSAGE_INVALID_NUMBER_FORMAT \u003d \"Invalid number format\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final String MESSAGE_MISSING_PRODUCT_NAME \u003d \"Product name must be present\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final String MESSAGE_LIST_SCOPE \u003d \"%s products shown\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final String MESSAGE_INVALID_SCOPE_VALUE \u003d \"-scope can only take active/archive/all\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final String MESSAGE_COMMIT_ADD_PRODUCT \u003d \"Add product\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final String MESSAGE_COMMIT_DELETE_PRODUCT \u003d \"Delete product(s)\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final String MESSAGE_COMMIT_EDIT_PRODUCT \u003d \"Edit product(s)\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liushiru": 15
    }
  },
  {
    "path": "src/main/java/duke/logic/message/ShoppingMessageUtils.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "package duke.logic.message;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "public class ShoppingMessageUtils {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String MESSAGE_COMMIT_ADD_SHOPPING \u003d \"New ingredient added\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String MESSAGE_COMMIT_BUY_SHOPPING \u003d \"Ingredient(s) bought\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String MESSAGE_COMMIT_EDIT_SHOPPING \u003d \"Ingredient edited\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String MESSAGE_COMMIT_REMOVE_SHOPPING \u003d \"Ingredient removed\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SHOPPING \u003d \"%s already exists in the shopping list\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String MESSAGE_SUCCESS_ADD_SHOPPING \u003d \"New ingredient added: %s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String MESSAGE_SUCCESS_BUY_SHOPPING \u003d \"Ingredient(s) bought. Total cost is: $%s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String MESSAGE_SUCCESS_CLEAR_SHOPPING \u003d \"Shopping list is cleared\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String MESSAGE_SUCCESS_EDIT_SHOPPING \u003d \"Ingredient edited: %s\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String MESSAGE_SUCCESS_lIST_SHOPPING \u003d \"Ingredients with \u003e0 quantity are shown\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String MESSAGE_SUCCESS_REMOVE_SHOPPING \u003d \"Ingredient removed: %s\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final String MESSAGE_SUCCESS_SHOW_SHOPPING \u003d \"Shopping list is shown\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenelim97": 16
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/commons/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Adapted from AddressBook 4."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Prefixes mapped to their respective arguments."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 63
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/commons/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003e value \u003cprefix\u003e value ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * e.g. {@code some preamble text -name jiajun -contact 12345678 -i} where prefixes are {@code -name -contact -i}.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code -i} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final Pattern PREAMBLE_ARGS_FORMAT \u003d Pattern.compile(\"^([^-]+)?\\\\s*(.*)\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final Pattern PREFIX_VALUE_FORMAT \u003d Pattern.compile(\"(-\\\\w+)\\\\s*([^-]+)?\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String preamble \u003d extractPreambleAndArgs(argsString).get(0).strip();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String args \u003d extractPreambleAndArgs(argsString).get(1).strip();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ArgumentMultimap map \u003d extractArgs(prefixes, argsString);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        map.put(new Prefix(\"\"), preamble);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static List\u003cString\u003e extractPreambleAndArgs(String argString) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        final Matcher matcher \u003d PREAMBLE_ARGS_FORMAT.matcher(argString.strip());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        List\u003cString\u003e res \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (matcher.group(1) \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            res.add(\"\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            res.add(matcher.group(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (matcher.group(2) \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            res.add(\"\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            res.add(matcher.group(2));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static ArgumentMultimap extractArgs(Prefix[] prefixes, String args) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        List\u003cPrefix\u003e prefixList \u003d Arrays.asList(prefixes);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ArgumentMultimap map \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        final Matcher matcher \u003d PREFIX_VALUE_FORMAT.matcher(args);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        while (matcher.find()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            String prefixString \u003d matcher.group(1).strip();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            Prefix prefix \u003d new Prefix(prefixString);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            String value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (matcher.group(2) !\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                value \u003d matcher.group(2).strip();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                value \u003d \"\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (prefixList.contains(prefix)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                map.put(prefix, value);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                throw new ParseException(String.format(Message.MESSAGE_INVALID_PREFIX, prefixString));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 79,
      "liushiru": 1
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/commons/AutoCompleter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A logic component that auto-completes user inputs based on pre-defined command words and prefixes."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class AutoCompleter {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private List\u003cClass\u003c? extends Command\u003e\u003e commandClasses;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * All the suggestions."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private List\u003cUserInputState\u003e suggestions;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * A pointer to the index of the currently proposed suggestion."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private int suggestionPointer;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AutoCompleter.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates an {@code AutoCompleter}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public AutoCompleter() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        logger.info(\"Initializing AutoCompleter...\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        commandClasses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        suggestions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        suggestionPointer \u003d 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns true if the current state has one or more auto-complete suggestion(s)."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param currentState the detail of current input state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Boolean isAutoCompletable(UserInputState currentState) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(currentState);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String commandText \u003d currentState.userInputString;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        int caretPosition \u003d currentState.caretPosition;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String currentWord \u003d getCurrentWord(commandText, caretPosition);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //Blank text cannot be auto-completed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (commandText.isBlank() || currentWord.isBlank()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!suggestions.isEmpty() \u0026\u0026 currentState.equals(suggestions.get(suggestionPointer))) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        List\u003cString\u003e suggestions \u003d generateSuggestions(commandText, currentWord);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //If there is no available suggestion words"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (suggestions.isEmpty()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            //Convert the suggestion words to a user input state and set pointer to zero"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            this.suggestions \u003d suggestions.stream().distinct().map("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                suggestionWord -\u003e new UserInputState(replaceWord(commandText, caretPosition, suggestionWord),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    getNewCaretPosition(caretPosition, currentWord, suggestionWord)))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            suggestionPointer \u003d 0;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            logger.info(String.format(\"Found %s suggestion(s)\", suggestions.size()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns possible suggestion(s) in the form of {@code UserInputState}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * If there is only one available suggestion, returns that state."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * If there are multiple available suggestions, returns the next possible one,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * and goes cyclic to the first one if there are no more new suggestions."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * For example, if the current input state has two suggestions \"add\" and \"all\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * first call to the method returns the \"add\" state and second call returns \"all\" state."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * The third call returns \"add\" state again."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *\u003c/p\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws ParseException if there is no suggestion"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public UserInputState complete() throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (suggestions.isEmpty()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            logger.warning(\"No suggestions are available for user input.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        logger.info(String.format(\"New suggestion [%s] found for user input.\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            suggestions.get(suggestionPointer).userInputString"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        suggestionPointer \u003d (suggestionPointer + 1) % suggestions.size();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return suggestions.get(suggestionPointer);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns the available suggested words for {@code currentWord} based on {@code userInput}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * If there is no available suggestions, returns an empty list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private List\u003cString\u003e generateSuggestions(String userInput, String currentWord) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        assert (userInput !\u003d null);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        List\u003cString\u003e suggestions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Optional\u003cClass\u003c? extends Command\u003e\u003e matchedCommandClass \u003d getMatchedCommandClass(userInput);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        matchedCommandClass.ifPresent(aClass -\u003e suggestions.addAll(generateParameterSuggestions(currentWord, aClass)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        suggestions.addAll(generateCommandWordSuggestions(currentWord));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return suggestions;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Adds a command class to auto-complete its command word and arguments."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Duplicate command classes are not allowed."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * To auto-complete arguments, the command should have fields {@code String AUTO_COMPLETION_INDICATOR} and"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * {@code Prefix[] AUTO_COMPLETION_ARGUMENTS}. The namings and types should be precise for auto-completer to"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * function properly."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * {@code String AUTO_COMPLETION_INDICATOR} specifies when auto-completer should complete the arguments."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *                                          For example, \"order add\", \"order remove\"."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *                                          Auto-completer only completes the arguments when this field is present"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *                                          in the beginning of user input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * {@code Prefix[] AUTO_COMPLETION_ARGUMENTS} are prefixes used by the command that you wish to auto-complete."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws ParseException if duplicate classes are added."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void addCommandClass(Class\u003c? extends Command\u003e commandClass) throws ParseException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        assert (commandClass !\u003d null);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (commandClasses.contains(commandClass)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            logger.warning(String.format(\"Could not add duplicate %s to AutoCompleter\", commandClass.toString()));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.commandClasses.add(commandClass);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Remove all command classes."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void clearCommandClasses() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.commandClasses.clear();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns the starting index of the word at {@code caretPosition} in {@code commandText}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * For example, if the text is \"I am a bad guy\" and caret is at position 3, the method returns 2,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * the starting index of \"am\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private int getSelectionStart(String commandText, int caretPosition) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        int selectionStart \u003d commandText.lastIndexOf(\" \", caretPosition - 1);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (selectionStart \u003d\u003d -1) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            selectionStart \u003d 0;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            selectionStart +\u003d 1;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return selectionStart;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns the ending index of the word at {@code caretPosition} in {@code commandText}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * For example, if the text is \"I am a bad guy\" and caret is at position 3, the method returns 3,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * the ending index of \"am\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private int getSelectionEnd(String commandText, int caretPosition) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        int selectionEnd \u003d commandText.indexOf(\" \", caretPosition);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (selectionEnd \u003d\u003d -1) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            selectionEnd \u003d commandText.length() - 1;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            selectionEnd -\u003d 1;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return selectionEnd;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private String getCurrentWord(String commandText, int caretPosition) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return commandText.substring(getSelectionStart(commandText, caretPosition),"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                getSelectionEnd(commandText, caretPosition) + 1);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns a list of suggested commands based on the incomplete {@code toComplete}."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private List\u003cString\u003e generateCommandWordSuggestions(String toComplete) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        assert (toComplete !\u003d null);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        List\u003cString\u003e suggestions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (Class\u003c? extends Command\u003e commandClass : commandClasses) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            getCommandWord(commandClass).ifPresent(commandWordString -\u003e {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                if (commandWordString.startsWith(toComplete)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u0026\u0026 !commandWordString.equals(toComplete)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    suggestions.add(commandWordString);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            });"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return suggestions;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns a list of suggested argument names based on the incomplete {@code toComplete}."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private List\u003cString\u003e generateParameterSuggestions(String toComplete, Class\u003c? extends Command\u003e commandClass) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        List\u003cString\u003e suggestions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        getCommandParameters(commandClass).ifPresent("
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            prefixes -\u003e suggestions.addAll(Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    .map(Prefix::getPrefix)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    .filter(prefixString -\u003e prefixString.startsWith(toComplete)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u0026\u0026 !prefixString.equals(toComplete))"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    .collect(Collectors.toList())"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                )"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return suggestions;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Replaces the word at {code caretPosition} in {@code cmmandText} with {@code newWord}."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @return the new command text after replacement."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private String replaceWord(String commandText, int caretPosition, String newWord) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String beforeCurrent \u003d commandText.substring(0, getSelectionStart(commandText, caretPosition));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String afterCurrent \u003d commandText.substring(getSelectionEnd(commandText, caretPosition) + 1);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return beforeCurrent + newWord + afterCurrent;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private int getNewCaretPosition(int oldPosition, String oldWord, String newWord) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return oldPosition - oldWord.length() + newWord.length();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private String getCommandIndicator(Class\u003c? extends Command\u003e commandClass) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return (String) commandClass.getField(\"AUTO_COMPLETE_INDICATOR\").get(null);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } catch (NoSuchFieldException | IllegalAccessException e) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            logger.warning(String.format(\"Field AUTO_COMPLETE_INDICATOR is not declared in %s\","
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                commandClass.toString()));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Optional\u003cString\u003e getCommandWord(Class\u003c? extends Command\u003e commandClass) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return Optional.of((String) commandClass.getField(\"COMMAND_WORD\").get(null));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } catch (NoSuchFieldException | IllegalAccessException e) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            logger.warning(String.format(\"Field COMMAND_WORD is not declared in %s\","
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                commandClass.toString()));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Optional\u003cPrefix[]\u003e getCommandParameters(Class\u003c? extends Command\u003e commandClass) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return Optional.of((Prefix[]) commandClass"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    .getField(\"AUTO_COMPLETE_PARAMETERS\")"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    .get(null));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } catch (NoSuchFieldException | IllegalAccessException e) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            logger.warning(String.format(\"Field AUTO_COMPLETE_PARAMETERS is not declared in %s\","
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                commandClass.toString()));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Optional\u003cClass\u003c? extends Command\u003e\u003e getMatchedCommandClass(String userInput) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String userInputWithoutConsecutiveSpaces \u003d userInput.strip().replaceAll(\" +\", \" \");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (Class\u003c? extends Command\u003e commandClass : commandClasses) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            String indicator \u003d getCommandIndicator(commandClass);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (indicator.isEmpty()) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (userInputWithoutConsecutiveSpaces.startsWith(indicator)) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                return Optional.of(commandClass);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Represents the details of a user input, including the text and caret position."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static class UserInputState {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "         * The text input from user."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "         */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        public final String userInputString;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "         * The position of the text insertion point."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "         */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        public final int caretPosition;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "         * Creates a {@code UserInputState}."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "         *"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "         * @param userInputString The text input from user. Empty input is acceptable."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "         * @param caretPosition An integer between 0 and the length of {@code userInputString}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "         * @throws ParseException if caret position is invalid"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "         */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        public UserInputState(String userInputString, int caretPosition) throws ParseException {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            requireNonNull(userInputString);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (caretPosition \u003c 0 || caretPosition \u003e userInputString.length()) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new ParseException();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            this.userInputString \u003d userInputString;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            this.caretPosition \u003d caretPosition;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        public boolean equals(Object o) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            UserInputState that \u003d (UserInputState) o;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return caretPosition \u003d\u003d that.caretPosition"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    \u0026\u0026 Objects.equals(userInputString, that.userInputString);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        public int hashCode() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return Objects.hash(userInputString, caretPosition);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 353
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/commons/BakingHomeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//@@author liujiajun"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.commons;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.RedoCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.UndoCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.inventory.InventoryCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.order.OrderCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.product.ProductCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.sale.SaleCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.shopping.ShoppingCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.shortcut.ExecuteShortcutCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.shortcut.SetShortcutCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.inventory.InventoryCommandParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.order.OrderCommandParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.product.ProductCommandParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.sale.SaleCommandParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.shopping.ShoppingCommandParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.shortcut.ExecuteShortcutCommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.shortcut.SetShortcutCommandParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Parser that parses user input into {@code Command}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class BakingHomeParser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Used to get primary command word."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Capture group 1: primary command word."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Capture group 2: (optional) sub-command word and args."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * for example, in \"order add -item bread, 1\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * capture group 1 is \"order\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * capture group 2 is \"add -item bread, 1\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final Pattern PRIMARY_COMMAND_FORMAT \u003d Pattern.compile(\"^(\\\\w+)\\\\s*(.+)?\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Parses user input into {@code Command}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param userInput full input text from user"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        final Matcher matcher \u003d PRIMARY_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String primaryCommand \u003d matcher.group(1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String subCommandAndArgs \u003d matcher.group(2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (subCommandAndArgs \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            subCommandAndArgs \u003d \"\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        switch (primaryCommand) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        case OrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return new OrderCommandParser().parse(subCommandAndArgs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        case SaleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return new SaleCommandParser().parse(subCommandAndArgs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        case ProductCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return new ProductCommandParser().parse(subCommandAndArgs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        case InventoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return new InventoryCommandParser().parse(subCommandAndArgs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        case ShoppingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return new ShoppingCommandParser().parse(subCommandAndArgs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        case SetShortcutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return new SetShortcutCommandParser().parse(subCommandAndArgs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        case ExecuteShortcutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return new ExecuteShortcutCommandParser().parse(subCommandAndArgs);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(Message.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 86
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/commons/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final Prefix PREFIX_ORDER_SORT_DECREASE \u003d new Prefix(\"-decrease\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final Prefix PREFIX_ORDER_ITEM \u003d new Prefix(\"-item\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final Prefix PREFIX_ORDER_REMARKS \u003d new Prefix(\"-rmk\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final Prefix PREFIX_ORDER_DEADLINE \u003d new Prefix(\"-by\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final Prefix PREFIX_ORDER_STATUS \u003d new Prefix(\"-status\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final Prefix PREFIX_ORDER_TOTAL \u003d new Prefix(\"-total\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final Prefix PREFIX_CUSTOMER_NAME \u003d new Prefix(\"-name\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final Prefix PREFIX_CUSTOMER_CONTACT \u003d new Prefix(\"-contact\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public static final Prefix PREFIX_SALE_DESCRIPTION \u003d new Prefix(\"-desc\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public static final Prefix PREFIX_SALE_VALUE \u003d new Prefix(\"-val\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public static final Prefix PREFIX_SALE_IS_SPEND \u003d new Prefix(\"-spend\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public static final Prefix PREFIX_SALE_DATE \u003d new Prefix(\"-at\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public static final Prefix PREFIX_SALE_REMARKS \u003d new Prefix(\"-rmk\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public static final Prefix PREFIX_SALE_FROM \u003d new Prefix(\"-from\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public static final Prefix PREFIX_SALE_TO \u003d new Prefix(\"-to\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final Prefix PREFIX_PRODUCT_NAME \u003d new Prefix(\"-name\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final Prefix PREFIX_PRODUCT_INGREDIENT \u003d new Prefix(\"-ingt\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final Prefix PREFIX_PRODUCT_INGREDIENT_COST \u003d new Prefix(\"-cost\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final Prefix PREFIX_PRODUCT_RETAIL_PRICE \u003d new Prefix(\"-price\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final Prefix PREFIX_PRODUCT_INDEX \u003d new Prefix(\"-i\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final Prefix PREFIX_PRODUCT_STATUS \u003d new Prefix(\"-status\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final Prefix PREFIX_PRODUCT_SCOPE \u003d new Prefix(\"-scope\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final Prefix PREFIX_INVENTORY_NAME \u003d new Prefix(\"-name\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final Prefix PREFIX_INVENTORY_QUANTITY \u003d new Prefix(\"-qty\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final Prefix PREFIX_INVENTORY_REMARKS \u003d new Prefix(\"-rmk\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final Prefix PREFIX_INVENTORY_INDEX \u003d new Prefix(\"-i\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final Prefix PREFIX_SHOPPING_NAME \u003d new Prefix(\"-name\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final Prefix PREFIX_SHOPPING_QUANTITY \u003d new Prefix(\"-qty\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final Prefix PREFIX_SHOPPING_REMARKS \u003d new Prefix(\"-rmk\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final Prefix PREFIX_SHOPPING_INDEX \u003d new Prefix(\"-i\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static final Prefix PREFIX_SHOPPING_COST \u003d new Prefix(\"-cost\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 19,
      "liushiru": 7,
      "chekjun": 8,
      "eugenelim97": 10
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/commons/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Represents a Parser that is able to parse full user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * @param \u003cT\u003e the type of the command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 17
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/commons/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Contains utility methods used for parsing strings in the various parser classes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_INVALID_INDEX \u003d \"Index is should be a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String SEPARATOR_INDEX_INTERVAL \u003d \"~\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String SEPARATOR_INDEX_MULTIPLE \u003d \",\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    ///Common utilities."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Parses the string argument as a {@code Status}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * The string is case-insensitive."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws ParseException if the string cannot be converted"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static Product.Status parseProductStatus(String statusString) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            return Product.Status.valueOf(statusString.trim().toUpperCase());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_STATUS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //@@author liujiajun"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns a set of unique {@code Index} parsed from user input."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * The input string can be a) a single index e.g. 1;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * or b) some indices separated by commas, e.g. 1, 2, 4;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * or c) an interval of index e.g. 1~4."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws ParseException if user input is not in the specified format"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static Set\u003cIndex\u003e getIndices(String indexString) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Set\u003cIndex\u003e indices;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (indexString.contains(\"~\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            indices \u003d getIndicesInInterval(indexString);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            indices \u003d getIndicesFromString(indexString);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return indices;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static Set\u003cIndex\u003e getIndicesInInterval(String interval) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String[] startAndEndIndices \u003d interval.split(SEPARATOR_INDEX_INTERVAL);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        int start;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        int end;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            start \u003d Integer.parseInt(startAndEndIndices[0].strip());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            end \u003d Integer.parseInt(startAndEndIndices[1].strip());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_NUMBER_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (start \u003e end) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_RANGE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Set\u003cIndex\u003e result \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (int i \u003d start; i \u003c\u003d end; i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (i \u003c\u003d 0) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            result.add(Index.fromOneBased(i));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static Set\u003cIndex\u003e getIndicesFromString(String string) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String[] indexStrings \u003d string.split(SEPARATOR_INDEX_MULTIPLE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Set\u003cIndex\u003e result \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (String indexString : indexStrings) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                result.add(Index.fromOneBased(Integer.parseInt(indexString.strip())));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new ParseException(Message.MESSAGE_INVALID_NUMBER_FORMAT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            } catch (IndexOutOfBoundsException i) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 98,
      "liushiru": 9
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/commons/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Adapted from AddressBook 4."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * E.g. \u0027-item\u0027 in \u0027order add -item bread, 2\u0027."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 40
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/commons/SubCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//@@author liujiajun"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Represents a Parser that is able to parse the sub command into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * @param \u003cT\u003e the type of the sub command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public interface SubCommandParser\u003cT extends Command\u003e extends Parser\u003cT\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Used to get sub-command and args."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Capture group 1: (Optional) Sub-command word."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Capture group 2: (Optional) Args."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * for example, in \"add -item bread -qty 1\", group 1 is \"add\", group 2 is \"-item bread -qty 1\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    Pattern SUB_COMMAND_AND_ARGS_FORMAT \u003d Pattern.compile(\"^(\\\\w+)?\\\\s*(.*)?\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns the sub command word. If sub command is not present, returns an empty string."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * For example, in {@code add -name jj}, {@code add} is returned."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param subCommandAndArgs a string containing sub command and args."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    static String getSubCommandWord(String subCommandAndArgs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(subCommandAndArgs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        final Matcher matcher \u003d SUB_COMMAND_AND_ARGS_FORMAT.matcher(subCommandAndArgs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (matcher.group(1) \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return matcher.group(1).strip();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns the args. If args are not present, returns an empty string."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * For example, in {@code add -name jj}, {@code -name jj} is returned."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param subCommandAndArgs a string containing sub command and args"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @return the args"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    static String getArgs(String subCommandAndArgs) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(subCommandAndArgs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        final Matcher matcher \u003d SUB_COMMAND_AND_ARGS_FORMAT.matcher(subCommandAndArgs.trim());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return  \"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return matcher.group(2).strip();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 62
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/commons/TimeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import org.ocpsoft.prettytime.PrettyTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import org.ocpsoft.prettytime.nlp.PrettyTimeParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//@@author liujiajun"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Parser to parse time."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class TimeParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static PrettyTime prettyTime \u003d new PrettyTime();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static PrettyTimeParser prettyTimeParser \u003d new PrettyTimeParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"EEE, MMM d, yyyy HH:mm\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * If the difference (in absolute number) between the time given and current dime is within"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * this threshold, TimeParser returns the human-friendly representation of time."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Otherwise, TimeParser returns time in format specified in {@code dateFormat}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final long THRESHOLD_TIME_MILLIS \u003d 1000 * 3600 * 24 * 5;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Converts a Date object to a string representing the date."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param date Date object to convert"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @return a string representing the date"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static String convertDateToString(Date date) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (Math.abs(date.getTime() - System.currentTimeMillis()) \u003e THRESHOLD_TIME_MILLIS) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return dateFormat.format(date);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return prettyTime.format(date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Converts a string representing the date to a Date object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param str a string representing the date. Can be either in the format {@code MM/DD/yyyy HH:mm},"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *            or in natural language."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *            for example, \"10/30/1999 18:00\" (in specified format),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *            \"tomorrow\" (in natural language)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @return the date based on the string."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws ParseException if the string cannot be parsed into a date."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static Date convertStringToDate(String str) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        List\u003cDate\u003e dates \u003d prettyTimeParser.parse(str);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (dates.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return dates.get(0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 61
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class ParseException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public ParseException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 19
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/inventory/AddInventoryCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "package duke.logic.parser.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.inventory.AddInventoryCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.ArgumentMultimap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.ArgumentTokenizer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.commons.Quantity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.inventory.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import org.ocpsoft.prettytime.shade.org.apache.commons.lang.StringUtils;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_INVENTORY_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_INVENTORY_QUANTITY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_INVENTORY_REMARKS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "public class AddInventoryCommandParser implements Parser\u003cAddInventoryCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private static final String DEFAULT_QUANTITY \u003d \"0.0\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public AddInventoryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        ArgumentMultimap map \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                PREFIX_INVENTORY_NAME,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                PREFIX_INVENTORY_QUANTITY,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                PREFIX_INVENTORY_REMARKS"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        );"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        Ingredient ingredient \u003d new Ingredient("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                StringUtils.capitalize(map.getValue(PREFIX_INVENTORY_NAME).orElse(EMPTY_STRING).toLowerCase()),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                map.getValue(PREFIX_INVENTORY_REMARKS).orElse(EMPTY_STRING)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        Quantity quantity \u003d new Quantity("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                Double.parseDouble(map.getValue(PREFIX_INVENTORY_QUANTITY).orElse(DEFAULT_QUANTITY))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        Item\u003cIngredient\u003e inventory \u003d new Item\u003cIngredient\u003e(ingredient, quantity);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return new AddInventoryCommand(inventory);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 1,
      "liushiru": 1,
      "eugenelim97": 41
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/inventory/DeleteInventoryCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "package duke.logic.parser.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.inventory.DeleteInventoryCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.ArgumentMultimap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.ArgumentTokenizer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_INVENTORY_INDEX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "public class DeleteInventoryCommandParser implements Parser\u003cDeleteInventoryCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public DeleteInventoryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        ArgumentMultimap map \u003d ArgumentTokenizer.tokenize(args, PREFIX_INVENTORY_INDEX);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            index \u003d ParserUtil.parseIndex(map.getValue(PREFIX_INVENTORY_INDEX).orElse(EMPTY_STRING));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return new DeleteInventoryCommand(index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenelim97": 32
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/inventory/EditInventoryCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "package duke.logic.parser.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.inventory.EditInventoryCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.ArgumentMultimap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.ArgumentTokenizer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_INVENTORY_INDEX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_INVENTORY_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_INVENTORY_QUANTITY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_INVENTORY_REMARKS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static duke.logic.parser.inventory.InventoryParserUtil.createInventoryDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "public class EditInventoryCommandParser implements Parser\u003cEditInventoryCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public EditInventoryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        ArgumentMultimap map \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                PREFIX_INVENTORY_INDEX,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                PREFIX_INVENTORY_NAME,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                PREFIX_INVENTORY_QUANTITY,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                PREFIX_INVENTORY_REMARKS"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        );"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            index \u003d ParserUtil.parseIndex(map.getValue(PREFIX_INVENTORY_INDEX).orElse(EMPTY_STRING));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return new EditInventoryCommand(index, createInventoryDescriptor(map));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenelim97": 41
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/inventory/InventoryCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "package duke.logic.parser.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.inventory.AddInventoryCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.inventory.ClearInventoryCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.inventory.DeleteInventoryCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.inventory.EditInventoryCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.inventory.InventoryCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.inventory.ShowInventoryCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.SubCommandParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "public class InventoryCommandParser implements SubCommandParser\u003cInventoryCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public InventoryCommand parse(String subCommandAndArgs) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        String subCommand \u003d SubCommandParser.getSubCommandWord(subCommandAndArgs);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        String args \u003d SubCommandParser.getArgs(subCommandAndArgs);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        switch (subCommand) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        case AddInventoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            return new AddInventoryCommandParser().parse(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        case DeleteInventoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            return new DeleteInventoryCommandParser().parse(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        case EditInventoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            return new EditInventoryCommandParser().parse(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        case ClearInventoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            return new ClearInventoryCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        case ShowInventoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            return new ShowInventoryCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            throw new ParseException(Message.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 2,
      "eugenelim97": 34
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/inventory/InventoryParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "package duke.logic.parser.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.inventory.InventoryDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.ArgumentMultimap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_INVENTORY_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_INVENTORY_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_INVENTORY_REMARKS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "public class InventoryParserUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * Creates a ShoppingDescriptor constructor with edited values."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * @param map Map of all the arguments of the sub commands"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * @return ShoppingDescriptor with edited values"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static InventoryDescriptor createInventoryDescriptor(ArgumentMultimap map) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        InventoryDescriptor inventoryDescriptor \u003d new InventoryDescriptor();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        if (map.getValue(PREFIX_INVENTORY_NAME).isPresent()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            inventoryDescriptor.setName(map.getValue(PREFIX_INVENTORY_NAME).get());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        if (map.getValue(PREFIX_INVENTORY_QUANTITY).isPresent()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            inventoryDescriptor.setQuantity(Double.parseDouble(map.getValue(PREFIX_INVENTORY_QUANTITY).get()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        if (map.getValue(PREFIX_INVENTORY_REMARKS).isPresent()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            inventoryDescriptor.setRemarks(map.getValue(PREFIX_INVENTORY_REMARKS).get());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return inventoryDescriptor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenelim97": 32
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/order/AddOrderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.order.AddOrderCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.ArgumentMultimap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.ArgumentTokenizer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_CUSTOMER_CONTACT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_CUSTOMER_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_ORDER_DEADLINE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_ORDER_ITEM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_ORDER_REMARKS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_ORDER_STATUS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_ORDER_TOTAL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.order.OrderParserUtil.createDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A parser that parses {@code AddOrderCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class AddOrderCommandParser implements Parser\u003cAddOrderCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public AddOrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ArgumentMultimap map \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            args,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            PREFIX_CUSTOMER_NAME,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            PREFIX_CUSTOMER_CONTACT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            PREFIX_ORDER_ITEM,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            PREFIX_ORDER_DEADLINE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            PREFIX_ORDER_STATUS,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            PREFIX_ORDER_REMARKS,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            PREFIX_ORDER_TOTAL"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new AddOrderCommand(createDescriptor(map));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 37
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/order/CompleteOrderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.order.CompleteOrderCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.ArgumentMultimap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.ArgumentTokenizer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A parser that parses {@code CompleteOrderCommand}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class CompleteOrderCommandParser implements Parser\u003cCompleteOrderCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_EMPTY_INDICES \u003d \"Indices cannot be empty.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public CompleteOrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ArgumentMultimap map \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (map.getPreamble().isBlank()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(MESSAGE_EMPTY_INDICES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new CompleteOrderCommand(ParserUtil.getIndices(map.getPreamble()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 28
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/order/DeleteOrderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.order.DeleteOrderCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.ArgumentMultimap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.ArgumentTokenizer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A parser that parses {@code DeleteOrderCommand}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class DeleteOrderCommandParser implements Parser\u003cDeleteOrderCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_EMPTY_INDICES \u003d \"Indices cannot be empty.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public DeleteOrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ArgumentMultimap map \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (map.getPreamble().isBlank()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(MESSAGE_EMPTY_INDICES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new DeleteOrderCommand(ParserUtil.getIndices(map.getPreamble()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "liujiajun": 29
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/order/EditOrderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.order.EditOrderCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.ArgumentMultimap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.ArgumentTokenizer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_CUSTOMER_CONTACT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_CUSTOMER_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_ORDER_DEADLINE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_ORDER_ITEM;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_ORDER_REMARKS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_ORDER_STATUS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_ORDER_TOTAL;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.order.OrderParserUtil.createDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A parser that parses {@code EditOrderCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class EditOrderCommandParser implements Parser\u003cEditOrderCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public EditOrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ArgumentMultimap map \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            PREFIX_CUSTOMER_NAME,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            PREFIX_CUSTOMER_CONTACT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            PREFIX_ORDER_ITEM,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            PREFIX_ORDER_DEADLINE,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            PREFIX_ORDER_REMARKS,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            PREFIX_ORDER_TOTAL,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            PREFIX_ORDER_STATUS"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            index \u003d ParserUtil.parseIndex(map.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new EditOrderCommand(index, createDescriptor(map));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 48
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/order/OrderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.order.AddOrderCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.order.CompleteOrderCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.order.DeleteOrderCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.order.EditOrderCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.order.OrderCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.order.ShowOrderCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.order.SortOrderCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.SubCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A parser that parses {@code OrderCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class OrderCommandParser implements SubCommandParser\u003cOrderCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public OrderCommand parse(String subCommandAndArgs) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String subCommand \u003d SubCommandParser.getSubCommandWord(subCommandAndArgs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String args \u003d SubCommandParser.getArgs(subCommandAndArgs);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        switch (subCommand) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        case AddOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return new AddOrderCommandParser().parse(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        case EditOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return new EditOrderCommandParser().parse(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        case DeleteOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return new DeleteOrderCommandParser().parse(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        case CompleteOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return new CompleteOrderCommandParser().parse(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        case ShowOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return new ShowOrderCommandParser().parse(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        case SortOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return new SortOrderCommandParser().parse(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(Message.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 41
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/order/OrderParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.order.OrderDescriptor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.ArgumentMultimap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.TimeParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.commons.Quantity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Order;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_CUSTOMER_CONTACT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_CUSTOMER_NAME;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_ORDER_DEADLINE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_ORDER_ITEM;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_ORDER_REMARKS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_ORDER_STATUS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_ORDER_TOTAL;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A utility class for order parser."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "class OrderParserUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final double MAX_NUMBER \u003d 5000.0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final int MAX_NAME_LENGTH \u003d 20;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final int MAX_CONTACT_LENGTH \u003d 20;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final int MAX_REMARKS_LENGTH \u003d 50;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_NUMBER_EXCEED_LIMIT \u003d \"Numbers should be a positive double no more than \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        + MAX_NUMBER;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_NAME_EXCEED_LIMIT \u003d \"Name should be less than \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        + MAX_NAME_LENGTH + \" characters.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_CONTACT_EXCEED_LIMIT \u003d \"Contact should be less than \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        + MAX_CONTACT_LENGTH + \" characters.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_REMARKS_EXCEED_LIMIT \u003d \"Remarks should be less than \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        + MAX_REMARKS_LENGTH + \" characters.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns an {@code OrderDescriptor} from the given {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    static OrderDescriptor createDescriptor(ArgumentMultimap map) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        OrderDescriptor descriptor \u003d new OrderDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (map.getValue(PREFIX_CUSTOMER_NAME).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            String value \u003d map.getValue(PREFIX_CUSTOMER_NAME).get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            checkStringLength(value, MAX_NAME_LENGTH, MESSAGE_NAME_EXCEED_LIMIT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            descriptor.setCustomerName(value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (map.getValue(PREFIX_CUSTOMER_CONTACT).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            String value \u003d map.getValue(PREFIX_CUSTOMER_CONTACT).get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            checkStringLength(value, MAX_CONTACT_LENGTH, MESSAGE_CONTACT_EXCEED_LIMIT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            descriptor.setCustomerContact(value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (map.getValue(PREFIX_ORDER_DEADLINE).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            descriptor.setDeliveryDate(TimeParser.convertStringToDate("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                map.getValue(PREFIX_ORDER_DEADLINE).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (map.getValue(PREFIX_ORDER_REMARKS).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            String value \u003d map.getValue(PREFIX_ORDER_REMARKS).get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            checkStringLength(value, MAX_REMARKS_LENGTH, MESSAGE_REMARKS_EXCEED_LIMIT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            descriptor.setRemarks(value);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (map.getValue(PREFIX_ORDER_ITEM).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            descriptor.setItems(parseItems(map.getAllValues(PREFIX_ORDER_ITEM)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (map.getValue(PREFIX_ORDER_STATUS).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            descriptor.setStatus(parseStatus(map.getValue(PREFIX_ORDER_STATUS).get()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (map.getValue(PREFIX_ORDER_TOTAL).isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            descriptor.setTotal(parseTotal(map.getValue(PREFIX_ORDER_TOTAL).get()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static Set\u003cItem\u003cString\u003e\u003e parseItems(List\u003cString\u003e itemArg) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Set\u003cItem\u003cString\u003e\u003e items \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (String itemString : itemArg) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            String[] itemAndQty \u003d itemString.split(\",\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (itemAndQty.length \u003c 2) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new ParseException(Message.MESSAGE_ITEM_MISSING_NAME_OR_QUANTITY);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (itemAndQty[0].strip().equals(\"\") || itemAndQty[1].strip().equals(\"\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new ParseException(Message.MESSAGE_ITEM_MISSING_NAME_OR_QUANTITY);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                double amount \u003d Double.parseDouble(itemAndQty[1].strip());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                checkNumber(amount);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                Item\u003cString\u003e item \u003d new Item\u003c\u003e(itemAndQty[0].strip(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    new Quantity(amount));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                items.add(item);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new ParseException(Message.MESSAGE_INVALID_NUMBER_FORMAT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return items;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static Order.Status parseStatus(String statusString) throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return Order.Status.valueOf(statusString.trim().toUpperCase());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_STATUS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static double parseTotal(String totalString) throws ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            double result \u003d Double.parseDouble(totalString);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            checkNumber(result);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_NUMBER_FORMAT);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Checks if number is within limit."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws ParseException if number is greater than {@code MAX_NUMBER} or smaller than zero."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static void checkNumber(double toCheck) throws ParseException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (toCheck \u003c 0 || toCheck \u003e MAX_NUMBER) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(MESSAGE_NUMBER_EXCEED_LIMIT);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Checks if a {@code toCheck}\u0027s length is no more than {@code max}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws ParseException if the string\u0027s is more than {@code max}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static void checkStringLength(String toCheck, int max, String message) throws ParseException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (toCheck.length() \u003e max) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(message);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 140,
      "liushiru": 1
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/order/ShowOrderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.order.ShowOrderCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.ArgumentMultimap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.ArgumentTokenizer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.CliSyntax;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Order;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A parser that parses {@code ShowOrderCommand}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class ShowOrderCommandParser implements Parser\u003cShowOrderCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public ShowOrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        System.out.println(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ArgumentMultimap map \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            args,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            CliSyntax.PREFIX_ORDER_STATUS"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (map.getValue(CliSyntax.PREFIX_ORDER_STATUS).isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            System.out.println(\"hiii\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return new ShowOrderCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            Order.Status status \u003d Order.Status.valueOf(map.getValue(CliSyntax.PREFIX_ORDER_STATUS).get().toUpperCase());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return new ShowOrderCommand(status);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_STATUS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 39
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/order/SortOrderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.order.SortOrderCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.ArgumentMultimap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.ArgumentTokenizer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.CliSyntax;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A parser that parses {@code SortOrderCommand}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class SortOrderCommandParser implements Parser\u003cSortOrderCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public SortOrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ArgumentMultimap map \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            CliSyntax.PREFIX_ORDER_SORT_DECREASE"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (map.getPreamble().isBlank()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_CRITERIA);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            SortOrderCommand.SortCriteria criteria \u003d SortOrderCommand.SortCriteria"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                .valueOf(map.getPreamble().toUpperCase());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            boolean isIncreasing \u003d !map.getValue(CliSyntax.PREFIX_ORDER_SORT_DECREASE).isPresent();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return new SortOrderCommand(criteria, isIncreasing);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_CRITERIA);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 38
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/product/AddProductCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.logic.parser.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.product.AddProductCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.commons.ArgumentMultimap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.commons.ArgumentTokenizer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.commons.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_PRODUCT_INGREDIENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_PRODUCT_INGREDIENT_COST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_PRODUCT_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_PRODUCT_RETAIL_PRICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import static duke.logic.parser.product.ProductParserUtil.createProductDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class AddProductCommandParser implements Parser\u003cAddProductCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private ArgumentMultimap map;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public AddProductCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        map \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            PREFIX_PRODUCT_NAME,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            PREFIX_PRODUCT_INGREDIENT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            PREFIX_PRODUCT_INGREDIENT_COST,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            PREFIX_PRODUCT_RETAIL_PRICE"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        );"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return new AddProductCommand(createProductDescriptor(map));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "liujiajun": 1,
      "liushiru": 29
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/product/DeleteProductCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.logic.parser.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.product.DeleteProductCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.commons.ArgumentMultimap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.commons.ArgumentTokenizer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.commons.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.commons.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class DeleteProductCommandParser implements Parser\u003cDeleteProductCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private static final String MESSAGE_EMPTY_INDICES \u003d \"Indices cannot be empty.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private static final String MESSAGE_INDEX_OUT_OF_BOUND \u003d \"Index 0 is out of bound\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public DeleteProductCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        ArgumentMultimap map \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        if (map.getPreamble().isBlank()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            throw new ParseException(MESSAGE_EMPTY_INDICES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        Set\u003cIndex\u003e indices;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            indices \u003d ParserUtil.getIndices(map.getPreamble());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            throw new ParseException(MESSAGE_INDEX_OUT_OF_BOUND);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        // return new DeleteProductCommand(ParserUtil.getIndices(map.getPreamble()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return new DeleteProductCommand(indices);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liushiru": 32
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/product/EditProductCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.logic.parser.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.product.EditProductCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.commons.ArgumentMultimap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.commons.ArgumentTokenizer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.commons.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.commons.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_PRODUCT_INDEX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_PRODUCT_INGREDIENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_PRODUCT_INGREDIENT_COST;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_PRODUCT_NAME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_PRODUCT_RETAIL_PRICE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_PRODUCT_STATUS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import static duke.logic.parser.product.ProductParserUtil.createProductDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class EditProductCommandParser implements Parser\u003cEditProductCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public EditProductCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        ArgumentMultimap map \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                PREFIX_PRODUCT_INDEX,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                PREFIX_PRODUCT_NAME,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                PREFIX_PRODUCT_INGREDIENT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                PREFIX_PRODUCT_RETAIL_PRICE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                PREFIX_PRODUCT_INGREDIENT_COST,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                PREFIX_PRODUCT_STATUS"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        );"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            index \u003d ParserUtil.parseIndex(map.getValue(PREFIX_PRODUCT_INDEX).orElse(\"\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return new EditProductCommand(index, createProductDescriptor(map));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 6,
      "liushiru": 36
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/product/IngredientItemListParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.logic.parser.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.commons.Quantity;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.inventory.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.product.IngredientItemList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import org.ocpsoft.prettytime.shade.org.apache.commons.lang.StringUtils;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.Hashtable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class IngredientItemListParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private String inputIngredientList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private static final Pattern FORMAT_INGREDIENT_INPUT \u003d Pattern.compile(\"((\\\\s*\\\\[\\\\s*)(?\u003cname\u003e[\\\\w ]+)\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        + \"([,\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        + \"]?)\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            + \"(?\u003cquantity\u003e[0-9. ]*)(?:\\\\]\\\\s*))+\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private static final String MESSAGE_PORTION_NOT_NUMBER \u003d \"Ingredient portion must be a number\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private static final Double DEFAULT_PORTION \u003d 0.0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /** Constructs a IngredientItemListParser with the userInput */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public IngredientItemListParser(String inputIngredientList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.inputIngredientList \u003d inputIngredientList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private static Map\u003cString, String\u003e getIngredientPortionMap(String input) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        String replacement \u003d input;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        Matcher matcher \u003d FORMAT_INGREDIENT_INPUT.matcher(input.trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            throw new ParseException(\"Wrong ingredient format\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        Map\u003cString, String\u003e params \u003d new Hashtable\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        while (matcher.matches()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            String s \u003d matcher.group().strip();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            if (s.isEmpty() || s.isBlank()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            if (matcher.group(\"name\") !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                if (matcher.group(\"quantity\") !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                    String name \u003d StringUtils.capitalize(matcher.group(\"name\").strip());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                    params.put(name, matcher.group(\"quantity\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                    params.put(matcher.group(\"name\"), \"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            replacement \u003d replacement.replaceAll(\"(\\\\s*\\\\[\\\\s*)(?\u003cname\u003e[\\\\w ]+)([,]?)\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                    + \"(?\u003cquantity\u003e[0-9. ]*)(?:\\\\]\\\\s*)$\", \"\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            matcher \u003d FORMAT_INGREDIENT_INPUT.matcher(replacement);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return params;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private static Item\u003cIngredient\u003e constructNewIngredientItem(Map.Entry\u003cString, String\u003e entry) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        String ingredientName \u003d entry.getKey();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        String portionString \u003d entry.getValue();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        Ingredient newIngredient \u003d new Ingredient(ingredientName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        Double portion;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        if (portionString.isBlank()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            portion \u003d DEFAULT_PORTION;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                portion \u003d Double.parseDouble(portionString);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                throw new ParseException(MESSAGE_PORTION_NOT_NUMBER);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        Quantity quantity \u003d new Quantity(portion);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return new Item\u003cIngredient\u003e(newIngredient, quantity);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static IngredientItemList getIngredientsInInput(String input) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        IngredientItemList ingredientItemList \u003d new IngredientItemList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        Map\u003cString, String\u003e ingredientAndPortion \u003d getIngredientPortionMap(input);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        for (Map.Entry\u003cString, String\u003e entry : ingredientAndPortion.entrySet()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            Item\u003cIngredient\u003e ingredientItem \u003d constructNewIngredientItem(entry);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            ingredientItemList.add(ingredientItem);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return ingredientItemList;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 1,
      "liushiru": 87
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/product/ListProductCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.logic.parser.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.product.ListProductCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.message.ProductMessageUtils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.commons.ArgumentMultimap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.commons.ArgumentTokenizer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.commons.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_PRODUCT_SCOPE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class ListProductCommandParser implements Parser\u003cListProductCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public ListProductCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        ArgumentMultimap map \u003d ArgumentTokenizer.tokenize(args, PREFIX_PRODUCT_SCOPE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        String status \u003d map.getValue(PREFIX_PRODUCT_SCOPE).orElse(\"active\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        ListProductCommand.Scope scope;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            scope \u003d ListProductCommand.Scope.valueOf(status.toUpperCase());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            throw new ParseException(ProductMessageUtils.MESSAGE_INVALID_SCOPE_VALUE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return new ListProductCommand(scope);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liushiru": 30
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/product/ProductCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.logic.parser.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.product.AddProductCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.product.DeleteProductCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.product.EditProductCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.product.ListProductCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.product.ProductCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.product.ShowProductCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.product.SwitchProductPageCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.commons.SubCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class ProductCommandParser implements SubCommandParser\u003cProductCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public ProductCommand parse(String subCommandAndArgs) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        if (subCommandAndArgs.equals(\"\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            return new SwitchProductPageCommand();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        String subCommand \u003d SubCommandParser.getSubCommandWord(subCommandAndArgs);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        String args \u003d SubCommandParser.getArgs(subCommandAndArgs);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        switch (subCommand) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        case SwitchProductPageCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            return new SwitchProductPageCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        case ShowProductCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            return new ShowProductCommandParser().parse(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        case AddProductCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            return new AddProductCommandParser().parse(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        case EditProductCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            return new EditProductCommandParser().parse(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        case ListProductCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            return new ListProductCommandParser().parse(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        case DeleteProductCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            return new DeleteProductCommandParser().parse(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            throw new ParseException(Message.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liushiru": 43
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/product/ProductParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.logic.parser.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.product.ProductDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.message.ProductMessageUtils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.commons.ArgumentMultimap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_PRODUCT_INGREDIENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_PRODUCT_INGREDIENT_COST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_PRODUCT_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_PRODUCT_RETAIL_PRICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_PRODUCT_STATUS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class ProductParserUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static ProductDescriptor createProductDescriptor(ArgumentMultimap map) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        ProductDescriptor productDescriptor \u003d new ProductDescriptor();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        if (!map.getValue(PREFIX_PRODUCT_NAME).isPresent()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            throw new ParseException(ProductMessageUtils.MESSAGE_MISSING_PRODUCT_NAME);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        String name \u003d map.getValue(PREFIX_PRODUCT_NAME).get();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        if (name.isBlank() || name.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            throw new ParseException(ProductMessageUtils.MESSAGE_MISSING_PRODUCT_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        productDescriptor.setProductName(name);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            if (map.getValue(PREFIX_PRODUCT_RETAIL_PRICE).isPresent()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                productDescriptor.setRetailPrice(Double.parseDouble(map.getValue(PREFIX_PRODUCT_RETAIL_PRICE).get()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            if (map.getValue(PREFIX_PRODUCT_INGREDIENT_COST).isPresent()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                productDescriptor.setIngredientCost(Double.parseDouble(map.getValue(PREFIX_PRODUCT_INGREDIENT_COST).get()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            throw new ParseException(ProductMessageUtils.MESSAGE_INVALID_NUMBER_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        if (map.getValue(PREFIX_PRODUCT_STATUS).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                productDescriptor.setStatus(Product.Status.valueOf("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                    map.getValue(PREFIX_PRODUCT_STATUS).get().toUpperCase()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                throw new ParseException(ProductMessageUtils.MESSAGE_INVALID_STATUS_VALUE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        if (map.getValue(PREFIX_PRODUCT_INGREDIENT).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            String input \u003d map.getValue(PREFIX_PRODUCT_INGREDIENT).orElse(\"\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            productDescriptor.setIngredientItemList(IngredientItemListParser.getIngredientsInInput(input));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return productDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 2,
      "liushiru": 52
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/product/ShowProductCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.logic.parser.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.product.ShowProductCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.commons.ArgumentMultimap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.commons.ArgumentTokenizer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.commons.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.commons.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_PRODUCT_INDEX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import static duke.logic.parser.product.ProductParserUtil.createProductDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class ShowProductCommandParser implements Parser\u003cShowProductCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public ShowProductCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        ArgumentMultimap map \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                PREFIX_PRODUCT_INDEX"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        );"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            index \u003d ParserUtil.parseIndex(map.getValue(PREFIX_PRODUCT_INDEX).orElse(\"\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return new ShowProductCommand(index, createProductDescriptor(map));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liushiru": 40
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/sale/AddSaleCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chekjun"
        },
        "content": "package duke.logic.parser.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.command.sale.AddSaleCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.ArgumentMultimap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.ArgumentTokenizer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_SALE_DESCRIPTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_SALE_VALUE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_SALE_IS_SPEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_SALE_DATE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_SALE_REMARKS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import static duke.logic.parser.sale.SaleParserUtil.createDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chekjun"
        },
        "content": "public class AddSaleCommandParser implements Parser\u003cAddSaleCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public AddSaleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        ArgumentMultimap map \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                PREFIX_SALE_DESCRIPTION,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                PREFIX_SALE_VALUE,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                PREFIX_SALE_IS_SPEND,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                PREFIX_SALE_DATE,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                PREFIX_SALE_REMARKS"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return new AddSaleCommand(createDescriptor(map));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chekjun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 5,
      "chekjun": 23
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/sale/DeleteSaleCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chekjun"
        },
        "content": "package duke.logic.parser.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.command.sale.DeleteSaleCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.parser.commons.ArgumentMultimap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.parser.commons.ArgumentTokenizer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.parser.commons.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.parser.commons.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chekjun"
        },
        "content": "public class DeleteSaleCommandParser implements Parser\u003cDeleteSaleCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private static final String MESSAGE_EMPTY_INDICES \u003d \"Indices cannot be empty.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public DeleteSaleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        ArgumentMultimap map \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        if (map.getPreamble().isBlank()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            throw new ParseException(MESSAGE_EMPTY_INDICES);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return new DeleteSaleCommand(ParserUtil.getIndices(map.getPreamble()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chekjun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chekjun": 24
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/sale/EditSaleCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chekjun"
        },
        "content": "package duke.logic.parser.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.command.sale.EditSaleCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.parser.commons.ArgumentMultimap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.parser.commons.ArgumentTokenizer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.parser.commons.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.parser.commons.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import static duke.logic.parser.sale.SaleParserUtil.createDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_SALE_DESCRIPTION;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_SALE_VALUE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_SALE_IS_SPEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_SALE_DATE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_SALE_REMARKS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chekjun"
        },
        "content": "public class EditSaleCommandParser implements Parser\u003cEditSaleCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public EditSaleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        ArgumentMultimap map \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                PREFIX_SALE_DESCRIPTION,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                PREFIX_SALE_VALUE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                PREFIX_SALE_IS_SPEND,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                PREFIX_SALE_DATE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                PREFIX_SALE_REMARKS"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            index \u003d ParserUtil.parseIndex(map.getPreamble());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return new EditSaleCommand(index, createDescriptor(map));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chekjun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chekjun": 41
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/sale/FilterSaleCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chekjun"
        },
        "content": "package duke.logic.parser.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.command.sale.FilterSaleCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.parser.commons.ArgumentMultimap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.parser.commons.ArgumentTokenizer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.parser.commons.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import static duke.logic.parser.sale.SaleParserUtil.createFilterDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_SALE_FROM;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_SALE_TO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chekjun"
        },
        "content": "public class FilterSaleCommandParser implements Parser\u003cFilterSaleCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public FilterSaleCommand parse (String args) throws ParseException  {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        ArgumentMultimap map \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                PREFIX_SALE_FROM,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                PREFIX_SALE_TO"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return new FilterSaleCommand(createFilterDate(map));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chekjun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chekjun": 24
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/sale/SaleCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chekjun"
        },
        "content": "package duke.logic.parser.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.command.sale.SaleCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.command.sale.AddSaleCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.command.sale.DeleteSaleCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.command.sale.EditSaleCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.command.sale.FilterSaleCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.command.sale.ShowSaleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.parser.commons.SubCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chekjun"
        },
        "content": "public class SaleCommandParser implements SubCommandParser\u003cSaleCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public SaleCommand parse(String subCommandAndArgs) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        String subCommand \u003d SubCommandParser.getSubCommandWord(subCommandAndArgs);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        String args \u003d SubCommandParser.getArgs(subCommandAndArgs);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        switch (subCommand) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        case AddSaleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            return new AddSaleCommandParser().parse(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        case DeleteSaleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            return new DeleteSaleCommandParser().parse(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        case EditSaleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            return new EditSaleCommandParser().parse(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        case FilterSaleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            return new FilterSaleCommandParser().parse(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        case ShowSaleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            return new ShowSaleCommandParser().parse(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            throw new ParseException(Message.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chekjun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chekjun": 36
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/sale/SaleParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chekjun"
        },
        "content": "package duke.logic.parser.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.command.sale.SaleDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.parser.commons.ArgumentMultimap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.parser.commons.TimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_SALE_DESCRIPTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_SALE_VALUE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_SALE_IS_SPEND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_SALE_DATE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_SALE_REMARKS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_SALE_FROM;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_SALE_TO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chekjun"
        },
        "content": "class SaleParserUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    static SaleDescriptor createDescriptor(ArgumentMultimap map) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        SaleDescriptor descriptor \u003d new SaleDescriptor();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        if (map.getValue(PREFIX_SALE_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            descriptor.setDescription(map.getValue(PREFIX_SALE_DESCRIPTION).get());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        if (map.getValue(PREFIX_SALE_VALUE).isPresent()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            descriptor.setValue(Double.parseDouble(map.getValue(PREFIX_SALE_VALUE).get()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        if (map.getValue(PREFIX_SALE_IS_SPEND).isPresent()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            descriptor.setSpend(Boolean.parseBoolean(map.getValue(PREFIX_SALE_IS_SPEND).get()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        if (map.getValue(PREFIX_SALE_DATE).isPresent()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            descriptor.setSaleDate(TimeParser.convertStringToDate("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                    map.getValue(PREFIX_SALE_DATE).get()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        if (map.getValue(PREFIX_SALE_REMARKS).isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            descriptor.setRemarks(map.getValue(PREFIX_SALE_REMARKS).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public static Pair\u003cDate, Date\u003e createFilterDate(ArgumentMultimap map) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        Date from \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        Date to \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        if (map.getValue(PREFIX_SALE_FROM).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            from \u003d TimeParser.convertStringToDate(map.getValue(PREFIX_SALE_FROM).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        if (map.getValue(PREFIX_SALE_TO).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            to \u003d TimeParser.convertStringToDate(map.getValue(PREFIX_SALE_TO).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return new Pair(from, to);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chekjun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 2,
      "chekjun": 53
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/sale/ShowSaleCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chekjun"
        },
        "content": "package duke.logic.parser.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.command.sale.ShowSaleCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.parser.commons.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chekjun"
        },
        "content": "public class ShowSaleCommandParser implements Parser\u003cShowSaleCommand\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public ShowSaleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        System.out.println(args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return new ShowSaleCommand();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chekjun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chekjun": 13
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/shopping/AddShoppingCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "package duke.logic.parser.shopping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.shopping.AddShoppingCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.ArgumentMultimap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.ArgumentTokenizer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.commons.Quantity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.inventory.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import org.ocpsoft.prettytime.shade.org.apache.commons.lang.StringUtils;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_SHOPPING_COST;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_SHOPPING_NAME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_SHOPPING_QUANTITY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_SHOPPING_REMARKS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "public class AddShoppingCommandParser implements Parser\u003cAddShoppingCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private static final String DEFAULT_COST \u003d \"0.00\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private static final String DEFAULT_QUANTITY \u003d \"0.0\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public AddShoppingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        ArgumentMultimap map \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                PREFIX_SHOPPING_NAME,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                PREFIX_SHOPPING_COST,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                PREFIX_SHOPPING_QUANTITY,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                PREFIX_SHOPPING_REMARKS"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        );"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        Ingredient ingredient \u003d new Ingredient("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                StringUtils.capitalize(map.getValue(PREFIX_SHOPPING_NAME).orElse(EMPTY_STRING).toLowerCase()),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                Double.parseDouble(map.getValue(PREFIX_SHOPPING_COST).orElse(DEFAULT_COST)),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                map.getValue(PREFIX_SHOPPING_REMARKS).orElse(EMPTY_STRING)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        Quantity quantity \u003d new Quantity("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                Double.parseDouble(map.getValue(PREFIX_SHOPPING_QUANTITY).orElse(DEFAULT_QUANTITY))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        Item\u003cIngredient\u003e shoppingItem \u003d new Item\u003cIngredient\u003e(ingredient, quantity);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return new AddShoppingCommand(shoppingItem);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 1,
      "eugenelim97": 46
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/shopping/BuyShoppingCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "package duke.logic.parser.shopping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.shopping.BuyShoppingCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.ArgumentMultimap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.ArgumentTokenizer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_SHOPPING_INDEX;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "public class BuyShoppingCommandParser implements Parser\u003cBuyShoppingCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public BuyShoppingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        ArgumentMultimap map \u003d ArgumentTokenizer.tokenize(args, PREFIX_SHOPPING_INDEX);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        Set\u003cIndex\u003e indices;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            indices \u003d ParserUtil.getIndices(map.getValue(PREFIX_SHOPPING_INDEX).orElse(EMPTY_STRING));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return new BuyShoppingCommand(indices);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenelim97": 34
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/shopping/DeleteShoppingCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "package duke.logic.parser.shopping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.shopping.DeleteShoppingCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.ArgumentMultimap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.ArgumentTokenizer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_SHOPPING_INDEX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "public class DeleteShoppingCommandParser implements Parser\u003cDeleteShoppingCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public DeleteShoppingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        ArgumentMultimap map \u003d ArgumentTokenizer.tokenize(args, PREFIX_SHOPPING_INDEX);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            index \u003d ParserUtil.parseIndex(map.getValue(PREFIX_SHOPPING_INDEX).orElse(EMPTY_STRING));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return new DeleteShoppingCommand(index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenelim97": 32
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/shopping/EditShoppingCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "package duke.logic.parser.shopping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.shopping.EditShoppingCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.ArgumentMultimap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.ArgumentTokenizer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_SHOPPING_COST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_SHOPPING_INDEX;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_SHOPPING_NAME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_SHOPPING_QUANTITY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_SHOPPING_REMARKS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static duke.logic.parser.shopping.ShoppingParserUtil.createShoppingDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "public class EditShoppingCommandParser implements Parser\u003cEditShoppingCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public EditShoppingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        ArgumentMultimap map \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                PREFIX_SHOPPING_INDEX,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                PREFIX_SHOPPING_NAME,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                PREFIX_SHOPPING_QUANTITY,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                PREFIX_SHOPPING_REMARKS,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                PREFIX_SHOPPING_COST"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        );"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            index \u003d ParserUtil.parseIndex(map.getValue(PREFIX_SHOPPING_INDEX).orElse(EMPTY_STRING));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return new EditShoppingCommand(index, createShoppingDescriptor(map));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 1,
      "eugenelim97": 42
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/shopping/ShoppingCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "package duke.logic.parser.shopping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.shopping.AddShoppingCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.shopping.BuyShoppingCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.shopping.ClearShoppingCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.shopping.DeleteShoppingCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.shopping.EditShoppingCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.shopping.ListShoppingCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.shopping.ShoppingCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.shopping.ShowShoppingCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.SubCommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "public class ShoppingCommandParser implements SubCommandParser\u003cShoppingCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public ShoppingCommand parse(String subCommandAndArgs) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        String subCommand \u003d SubCommandParser.getSubCommandWord(subCommandAndArgs);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        String args \u003d SubCommandParser.getArgs(subCommandAndArgs);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        switch (subCommand) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        case AddShoppingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            return new AddShoppingCommandParser().parse(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        case DeleteShoppingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            return new DeleteShoppingCommandParser().parse(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        case EditShoppingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            return new EditShoppingCommandParser().parse(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        case ClearShoppingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            return new ClearShoppingCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        case BuyShoppingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            return new BuyShoppingCommandParser().parse(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        case ShowShoppingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            return new ShowShoppingCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        case ListShoppingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            return new ListShoppingCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            throw new ParseException(Message.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 3,
      "eugenelim97": 38
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/shopping/ShoppingParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "package duke.logic.parser.shopping;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.command.shopping.ShoppingDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.logic.parser.commons.ArgumentMultimap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_SHOPPING_COST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_SHOPPING_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_SHOPPING_QUANTITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_SHOPPING_REMARKS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "public class ShoppingParserUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * Creates a ShoppingDescriptor constructor with edited values."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * @param map Map of all the arguments of the sub commands"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * @return ShoppingDescriptor with edited values"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public static ShoppingDescriptor createShoppingDescriptor(ArgumentMultimap map) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        ShoppingDescriptor shoppingDescriptor \u003d new ShoppingDescriptor();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        if (map.getValue(PREFIX_SHOPPING_NAME).isPresent()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            shoppingDescriptor.setName(map.getValue(PREFIX_SHOPPING_NAME).get());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        if (map.getValue(PREFIX_SHOPPING_QUANTITY).isPresent()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            shoppingDescriptor.setQuantity(Double.parseDouble(map.getValue(PREFIX_SHOPPING_QUANTITY).get()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        if (map.getValue(PREFIX_SHOPPING_REMARKS).isPresent()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            shoppingDescriptor.setRemarks(map.getValue(PREFIX_SHOPPING_REMARKS).get());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        if (map.getValue(PREFIX_SHOPPING_COST).isPresent()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            shoppingDescriptor.setUnitCost(Double.parseDouble(map.getValue(PREFIX_SHOPPING_COST).get()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return shoppingDescriptor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 1,
      "eugenelim97": 35
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/shortcut/ExecuteShortcutCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.shortcut;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.shortcut.ExecuteShortcutCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.SubCommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A parser that parses {@code ExecuteShortcutCommand}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class ExecuteShortcutCommandParser implements SubCommandParser\u003cExecuteShortcutCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_NAME_NOT_FOUND \u003d \"Please specify the shortcut name\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public ExecuteShortcutCommand parse(String subCommandAndArgs) throws ParseException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String shortcutName \u003d SubCommandParser.getSubCommandWord(subCommandAndArgs);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (shortcutName.isBlank()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(MESSAGE_NAME_NOT_FOUND);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new ExecuteShortcutCommand(shortcutName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 22
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/shortcut/SetShortcutCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.shortcut;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.shortcut.SetShortcutCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.SubCommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.shortcut.Shortcut;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A parser that parses {@code SetShortcutCommand}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class SetShortcutCommandParser implements SubCommandParser\u003cSetShortcutCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static String MESSAGE_EMPTY_NAME \u003d \"Shortcut name cannot be empty.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static String MESSAGE_EMPTY_COMMAND \u003d \"Command cannot be empty.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static String COMMAND_SPLITTER \u003d \";\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public SetShortcutCommand parse(String subCommandAndArgs) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String shortcutName \u003d SubCommandParser.getSubCommandWord(subCommandAndArgs);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (shortcutName.isBlank()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(MESSAGE_EMPTY_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String args \u003d SubCommandParser.getArgs(subCommandAndArgs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Shortcut shortcut \u003d new Shortcut(shortcutName, getUserInputs(args));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new SetShortcutCommand(shortcut);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private List\u003cString\u003e getUserInputs(String userInputsString) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        assert (userInputsString !\u003d null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        List\u003cString\u003e commands \u003d new ArrayList\u003c\u003e(Arrays.asList(userInputsString.split(COMMAND_SPLITTER)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (userInputsString.isBlank()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return commands;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (commands.isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(MESSAGE_EMPTY_COMMAND);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (String command : commands) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (command.isBlank()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new ParseException(MESSAGE_EMPTY_COMMAND);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return commands;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 56
    }
  },
  {
    "path": "src/main/java/duke/model/BakingHome.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.order.SortOrderCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.commons.Quantity;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.inventory.Ingredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Order;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.OrderComparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.model.sale.Sale;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.shortcut.Shortcut;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Wraps all data at the baking-home level."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class BakingHome implements ReadOnlyBakingHome {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private final UniqueEntityList\u003cSale\u003e sales;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final UniqueEntityList\u003cOrder\u003e orders;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private final UniqueEntityList\u003cProduct\u003e products;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private final UniqueEntityList\u003cItem\u003cIngredient\u003e\u003e inventory;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private final UniqueEntityList\u003cItem\u003cIngredient\u003e\u003e shoppingList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final UniqueEntityList\u003cShortcut\u003e shortcuts;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates a BakingHome."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public BakingHome() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        sales \u003d new UniqueEntityList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        orders \u003d new UniqueEntityList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        products \u003d new UniqueEntityList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        inventory \u003d new UniqueEntityList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        shoppingList \u003d new UniqueEntityList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        shortcuts \u003d new UniqueEntityList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates BakingHome fro {@code toBeCopied}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public BakingHome(ReadOnlyBakingHome toBeCopied) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Resets the existing data of this {@code BakingHome} with {@code newData}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void resetData(ReadOnlyBakingHome newData) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        setShortcuts(newData.getShortcutList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        setInventory(newData.getInventoryList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        setSale(newData.getSaleList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        setProducts(newData.getProductList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        setShoppingList(newData.getShoppingList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        setOrders(newData.getOrderList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dOrder operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void sortOrders(SortOrderCommand.SortCriteria criteria, boolean isIncreasing) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(criteria);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        orders.sort(new OrderComparator((criteria)), isIncreasing);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Replaces the contents of the order list with {@code orders}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setOrders(List\u003cOrder\u003e orders) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.orders.setAll(orders);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (Order order : orders) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            order.listenToInventory(getInventoryList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns true if an order with the same identity as {@code order} exists in {@code orders}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean hasOrder(Order order) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(order);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return orders.contains(order);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Adds an order to orders"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * The order must not already exist in orders."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void addOrder(Order o) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        orders.add(o);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setOrder(Order target, Order editedOrder) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(editedOrder);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        orders.set(target, editedOrder);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Replaces the order at {@code Index} in the list with {@code editedOrder}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * {@code Index} must be a valid index"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * {@code target} must exist in orders"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setOrder(Index index, Order order) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireAllNonNull(index, order);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        orders.set(index, order);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void removeOrder(Order key) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        orders.remove(key);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public ObservableList\u003cOrder\u003e getOrderList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return orders.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dSale operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * Adds a sale to sales"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * The sale must not already exist in sales."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void addSale(Sale s) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        sales.add(s);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void removeSale(Sale key) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        sales.remove(key);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void setSale(Sale target, Sale editedSale) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        requireNonNull(editedSale);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        sales.set(target, editedSale);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setSale(List\u003cSale\u003e allSale) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.sales.setAll(allSale);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * Replaces the sale at {@code Index} in the list with {@code editedSale}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * {@code Index} must be a valid index"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * {@code target} must exist in sales"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void setSale(Index index, Sale sale) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        requireAllNonNull(index, sale);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        sales.set(index, sale);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public ObservableList\u003cSale\u003e getSaleList() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return sales.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dProduct operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Removes a given product from product List"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void removeProduct(Product product) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        products.remove(product);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Adds an product to products."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * The order must not already exist in orders."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void addProduct(Product product) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        products.add(product);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void setProduct(Product originalProduct, Product editedProduct) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireNonNull(editedProduct);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        products.set(originalProduct, editedProduct);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void setProducts(List\u003cProduct\u003e products) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        this.products.setAll(products);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public ObservableList\u003cProduct\u003e getProductList() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return products.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dInventory operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Adds an ingredient to the inventory list."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * @param toAdd The ingredient to be added to the inventory list"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void addInventory(Item\u003cIngredient\u003e toAdd) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        inventory.add(toAdd);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Removes an ingredient from the inventory list."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * @param toRemove The ingredient to be removed from the inventory list"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void removeInventory(Item\u003cIngredient\u003e toRemove) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        inventory.remove(toRemove);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Replaces the ingredient toEdit in the inventory list with the edited ingredient."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * @param toEdit  the ingredient that needs to be edited"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * @param edited the edited ingredient"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void setInventory(Item\u003cIngredient\u003e toEdit, Item\u003cIngredient\u003e edited) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireAllNonNull(toEdit, edited);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        inventory.set(toEdit, edited);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void setInventory(List\u003cItem\u003cIngredient\u003e\u003e replacement) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        inventory.setAll(replacement);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void clearInventory(List\u003cItem\u003cIngredient\u003e\u003e emptyList) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        inventory.setAll(emptyList);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public boolean deductIngredient(Ingredient ingredient, double amount) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        boolean isDeducted \u003d false;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        for (Item\u003cIngredient\u003e item : inventory) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            if (item.getItem().equals(ingredient)) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                Double currentAmount \u003d item.getQuantity().getNumber();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                if (currentAmount \u003e\u003d amount) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                    Double newAmount \u003d currentAmount - amount;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                    inventory.set(item, new Item\u003c\u003e(item.getItem(), new Quantity(newAmount)));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                    isDeducted \u003d true;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                    inventory.set(item, new Item\u003c\u003e(item.getItem(), new Quantity(0.0)));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return isDeducted;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public ObservableList\u003cItem\u003cIngredient\u003e\u003e getInventoryList() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return inventory.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dShopping operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Adds an ingredient to the shopping list."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * @param toAdd The ingredient to be added to the shopping list."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void addShoppingList(Item\u003cIngredient\u003e toAdd) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        shoppingList.add(toAdd);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Removes an ingredient from the shopping list."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * @param toRemove The ingredient to be removed from the shopping list."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void removeShoppingList(Item\u003cIngredient\u003e toRemove) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        shoppingList.remove(toRemove);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * Replaces the ingredient toEdit in the shopping list with the edited ingredient."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * @param toEdit  the ingredient that needs to be edited"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * @param edited the edited ingredient"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void setShoppingList(Item\u003cIngredient\u003e toEdit, Item\u003cIngredient\u003e edited) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireAllNonNull(toEdit, edited);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        shoppingList.set(toEdit, edited);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void setShoppingList(List\u003cItem\u003cIngredient\u003e\u003e replacement) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        shoppingList.setAll(replacement);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void clearShoppingList(List\u003cItem\u003cIngredient\u003e\u003e emptyList) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        shoppingList.setAll(emptyList);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public ObservableList\u003cItem\u003cIngredient\u003e\u003e getShoppingList() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return shoppingList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //// shortcut-related operations"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Adds {@code shortcut} to shortcut list."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * If the shortcut already exists, it overrides the old shortcut."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setShortcut(Shortcut shortcut) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(shortcut);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (shortcuts.contains(shortcut)) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            shortcuts.set(shortcut, shortcut);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            shortcuts.add(shortcut);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Replaces the contents of the shortcut list with {@code shortcuts}."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setShortcuts(List\u003cShortcut\u003e shortcuts) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.shortcuts.setAll(shortcuts);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Deletes the given {@code shortcut}."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * The shortcut must exist in order list."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void removeShortcut(Shortcut key) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(key);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        shortcuts.remove(key);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns true if a shortcut with the same name as {@code order} exists in shortcut list."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean hasShortcut(Shortcut shortcut) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(shortcut);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return shortcuts.contains(shortcut);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public List\u003cShortcut\u003e getShortcutList() {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return shortcuts.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return orders.asUnmodifiableObservableList().size() + \" orders\";"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                || (other instanceof BakingHome // instanceof handles nulls"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                \u0026\u0026 orders.equals(((BakingHome) other).orders));"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return orders.hashCode();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 201,
      "liushiru": 27,
      "chekjun": 49,
      "eugenelim97": 115
    }
  },
  {
    "path": "src/main/java/duke/model/BakingHomeCommit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Represents a commit, including a BakingHome state and a commit message."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class BakingHomeCommit {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * The state of BakingHome to commit."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public final ReadOnlyBakingHome bakingHome;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * A message describing the details of the commit."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public final String commitMessage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates a BakingHome commit."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public BakingHomeCommit(ReadOnlyBakingHome bakingHome, String commitMessage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.bakingHome \u003d bakingHome;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.commitMessage \u003d commitMessage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 25
    }
  },
  {
    "path": "src/main/java/duke/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.order.SortOrderCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.inventory.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Order;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.product.IngredientItemList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.sale.Sale;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.shortcut.Shortcut;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    Predicate\u003cOrder\u003e PREDICATE_SHOW_ALL_ORDERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    Predicate\u003cOrder\u003e PREDICATE_SHOW_ACTIVE_ORDERS \u003d order -\u003e order.getStatus() \u003d\u003d Order.Status.ACTIVE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    Predicate\u003cOrder\u003e PREDICATE_SHOW_CANCELED_ORDERS \u003d order -\u003e order.getStatus() \u003d\u003d Order.Status.CANCELED;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    Predicate\u003cOrder\u003e PREDICATE_SHOW_COMPLETED_ORDERS \u003d order -\u003e order.getStatus() \u003d\u003d Order.Status.COMPLETED;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    Predicate\u003cSale\u003e PREDICATE_SHOW_ALL_SALES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    Predicate\u003cProduct\u003e PREDICATE_SHOW_ALL_PRODUCTS \u003d product -\u003e true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    Predicate\u003cProduct\u003e PREDICATE_SHOW_ACTIVE_PRODUCTS \u003d product -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return product.getStatus() \u003d\u003d Product.Status.ACTIVE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    };"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    Predicate\u003cProduct\u003e PREDICATE_SHOW_ARCHIVE_PRODUCTS \u003d product -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return product.getStatus() \u003d\u003d Product.Status.ARCHIVE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    };"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    Predicate\u003cItem\u003cIngredient\u003e\u003e PREDICATE_SHOW_ALL_INVENTORY \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    Predicate\u003cItem\u003cIngredient\u003e\u003e PREDICATE_SHOW_ALL_SHOPPING \u003d ingredientItem -\u003e true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    Predicate\u003cItem\u003cIngredient\u003e\u003e PREDICATE_SHOW_AVAILABLE_SHOPPING \u003d  ingredientItem -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return ingredientItem.getQuantity().getNumber() \u003e 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns true if the model has previous baking home states to restore."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    boolean canUndo();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns true if the model has undone baking home states to restore."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    boolean canRedo();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Restores BakingHome to its previous state."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @return the commit message of the current state."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    String undo();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * Restores BakingHome to its previously undone state."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @return the commit message of the previous state."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    String redo();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Saves the current baking home state for undo/redo."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param commitMessage the message describing the details of the commit"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    void commit(String commitMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * TODO: add details."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param isEnabled should be set to true to enable version control."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    void setVersionControl(Boolean isEnabled);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns the BakingHome."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    ReadOnlyBakingHome getBakingHome();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Replaces baking home data with the data in {@code bakingHome}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    void setBakingHome(ReadOnlyBakingHome bakingHome);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dOrder operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns true if an order with the same id as {@code order} exists in order list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    boolean hasOrder(Order order);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Deletes the given order."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * The order must exist in order list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    void deleteOrder(Order target);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Adds the given order."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * The order must not exist in order list"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    void addOrder(Order order);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Replaces the given order {@code target} in the list with {@code editedOrder}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * {@code target} must exist in order list"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    void setOrder(Order target, Order editedOrder);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Replaces the order at {@code Index} in the list with {@code editedOrder}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * {@code Index} must be a valid index"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * {@code target} must exist in order list"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    void setOrder(Index index, Order order);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns an unmodifiable view of the filtered order list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    ObservableList\u003cOrder\u003e getFilteredOrderList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Updates the filter of the filtered order list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Sorts order list by {@code criteria}. If {@code isIncreasing} is true,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * sort in increasing order."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    void sortOrders(SortOrderCommand.SortCriteria criteria, boolean isIncreasing);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dProduct operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Deletes the given product."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * The order must exist in product list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    void deleteProduct(Product product);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Adds the given product."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    void addProduct(Product product);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Replaces the given product {@code original} in the list with {@code editedProduct}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * {@code originalProduct} must exist in product list"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    void setProduct(Product originalProduct, Product editedProduct);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Returns true if an product has the same name as {@code product} exists in product list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    boolean hasProduct(Product product);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Returns an unmodifiable view of the filtered product list."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    ObservableList\u003cProduct\u003e getFilteredProductList(); //implement archive"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    void updateFilteredProductList(Predicate\u003cProduct\u003e predicate);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dSale operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * Returns true if an sale with the same id as {@code sale} exists in sale list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    boolean hasSale(Sale sale);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * Deletes the given sale."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * The sale must exist in sale list."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    void deleteSale(Sale target);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * Adds the given sale."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * The sale must not exist in sale list"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    void addSale(Sale sale);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * Replaces the given sale {@code target} in the list with {@code editedSale}."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * {@code target} must exist in sale list"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    void setSale(Sale target, Sale editedSale);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * Replaces the sale at {@code Index} in the list with {@code editedSale}."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * {@code Index} must be a valid index"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * {@code target} must exist in sale list"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    void setSale(Index index, Sale sale);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * Returns an unmodifiable view of the filtered sale list."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    ObservableList\u003cSale\u003e getFilteredSaleList();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * Updates the filter of the filtered sale list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    void updateFilteredSaleList(Predicate\u003cSale\u003e predicate);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * @param from start date to filter not inclusive of itself"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * @param to end date to filter not inclusive of itself"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    default Predicate\u003cSale\u003e getSalesBetween(Date from, Date to) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        Predicate\u003cSale\u003e showSaleBetween \u003d"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                sale -\u003e sale.getSaleDate().before(to) \u0026\u0026 sale.getSaleDate().after(from);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return showSaleBetween;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * Creates a Sale entry from a completed Order."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * @param order"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    void addSaleFromOrder(Order order);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * Creates a Sale entry from purchase of ingredients."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * @param totalCost total added cost of ingredients."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * @param toBuyList ArrayList of Item generic of ingredients."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    void addSaleFromShopping(Double totalCost, ArrayList\u003cItem\u003cIngredient\u003e\u003e toBuyList);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dIngredient operations\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * Returns an unmodifiable view of the filtered inventory list."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    ObservableList\u003cItem\u003cIngredient\u003e\u003e getFilteredInventoryList();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    void updateFilteredInventoryList(Predicate\u003cItem\u003cIngredient\u003e\u003e predicate);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Adds an inventory item to the inventory list."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * @param inventory The inventory item"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    void addInventory(Item\u003cIngredient\u003e inventory);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Checks if the item with the same name already exists in the inventory list."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * @return true if the given inventory item already exists in the inventory list"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    boolean hasInventory(Item\u003cIngredient\u003e inventory);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    boolean hasIngredient(Ingredient ingredient);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Calculates the cost of the given list of ingredients."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    Double getIngredientCost(IngredientItemList ingredients);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    boolean deductIngredient(Ingredient ingredient, double amount);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Removes an inventory item from the inventory list."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * @param inventory The inventory item"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    void deleteInventory(Item\u003cIngredient\u003e inventory);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Edits the ingredient toEdit with the ingredient edited."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * @param toEdit the ingredient to be edited"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * @param edited the edited ingredient with changes"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    void setInventory(Item\u003cIngredient\u003e toEdit, Item\u003cIngredient\u003e edited);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    void setInventory(List\u003cItem\u003cIngredient\u003e\u003e replacement);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Clears the inventory list."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * @param emptyList"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    void clearInventory(List\u003cItem\u003cIngredient\u003e\u003e emptyList);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003dShopping list operations\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    ObservableList\u003cItem\u003cIngredient\u003e\u003e getFilteredShoppingList();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    void updateFilteredShoppingList(Predicate\u003cItem\u003cIngredient\u003e\u003e predicate);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Adds an ingredient to the shopping list."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * @param toAdd the ingredient to be added"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    void addShoppingList(Item\u003cIngredient\u003e toAdd);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Checks if the item with the same name already exists in the shopping list."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * @return true if the given ingredient item already exists in the shopping list"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    boolean hasShoppingList(Item\u003cIngredient\u003e ingredientItem);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Removes an ingredient item from the shopping list."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * @param toDelete the ingredient item"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    void deleteShoppingList(Item\u003cIngredient\u003e toDelete);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Edits the ingredient toEdit with the ingredient edited."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * @param toEdit the ingredient to be edited"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * @param edited the edited ingredient with changes"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    void setShoppingList(Item\u003cIngredient\u003e toEdit, Item\u003cIngredient\u003e edited);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    void setShoppingList(List\u003cItem\u003cIngredient\u003e\u003e replacement);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Clears the shopping list."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * @param emptyList an empty list"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    void clearShoppingList(List\u003cItem\u003cIngredient\u003e\u003e emptyList);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    Double computeTotalCost(ArrayList\u003cItem\u003cIngredient\u003e\u003e ingredientList);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dShortcut operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Adds {@code shortcut} to shortcut list."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * If the shortcut already exists, it overrides the old shortcut."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    void setShortcut(Shortcut shortcut);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Deletes the given {@code shortcut}."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * The shortcut must exist in order list."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    void removeShortcut(Shortcut shortcut);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns true if a shortcut with the same name as {@code order} exists in shortcut list."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    boolean hasShortcut(Shortcut shortcut);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns an unmodifiable view of the shortcut list."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    List\u003cShortcut\u003e getShortcutList();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 165,
      "liushiru": 40,
      "chekjun": 68,
      "eugenelim97": 82
    }
  },
  {
    "path": "src/main/java/duke/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.order.SortOrderCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.inventory.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Order;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.product.IngredientItemList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.sale.Sale;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.shortcut.Shortcut;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Represents the in-memory model of baking home data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final VersionedBakingHome bakingHome;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final FilteredList\u003cOrder\u003e filteredOrders;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private final FilteredList\u003cSale\u003e filteredSales;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private final FilteredList\u003cProduct\u003e filteredProducts;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private final FilteredList\u003cItem\u003cIngredient\u003e\u003e filteredInventory;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private final FilteredList\u003cItem\u003cIngredient\u003e\u003e filteredShoppingList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Initializes a ModelManager with the given BakingHome."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public ModelManager(ReadOnlyBakingHome bakingHome) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.bakingHome \u003d new VersionedBakingHome(bakingHome);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.filteredOrders \u003d new FilteredList\u003c\u003e(this.bakingHome.getOrderList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.filteredSales \u003d new FilteredList\u003c\u003e(this.bakingHome.getSaleList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.filteredProducts \u003d new FilteredList\u003c\u003e(this.bakingHome.getProductList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        this.filteredInventory \u003d new FilteredList\u003c\u003e(this.bakingHome.getInventoryList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        this.filteredShoppingList \u003d new FilteredList\u003c\u003e(this.bakingHome.getShoppingList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this(new BakingHome());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setBakingHome(ReadOnlyBakingHome bakingHome) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.bakingHome.resetData(bakingHome);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public ReadOnlyBakingHome getBakingHome() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return this.bakingHome;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return bakingHome.canUndo();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return bakingHome.canRedo();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public String undo() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return bakingHome.undo();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public String redo() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return bakingHome.redo();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void commit(String commitMessage) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        bakingHome.commit(commitMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setVersionControl(Boolean isEnabled) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        bakingHome.setVersionControl(isEnabled);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dOrder operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean hasOrder(Order order) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(order);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return bakingHome.getOrderList().contains(order);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void deleteOrder(Order target) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        bakingHome.removeOrder(target);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void addOrder(Order order) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        bakingHome.addOrder(order);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setOrder(Order target, Order editedOrder) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(editedOrder);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        bakingHome.setOrder(target, editedOrder);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setOrder(Index index, Order order) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireAllNonNull(index, order);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        bakingHome.setOrder(index, order);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public ObservableList\u003cOrder\u003e getFilteredOrderList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return filteredOrders;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        filteredOrders.setPredicate(predicate);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void sortOrders(SortOrderCommand.SortCriteria criteria, boolean isIncreasing) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(criteria);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        bakingHome.sortOrders(criteria, isIncreasing);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void deleteProduct(Product product) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        bakingHome.removeProduct(product);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dSale operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public boolean hasSale(Sale sale) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        requireNonNull(sale);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return bakingHome.getSaleList().contains(sale);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void deleteSale(Sale target) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        bakingHome.removeSale(target);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void addSale(Sale sale) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        bakingHome.addSale(sale);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        updateFilteredSaleList(PREDICATE_SHOW_ALL_SALES);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void setSale(Sale target, Sale editedSale) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        requireNonNull(editedSale);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        bakingHome.setSale(target, editedSale);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void setSale(Index index, Sale sale) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        requireAllNonNull(index, sale);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        bakingHome.setSale(index, sale);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public ObservableList\u003cSale\u003e getFilteredSaleList() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return filteredSales;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void updateFilteredSaleList(Predicate\u003cSale\u003e predicate) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        filteredSales.setPredicate(predicate);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void addSaleFromOrder(Order order) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        String description \u003d \"Order \" + order.getId() + \" completed.\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        double value \u003d order.getTotal();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        Date deliveryDate \u003d order.getDeliveryDate();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        String remarks \u003d order.getRemarks();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        bakingHome.addSale(new Sale(description, value, false, deliveryDate, remarks));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        updateFilteredSaleList(PREDICATE_SHOW_ALL_SALES);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void addSaleFromShopping(Double totalCost, ArrayList\u003cItem\u003cIngredient\u003e\u003e toBuyList) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        String description \u003d \"Ingredients purchased.\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        double value \u003d totalCost;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        Date buyDate \u003d Calendar.getInstance().getTime();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        String remarks \u003d \"Ingredients are: \";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        for (Item\u003cIngredient\u003e i : toBuyList) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            remarks \u003d remarks + \"-\" + i.getItem().getName() + \" \";"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        bakingHome.addSale(new Sale(description, value, true, buyDate, remarks));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        updateFilteredSaleList(PREDICATE_SHOW_ALL_SALES);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dProduct operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void addProduct(Product product) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        bakingHome.addProduct(product);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        updateFilteredProductList(PREDICATE_SHOW_ACTIVE_PRODUCTS);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Replaces the given product {@code originalProduct} in the list with {@code editedProduct}. {@code"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * originalProduct} must exist in product list"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void setProduct(Product originalProduct, Product editedProduct) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        requireNonNull(originalProduct);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        requireNonNull(editedProduct);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        bakingHome.setProduct(originalProduct, editedProduct);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public boolean hasProduct(Product product) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        requireNonNull(product);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return bakingHome.getProductList().contains(product);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Returns an unmodifiable view of the filtered product list."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public ObservableList\u003cProduct\u003e getFilteredProductList() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return filteredProducts;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void updateFilteredProductList(Predicate\u003cProduct\u003e predicate) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        filteredProducts.setPredicate(predicate);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dInventory operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void addInventory(Item\u003cIngredient\u003e toAdd) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        bakingHome.addInventory(toAdd);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        updateFilteredInventoryList(PREDICATE_SHOW_ALL_INVENTORY);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void updateFilteredInventoryList(Predicate\u003cItem\u003cIngredient\u003e\u003e predicate) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        filteredInventory.setPredicate(predicate);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public boolean hasInventory(Item\u003cIngredient\u003e ingredientItem) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireNonNull(ingredientItem);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return bakingHome.getInventoryList().contains(ingredientItem);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void deleteInventory(Item\u003cIngredient\u003e toDelete) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireNonNull(toDelete);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        bakingHome.removeInventory(toDelete);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void setInventory(Item\u003cIngredient\u003e toEdit, Item\u003cIngredient\u003e edited) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireAllNonNull(toEdit, edited);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        bakingHome.setInventory(toEdit, edited);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void setInventory(List\u003cItem\u003cIngredient\u003e\u003e replacement) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        bakingHome.setInventory(replacement);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void clearInventory(List\u003cItem\u003cIngredient\u003e\u003e emptyList) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        bakingHome.clearInventory(emptyList);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean hasIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireNonNull(ingredient);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        List\u003cItem\u003cIngredient\u003e\u003e inventoryList \u003d bakingHome.getInventoryList();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        for (Item\u003cIngredient\u003e item : inventoryList) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            if (item.getItem().equals(ingredient)) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Calculates the cost of the given list of ingredients."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Double getIngredientCost(IngredientItemList ingredients) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return 4.84;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean deductIngredient(Ingredient ingredient, double amount) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireAllNonNull(ingredient, amount);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return bakingHome.deductIngredient(ingredient, amount);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public ObservableList\u003cItem\u003cIngredient\u003e\u003e getFilteredInventoryList() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return filteredInventory;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dShopping List operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void addShoppingList(Item\u003cIngredient\u003e toAdd) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        bakingHome.addShoppingList(toAdd);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        updateFilteredShoppingList(PREDICATE_SHOW_ALL_SHOPPING);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void updateFilteredShoppingList(Predicate\u003cItem\u003cIngredient\u003e\u003e predicate) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        filteredShoppingList.setPredicate(predicate);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public boolean hasShoppingList(Item\u003cIngredient\u003e ingredientItem) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireNonNull(ingredientItem);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return bakingHome.getShoppingList().contains(ingredientItem);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void deleteShoppingList(Item\u003cIngredient\u003e toDelete) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireNonNull(toDelete);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        bakingHome.removeShoppingList(toDelete);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void setShoppingList(Item\u003cIngredient\u003e toEdit, Item\u003cIngredient\u003e edited) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireAllNonNull(toEdit, edited);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        bakingHome.setShoppingList(toEdit, edited);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void setShoppingList(List\u003cItem\u003cIngredient\u003e\u003e replacement) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        bakingHome.setShoppingList(replacement);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void clearShoppingList(List\u003cItem\u003cIngredient\u003e\u003e emptyList) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        bakingHome.clearShoppingList(emptyList);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public Double computeTotalCost(ArrayList\u003cItem\u003cIngredient\u003e\u003e ingredientList) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        Double totalCost \u003d 0.0;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        for (Item\u003cIngredient\u003e item : ingredientList) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            totalCost +\u003d item.getTotalPrice();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return totalCost;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public ObservableList\u003cItem\u003cIngredient\u003e\u003e getFilteredShoppingList() {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return filteredShoppingList;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dShortcut operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setShortcut(Shortcut shortcut) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(shortcut);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        bakingHome.setShortcut(shortcut);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void removeShortcut(Shortcut shortcut) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(shortcut);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        bakingHome.removeShortcut(shortcut);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean hasShortcut(Shortcut shortcut) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(shortcut);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return bakingHome.hasShortcut(shortcut);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public List\u003cShortcut\u003e getShortcutList() {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return bakingHome.getShortcutList();"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 168,
      "liushiru": 53,
      "chekjun": 71,
      "eugenelim97": 123
    }
  },
  {
    "path": "src/main/java/duke/model/ReadOnlyBakingHome.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.inventory.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Order;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.sale.Sale;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.shortcut.Shortcut;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": " * Unmodifiable view of BakingHome."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public interface ReadOnlyBakingHome {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns an unmodifiable view of the order list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    ObservableList\u003cOrder\u003e getOrderList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * Returns an unmodifiable view of the sale list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    ObservableList\u003cSale\u003e getSaleList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * Returns an unmodifiable view of the product list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    ObservableList\u003cProduct\u003e getProductList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * Returns an unmodifiable view of the inventory list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    ObservableList\u003cItem\u003cIngredient\u003e\u003e getInventoryList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * Returns an unmodifiable view of the shopping list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    ObservableList\u003cItem\u003cIngredient\u003e\u003e getShoppingList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    List\u003cShortcut\u003e getShortcutList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 22,
      "liushiru": 3,
      "chekjun": 13,
      "eugenelim97": 6
    }
  },
  {
    "path": "src/main/java/duke/model/UniqueEntityList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.exceptions.DuplicateEntityException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.exceptions.EntityNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A list of elements that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class UniqueEntityList\u003cT\u003e implements Iterable\u003cT\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final ObservableList\u003cT\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean contains(T toCheck) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Adds an element to the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws DuplicateEntityException if the element to add is a duplicate of an existing card in the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void add(T toAdd) throws DuplicateEntityException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new DuplicateEntityException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Replaces {@code target} in the list with {@code edited}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws DuplicateEntityException if the replacement is equivalent to another existing element in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws EntityNotFoundException  if {@code target} could not be found in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void set(T target, T edited) throws DuplicateEntityException, EntityNotFoundException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(edited);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new EntityNotFoundException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!target.equals(edited) \u0026\u0026 contains(edited)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new DuplicateEntityException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        internalList.set(index, edited);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Replaces {@code target} in the list with {@code edited}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws IndexOutOfBoundsException if {@code index} is out of range of the list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void set(Index index, T edited) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(edited);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (index.getZeroBased() \u003c 0 || index.getZeroBased() \u003e\u003d internalList.size()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        internalList.set(index.getZeroBased(), edited);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Removes the equivalent element from the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws EntityNotFoundException if no such element could be found in the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void remove(T toRemove) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new EntityNotFoundException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setAll(UniqueEntityList\u003cT\u003e replacement) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Replaces the list with {@code replacement}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setAll(List\u003cT\u003e replacement) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        internalList.setAll(replacement);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Sorts the list using comparator {@code c}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * If {isIncreasing} is true, sorts in increasing order."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void sort(Comparator\u003cT\u003e c, boolean isIncreasing) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (isIncreasing) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            internalList.sort(c);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            internalList.sort(Collections.reverseOrder(c));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Iterator\u003cT\u003e iterator() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                || (other instanceof UniqueEntityList // instanceof handles nulls"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueEntityList) other).internalList));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 145
    }
  },
  {
    "path": "src/main/java/duke/model/VersionedBakingHome.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * {@code BakingHome} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class VersionedBakingHome extends BakingHome {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final List\u003cBakingHomeCommit\u003e bakingHomeStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private boolean isTrackingEnabled \u003d true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates a {@code VersionedBakingHome} with an initial {@code ReadOnlyBakingHome}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public VersionedBakingHome(ReadOnlyBakingHome initialState) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        bakingHomeStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        bakingHomeStateList.add(new BakingHomeCommit(new BakingHome(initialState), \"initial commit\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Saves a copy of the current {@code BakingHome} state at the end of the state list if version tracking is enabled."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * If tracking is not enabled, does nothing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param commitMessage the message describing the details of the commit"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void commit(String commitMessage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (isTrackingEnabled) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            bakingHomeStateList.add(new BakingHomeCommit(new BakingHome(this), commitMessage));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            currentStatePointer++;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setVersionControl(boolean isEnabled) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.isTrackingEnabled \u003d isEnabled;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        bakingHomeStateList.subList(currentStatePointer + 1, bakingHomeStateList.size()).clear();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Restores BakingHome to its previous state."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @return the commit message of the current state."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public String undo() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        resetData(bakingHomeStateList.get(currentStatePointer).bakingHome);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return bakingHomeStateList.get(currentStatePointer + 1).commitMessage;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Restores the baking home to its previously undone state."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @return the commit message of the previous state."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public String redo() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        resetData(bakingHomeStateList.get(currentStatePointer).bakingHome);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return bakingHomeStateList.get(currentStatePointer).commitMessage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns true if {@code undo()} has baking home states to undo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns true if {@code redo()} has baking home states to redo."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return currentStatePointer \u003c bakingHomeStateList.size() - 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            super(\"Unable to undo.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            super(\"Unable to redo.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 108
    }
  },
  {
    "path": "src/main/java/duke/model/commons/Item.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.inventory.Ingredient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class Item\u003cT\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private static DecimalFormat df2 \u003d new DecimalFormat(\"#.##\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final T item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Quantity quantity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Item(T item, Quantity quantity) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public T getItem() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return item;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Quantity getQuantity() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new Quantity(quantity);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Item\u003c?\u003e item1 \u003d (Item\u003c?\u003e) o;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Objects.equals(item, item1.item);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Objects.hash(item);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Double getTotalPrice() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        if (item instanceof Product) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            Double totalPrice \u003d ((Product) item).getRetailPrice() * (quantity.getNumber());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            return Double.parseDouble(df2.format(totalPrice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        if (item instanceof Ingredient) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            Double totalPrice \u003d ((Ingredient) item).getUnitPrice() * (quantity.getNumber());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            return Double.parseDouble(df2.format(totalPrice));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return 0.0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 40,
      "liushiru": 10,
      "eugenelim97": 7
    }
  },
  {
    "path": "src/main/java/duke/model/commons/Quantity.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static duke.commons.util.AppUtil.checkNegativeDouble;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class Quantity {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private static DecimalFormat df1 \u003d new DecimalFormat(\"#.#\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private static final Double DEFAULT_NUMBER \u003d 0.0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS_QUANTITY \u003d \"Quantity must be a valid non-negative number\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_LIMIT_QUANTITY \u003d \"Upper limit of quantity is 50000\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private Double number;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Quantity(double number) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        checkNegativeDouble(number, MESSAGE_CONSTRAINTS_QUANTITY);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        checkUpperLimit(number, MESSAGE_LIMIT_QUANTITY);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        this.number \u003d Double.parseDouble(df1.format(number));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Quantity(Quantity toCopy) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.number \u003d toCopy.number;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Double getNumber() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return number;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return String.valueOf(number);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static Quantity getDefaultQuantity() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return new Quantity(DEFAULT_NUMBER);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private void checkUpperLimit(double number, String messageLimitQuantity) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (number \u003e 50000) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            throw new IllegalArgumentException(messageLimitQuantity);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 18,
      "liushiru": 7,
      "eugenelim97": 18
    }
  },
  {
    "path": "src/main/java/duke/model/exceptions/DuplicateEntityException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class DuplicateEntityException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public DuplicateEntityException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        super(\"Operation would result in duplicate entities\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 11
    }
  },
  {
    "path": "src/main/java/duke/model/exceptions/EntityNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class EntityNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 7
    }
  },
  {
    "path": "src/main/java/duke/model/inventory/Ingredient.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.model.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import static duke.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import static duke.commons.util.AppUtil.checkEmpty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import static duke.commons.util.AppUtil.checkNegativeDouble;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import static duke.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class Ingredient {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private static final String VALIDATION_FLOAT_NUMBER_REGEX \u003d \"^[-+]?[0-9]*\\\\.?[0-9]+([eE][-+]?[0-9]+)?$\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private static DecimalFormat df2 \u003d new DecimalFormat(\"#.##\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS_NAME \u003d \"Ingredient name can take any values, \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            + \"and should not be blank\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS_PRICE \u003d \"Price must be a valid non-negative number\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private static final Double DEFAULT_PRICE \u003d 0.00;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private static final String DEFAULT_REMARKS \u003d \"-\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public final Double unitPrice;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public final String remarks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Creates an ingredient."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @param name      of the ingredient."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @param unitPrice the price of the ingredient per unit."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * @param remarks      of the ingredient. For example, \"kg\", \"liter\", and additional info."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public Ingredient(String name, Double unitPrice, String remarks) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        requireAllNonNull(name, unitPrice, remarks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        checkEmpty(name, MESSAGE_CONSTRAINTS_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        checkNegativeDouble(unitPrice, MESSAGE_CONSTRAINTS_PRICE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        checkArgument(String.valueOf(unitPrice).matches(VALIDATION_FLOAT_NUMBER_REGEX), MESSAGE_CONSTRAINTS_PRICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        this.unitPrice \u003d Double.parseDouble(df2.format(unitPrice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public Ingredient(String name) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        this(name, DEFAULT_PRICE, DEFAULT_REMARKS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public Ingredient(String name, String remarks) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        this(name, DEFAULT_PRICE, remarks);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        Ingredient that \u003d (Ingredient) o;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return Objects.equals(name, that.name);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return \"Ingredient{\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                + \"name\u003d\u0027\" + name + \u0027\\\u0027\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                + \", unitPrice\u003d\" + unitPrice"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                + \", remarks\u003d\u0027\" + remarks + \u0027\\\u0027\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                + \u0027}\u0027;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Double getUnitPrice() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return unitPrice;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public String getRemarks() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return remarks;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 1,
      "liushiru": 65,
      "eugenelim97": 23
    }
  },
  {
    "path": "src/main/java/duke/model/order/Customer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.commons.util.AppUtil.checkEmpty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Represents a customer of an order."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class Customer {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Customer name and contact can take any values, \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            + \"and should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //Identity field"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //Data field"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public final String contact;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Customer(String name, String contact) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(contact);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        checkEmpty(name, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        checkEmpty(contact, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.contact \u003d contact;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return String.format(\"Name: %s Contact: %s\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                name,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                contact);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Customer customer \u003d (Customer) o;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return name.equals(customer.name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 58
    }
  },
  {
    "path": "src/main/java/duke/model/order/Order.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.inventory.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.beans.property.BooleanProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.beans.property.SimpleBooleanProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Represents an order in order list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class Order {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //Identity field"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final long id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //Data fields"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Date creationDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Customer customer;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Date deliveryDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Set\u003cItem\u003cProduct\u003e\u003e items;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final String remarks;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Status status;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final double total;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private BooleanProperty isIngredientEnough \u003d new SimpleBooleanProperty();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates an order."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Order(Customer customer, Date deliveryDate, Status status,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                 String remarks, Set\u003cItem\u003cProduct\u003e\u003e items, double total) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireAllNonNull(customer, deliveryDate, status, remarks, items, total);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.id \u003d generateId();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.creationDate \u003d generateCreationDate();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.deliveryDate \u003d deliveryDate;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.items \u003d items;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.total \u003d total;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates an order."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Order(Customer customer, Date deliveryDate, Status status,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                 String remarks, Set\u003cItem\u003cProduct\u003e\u003e items, double total,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                 Long id, Date creationDate) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireAllNonNull(customer, deliveryDate, status, remarks, items, total, id);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.creationDate \u003d creationDate;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.deliveryDate \u003d deliveryDate;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.items \u003d items;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.total \u003d total;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.isIngredientEnough \u003d new SimpleBooleanProperty();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Makes the order\u0027s {@code isIngredientEnough} property changes dynamically with the change of {@code inventory}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void listenToInventory(ObservableList\u003cItem\u003cIngredient\u003e\u003e inventory) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        updateIsIngredientEnough(inventory);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        inventory.addListener((ListChangeListener\u003cItem\u003cIngredient\u003e\u003e) c -\u003e updateIsIngredientEnough(inventory));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Status of an order."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public enum Status {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ACTIVE,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        COMPLETED,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        CANCELED"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Customer getCustomer() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return customer;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public long getId() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Date getCreationDate() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return creationDate;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Date getDeliveryDate() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return deliveryDate;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Set\u003cItem\u003cProduct\u003e\u003e getItems() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Collections.unmodifiableSet(items);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public String getRemarks() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return remarks;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public double getTotal() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return total;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean isIsIngredientEnough() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return isIngredientEnough.get();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public BooleanProperty isIngredientEnoughProperty() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return isIngredientEnough;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private long generateId() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return System.currentTimeMillis();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Date generateCreationDate() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Calendar.getInstance().getTime();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Updates the {@code isIngredientEnough} property based on {@code inventory}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void updateIsIngredientEnough(ObservableList\u003cItem\u003cIngredient\u003e\u003e inventory) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireAllNonNull(inventory);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //Key: the ingredient needed;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //Value: Amount needed for that ingredient"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Map\u003cIngredient, Double\u003e requiredIngredients \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //Iterate through all items in the order and compute ingredients needed"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (Item\u003cProduct\u003e productItem : items) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            double numberOfCopies \u003d productItem.getQuantity().getNumber();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            for (Item\u003cIngredient\u003e ingredientItem : productItem.getItem().getIngredients()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                Ingredient ingredientNeeded \u003d ingredientItem.getItem();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                Double amountNeeded \u003d ingredientItem.getQuantity().getNumber();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                //The amount of an ingredient required by an order item \u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                //the amount of that ingredient required to make one copy of that item * number of copies in the order."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                //For example, if 2 units of milk are needed to make one cheese cake,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                // and the order contains 5 cheese cakes,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                //then milk needed for cheese cake \u003d 2 * 5 \u003d 10."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                requiredIngredients.computeIfPresent(ingredientNeeded, (k, v) -\u003e v + amountNeeded * numberOfCopies);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                requiredIngredients.putIfAbsent(ingredientNeeded, amountNeeded * numberOfCopies);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        isIngredientEnough.setValue(true);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //Iterate through all ingredients needed."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requiredIngredients.forEach((requiredIngredient, requiredAmount) -\u003e {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            boolean isFound \u003d false;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            //Iterate through inventory to find the required ingredient."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            for (Item\u003cIngredient\u003e ingredientItem : inventory) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                Ingredient inventoryIngredient \u003d ingredientItem.getItem();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                double inventoryAmount \u003d ingredientItem.getQuantity().getNumber();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                if (requiredIngredient.equals(inventoryIngredient)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    isFound \u003d true;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    if (requiredAmount \u003e inventoryAmount) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        isIngredientEnough.setValue(false);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            //If ingredient needed is not in inventory"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (!isFound) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                isIngredientEnough.setValue(false);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return String.format(\"ID: %s Customer: [%s] Date: %s Status: %s Items: %s\","
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                id, customer, deliveryDate, status, items);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Order order \u003d (Order) o;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return id \u003d\u003d order.id;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Objects.hash(id);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 221
    }
  },
  {
    "path": "src/main/java/duke/model/order/OrderComparator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.order.SortOrderCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.model.order.Order.Status;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A comparator for {@code Order} that supports comparing by status, total price,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * deadline or creation date."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class OrderComparator implements Comparator\u003cOrder\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final List\u003cOrder.Status\u003e statusSequence \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final SortOrderCommand.SortCriteria criteria;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates a {@code OrderComparator}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param criteria to compare"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public OrderComparator(SortOrderCommand.SortCriteria criteria) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        assert (criteria !\u003d null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.criteria \u003d criteria;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        statusSequence.add(Order.Status.ACTIVE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        statusSequence.add(Order.Status.COMPLETED);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        statusSequence.add(Order.Status.CANCELED);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public int compare(Order o1, Order o2) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (SortOrderCommand.SortCriteria.CREATION.equals(criteria)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return o1.getCreationDate().compareTo(o2.getCreationDate());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } else if (SortOrderCommand.SortCriteria.DEADLINE.equals(criteria)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return compareDeadLine(o1, o2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } else if (SortOrderCommand.SortCriteria.STATUS.equals(criteria)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return compareStatus(o1, o2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } else if (SortOrderCommand.SortCriteria.TOTAL.equals(criteria)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return Double.compare(o1.getTotal(), o2.getTotal());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private int compareDeadLine(Order o1, Order o2) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (Status.ACTIVE.equals(o1.getStatus()) \u0026\u0026 !Status.ACTIVE.equals(o2.getStatus())) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (Status.ACTIVE.equals(o2.getStatus()) \u0026\u0026 !Status.ACTIVE.equals(o1.getStatus())) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (o1.getDeliveryDate().equals(o2.getDeliveryDate())) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } else if (o1.getDeliveryDate().before(o2.getDeliveryDate())) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private int compareStatus(Order o1, Order o2) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Integer.compare(statusSequence.indexOf(o1.getStatus()),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            statusSequence.indexOf(o2.getStatus()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 76
    }
  },
  {
    "path": "src/main/java/duke/model/product/IngredientItemList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.model.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.inventory.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class IngredientItemList extends ArrayList\u003cItem\u003cIngredient\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Double getIngredientCost() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        Double ingredientCost \u003d 0.0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        for(int i \u003d 0; i \u003c this.size(); i++) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            ingredientCost +\u003d this.get(i).getTotalPrice();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return ingredientCost;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        for (int i \u003d 0; i \u003c this.size(); i++) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            Item\u003cIngredient\u003e ingredientItem \u003d this.get(i);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            s +\u003d \"[\" + ingredientItem.getItem().getName() + \",\" + ingredientItem.getQuantity() + \"]\" + \"\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 1,
      "liushiru": 26
    }
  },
  {
    "path": "src/main/java/duke/model/product/Product.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.model.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import static duke.commons.util.AppUtil.checkEmpty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import static duke.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class Product {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final Double DEFAULT_RETAIL_PRICE \u003d 0.0;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final Double DEFAULT_INGREDIENT_COST \u003d 0.0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final Status DEFAULT_STATUS \u003d Status.ACTIVE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public enum Status {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        ACTIVE,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        ARCHIVE"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Product name can take any values, \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            + \"and should not be blank\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private String productName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private IngredientItemList ingredients;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private Double ingredientCost;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private Double retailPrice;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private Status status;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Product() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.ingredients \u003d new IngredientItemList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.ingredientCost \u003d DEFAULT_INGREDIENT_COST;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.retailPrice \u003d DEFAULT_RETAIL_PRICE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.status \u003d DEFAULT_STATUS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /** Constructor for Order parser.util*/"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Product(String productName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.productName \u003d productName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Creates a Product."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Product(String productName, String retailPrice, String ingredientCost) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        requireAllNonNull(productName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        checkEmpty(productName, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            this.productName \u003d productName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            this.ingredients \u003d new IngredientItemList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            this.ingredientCost \u003d Double.parseDouble(ingredientCost);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            this.retailPrice \u003d Double.parseDouble(retailPrice);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            this.status \u003d Status.ACTIVE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Creates a Product."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Product(String productName, String retailPrice, String ingredientCost, IngredientItemList ingredientItemList) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        requireAllNonNull(productName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        checkEmpty(productName, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            this.productName \u003d productName;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            this.ingredientCost \u003d Double.parseDouble(ingredientCost);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            this.retailPrice \u003d Double.parseDouble(retailPrice);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            this.status \u003d Status.ACTIVE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            this.ingredients \u003d ingredientItemList;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Creates a Product."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Product(String productName, Double retailPrice, Double ingredientCost,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                   IngredientItemList ingredientItemList, Product.Status status) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        requireAllNonNull(productName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        checkEmpty(productName, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            this.productName \u003d productName;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            this.ingredientCost \u003d ingredientCost;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            this.retailPrice \u003d retailPrice;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            this.status \u003d status;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            this.ingredients \u003d ingredientItemList;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /** Constructor for edit comProduct */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Product(String productName, Double retailPrice, Double ingredientCost, Product.Status status) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        requireAllNonNull(productName);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        checkEmpty(productName, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            this.productName \u003d productName;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            this.ingredientCost \u003d ingredientCost;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            this.retailPrice \u003d retailPrice;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            this.status \u003d status;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void setProductName(String productName) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.productName \u003d productName;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public String getProductName() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return productName;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public double getIngredientCost() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return ingredientCost;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void setIngredientCost(double ingredientCost) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.ingredientCost \u003d ingredientCost;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public double getRetailPrice() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return retailPrice;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void setRetailPrice(double retailPrice) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.retailPrice \u003d retailPrice;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return this.status;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void setStatus(Status status) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public IngredientItemList getIngredients() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return ingredients;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void setIngredients(IngredientItemList ingredients) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.ingredients \u003d ingredients;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        public List\u003cIngredient\u003e getIngredients() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            return this.ingredients;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            public List\u003cIngredient\u003e getIngredients() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                return this.ingredients;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            public void setIngredients(List\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                this.ingredients \u003d ingredients;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return productName + \": \" + retailPrice + \"$\" + ingredients.toString();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        duke.model.product.Product product \u003d (duke.model.product.Product) o;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return productName.equals(product.productName);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return Objects.hash(productName);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "liujiajun": 6,
      "liushiru": 183
    }
  },
  {
    "path": "src/main/java/duke/model/sale/Sale.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chekjun"
        },
        "content": "package duke.model.sale;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import static duke.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chekjun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chekjun"
        },
        "content": " * Represents a Sale in the sale list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chekjun"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chekjun"
        },
        "content": "public class Sale {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    //Identity field"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private long id;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    //Data fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private double value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private boolean isSpend;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private Date saleDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private String remarks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public Sale(String description, double value, boolean isSpend, Date saleDate, String remarks) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        requireAllNonNull(description, saleDate, value, remarks);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.id \u003d System.currentTimeMillis();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.isSpend \u003d isSpend;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        if (isSpend \u0026\u0026 value \u003e 0.0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            this.value \u003d -value;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            this.value \u003d value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.saleDate \u003d saleDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * Creates a sale."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chekjun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public Sale(long id, String description, double value, boolean isSpend, Date saleDate, String remarks) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        requireAllNonNull(id, description, value, isSpend, saleDate, remarks);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.isSpend \u003d isSpend;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        if (isSpend \u0026\u0026 value \u003e 0.0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            this.value \u003d -value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            this.value \u003d value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.saleDate \u003d saleDate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public long getId() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void setId(long id) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Date getSaleDate() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return saleDate;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void setSaleDate(Date saleDate) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.saleDate \u003d saleDate;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public double getValue() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void setValue(double value) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public boolean isSpend() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return isSpend;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void setSpend(boolean isSpend) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.isSpend \u003d isSpend;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public String getRemarks() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return remarks;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void setRemarks(String remarks) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public boolean equals(Object s) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        if (this \u003d\u003d s) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        if (s \u003d\u003d null || getClass() !\u003d s.getClass()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        Sale sale \u003d (Sale) s;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return id \u003d\u003d sale.id;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return Objects.hash(id);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chekjun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 15,
      "chekjun": 106
    }
  },
  {
    "path": "src/main/java/duke/model/shortcut/Shortcut.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.model.shortcut;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * TODO: add comments"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class Shortcut {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //Identity field"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final List\u003cString\u003e userInputs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Shortcut(String name, List\u003cString\u003e userInputs) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.userInputs \u003d userInputs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public List\u003cString\u003e getUserInputs() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return userInputs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (String userInput : userInputs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            stringBuilder.append(userInput).append(\"; \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Shortcut shortcut \u003d (Shortcut) o;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Objects.equals(name, shortcut.name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 54
    }
  },
  {
    "path": "src/main/java/duke/storage/BakingHomeStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.ReadOnlyBakingHome;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Represents a storage for {@link duke.model.BakingHome}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public interface BakingHomeStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    java.nio.file.Path getBakingHomeFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns BakingHome data as a {@link ReadOnlyBakingHome}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    Optional\u003cReadOnlyBakingHome\u003e readBakingHome() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Saves the given {@link ReadOnlyBakingHome} to the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param bakingHome cannot be null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    void saveBakingHome(ReadOnlyBakingHome bakingHome) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 35
    }
  },
  {
    "path": "src/main/java/duke/storage/JsonAdaptedIngredient.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.inventory.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class JsonAdaptedIngredient {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Double unitPrice;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final String remarks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Constructs a {@code JsonAdaptedIngredient} with the given details."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public JsonAdaptedIngredient("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            @JsonProperty(\"unitPrice\") Double unitPrice,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            @JsonProperty(\"remarks\") String remarks) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.unitPrice \u003d unitPrice;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates a jackson-friendly ingredient from {@code source}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public JsonAdaptedIngredient(Ingredient source) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.name \u003d source.name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.unitPrice \u003d source.unitPrice;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.remarks \u003d source.remarks;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Converts a given {@code Ingredient} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Ingredient toModelType() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new Ingredient(name, unitPrice, remarks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 40
    }
  },
  {
    "path": "src/main/java/duke/storage/JsonAdaptedIngredientItem.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.commons.Quantity;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.inventory.Ingredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class JsonAdaptedIngredientItem {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final JsonAdaptedIngredient ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final double amount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Constructs a {@code JsonAdaptedIngredientItem} with the given details."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public JsonAdaptedIngredientItem("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            @JsonProperty(\"ingredient\") JsonAdaptedIngredient ingredient,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            @JsonProperty(\"amount\") double amount) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.ingredient \u003d ingredient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Converts a given {@code Item\u003cIngredient\u003e} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public JsonAdaptedIngredientItem(Item\u003cIngredient\u003e source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.ingredient \u003d new JsonAdaptedIngredient(source.getItem());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.amount \u003d source.getQuantity().getNumber();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Converts this Jackson-friendly adapted object into the model\u0027s {@code Item\u003cIngredient\u003e} object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Item\u003cIngredient\u003e toModelType() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new Item\u003cIngredient\u003e("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                ingredient.toModelType(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                new Quantity(amount)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 41
    }
  },
  {
    "path": "src/main/java/duke/storage/JsonAdaptedOrder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Customer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Order;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Jackson-friendly version of {@link duke.model.order.Order}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class JsonAdaptedOrder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final long id;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Date creationDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final String contact;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final String remarks;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Date deliveryDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Order.Status status;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final double total;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private List\u003cJsonAdaptedProductItem\u003e items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Constructs a {@code JsonAdaptedOrder} with the given order details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public JsonAdaptedOrder(@JsonProperty(\"id\") long id,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            @JsonProperty(\"creationDate\")  Date creationDate,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            @JsonProperty(\"name\")  String name,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            @JsonProperty(\"contact\") String contact,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            @JsonProperty(\"remarks\")  String remarks,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            @JsonProperty(\"deliveryDate\") Date deliveryDate,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            @JsonProperty(\"status\") Order.Status status,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            @JsonProperty(\"total\") double total,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            @JsonProperty(\"items\") List\u003cJsonAdaptedProductItem\u003e items) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.creationDate \u003d creationDate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.contact \u003d contact;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.deliveryDate \u003d deliveryDate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.total \u003d total;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.items \u003d items;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Converts a given {@code Order} into this class for Jackson use."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public JsonAdaptedOrder(Order source) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.id \u003d source.getId();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.creationDate \u003d source.getCreationDate();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.name \u003d source.getCustomer().name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.contact \u003d source.getCustomer().contact;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.remarks \u003d source.getRemarks();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.deliveryDate \u003d source.getDeliveryDate();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.status \u003d source.getStatus();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.total \u003d source.getTotal();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (Item\u003cProduct\u003e productItem : source.getItems()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            this.items.add("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    new JsonAdaptedProductItem("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            new JsonAdaptedProduct(productItem.getItem()),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            productItem.getQuantity().getNumber()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            );"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Converts this Jackson-friendly adapted order object into the model\u0027s {@code Order} object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Order toModelType() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Set\u003cItem\u003cProduct\u003e\u003e productSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (JsonAdaptedProductItem jsonAdaptedProductItem : items) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            productSet.add(jsonAdaptedProductItem.toModelType());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new Order("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                new Customer(name, contact),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                deliveryDate,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                status,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                remarks,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                productSet,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                total,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                id,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                creationDate"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 100
    }
  },
  {
    "path": "src/main/java/duke/storage/JsonAdaptedProduct.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.inventory.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.product.IngredientItemList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class JsonAdaptedProduct {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final String productName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private List\u003cJsonAdaptedIngredientItem\u003e ingredientItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Double ingredientCost;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Double retailPrice;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Product.Status status;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Constructs a {@code JsonAdaptedProduct} with the given order details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public JsonAdaptedProduct("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            @JsonProperty(\"productName\") String productName,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            @JsonProperty(\"ingredientItems\") List\u003cJsonAdaptedIngredientItem\u003e ingredientItems,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            @JsonProperty(\"ingredientCost\") Double ingredientCost,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            @JsonProperty(\"retailPrice\") Double retailPrice,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            @JsonProperty(\"status\") Product.Status status) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.productName \u003d productName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.ingredientItems \u003d ingredientItems;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.ingredientCost \u003d ingredientCost;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.retailPrice \u003d retailPrice;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates a jackson-friendly product from {@code source}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public JsonAdaptedProduct(Product source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.productName \u003d source.getProductName();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.ingredientCost \u003d source.getIngredientCost();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.retailPrice \u003d source.getRetailPrice();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.status \u003d source.getStatus();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (Item\u003cIngredient\u003e ingredientItem : source.getIngredients()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            this.ingredientItems.add("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    new JsonAdaptedIngredientItem("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            new JsonAdaptedIngredient(ingredientItem.getItem()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            ingredientItem.getQuantity().getNumber()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Converts a given {@code Product} into this class for Jackson use."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Product toModelType() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Product product \u003d new Product();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        product.setProductName(productName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        product.setIngredientCost(ingredientCost);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        product.setRetailPrice(retailPrice);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        product.setStatus(this.status);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        IngredientItemList ingredientItemList \u003d new IngredientItemList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (JsonAdaptedIngredientItem jsonAdaptedIngredientItem : ingredientItems) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            ingredientItemList.add(jsonAdaptedIngredientItem.toModelType());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        product.setIngredients(ingredientItemList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return product;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 74
    }
  },
  {
    "path": "src/main/java/duke/storage/JsonAdaptedProductItem.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.commons.Quantity;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class JsonAdaptedProductItem {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final JsonAdaptedProduct product;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final double amount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Constructs a {@code JsonAdaptedProductItem} with the given details."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public JsonAdaptedProductItem("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            @JsonProperty(\"product\") JsonAdaptedProduct product,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            @JsonProperty(\"amount\") double amount) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.product \u003d product;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Converts a given {@code Item\u003cProduct\u003e} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public JsonAdaptedProductItem(Item\u003cProduct\u003e source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.product \u003d new JsonAdaptedProduct(source.getItem());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.amount \u003d source.getQuantity().getNumber();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Converts this Jackson-friendly adapted object into the model\u0027s {@code Item\u003cProduct\u003e} object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Item\u003cProduct\u003e toModelType() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new Item\u003cProduct\u003e("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                product.toModelType(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                new Quantity(amount)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 41
    }
  },
  {
    "path": "src/main/java/duke/storage/JsonAdaptedSale.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Order;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.sale.Sale;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Jackson-friendly version of {@link Order}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class JsonAdaptedSale {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final long id;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final double value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private final boolean isSpend;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Date saleDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final String remarks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Constructs a {@code JsonAdaptedSale} with the given sale details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public JsonAdaptedSale(@JsonProperty(\"id\") long id,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                           @JsonProperty(\"description\")  String description,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                           @JsonProperty(\"value\")  double value,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                           @JsonProperty(\"isSpend\") boolean isSpend,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                           @JsonProperty(\"saleDate\") Date saleDate,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                           @JsonProperty(\"remarks\")  String remarks) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.saleDate \u003d saleDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.isSpend \u003d isSpend;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Converts a given {@code Sale} into this class for Jackson use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public JsonAdaptedSale(Sale source) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.id \u003d source.getId();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.remarks \u003d source.getRemarks();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.value \u003d source.getValue();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.isSpend \u003d source.isSpend();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.saleDate \u003d source.getSaleDate();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.description \u003d source.getDescription();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Converts this Jackson-friendly adapted sale object into the model\u0027s {@code Sale} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Sale toModelType() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return new Sale(id, description, value, isSpend, saleDate, remarks);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 52,
      "chekjun": 6
    }
  },
  {
    "path": "src/main/java/duke/storage/JsonAdaptedShortcut.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.shortcut.Shortcut;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class JsonAdaptedShortcut {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final List\u003cString\u003e userInputs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Constructs a {@code JsonAdaptedShortcut} with the given details."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public JsonAdaptedShortcut("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            @JsonProperty(\"userInputs\") List\u003cString\u003e userInputs) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.userInputs \u003d userInputs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates a jackson-friendly shortcut from {@code source}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public JsonAdaptedShortcut(Shortcut source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.name \u003d source.getName();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.userInputs \u003d source.getUserInputs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Converts a given {@code Shortcut} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Shortcut toModelType() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new Shortcut(name, userInputs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 38
    }
  },
  {
    "path": "src/main/java/duke/storage/JsonBakingHomeStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.util.FileUtil;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.ReadOnlyBakingHome;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A class to access BakingHome data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class JsonBakingHomeStorage implements BakingHomeStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonBakingHomeStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public JsonBakingHomeStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Path getBakingHomeFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Optional\u003cReadOnlyBakingHome\u003e readBakingHome() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return readBakingHome(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Similar to {@link #readBakingHome()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Optional\u003cReadOnlyBakingHome\u003e readBakingHome(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Optional\u003cJsonSerializableBakingHome\u003e jsonBakingHome \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                filePath, JsonSerializableBakingHome.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (jsonBakingHome.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return Optional.of(jsonBakingHome.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void saveBakingHome(ReadOnlyBakingHome bakingHome) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        saveBakingHome(bakingHome, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Similar to {@link #saveBakingHome(ReadOnlyBakingHome)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void saveBakingHome(ReadOnlyBakingHome bakingHome, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(bakingHome);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableBakingHome(bakingHome), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 80
    }
  },
  {
    "path": "src/main/java/duke/storage/JsonSerializableBakingHome.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.BakingHome;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.ReadOnlyBakingHome;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.inventory.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Order;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * An Immutable BakingHome that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "@JsonRootName(value \u003d \"bakinghome\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "class JsonSerializableBakingHome {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTITY \u003d \"Duplicate entities detected.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final List\u003cJsonAdaptedOrder\u003e orders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final List\u003cJsonAdaptedProduct\u003e products \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final List\u003cJsonAdaptedIngredientItem\u003e inventory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final List\u003cJsonAdaptedIngredientItem\u003e shoppingList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final List\u003cJsonAdaptedSale\u003e sales \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final List\u003cJsonAdaptedShortcut\u003e shortcuts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Constructs a {@code JsonSerializableBakingHome}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public JsonSerializableBakingHome(@JsonProperty(\"orders\") List\u003cJsonAdaptedOrder\u003e orders) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.orders.addAll(orders);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Converts a given {@code ReadOnlyBakingHome} into this class for Jackson use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableBakingHome}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public JsonSerializableBakingHome(ReadOnlyBakingHome source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        orders.addAll(source.getOrderList().stream().map(JsonAdaptedOrder::new)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        products.addAll(source.getProductList().stream().map(JsonAdaptedProduct::new)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        inventory.addAll(source.getInventoryList().stream().map(JsonAdaptedIngredientItem::new)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        shoppingList.addAll(source.getShoppingList().stream().map(JsonAdaptedIngredientItem::new)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        shortcuts.addAll(source.getShortcutList().stream().map(JsonAdaptedShortcut::new)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        sales.addAll(source.getSaleList().stream().map(JsonAdaptedSale::new)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public BakingHome toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        BakingHome bakingHome \u003d new BakingHome();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (JsonAdaptedOrder jsonAdaptedOrder : orders) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            Order order \u003d jsonAdaptedOrder.toModelType();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (bakingHome.hasOrder(order)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ENTITY);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            bakingHome.addOrder(order);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (JsonAdaptedProduct jsonAdaptedProduct : products) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            Product product \u003d jsonAdaptedProduct.toModelType();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            bakingHome.addProduct(product);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (JsonAdaptedIngredientItem jsonAdaptedIngredientItem : inventory) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            Item\u003cIngredient\u003e ingredientItem \u003d jsonAdaptedIngredientItem.toModelType();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            bakingHome.addInventory(ingredientItem);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (JsonAdaptedIngredientItem jsonAdaptedIngredientItem : shoppingList) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            Item\u003cIngredient\u003e ingredientItem \u003d jsonAdaptedIngredientItem.toModelType();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            bakingHome.addShoppingList(ingredientItem);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (JsonAdaptedShortcut jsonAdaptedShortcut : shortcuts) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            bakingHome.setShortcut(jsonAdaptedShortcut.toModelType());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (JsonAdaptedSale jsonAdaptedSale : sales) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            bakingHome.addSale(jsonAdaptedSale.toModelType());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return bakingHome;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 102
    }
  },
  {
    "path": "src/main/java/duke/ui/IngredientCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.inventory.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.ui.commons.TableUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class IngredientCard extends AnchorPane {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private Product product;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private Label productName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private AnchorPane tablePane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Creates an Ingredient Card with the given product, to show the ingredients in the product"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @param product"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public IngredientCard(Product product) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/IngredientCard.fxml\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.product \u003d product;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        setUpCard();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private void config(Node node) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        AnchorPane.setTopAnchor(node, 0.0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        AnchorPane.setBottomAnchor(node, 0.0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        AnchorPane.setRightAnchor(node, 0.0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        AnchorPane.setLeftAnchor(node, 0.0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private void setUpCard() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        productName.setText(product.getProductName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        tablePane.getChildren().add(getIngredientTable());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private TableView\u003cItem\u003cIngredient\u003e\u003e getIngredientTable() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        javafx.scene.control.TableView\u003cItem\u003cIngredient\u003e\u003e ingredientTable \u003d new javafx.scene.control.TableView\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        config(ingredientTable);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        ingredientTable.setColumnResizePolicy(javafx.scene.control.TableView.CONSTRAINED_RESIZE_POLICY);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        ObservableList\u003cItem\u003cIngredient\u003e\u003e ingredientObservableList \u003d FXCollections.observableList(product.getIngredients());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        ingredientTable.setItems(ingredientObservableList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        TableUtil.setUpIndexColumn(ingredientTable);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        TableColumn\u003cItem\u003cIngredient\u003e, String\u003e ingredientColumn \u003d new TableColumn\u003c\u003e(\"Ingredient\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        ingredientColumn.setResizable(true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        ingredientColumn.setCellValueFactory(itemStringCellDataFeatures -\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                new SimpleStringProperty(itemStringCellDataFeatures.getValue().getItem().getName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        TableColumn\u003cItem\u003cIngredient\u003e, String\u003e quantityColumn \u003d new TableColumn\u003c\u003e(\"Quantity\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        quantityColumn.setResizable(true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        quantityColumn.setCellValueFactory(itemStringCellDataFeatures -\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                new SimpleStringProperty(String.valueOf(itemStringCellDataFeatures.getValue().getQuantity().getNumber())));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        ingredientTable.getColumns().addAll(ingredientColumn, quantityColumn);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return ingredientTable;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liushiru": 81
    }
  },
  {
    "path": "src/main/java/duke/ui/InventoryPage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.inventory.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.scene.control.TableCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class InventoryPage extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String FXML \u003d \"InventoryPage.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private TableView inventoryListTable;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private ObservableList\u003cItem\u003cIngredient\u003e\u003e inventoryList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * Creates a constructor for InventoryPage and sets the ObservableList of Items to be the 1 in the input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * Sets up the table view, its columns and data inputted"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * @param inventoryList An observable list containing the ingredients to be displayed in the inventory list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public InventoryPage(ObservableList\u003cItem\u003cIngredient\u003e\u003e inventoryList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        this.inventoryList \u003d inventoryList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        setupTable();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    void setupTable() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        inventoryListTable.setItems(inventoryList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        inventoryListTable.getColumns().clear();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        setIndexColumn();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        setInventoryInfoColumns();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    void setIndexColumn() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        TableColumn\u003cItem\u003cIngredient\u003e, Void\u003e indexColumn \u003d new TableColumn\u003c\u003e(\"S/N\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        indexColumn.setResizable(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        //Solution below adapted from: https://stackoverflow.com/questions/31212400/adding-index-of-records-in-a-javafx-tableview-column"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        ///////////////////////////////////////////////////////index column"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            indexColumn.setCellFactory(col -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                // just a default table cell:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                TableCell\u003cItem\u003cIngredient\u003e, Void\u003e cell \u003d new TableCell\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                cell.textProperty().bind(Bindings.createStringBinding(() -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                    if (cell.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                        return null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                        return Integer.toString(cell.getIndex() + 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                }, cell.emptyProperty(), cell.indexProperty()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                return cell;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            });"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        ////////////////////////////////index column created"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        inventoryListTable.getColumns().add(indexColumn);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        indexColumn.setMinWidth(50);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        indexColumn.setMaxWidth(50);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    //Solution adapted from: http://fxapps.blogspot.com/2012/09/showing-object-properties-in-tableview.html"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    void setInventoryInfoColumns() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        TableColumn\u003cItem\u003cIngredient\u003e, String\u003e ingredientColumn \u003d new TableColumn\u003c\u003e(\"Ingredient\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        ingredientColumn.setResizable(true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        ingredientColumn.setCellValueFactory(itemStringCellDataFeatures -\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                new SimpleStringProperty(itemStringCellDataFeatures.getValue().getItem().getName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        TableColumn\u003cItem\u003cIngredient\u003e, String\u003e quantityColumn \u003d new TableColumn\u003c\u003e(\"Quantity\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        quantityColumn.setResizable(true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        quantityColumn.setCellValueFactory(itemStringCellDataFeatures -\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                new SimpleStringProperty(String.valueOf(itemStringCellDataFeatures.getValue().getQuantity().getNumber())));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        TableColumn\u003cItem\u003cIngredient\u003e, String\u003e unitColumn \u003d new TableColumn\u003c\u003e(\"Remarks\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        unitColumn.setResizable(true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        unitColumn.setCellValueFactory(itemStringCellDataFeatures -\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                new SimpleStringProperty(itemStringCellDataFeatures.getValue().getItem().getRemarks()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        inventoryListTable.getColumns().addAll(ingredientColumn, quantityColumn, unitColumn);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "liujiajun": 14,
      "eugenelim97": 78
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.jfoenix.controls.JFXButton;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import com.jfoenix.controls.JFXTextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.product.ShowProductCommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.AutoCompleter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * The Main Window."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Provides the basic application layout containing a popup bar, a text field, a side bar,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * and space where different pages can be displayed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private OrderPage orderPage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private ProductPage productPage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private SalePage salePage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private InventoryPage inventoryPage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private ShoppingPage shoppingPage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private List\u003cString\u003e inputHistory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private int historyIndex \u003d inputHistory.size();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //Popup box"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox popUp;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label popUpLabel;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private JFXButton popUpButton;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private JFXTextField userInput;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //Main page"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Label currentPage;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private AnchorPane pagePane;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //Sidebar"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private JFXButton productButton;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private JFXButton orderButton;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private JFXButton inventoryButton;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private JFXButton shoppingButton;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private JFXButton saleButton;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates the Main Window."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param primaryStage The stage to display MainWindow on."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param logic        Logic component"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.popUp.setVisible(false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.userInput.addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (event.getCode() \u003d\u003d KeyCode.TAB) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                autocomplete();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns the stage that MainWindow is displayed on."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates Order, Product and Sales pages that fill up the placeholder window."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        orderPage \u003d new OrderPage(logic.getFilteredOrderList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        productPage \u003d new ProductPage(logic.getFilteredProductList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        salePage \u003d new SalePage(logic.getFilteredSaleList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        inventoryPage \u003d new InventoryPage(logic.getFilteredInventoryList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        shoppingPage \u003d new ShoppingPage(logic.getFilteredShoppingList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        setAllPageAnchor(orderPage.getRoot(), productPage.getRoot(), salePage.getRoot(),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                inventoryPage.getRoot(), shoppingPage.getRoot());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        popUp.setVisible(false);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        inputHistory.add(input);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        historyIndex \u003d inputHistory.size();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(input);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            showPage(commandResult);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            showMessagePopUp(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } catch (CommandException | ParseException | IllegalArgumentException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            showErrorPopUp(e.getMessage());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            if (historyIndex \u003e 0) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                loadPreviousText();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            if (historyIndex \u003c (inputHistory.size() - 1)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                loadNextText();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        case TAB:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            autocomplete();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        case ESCAPE:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            popUp.setVisible(false);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private void loadPreviousText() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        historyIndex--;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        loadText();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private void loadNextText() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        historyIndex++;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        loadText();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private void loadText() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        String history \u003d inputHistory.get(historyIndex);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        userInput.setText(history);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        userInput.setFocusTraversable(false);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        userInput.positionCaret(history.length());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //@@author liujiajun"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void autocomplete() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (logic.isAutoCompletable(new AutoCompleter.UserInputState("
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                userInput.getText(),"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                userInput.getCaretPosition()"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ))) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            AutoCompleter.UserInputState newState \u003d logic.complete();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            this.userInput.setText(newState.userInputString);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            this.userInput.positionCaret(newState.caretPosition);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Hides the pop up bar."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleOk() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        popUp.setVisible(false);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void handleShowRecipe() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        showProductPage();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void handleShowOrder() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        showOrderPage();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void handleShowInventory() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        showInventoryPage();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private void handleShowShopping() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        showShoppingPage();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private void handleShowSale() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        showSalePage();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Shows the pop up bar displaying a {@code message}."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void showMessagePopUp(String message) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        popUpLabel.setText(message);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        popUpButton.getStyleClass().clear();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        popUpButton.getStyleClass().add(\"message-popup\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        popUp.getStyleClass().clear();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        popUp.getStyleClass().add(\"message-popup\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        popUp.setVisible(true);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Shows the pop up bar displaying a {@code errorMessage} signifying an error."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void showErrorPopUp(String errorMessage) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        popUpLabel.setText(errorMessage);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        popUpButton.getStyleClass().clear();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        popUpButton.getStyleClass().add(\"error-popup\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        popUp.getStyleClass().clear();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        popUp.getStyleClass().add(\"error-popup\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        popUp.setVisible(true);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private void showPage(CommandResult commandResult) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        CommandResult.DisplayedPage toDisplay \u003d commandResult.getDisplayedPage();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        switch (toDisplay) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        case SALE:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            showSalePage();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        case ORDER:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            showOrderPage();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        case PRODUCT:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            if (commandResult instanceof ShowProductCommandResult) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                showProductDetail(((ShowProductCommandResult) commandResult).getIndex());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                showProductList();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        case INVENTORY:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            showInventoryPage();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        case SHOPPING:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            showShoppingPage();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void showOrderPage() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        pagePane.getChildren().clear();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        pagePane.getChildren().add(orderPage.getRoot());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        productButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        orderButton.setButtonType(JFXButton.ButtonType.RAISED);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        inventoryButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        shoppingButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        saleButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        currentPage.setText(\"Orders\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private void showProductPage() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        pagePane.getChildren().clear();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        pagePane.getChildren().add(productPage.getRoot());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        productButton.setButtonType(JFXButton.ButtonType.RAISED);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        orderButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        inventoryButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        shoppingButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        saleButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        currentPage.setText(\"Products\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private void showProductList() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        showProductPage();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        productPage.showProductList();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private void showProductDetail(Index productIndex) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        showProductPage();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        productPage.showProductDetail(productIndex);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void showInventoryPage() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        pagePane.getChildren().clear();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        pagePane.getChildren().add(inventoryPage.getRoot());"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        productButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        orderButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        inventoryButton.setButtonType(JFXButton.ButtonType.RAISED);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        shoppingButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        saleButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        currentPage.setText(\"Inventory\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private void showShoppingPage() {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        pagePane.getChildren().clear();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        pagePane.getChildren().add(shoppingPage.getRoot());"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        productButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        orderButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        inventoryButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        shoppingButton.setButtonType(JFXButton.ButtonType.RAISED);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        saleButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        currentPage.setText(\"Shopping List\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private void showSalePage() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        pagePane.getChildren().clear();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        pagePane.getChildren().add(salePage.getRoot());"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        productButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        orderButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        inventoryButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        shoppingButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        saleButton.setButtonType(JFXButton.ButtonType.RAISED);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        currentPage.setText(\"Sales\");"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    void disableInput() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.setDisable(true);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void setAllPageAnchor(AnchorPane... pages) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (AnchorPane page : pages) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            AnchorPane.setLeftAnchor(page, 0.0);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            AnchorPane.setRightAnchor(page, 0.0);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            AnchorPane.setTopAnchor(page, 0.0);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            AnchorPane.setBottomAnchor(page, 4.0);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 188,
      "liushiru": 89,
      "chekjun": 10,
      "-": 54,
      "eugenelim97": 33
    }
  },
  {
    "path": "src/main/java/duke/ui/OrderCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.TimeParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Order;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.animation.Animation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": " * Controller for OrderCard. An OrderCard displays an order, including its creation time, customer, items,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": " * delivery date, index, and status."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class OrderCard extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String FXML \u003d \"OrderCard.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private AnchorPane innerPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private FlowPane itemFlow;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Label creationDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Label index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Label contact;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Label remarks;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Label total;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Label inventoryStatus;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates a card displaying the {@code order}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param order          to display"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param displayedIndex the index of the order to show on the card"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public OrderCard(Order order, int displayedIndex) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //Fill order details"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        id.setText(Long.toString(order.getId()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        creationDate.setText(order.getCreationDate().toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        index.setText(displayedIndex + \".\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        deadline.setText(TimeParser.convertDateToString(order.getDeliveryDate()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        name.setText(order.getCustomer().name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        contact.setText(order.getCustomer().contact);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        remarks.setText(order.getRemarks());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        total.setText(Double.toString(order.getTotal()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        status.setText(order.getStatus().toString().toLowerCase());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        status.getStyleClass().clear();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        status.getStyleClass().addAll(\"status-\" + order.getStatus().toString().toLowerCase());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (Item\u003cProduct\u003e item : order.getItems()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            itemFlow.getChildren().add("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    new OrderItemBox(item.getItem().getProductName(), item.getQuantity().getNumber())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            );"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //Setup listener to update inventory status"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        updateInventoryStatus(order.isIsIngredientEnough(), order.getStatus());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        order.isIngredientEnoughProperty().addListener(((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            updateInventoryStatus(newValue, order.getStatus());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //Clock to update deadline"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        initializeClock(order);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void updateInventoryStatus(boolean isIngredientEnough, Order.Status status) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!isIngredientEnough \u0026\u0026 status.equals(Order.Status.ACTIVE)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            inventoryStatus.setVisible(true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            inventoryStatus.setVisible(false);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void initializeClock(Order order) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Timeline clock \u003d new Timeline(new KeyFrame(Duration.ZERO, e -\u003e {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            deadline.setText(TimeParser.convertDateToString(order.getDeliveryDate()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (Order.Status.ACTIVE.equals(order.getStatus())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                \u0026\u0026 order.getDeliveryDate().before(Calendar.getInstance().getTime())) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                deadline.getStyleClass().clear();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                deadline.getStyleClass().add(\"deadline-overdue\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                deadline.getStyleClass().clear();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                deadline.getStyleClass().add(\"deadline-normal\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }), new KeyFrame(Duration.seconds(2)));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        clock.setCycleCount(Animation.INDEFINITE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        clock.play();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 111,
      "liushiru": 4
    }
  },
  {
    "path": "src/main/java/duke/ui/OrderItemBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Controller for order item."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * An order item includes product name and quantity."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class OrderItemBox extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Label itemName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Label itemQuantity;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates a OrderItemBox."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param name of product"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param quantity of product."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public OrderItemBox(String name, double quantity) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/OrderItemBox.fxml\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        itemName.setText(name);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        itemQuantity.setText(Double.toString(quantity));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 38
    }
  },
  {
    "path": "src/main/java/duke/ui/OrderPage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Order;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Controller class for order page."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * An order page contains order cards and a statistics bar."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class OrderPage extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String FXML \u003d \"OrderPage.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(OrderPage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private ListView\u003cOrder\u003e orderListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Label active;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Label finished;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Label canceled;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates an order page displaying orders from {@code orderList}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public OrderPage(ObservableList\u003cOrder\u003e orderList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        logger.info(\"Initializing Order Page\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        orderListView.setItems(orderList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        orderListView.setCellFactory(listView -\u003e new OrderListViewCell());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        updateStatistics(orderList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        orderList.addListener((ListChangeListener\u003cOrder\u003e) change -\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            updateStatistics(orderList)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //Since clicking on ListView results in unwanted changed of colors"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //of list cell elements (for example, label colors),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //clicking should be disabled."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        disableMouseClick();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    static class OrderListViewCell extends ListCell\u003cOrder\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        protected void updateItem(Order order, boolean empty) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            super.updateItem(order, empty);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            updateSelected(false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (empty || order \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                setGraphic(new OrderCard(order, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void updateStatistics(ObservableList\u003cOrder\u003e orders) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        int activeCount \u003d 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        int finishedCount \u003d 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        int canceledCount \u003d 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (Order order : orders) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (Order.Status.ACTIVE.equals(order.getStatus())) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                activeCount++;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            } else if (Order.Status.COMPLETED.equals(order.getStatus())) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                finishedCount++;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                canceledCount++;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        active.setText(activeCount + \" active\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        finished.setText(finishedCount + \" completed\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        canceled.setText(canceledCount + \" canceled\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void disableMouseClick() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        orderListView.addEventFilter(MouseEvent.MOUSE_PRESSED, Event::consume);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 95
    }
  },
  {
    "path": "src/main/java/duke/ui/ProductPage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.ui.commons.TableUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.scene.control.SplitPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class ProductPage extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private static final String FXML \u003d \"ProductPage.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private final Double FULL_PAGE \u003d 1.0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private final Double HALF_PAGE \u003d 0.5;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ProductPage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private SplitPane splitPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private AnchorPane listPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private AnchorPane cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private ObservableList\u003cProduct\u003e productList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public ProductPage(ObservableList\u003cProduct\u003e productList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        requireNonNull(productList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.productList \u003d productList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        showProductList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void showProductList() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        listPane.getChildren().add(setUpListTable());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        splitPane.setDividerPositions(FULL_PAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void showProductDetail(Index index) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        Product product \u003d productList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        IngredientCard ingredientCard \u003d new IngredientCard(product);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        config(ingredientCard);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        AnchorPane.setRightAnchor(ingredientCard, 0.0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        cardPane.getChildren().clear();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        cardPane.getChildren().add(ingredientCard);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        splitPane.setDividerPositions(HALF_PAGE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private void config(Node node) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        AnchorPane.setTopAnchor(node, 0.0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        AnchorPane.setBottomAnchor(node, 0.0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        AnchorPane.setRightAnchor(node, 0.0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        AnchorPane.setLeftAnchor(node, 0.0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private TableView setUpListTable() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        TableView\u003cProduct\u003e productListTable \u003d new TableView\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        config(productListTable);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        productListTable.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        setProperty(productListTable, productList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        TableUtil.setUpIndexColumn(productListTable);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        setProductInfoColumns(productListTable);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return productListTable;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private void setProperty(TableView table, ObservableList observableList) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        table.setItems(observableList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        table.getColumns().clear();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    void setProductInfoColumns(TableView table) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        TableColumn\u003cProduct, String\u003e nameColumn \u003d new TableColumn\u003c\u003e(\"Name\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        nameColumn.setResizable(true);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        nameColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"productName\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        TableColumn\u003cProduct, Double\u003e priceColumn \u003d new TableColumn\u003c\u003e(\"Retail Price\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        priceColumn.setResizable(true);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        priceColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"retailPrice\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        TableColumn\u003cProduct, Double\u003e costColumn \u003d new TableColumn\u003c\u003e(\"Ingredient Cost\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        costColumn.setResizable(true);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        costColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"ingredientCost\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        TableColumn\u003cProduct, Double\u003e statusColumn \u003d new TableColumn\u003c\u003e(\"status\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        statusColumn.setResizable(true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        statusColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"status\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        table.getColumns().addAll(nameColumn, priceColumn,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                costColumn, statusColumn);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private IngredientCard getIngredientCard(Index index) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        Product product \u003d productList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return new IngredientCard(product);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liushiru": 106
    }
  },
  {
    "path": "src/main/java/duke/ui/SaleCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chekjun"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.logic.parser.commons.TimeParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.model.sale.Sale;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chekjun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chekjun"
        },
        "content": " * Controller for SaleCard."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chekjun"
        },
        "content": " * A SaleCard displays a sale,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chekjun"
        },
        "content": " * including its creation time, description,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chekjun"
        },
        "content": " * sale date, value, and remarks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chekjun"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chekjun"
        },
        "content": "public class SaleCard extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private static final String FXML \u003d \"SaleCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private AnchorPane innerPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private FlowPane itemFlow;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private Label value;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private Label saleDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private Label remarks;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public SaleCard(Sale sale, int displayedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        id.setText(\"ID: \" + Long.toString(sale.getId()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        double tempValue \u003d sale.getValue();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        if (sale.isSpend() \u0026\u0026 tempValue \u003e 0.0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            tempValue \u003d -tempValue;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        DecimalFormat df2 \u003d new DecimalFormat(\"#.##\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        value.setText(\"$\" + df2.format(tempValue));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        saleDate.setText(TimeParser.convertDateToString(sale.getSaleDate()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        description.setText(\"Sale description: \" + sale.getDescription());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        remarks.setText(\"Remarks: \" + sale.getRemarks());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chekjun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chekjun": 50
    }
  },
  {
    "path": "src/main/java/duke/ui/SalePage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chekjun"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.model.sale.Sale;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class SalePage extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String FXML \u003d \"SalePage.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private Label revenue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private Label cost;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private Label profit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private ListView\u003cSale\u003e saleListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public SalePage(ObservableList\u003cSale\u003e saleList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        saleListView.setItems(saleList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        saleListView.setCellFactory(listView -\u003e new SaleListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        updateStatistics(saleList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        saleList.addListener((ListChangeListener\u003cSale\u003e) change -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            updateStatistics(saleList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    static class SaleListViewCell extends ListCell\u003cSale\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        protected void updateItem(Sale sale, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            super.updateItem(sale, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            updateSelected(false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            if (empty || sale \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                setGraphic(new SaleCard(sale, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private void updateStatistics(ObservableList\u003cSale\u003e saleList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        double tempRevenue \u003d 0.00;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        double tempCost \u003d 0.00;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        for (Sale sale : saleList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            if (sale.isSpend()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                tempCost +\u003d sale.getValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                tempRevenue +\u003d sale.getValue();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        DecimalFormat df2 \u003d new DecimalFormat(\"#.##\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        revenue.setText(\"Revenue: $\" + df2.format(tempRevenue));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        cost.setText(\"Cost: $\" + df2.format(tempRevenue));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        profit.setText(\"Profit: $\" + df2.format(tempRevenue - tempCost));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chekjun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 3,
      "chekjun": 63
    }
  },
  {
    "path": "src/main/java/duke/ui/ShoppingPage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import duke.model.commons.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.inventory.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import javafx.beans.value.ObservableFloatValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.scene.control.TableCell;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "public class ShoppingPage extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private static final String FXML \u003d \"ShoppingPage.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private static DecimalFormat df2 \u003d new DecimalFormat(\"#.##\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private Label totalCostLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private TableView shoppingListTable;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private ObservableList\u003cItem\u003cIngredient\u003e\u003e shoppingList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * Creates a constructor for ShoppingPage and sets the ObservableList of Items to be the 1 in the input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * Sets up the table view, its columns and data inputted"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     * @param shoppingList An observable list containing the ingredients to be displayed in the shopping list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public ShoppingPage(ObservableList\u003cItem\u003cIngredient\u003e\u003e shoppingList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        this.shoppingList \u003d shoppingList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        setupTable();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        setupTotalCostLabel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    void setupTable() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        shoppingListTable.setItems(shoppingList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        shoppingListTable.getColumns().clear();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        setIndexColumn();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        setShoppingInfoColumns();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    void setIndexColumn() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        TableColumn\u003cItem\u003cIngredient\u003e, Void\u003e indexColumn \u003d new TableColumn\u003c\u003e(\"S/N\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        indexColumn.setResizable(true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        //Solution below adapted from: https://stackoverflow.com/questions/31212400/adding-index-of-records-in-a-javafx-tableview-column"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        ///////////////////////////////////////////////////////index column"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            indexColumn.setCellFactory(col -\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                // just a default table cell:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                TableCell\u003cItem\u003cIngredient\u003e, Void\u003e cell \u003d new TableCell\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                cell.textProperty().bind(Bindings.createStringBinding(() -\u003e {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                    if (cell.isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                        return null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                        return Integer.toString(cell.getIndex() + 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                }, cell.emptyProperty(), cell.indexProperty()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                return cell;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            });"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        ////////////////////////////////index column created"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        shoppingListTable.getColumns().add(indexColumn);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        indexColumn.setMinWidth(50);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        indexColumn.setMaxWidth(50);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    void setShoppingInfoColumns() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        TableColumn\u003cItem\u003cIngredient\u003e, String\u003e ingredientColumn \u003d new TableColumn\u003c\u003e(\"Ingredient\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        ingredientColumn.setResizable(true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        ingredientColumn.setCellValueFactory(itemStringCellDataFeatures -\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                new SimpleStringProperty(itemStringCellDataFeatures.getValue().getItem().getName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        TableColumn\u003cItem\u003cIngredient\u003e, String\u003e quantityColumn \u003d new TableColumn\u003c\u003e(\"Quantity\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        quantityColumn.setResizable(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        quantityColumn.setCellValueFactory(itemStringCellDataFeatures -\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                new SimpleStringProperty(String.valueOf(itemStringCellDataFeatures.getValue().getQuantity().getNumber())));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        TableColumn\u003cItem\u003cIngredient\u003e, String\u003e remarksColumn \u003d new TableColumn\u003c\u003e(\"Remarks\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        remarksColumn.setResizable(true);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        remarksColumn.setCellValueFactory(itemStringCellDataFeatures -\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                new SimpleStringProperty(itemStringCellDataFeatures.getValue().getItem().getRemarks()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        TableColumn\u003cItem\u003cIngredient\u003e, String\u003e costColumn \u003d new TableColumn\u003c\u003e(\"Unit Cost ($)\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        costColumn.setResizable(true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        costColumn.setCellValueFactory(itemStringCellDataFeatures -\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                new SimpleStringProperty(String.valueOf(itemStringCellDataFeatures.getValue().getItem().getUnitPrice())));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        TableColumn\u003cItem\u003cIngredient\u003e, String\u003e totalCostColumn \u003d new TableColumn\u003c\u003e(\"Cost ($)\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        totalCostColumn.setResizable(true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        totalCostColumn.setCellValueFactory(itemStringCellDataFeatures -\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                new SimpleStringProperty(String.valueOf(itemStringCellDataFeatures.getValue().getTotalPrice())));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        shoppingListTable.getColumns().addAll(ingredientColumn, quantityColumn, costColumn,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                totalCostColumn, remarksColumn);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    Double computeTotalCost(ObservableList\u003cItem\u003cIngredient\u003e\u003e shoppingList) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        Double totalCost \u003d 0.0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        for (Item\u003cIngredient\u003e item : shoppingList) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            totalCost +\u003d item.getTotalPrice();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return totalCost;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    void setupTotalCostLabel() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        totalCostLabel.setText(String.valueOf(computeTotalCost(shoppingList)));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        shoppingList.addListener((ListChangeListener\u003cItem\u003cIngredient\u003e\u003e) c -\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                totalCostLabel.setText(df2.format(computeTotalCost(shoppingList))));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "liujiajun": 4,
      "eugenelim97": 122
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * API of UI component."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 9,
      "-": 5
    }
  },
  {
    "path": "src/main/java/duke/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.Launcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.Logic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/bakinghome_icon.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/duke.css\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new Image(Launcher.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 85
    }
  },
  {
    "path": "src/main/java/duke/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.Launcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param root     Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        URL fxmlFileUrl \u003d Launcher.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 92
    }
  },
  {
    "path": "src/main/java/duke/ui/commons/TableUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.ui.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.scene.control.TableCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class TableUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private static final String INDEX_COLUMN_HEADER \u003d \"S/N\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static void setUpIndexColumn(TableView table) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        //Solution below adapted from: https://stackoverflow.com/questions/31212400/adding-index-of-records-in-a-javafx-tableview-column"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        TableColumn\u003cProduct, Void\u003e indexColumn \u003d new TableColumn\u003c\u003e(INDEX_COLUMN_HEADER);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        indexColumn.setResizable(true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        indexColumn.setMinWidth(50);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        indexColumn.setMaxWidth(50);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        indexColumn.setCellFactory(col -\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            TableCell\u003cProduct, Void\u003e cell \u003d new TableCell\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            cell.textProperty().bind(Bindings.createStringBinding(() -\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                if (cell.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                    return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                    return Integer.toString(cell.getIndex() + 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            }, cell.emptyProperty(), cell.indexProperty()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            return cell;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        });"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        table.getColumns().clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        table.getColumns().add(indexColumn);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liushiru": 33
    }
  },
  {
    "path": "src/main/resources/css/duke.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".root {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: WHITE;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-font-family: \"SF Pro Text\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-pane {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-pane:focused {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-pane .corner {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".jfx-list-view {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -jfx-cell-horizontal-margin: 0.0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -jfx-cell-vertical-margin: 5.0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -jfx-vertical-gap: 10;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    -jfx-expanded: false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".status-completed {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-color: #00bfa5;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-padding: 4;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".status-active {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-color: #32cb00;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-padding: 4;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".status-canceled {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-color: #bdbdbd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-padding: 4;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".deadline-normal {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-padding: 4;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-text-fill: rgb(80, 134, 236);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".deadline-overdue {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-padding: 4;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-text-fill: rgb(237, 107, 96);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".error-popup {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 25;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: rgb(237, 107, 96);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ".message-popup {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 25;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-color: #00bfa5;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-selection-bar: white;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-selection-bar-non-focused: white;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-padding: 10 10 10 10;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".list-cell:filled {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-color: -fx-background;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-color: -fx-background;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "liujiajun": 51,
      "liushiru": 5,
      "-": 40
    }
  },
  {
    "path": "src/main/resources/css/product.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/*.table-view {*/"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/*    -fx-background-color: rgba(151, 217, 143, 0.5);*/"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/*    -fx-table-column-border-color: black;*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/*    -fx-font-size: 15px;*/"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/*    -fx-text-fill: #000000;*/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/*}*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/*.table-view .column-header {*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/*    -fx-background-color: rgba(151, 217, 143, 0.5);*/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/*}*/"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/*.table-view .table-column {*/"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/*    -fx-alignment: center;*/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/*}*/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/*.table-row-cell{*/"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/*}*/"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/*.scroll-pane {*/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/*    -fx-hbar-policy: never;*/"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/*    -fx-vbar-policy: never;*/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/*}*/"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/*.table-view .table-cell {*/"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/*    -fx-font-size: 15px;*/"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/*    -fx-alignment: center;*/"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/*}*/"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/*.split-pane:horizontal \u003e .split-pane-divider {*/"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/*    -fx-background-color: transparent;*/"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/*}*/"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/*.split-pane:vertical \u003e .split-pane-divider {*/"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/*    -fx-background-color: transparent;*/"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/*    -fx-padding: 0 0.05em 0 0.05em;*/"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/*}*/"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/*.split-pane {*/"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/*    -fx-background-color: rgba(62, 135, 52, 0.5);*/"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/*    -fx-box-border: transparent;*/"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/*}*/"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Licensed to the Apache Software Foundation (ASF) under one"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * or more contributor license agreements.  See the NOTICE file"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * distributed with this work for additional information"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * regarding copyright ownership.  The ASF licenses this file"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * to you under the Apache License, Version 2.0 (the"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * \"License\"); you may not use this file except in compliance"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * with the License.  You may obtain a copy of the License at"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " *   http://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Unless required by applicable law or agreed to in writing,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * software distributed under the License is distributed on an"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * KIND, either express or implied.  See the License for the"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * specific language governing permissions and limitations"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * under the License."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/*"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "* The following CSS has been adapted from"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "https://github.com/TurekBot/JFXTableView_CSS/blob/master/src/main/resources/tech/ugma/education/jfoenixtableview/jfx-table-view.css#L107"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "*/"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".root {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-font-family: \"SF Pro Display\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liushiru"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-table-color: #00bfa5;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-table-rippler-color: rgba(82, 100, 174, 0.6);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ":focused {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-color: -fx-table-color, -fx-box-border, -fx-control-inner-background;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-insets: -1.4, 0, 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-radius: 1.4, 0, 0;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /*....*/"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-padding: 1; /* 0.083333em; */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".table-view:focused .table-row-cell:selected {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-color: -fx-table-color;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-table-cell-border-color: -fx-table-color;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-text-fill: WHITE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".table-view:focused .table-row-cell:selected .table-cell {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-text-fill: WHITE;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".table-view .column-header,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".table-view .column-header-background,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".table-view .column-header-background .filler {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-color: TRANSPARENT;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liushiru"
        },
        "content": ".table-view .column-header {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-border-width: 0 1 0 1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-border-color: #F3F3F3;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-padding: 12 0 12 0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".table-view .column-header .arrow, .table-view .column-header .sort-order-dot {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-color: #949494;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".table-view .column-header:last-visible {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-border-width: 0 2 0 1;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-border-width: 0 0.0 1 0;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-border-color: #F3F3F3;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liushiru"
        },
        "content": ".table-view .table-cell {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-border-width: 0 0 0 0;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-padding: 16 0 16 0;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-alignment: top-center;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".table-view .column-overlay {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-color: -fx-table-color;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".table-view .column-resize-line, .table-view .column-drag-header {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-color: -fx-table-rippler-color;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".table-row-cell \u003e .disclosure-node \u003e .arrow {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-color: -fx-text-fill;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-padding: 0.333333em 0.229em 0.333333em 0.229em; /* 4 */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-shape: \"M 0 -3.5 L 4 0 L 0 3.5 z\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".table-row-cell .jfx-text-field {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-focus-color: rgb(82, 100, 174);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".table-row-cell .jfx-text-field:error {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -jfx-focus-color: #D34336;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -jfx-unfocus-color: #D34336;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".table-row-cell .jfx-text-field .error-label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-text-fill: #D34336;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-font-size: 0.75em;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".table-row-cell .jfx-text-field .error-icon {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-fill: #D34336;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-font-size: 1.0em;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".table-row-cell:grouped {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-color: rgb(230, 230, 230);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".table-view .menu-item:focused {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-color: -fx-table-color;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".table-view .menu-item .label {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-padding: 5 0 5 0;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "liushiru"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    -fx-box-border: transparent;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "liushiru"
        },
        "content": ".table-view .split-pane:horizontal \u003e .split-pane-divider {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "liujiajun": 157,
      "liushiru": 30
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import com.jfoenix.controls.JFXCheckBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"40.0\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "         prefWidth\u003d\"300.0\" type\u003d\"AnchorPane\" xmlns\u003d\"http://javafx.com/javafx\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cGridPane AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "                  AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"240.0\" minWidth\u003d\"10.0\" percentWidth\u003d\"60.0\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                                   prefWidth\u003d\"240.0\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"141.0\" minWidth\u003d\"10.0\" percentWidth\u003d\"40.0\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                                   prefWidth\u003d\"50.0\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"40.0\" prefWidth\u003d\"230.0\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cJFXCheckBox fx:id\u003d\"checkBox\" checkedColor\u003d\"#4059a9\" text\u003d\"1. \"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cLabel fx:id\u003d\"description\" text\u003d\"Label\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"typeLabel\" alignment\u003d\"CENTER\" prefHeight\u003d\"34.0\" text\u003d\"TODO\" textFill\u003d\"WHITE\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                       GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"RIGHT\" GridPane.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 5,
      "-": 36
    }
  },
  {
    "path": "src/main/resources/view/IngredientCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "\u003cfx:root maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"423.0\" prefWidth\u003d\"773.0\" type\u003d\"AnchorPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "      \u003cSplitPane dividerPositions\u003d\"0.2\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"200.0\" prefWidth\u003d\"160.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": "         \u003citems\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            \u003cAnchorPane maxHeight\u003d\"30.0\" minHeight\u003d\"30.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"375.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                  \u003cLabel fx:id\u003d\"productName\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" prefHeight\u003d\"198.0\" prefWidth\u003d\"158.0\" text\u003d\"Label\" textAlignment\u003d\"CENTER\" underline\u003d\"true\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                        \u003cFont size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            \u003cAnchorPane fx:id\u003d\"tablePane\" prefHeight\u003d\"280.0\" prefWidth\u003d\"517.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "         \u003c/items\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "      \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "liushiru": 24
    }
  },
  {
    "path": "src/main/resources/view/InventoryPage.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "\u003cAnchorPane prefHeight\u003d\"591.0\" prefWidth\u003d\"857.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "       \u003cTableView fx:id\u003d\"inventoryListTable\" prefHeight\u003d\"591.0\" prefWidth\u003d\"857.0\" AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                  AnchorPane.leftAnchor\u003d\"15.0\" AnchorPane.rightAnchor\u003d\"15.0\" AnchorPane.topAnchor\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "         \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "         \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "      \u003c/TableView\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 2,
      "eugenelim97": 12
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import com.jfoenix.controls.JFXButton?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import com.jfoenix.controls.JFXListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import com.jfoenix.controls.JFXTextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" title\u003d\"BakingHome\" type\u003d\"Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        \u003cScene stylesheets\u003d\"@../css/duke.css\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            \u003croot\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "\u003c!--                \u003cAnchorPane prefHeight\u003d\"800.0\" prefWidth\u003d\"1110.0\"\u003e--\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                \u003cAnchorPane prefHeight\u003d\"600.0\" prefWidth\u003d\"900.0\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003cAnchorPane prefHeight\u003d\"600.0\" prefWidth\u003d\"200.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"200.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cJFXTextField fx:id\u003d\"userInput\" focusColor\u003d\"#00bfa5\" layoutX\u003d\"10.0\" layoutY\u003d\"493.0\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                              onAction\u003d\"#handleUserInput\" onKeyPressed\u003d\"#handleKeyPress\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                              prefHeight\u003d\"33.0\" prefWidth\u003d\"338.0\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                              promptText\u003d\"Enter any command to start. e.g. order add -name alice\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                              AnchorPane.bottomAnchor\u003d\"6.0\" AnchorPane.leftAnchor\u003d\"5.0\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                              AnchorPane.rightAnchor\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"currentPage\" text\u003d\"BakingHome\" textFill\u003d\"#5086ec\" AnchorPane.leftAnchor\u003d\"15.0\" AnchorPane.topAnchor\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cFont name\u003d\"SF Pro Text Regular\" size\u003d\"30.0\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cSeparator prefHeight\u003d\"3.0\" prefWidth\u003d\"200.0\" AnchorPane.leftAnchor\u003d\"15.0\" AnchorPane.rightAnchor\u003d\"15.0\" AnchorPane.topAnchor\u003d\"45.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cAnchorPane fx:id\u003d\"pagePane\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            AnchorPane.bottomAnchor\u003d\"40.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"50.0\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cLabel alignment\u003d\"CENTER\" layoutX\u003d\"315.0\" layoutY\u003d\"239.0\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                               text\u003d\"Welcome to BakingHome, your one-stop bakery management system. Enjoy!\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                               textFill\u003d\"#a8a5a5\" wrapText\u003d\"true\" AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                               AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                               AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003cfont\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cFont name\u003d\"SF Pro Display Regular\" size\u003d\"17.0\"/\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/font\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cAnchorPane visible\u003d\"false\" AnchorPane.bottomAnchor\u003d\"40.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cScrollPane fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"324.0\" prefWidth\u003d\"268.0\" styleClass\u003d\"edge-to-edge\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cJFXListView fx:id\u003d\"taskList\" prefHeight\u003d\"401.0\" prefWidth\u003d\"413.0\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/content\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cInsets /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cHBox fx:id\u003d\"popUp\" alignment\u003d\"BOTTOM_CENTER\" layoutX\u003d\"10.0\" layoutY\u003d\"523.0\" maxHeight\u003d\"30.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"200.0\" AnchorPane.bottomAnchor\u003d\"60.0\" AnchorPane.leftAnchor\u003d\"10.0\" AnchorPane.rightAnchor\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cLabel fx:id\u003d\"popUpLabel\" alignment\u003d\"CENTER\" maxHeight\u003d\"30.0\" prefHeight\u003d\"30.0\" text\u003d\"fvfvdvfdfvfvdvfdfvfvdvfdfvfvdvfdfvfvdvfdfvfvdvfdfvfvdvfd\" textFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cJFXButton fx:id\u003d\"popUpButton\" alignment\u003d\"CENTER\" defaultButton\u003d\"true\" minWidth\u003d\"61.0\" onAction\u003d\"#handleOk\" prefHeight\u003d\"30.0\" prefWidth\u003d\"61.0\" text\u003d\"Okay\" textFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003cAnchorPane maxWidth\u003d\"200.0\" minWidth\u003d\"200.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: #00bfa5;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cVBox alignment\u003d\"TOP_CENTER\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                      AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                      AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cImageView fitHeight\u003d\"81.0\" fitWidth\u003d\"89.0\" pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                   preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003cimage\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cImage url\u003d\"@../images/bakinghome_icon.png\"/\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/image\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cInsets left\u003d\"5.0\" top\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"48.0\" prefWidth\u003d\"167.0\" text\u003d\"BakingHome\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                               textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003cfont\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cFont name\u003d\"SF Pro Display Bold\" size\u003d\"25.0\"/\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/font\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cInsets bottom\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cJFXButton fx:id\u003d\"productButton\" onAction\u003d\"#handleShowRecipe\" prefHeight\u003d\"50.0\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                   prefWidth\u003d\"200.0\" text\u003d\" Products\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003cfont\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cFont size\u003d\"18.0\"/\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/font\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cImageView fitHeight\u003d\"26.0\" fitWidth\u003d\"26.0\" pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                           preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                    \u003cimage\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                        \u003cImage url\u003d\"@../images/product.png\"/\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                    \u003c/image\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003c/JFXButton\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cJFXButton fx:id\u003d\"orderButton\" onAction\u003d\"#handleShowOrder\" prefHeight\u003d\"50.0\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                   prefWidth\u003d\"200.0\" text\u003d\" Orders    \" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003cfont\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cFont name\u003d\"SF Pro Text Regular\" size\u003d\"18.0\"/\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/font\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cImageView fitHeight\u003d\"24.0\" fitWidth\u003d\"22.0\" pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                           preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                    \u003cimage\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                        \u003cImage url\u003d\"@../images/order.png\"/\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                    \u003c/image\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003c/JFXButton\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cJFXButton fx:id\u003d\"inventoryButton\" onAction\u003d\"#handleShowInventory\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                   prefHeight\u003d\"50.0\" prefWidth\u003d\"200.0\" text\u003d\" Inventory \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                   textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003cfont\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cFont name\u003d\"Arial\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/font\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cImageView fitHeight\u003d\"26.0\" fitWidth\u003d\"25.0\" pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                           preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                    \u003cimage\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                        \u003cImage url\u003d\"@../images/inventory.png\"/\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                    \u003c/image\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003c/JFXButton\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cJFXButton fx:id\u003d\"shoppingButton\" onAction\u003d\"#handleShowShopping\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                   prefHeight\u003d\"50.0\" prefWidth\u003d\"200.0\" text\u003d\" Shopping\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                   textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                                            \u003cfont\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                                                \u003cFont name\u003d\"Arial\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                                            \u003c/font\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cImageView fitHeight\u003d\"25.0\" fitWidth\u003d\"25.0\" pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                           preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                    \u003cimage\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                        \u003cImage url\u003d\"@../images/shopping-cart.png\"/\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                    \u003c/image\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                                        \u003c/JFXButton\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cJFXButton fx:id\u003d\"saleButton\" alignment\u003d\"CENTER\" onAction\u003d\"#handleShowSale\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                   prefHeight\u003d\"50.0\" prefWidth\u003d\"200.0\" text\u003d\" Sales     \""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                   textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003cfont\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cFont name\u003d\"Arial\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/font\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cImageView fitHeight\u003d\"25.0\" fitWidth\u003d\"25.0\" pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                           preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                    \u003cimage\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                        \u003cImage url\u003d\"@../images/sale.png\"/\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                    \u003c/image\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cInsets/\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003c/JFXButton\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            \u003c/root\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 165,
      "liushiru": 2,
      "-": 12,
      "eugenelim97": 4
    }
  },
  {
    "path": "src/main/resources/view/OrderCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003cAnchorPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"230.0\" prefHeight\u003d\"200.0\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            style\u003d\"-fx-background-color: white;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        \u003cAnchorPane fx:id\u003d\"innerPane\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    style\u003d\"-fx-background-color: white; -fx-border-color: #CCCCCC; -fx-effect: dropshadow(three-pass-box, grey, 10.0,0, 0, 0);\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    AnchorPane.bottomAnchor\u003d\"15.0\" AnchorPane.leftAnchor\u003d\"50.0\" AnchorPane.rightAnchor\u003d\"50.0\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    AnchorPane.topAnchor\u003d\"15.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                      AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003cHBox alignment\u003d\"CENTER_LEFT\" mouseTransparent\u003d\"true\" prefHeight\u003d\"45.0\" prefWidth\u003d\"200.0\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                              spacing\u003d\"10.0\" style\u003d\"-fx-background-color: #5086ec;\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"index\" text\u003d\"{index}\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cFont name\u003d\"SF Pro Text Regular\" size\u003d\"18.0\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cInsets left\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"status\" alignment\u003d\"CENTER\" text\u003d\"{status}\" textAlignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                       textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"18.0\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cInsets/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"deadline\" alignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                       style\u003d\"-fx-background-color: white; -fx-background-radius: 5; -fx-padding: 4;\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                       text\u003d\"{deadline}\" textAlignment\u003d\"CENTER\" textFill\u003d\"#5086ec\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"18.0\"/\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cInsets/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cImageView fitHeight\u003d\"17.0\" fitWidth\u003d\"17.0\" pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                   preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003cimage\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cImage url\u003d\"@../images/alarm-clock.png\"/\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/image\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"inventoryStatus\" alignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                       style\u003d\"-fx-background-color: rgb(237,108,97); -fx-background-radius: 5; -fx-padding: 4;\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                       text\u003d\"Insuffcient Ingredients\" textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                       visible\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"18.0\"/\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cInsets/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003cHBox alignment\u003d\"CENTER_LEFT\" mouseTransparent\u003d\"true\" prefHeight\u003d\"30.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cLabel alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cImageView fitHeight\u003d\"150.0\" fitWidth\u003d\"15.0\" pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                   preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003cimage\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cImage url\u003d\"@../images/name.png\"/\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/image\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cInsets left\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"total\" alignment\u003d\"CENTER\" text\u003d\"{total}\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cFont name\u003d\"SF Pro Text Regular\" size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cInsets left\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cSeparator orientation\u003d\"VERTICAL\" prefHeight\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cInsets bottom\u003d\"5.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/Separator\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cLabel alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cInsets/\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cImageView fitHeight\u003d\"150.0\" fitWidth\u003d\"15.0\" pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                   preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003cimage\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cImage url\u003d\"@../images/name.png\"/\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/image\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"name\" alignment\u003d\"CENTER\" text\u003d\"{name}\"\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cInsets left\u003d\"5.0\" right\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cLabel alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cInsets left\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cImageView fitHeight\u003d\"150.0\" fitWidth\u003d\"15.0\" pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                   preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003cimage\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cImage url\u003d\"@../images/phone-contact.png\"/\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/image\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"contact\" alignment\u003d\"CENTER\" text\u003d\"{contact}\"\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cInsets left\u003d\"5.0\" right\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cLabel alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cInsets left\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cImageView fitHeight\u003d\"150.0\" fitWidth\u003d\"15.0\" pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                   preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003cimage\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cImage url\u003d\"@../images/commentary.png\"/\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/image\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"remarks\" alignment\u003d\"CENTER\" text\u003d\"{remarks}\"\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cInsets left\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003cSeparator prefWidth\u003d\"200.0\"/\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"60.0\" prefWidth\u003d\"200.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cScrollPane fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            style\u003d\"-fx-background-color: white;\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003ccontent\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cFlowPane fx:id\u003d\"itemFlow\" alignment\u003d\"CENTER_LEFT\" columnHalignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                  hgap\u003d\"10.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                  style\u003d\"-fx-background-color: white;\" vgap\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/content\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003cSeparator prefWidth\u003d\"200.0\"/\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003cHBox alignment\u003d\"TOP_RIGHT\" prefHeight\u003d\"18.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cLabel alignment\u003d\"CENTER\" text\u003d\"Order ID:\"\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"12.0\"/\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cInsets left\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"id\" alignment\u003d\"CENTER\" text\u003d\"{id}\" textFill\u003d\"#96663b\"\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cFont name\u003d\"SF Pro Text Regular\" size\u003d\"12.0\"/\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cInsets left\u003d\"5.0\" right\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cLabel alignment\u003d\"CENTER\" text\u003d\"Created on:\"\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"12.0\"/\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cInsets left\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"creationDate\" alignment\u003d\"CENTER\" text\u003d\"{creationDate}\" textFill\u003d\"#96663b\"\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"12.0\"/\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cInsets left\u003d\"5.0\" right\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 240
    }
  },
  {
    "path": "src/main/resources/view/OrderItemBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" maxHeight\u003d\"100.0\" minWidth\u003d\"100.0\" prefHeight\u003d\"80.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "         style\u003d\"-fx-background-radius: 5; -fx-background-color: #00bfa5;\" type\u003d\"AnchorPane\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11.0.1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\" prefHeight\u003d\"200.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "              AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                \u003cLabel fx:id\u003d\"itemName\" alignment\u003d\"CENTER\" text\u003d\"{name}\" textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003cFont name\u003d\"SF Pro Text Regular\" size\u003d\"24.0\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                \u003cLabel fx:id\u003d\"itemQuantity\" alignment\u003d\"CENTER\" text\u003d\"{quantity}\" textAlignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                       textFill\u003d\"#ebebeb\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003cFont name\u003d\"Arial\" size\u003d\"18.0\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 33
    }
  },
  {
    "path": "src/main/resources/view/OrderPage.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import com.jfoenix.controls.JFXListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003cAnchorPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            style\u003d\"-fx-background-color: white;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        \u003cHBox alignment\u003d\"CENTER\" prefHeight\u003d\"45.0\" prefWidth\u003d\"600.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "              AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                \u003cLabel fx:id\u003d\"active\" alignment\u003d\"CENTER\" prefHeight\u003d\"28.0\" prefWidth\u003d\"140.0\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                       style\u003d\"-fx-background-color: #32cb00; -fx-background-radius: 5; -fx-padding: 4;\" text\u003d\"10 Active\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                       textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003cFont name\u003d\"SF Pro Text Regular\" size\u003d\"17.0\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                \u003cLabel fx:id\u003d\"finished\" alignment\u003d\"CENTER\" prefHeight\u003d\"28.0\" prefWidth\u003d\"140.0\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                       style\u003d\"-fx-background-color: #00bfa5; -fx-background-radius: 5; -fx-padding: 4;\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                       text\u003d\"10 Completed\" textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003cFont name\u003d\"SF Pro Text Regular\" size\u003d\"17.0\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003cInsets left\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                \u003cLabel fx:id\u003d\"canceled\" alignment\u003d\"CENTER\" prefHeight\u003d\"28.0\" prefWidth\u003d\"140.0\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                       style\u003d\"-fx-background-color: #bdbdbd; -fx-background-radius: 5; -fx-padding: 4;\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                       text\u003d\"5 Canceled\" textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003cFont name\u003d\"SF Pro Text Regular\" size\u003d\"17.0\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003cInsets left\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        \u003cJFXListView fx:id\u003d\"orderListView\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                     AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"45.0\"/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 47
    }
  },
  {
    "path": "src/main/resources/view/ProductPage.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "\u003cAnchorPane prefHeight\u003d\"591.0\" prefWidth\u003d\"877.0\" stylesheets\u003d\"@../css/product.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        \u003cAnchorPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"productListPane\" prefHeight\u003d\"566.0\" prefWidth\u003d\"770.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    \u003cSplitPane fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.7\" layoutX\u003d\"15.0\" layoutY\u003d\"35.0\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                               orientation\u003d\"VERTICAL\" prefHeight\u003d\"200.0\" prefWidth\u003d\"160.0\" AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                               AnchorPane.leftAnchor\u003d\"15.0\" AnchorPane.rightAnchor\u003d\"15.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                        \u003citems\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            \u003cAnchorPane fx:id\u003d\"listPane\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"100.0\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        prefWidth\u003d\"160.0\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            \u003cAnchorPane fx:id\u003d\"cardPane\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"100.0\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        prefWidth\u003d\"160.0\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                        \u003c/items\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                    \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 13,
      "liushiru": 11,
      "eugenelim97": 1
    }
  },
  {
    "path": "src/main/resources/view/SaleCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"1.7976931348623157E308\" prefWidth\u003d\"650.0\" style\u003d\"-fx-background-color: white;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        \u003cAnchorPane fx:id\u003d\"innerPane\" prefWidth\u003d\"200.0\" style\u003d\"-fx-border-color: brown;\" AnchorPane.bottomAnchor\u003d\"10.0\" AnchorPane.leftAnchor\u003d\"25.0\" AnchorPane.rightAnchor\u003d\"25.0\" AnchorPane.topAnchor\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                \u003cVBox prefWidth\u003d\"100.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chekjun"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                  \u003cGridPane alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                      \u003cRowConstraints minHeight\u003d\"25.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                      \u003cRowConstraints minHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                      \u003cRowConstraints minHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003cStackPane minHeight\u003d\"30.0\" style\u003d\"-fx-background-color: B5651D;\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                              \u003cLabel fx:id\u003d\"id\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"Sale ID\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cFont name\u003d\"Consolas\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                              \u003c/Label\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003cStackPane minHeight\u003d\"30.0\" style\u003d\"-fx-background-color: B5651D;\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                              \u003cLabel fx:id\u003d\"value\" text\u003d\"Value\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cFont name\u003d\"Consolas\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                              \u003c/Label\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003cStackPane minHeight\u003d\"30.0\" style\u003d\"-fx-background-color: B5651D;\" GridPane.columnIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                              \u003cLabel fx:id\u003d\"saleDate\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"Sale Date\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cFont name\u003d\"Consolas\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                              \u003c/Label\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003cStackPane GridPane.columnSpan\u003d\"3\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                              \u003cLabel fx:id\u003d\"description\" text\u003d\"Description\" StackPane.alignment\u003d\"TOP_LEFT\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cFont name\u003d\"Consolas\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                              \u003c/Label\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003cStackPane GridPane.columnSpan\u003d\"3\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                              \u003cLabel fx:id\u003d\"remarks\" text\u003d\"Remarks\" StackPane.alignment\u003d\"TOP_LEFT\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cFont name\u003d\"Consolas\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                              \u003c/Label\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chekjun"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 1,
      "chekjun": 80
    }
  },
  {
    "path": "src/main/resources/view/SalePage.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import com.jfoenix.controls.JFXListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"SalePage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        \u003cSplitPane dividerPositions\u003d\"0.5\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" style\u003d\"-fx-border-color: white; -fx-border-insets: 0;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            \u003citems\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                \u003cStackPane maxHeight\u003d\"69.0\" minHeight\u003d\"69.0\" style\u003d\"-fx-background-color: white;\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chekjun"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                  \u003cVBox prefHeight\u003d\"175.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003cHBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                              \u003cStackPane /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                              \u003cStackPane /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                              \u003cStackPane /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003cHBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                              \u003cVBox HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cStackPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                  \u003cImageView fitHeight\u003d\"50.0\" fitWidth\u003d\"57.0\" preserveRatio\u003d\"true\" StackPane.alignment\u003d\"BOTTOM_CENTER\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                      \u003cimage\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                          \u003cImage url\u003d\"@../images/revenue.png\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                      \u003c/image\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cStackPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                \u003cLabel fx:id\u003d\"revenue\" text\u003d\"Revenue: $\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                        \u003cFont name\u003d\"Consolas\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                 \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cInsets /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                 \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                              \u003cSeparator orientation\u003d\"VERTICAL\" valignment\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                              \u003cVBox HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cStackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                  \u003cImageView fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" preserveRatio\u003d\"true\" StackPane.alignment\u003d\"BOTTOM_CENTER\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                      \u003cimage\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                          \u003cImage url\u003d\"@../images/cost.png\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                      \u003c/image\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cStackPane\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                \u003cLabel fx:id\u003d\"cost\" text\u003d\"Cost: $\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                        \u003cFont name\u003d\"Consolas\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                              \u003cSeparator layoutX\u003d\"126.0\" layoutY\u003d\"10.0\" orientation\u003d\"VERTICAL\" valignment\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                              \u003cVBox HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cStackPane\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                  \u003cImageView fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" preserveRatio\u003d\"true\" StackPane.alignment\u003d\"BOTTOM_CENTER\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                      \u003cimage\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                          \u003cImage url\u003d\"@../images/profit.png\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                      \u003c/image\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cStackPane\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                \u003cLabel fx:id\u003d\"profit\" text\u003d\"Profit: $\"\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                        \u003cFont name\u003d\"Consolas\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chekjun"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            \u003cStackPane\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003cJFXListView fx:id\u003d\"saleListView\" /\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            \u003c/items\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 11,
      "chekjun": 107
    }
  },
  {
    "path": "src/main/resources/view/ShoppingPage.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "\u003cAnchorPane prefHeight\u003d\"591.0\" prefWidth\u003d\"857.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "       \u003cTableView fx:id\u003d\"shoppingListTable\" prefHeight\u003d\"591.0\" prefWidth\u003d\"857.0\" AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                  AnchorPane.leftAnchor\u003d\"15.0\" AnchorPane.rightAnchor\u003d\"15.0\" AnchorPane.topAnchor\u003d\"35.0\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "         \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "         \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "      \u003c/TableView\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "       \u003cLabel fx:id\u003d\"totalCostLabel\" layoutX\u003d\"186.0\" layoutY\u003d\"16.0\" text\u003d\"\\$0.00\" AnchorPane.topAnchor\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            \u003cFont name\u003d\"Calibri Bold Italic\" size\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "       \u003cLabel layoutX\u003d\"14.0\" layoutY\u003d\"16.0\" text\u003d\"Total Cost ($):\" AnchorPane.leftAnchor\u003d\"15.0\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "              AnchorPane.topAnchor\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            \u003cFont name\u003d\"Calibri Bold Italic\" size\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 5,
      "eugenelim97": 22
    }
  },
  {
    "path": "src/test/java/duke/logic/command/order/DeleteOrderCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.command.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class DeleteOrderCommandTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void deleteOrder_nullIndex_throwNullPointerException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                DeleteOrderCommand command \u003d new DeleteOrderCommand(null);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 17
    }
  },
  {
    "path": "src/test/java/duke/logic/parser/AutoCompleterTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.AutoCompleter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.Prefix;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A test class for AutoCompleter."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class AutoCompleterTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private AutoCompleter completer \u003d new AutoCompleter();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void addCommand_commandStub_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertAll(() -\u003e completer.addCommandClass(CommandStub.class));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void isCompletable_unknownInput_returnsFalse() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertAll(() -\u003e completer.addCommandClass(CommandStub.class));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertEquals("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            false,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            completer.isAutoCompletable(new AutoCompleter.UserInputState(\"hello\", 0))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void isCompletable_stubCommandWord_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        completer.addCommandClass(CommandStub.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertEquals("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            true,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            completer.isAutoCompletable(new AutoCompleter.UserInputState(\"St\", 0))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void isAutoCompletable_blankInput_returnsFalse() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        completer.addCommandClass(CommandStub.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertEquals("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            false,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            completer.isAutoCompletable(new AutoCompleter.UserInputState(\"\", 0))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void complete_commandWord_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        completer.addCommandClass(CommandStub.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertEquals("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            true,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            completer.isAutoCompletable(new AutoCompleter.UserInputState(\"St\", 1))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertEquals("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            \"Stub\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            completer.complete().userInputString"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Tests single suggestion for a given input."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void complete_singleSuggestion_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        completer.addCommandClass(CommandStub.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertEquals("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            true,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            completer.isAutoCompletable(new AutoCompleter.UserInputState(\"Stub stub -b\", 10))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertEquals(\"Stub stub -bb\", completer.complete().userInputString);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Tests multiple suggestions for a given input and the cyclic behavior."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void complete_multipleSuggestion_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        completer.addCommandClass(CommandStub.class);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertEquals("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            true,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            completer.isAutoCompletable(new AutoCompleter.UserInputState(\"Stub stub -\", 11))"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertEquals(\"Stub stub -bb\", completer.complete().userInputString);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertEquals(\"Stub stub -cc\", completer.complete().userInputString);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertEquals(\"Stub stub -aa\", completer.complete().userInputString);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //Test the cyclic behavior"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertEquals(\"Stub stub -bb\", completer.complete().userInputString);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void complete_notCompletableCommand_failure() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertThrows(ParseException.class, completer::complete);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Clears the commands added after each run."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void clean() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        completer.clearCommandClasses();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserInputState class test \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Equivalent partitions (EP) for the constructor method:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * EP for userInput string:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * - null string (invalid)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * - not null string (valid)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * EP for caretPosition:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * - negative numbers (invalid, below range)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * - within 0 and userInput.length() (valid)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * - larger than userInput.length() (invalid, above range)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Applying Heuristic, we get four test cases:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *      userInput  |   caretPosition"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * 1.   not null   |   within 0 and userInput.length()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * 2.   null       |   within 0 and userInput.length()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * 3.   not null   |   negative number"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * 4.   not null   |   larger than userInput.length()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Applying boundary value analysis, we get 4 more:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * 5.   not null   |   0"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * 6.   not null   |   -1"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * 7.   length n   |   n"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * 8.   length n   |   n+1"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void newState_validInputAndValidCaretPosition_success() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertAll(() -\u003e new AutoCompleter.UserInputState(\"hello\", 2));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void newState_nullInput_throwsNullPointerException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            () -\u003e new AutoCompleter.UserInputState(null, 0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void newState_negativeCaretPosition_throwsNullPointerException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            () -\u003e new AutoCompleter.UserInputState(\"order\", -10));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void newState_invalidCaretPosition_throwsNullPointerException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            () -\u003e new AutoCompleter.UserInputState(\"order\", 10));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void newState_zeroCaretPosition_success() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertAll(() -\u003e new AutoCompleter.UserInputState(\"hello\", 0));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void newState_minusOneCaretPosition_throwsParseException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            () -\u003e new AutoCompleter.UserInputState(\"order\", -1));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void newState_upperBoundaryCaretPosition_success() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertAll(() -\u003e new AutoCompleter.UserInputState(\"hello\", 5));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void newState_upperBoundaryCaretPosition_throwsParseException() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            () -\u003e new AutoCompleter.UserInputState(\"order\", 6));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * A stub for command."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static class CommandStub extends Command {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        public static final String COMMAND_WORD \u003d \"Stub\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        public static final String AUTO_COMPLETE_INDICATOR \u003d \"Stub stub\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        public static final Prefix[] AUTO_COMPLETE_PARAMETERS \u003d {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            new Prefix(\"-aa\"),"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            new Prefix(\"-bb\"),"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            new Prefix(\"-cc\")"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        };"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 204
    }
  },
  {
    "path": "src/test/java/duke/logic/parser/BakingHomeParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.order.AddOrderCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.BakingHomeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.commons.core.Message.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.commons.core.Message.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class BakingHomeParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private BakingHomeParser parser \u003d new BakingHomeParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void parseCommand_addOrderCommand_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Command command \u003d parser.parseCommand(\"order add\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertEquals(AddOrderCommand.class, command.getClass());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void parseCommand_emptyInput_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Throwable throwable \u003d Assertions.assertThrows(ParseException.class, () -\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertEquals(MESSAGE_INVALID_COMMAND_FORMAT, throwable.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Throwable throwable \u003d Assertions.assertThrows(ParseException.class, () -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            parser.parseCommand(\"unknown\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertEquals(MESSAGE_UNKNOWN_COMMAND, throwable.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 37
    }
  },
  {
    "path": "src/test/java/duke/logic/parser/order/AddOrderCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class AddOrderCommandParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private AddOrderCommandParser parser \u003d new AddOrderCommandParser();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void addOrder_invalidStatus_failure() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertThrows("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            ParseException.class,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            () -\u003e parser.parse(\"-status INVALID\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void addOrder_invalidDate_failure() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertThrows("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            ParseException.class,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            () -\u003e parser.parse(\"-by my\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Invalid equivalence partitions for quantity of item:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * - negative quantity and quantity more than 5000"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Valid equivalence partitions for quantity:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * - quantities in (0, 5000)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Boundary values:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * - 0: valid input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * - 5000: valid input"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * The four test cases below tests EP at a time."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void addOrder_invalid_quantity_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertThrows("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            ParseException.class,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            () -\u003e parser.parse(\"-item a, 10000\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertThrows("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            ParseException.class,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            () -\u003e parser.parse(\"-item a, -10\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void addOrder_quantityWithinValidRange_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertAll(() -\u003e parser.parse(\"-item a, 100\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void addOrder_zeroQuantity_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertAll(() -\u003e parser.parse(\"-item a, 0\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void addOrder_maxQuantity_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertAll(() -\u003e parser.parse(\"-item a, 5000.0\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void addOrder_noArgument_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertAll(() -\u003e parser.parse(\"\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 72
    }
  },
  {
    "path": "src/test/java/duke/logic/parser/shortcut/SetShortcutParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.shortcut;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class SetShortcutParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private SetShortcutCommandParser parser \u003d new SetShortcutCommandParser();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void createShortcut_emptyName_failure() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertThrows(ParseException.class, () -\u003e parser.parse(\" order add\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void createShortcut_emptyUserInputs_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertAll(() -\u003e parser.parse(\"name\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void createShortcut_singleUserInput_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertAll(() -\u003e parser.parse(\"name order add\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void createShortcut_multipleUserInput_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Assertions.assertAll(() -\u003e parser.parse(\"name order add; order remove\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 29
    }
  },
  {
    "path": "src/test/java/duke/model/order/OrderTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class OrderTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 5
    }
  },
  {
    "path": "src/test/java/duke/storage/StorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.commons.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.model.order.Order;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.parser.commons.TimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//public class StorageTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private void serializeAndDeserialize_bakingListWithOnlyOrderList_success() throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        Order order \u003d new Order(\"jj\", \"1234\", TimeParser.convertStringToDate(\"10/10/1999 18:00\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        BakingList bakingList \u003d new BakingList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        bakingList.getOrderList().add(order);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        Storage storage \u003d new Storage(\"baking.json\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        BakingList deserializedBakingList \u003d storage.deserialize();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        assertEquals(\"jj\", deserializedBakingList.getOrderList().get(0).getCustomerName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 20
    }
  }
]
