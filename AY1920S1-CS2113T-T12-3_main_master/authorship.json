[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    //id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"duke.Main\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    compile \u0027com.jfoenix:jfoenix:9.0.8\u0027 // Java 9"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    compile ("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            [group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-core\u0027, version: \u00272.4.1\u0027],"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            [group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-annotations\u0027, version: \u00272.4.1\u0027],"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            [group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.4.1\u0027],"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            [group: \u0027org.ocpsoft.prettytime\u0027, name: \u0027prettytime\u0027, version: \u00274.0.1.Final\u0027],"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            [group: \u0027org.ocpsoft.prettytime\u0027, name: \u0027prettytime-nlp\u0027, version: \u00274.0.2.Final\u0027]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    )"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "//checkstyle {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "//    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "//}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 3,
      "-": 51
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.LogicManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.BakingHome;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.ReadOnlyBakingHome;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.ui.UiManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Launcher extends Application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(Launcher.class, args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Launcher.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing BakingHome ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        model \u003d initModelManager(storage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Model initModelManager(Storage storage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Optional\u003cReadOnlyBakingHome\u003e bakingHomeOptional;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ReadOnlyBakingHome initialData \u003d new BakingHome();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //TODO: Read from storage."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } catch (IOException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new ModelManager(initialData);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        logger.info(\"Starting BakingHome\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 55,
      "liushiru": 1,
      "-": 14
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Launcher.main(args);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 11,
      "-": 8
    }
  },
  {
    "path": "src/main/java/duke/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.logging.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String LOG_FILE \u003d \"BakingHome.log\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 98
    }
  },
  {
    "path": "src/main/java/duke/commons/core/Message.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class Message {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"This is an unknown command.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Command format is wrong.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String MESSAGE_INVALID_PREFIX \u003d \"Prefix does not exists.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"Date is invalid.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String MESSAGE_ITEM_MISSING_NAME_OR_QUANTITY \u003d \"Item name or quantity is not specified.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String MESSAGE_INVALID_NUMBER_FORMAT \u003d \"Number format is invalid.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is invalid.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String MESSAGE_INVALID_RANGE \u003d \"Range is invalid.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String MESSAGE_INVALID_STATUS \u003d \"Status is invalid.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 17
    }
  },
  {
    "path": "src/main/java/duke/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 54
    }
  },
  {
    "path": "src/main/java/duke/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A container for app specific utility functions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String VALIDATION_NON_EMPTY_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static void checkEmpty(String test, String errorMessage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        checkArgument(test.matches(VALIDATION_NON_EMPTY_REGEX), errorMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 34
    }
  },
  {
    "path": "src/main/java/duke/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Utility methods related to Collections."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 37
    }
  },
  {
    "path": "src/main/java/duke/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 70
    }
  },
  {
    "path": "src/main/java/duke/entities_decrypted/Sale.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.entities_decrypted;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chekjun"
        },
        "content": "public class Sale {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private long id \u003d System.currentTimeMillis();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private String description \u003d \"description\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private double value \u003d 0.0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private Date saleDate \u003d Calendar.getInstance().getTime();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private String remarks \u003d \"N/A\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public Sale() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public Sale(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                @JsonProperty(\"value\") double value,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                @JsonProperty(\"saleDate\") Date saleDate) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.saleDate \u003d saleDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public long getId() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public double getValue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public Date getSaleDate() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return saleDate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public String getRemarks() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return remarks;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void setId(long id) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void setValue(double value) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void setSaleDate(Date saleDate) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.saleDate \u003d saleDate;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void setRemarks(String remarks) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chekjun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 1,
      "chekjun": 66
    }
  },
  {
    "path": "src/main/java/duke/entities_decrypted/inventory/InventoryList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.entities_decrypted.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "public class InventoryList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private LinkedHashMap\u003cIngredient, Integer\u003e InventoryList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    InventoryList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        InventoryList \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    InventoryList(LinkedHashMap\u003cIngredient, Integer\u003e Ingredients) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        this.InventoryList \u003d Ingredients;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public LinkedHashMap\u003cIngredient, Integer\u003e getInventoryList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return InventoryList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void add(Ingredient ingredient, int quantity) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        InventoryList.put(ingredient, quantity);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void remove(Ingredient ingredient) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        InventoryList.remove(ingredient);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 1,
      "liushiru": 1,
      "eugenelim97": 27
    }
  },
  {
    "path": "src/main/java/duke/entities_decrypted/inventory/ShoppingList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.entities_decrypted.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "public class ShoppingList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    private LinkedHashMap\u003cIngredient, Integer\u003e ShoppingList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    ShoppingList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        ShoppingList \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    ShoppingList(LinkedHashMap\u003cIngredient, Integer\u003e Ingredients) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        this.ShoppingList \u003d Ingredients;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public LinkedHashMap\u003cIngredient, Integer\u003e getInventoryList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        return ShoppingList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void add(Ingredient ingredient, int quantity) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        ShoppingList.put(ingredient, quantity);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    public void remove(Ingredient ingredient) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        ShoppingList.remove(ingredient);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 1,
      "liushiru": 1,
      "eugenelim97": 27
    }
  },
  {
    "path": "src/main/java/duke/logic/CommandManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.commons.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.command.Undoable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "////import duke.logic.command.decrypted.RedoCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "////import duke.logic.command.decrypted.UndoCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.storage.BakingList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "///**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "// * Manager class of commands. An undo stack and redo stack is managed by CommandManager."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "// */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//public class CommandManager {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private List\u003cUndoable\u003e undoStack \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private List\u003cUndoable\u003e redoStack \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private BakingList bakingList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private Storage storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private Ui ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public CommandManager(BakingList bakingList, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        this.bakingList \u003d bakingList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        this.storage \u003d storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        this.ui \u003d ui;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    /*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * Runs a command. If the command is a subclass of \u003ccode\u003eUndoableCommand\u003c/code\u003e, puts it in undo stack."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * @param command The command to be executed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * @throws DukeException if execution fails."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void execute(Command command) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (command instanceof UndoCommand) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            undo();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } else if (command instanceof RedoCommand) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            redo();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                //command.execute(bakingList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            } catch (duke.logic.command.exceptions.CommandException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                e.printStackTrace();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            if (command instanceof Undoable) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                undoStack.add((Undoable) command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private void undo() throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (undoStack.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throw new DukeException(\"No task to be undone.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            undoStack.get(undoStack.size() - 1).undo(bakingList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } catch (duke.logic.command.exceptions.CommandException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            e.printStackTrace();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        redoStack.add(undoStack.get(undoStack.size() - 1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        undoStack.remove(undoStack.size() - 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private void redo() throws DukeException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (redoStack.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throw new DukeException(\"No task to be redone.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            redoStack.get(redoStack.size() - 1).redo(bakingList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } catch (duke.logic.command.exceptions.CommandException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            e.printStackTrace();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        undoStack.add(redoStack.get(redoStack.size() - 1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        redoStack.remove(redoStack.size() - 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 77,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.ReadOnlyBakingHome;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Order;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * API of the Logic component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    ReadOnlyBakingHome getReadingHome();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    ObservableList\u003cOrder\u003e getFilteredOrderList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    ObservableList\u003cProduct\u003e getFilteredProductList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 28,
      "liushiru": 3
    }
  },
  {
    "path": "src/main/java/duke/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.order.EditOrderCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.BakingHomeParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.ReadOnlyBakingHome;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Order;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final BakingHomeParser bakingHomeParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.bakingHomeParser \u003d new BakingHomeParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Command command \u003d bakingHomeParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public ReadOnlyBakingHome getReadingHome() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public ObservableList\u003cOrder\u003e getFilteredOrderList() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return model.getFilteredOrderList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public ObservableList\u003cProduct\u003e getFilteredProductList() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return model.getFilteredProductList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 50,
      "liushiru": 6
    }
  },
  {
    "path": "src/main/java/duke/logic/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 19
    }
  },
  {
    "path": "src/main/java/duke/logic/command/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this(feedbackToUser, DisplayedPage.SAME, false);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * The page that should be displayed to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final DisplayedPage displayedPage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public CommandResult(String feedbackToUser, DisplayedPage displayedPage, boolean exit) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.displayedPage \u003d displayedPage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public CommandResult(String feedbackToUser, DisplayedPage displayedPage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this(feedbackToUser, displayedPage, false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public enum DisplayedPage {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        PRODUCT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ORDER,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        INVENTORY,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        SALE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        SAME"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public DisplayedPage getDisplayedPage() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return displayedPage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 59,
      "liushiru": 1
    }
  },
  {
    "path": "src/main/java/duke/logic/command/Undoable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * API for all commands that supports redo and undo operations."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public interface Undoable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Reverses the action of an earlier action."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    void undo(Model model) throws CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Restores any actions that have been previously undone using undo."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    void redo(Model model) throws CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 27
    }
  },
  {
    "path": "src/main/java/duke/logic/command/decrypted/AddSale.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//package duke.logic.command.decrypted;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.command.Undoable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.commons.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.entities.Sale;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.parser.decrypted.CommandParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.storage.BakingList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//public class AddSale implements Undoable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private Map\u003cString, List\u003cString\u003e\u003e params;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private Sale sale;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public AddSale(Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        this.params \u003d params;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void execute(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        sale \u003d new Sale();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        CommandParser.modifySale(params, sale);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        addSale(sale, bakingList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ui.refreshSaleList(bakingList.getSaleList(), bakingList.getSaleList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void undo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        bakingList.getSaleList().remove(sale);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ui.refreshSaleList(bakingList.getSaleList(), bakingList.getSaleList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void redo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        execute(bakingList, storage, ui);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private void addSale(Sale sale, BakingList bakingList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        bakingList.getSaleList().add(0, sale);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 46
    }
  },
  {
    "path": "src/main/java/duke/logic/command/decrypted/CompleteOrder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//package duke.logic.command.decrypted;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.commons.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.command.Undoable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.model.order.Order;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.parser.decrypted.CommandParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.storage.BakingList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.Map;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "///**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "// * A command to set the status of an \u003ccode\u003eOrder\u003c/code\u003e object to \u003ccode\u003eCOMPLETED\u003c/code\u003e."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "// */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//public class CompleteOrder extends Command implements Undoable {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private List\u003cOrder\u003e orders;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private Map\u003cString, List\u003cString\u003e\u003e params;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * Class constructor."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * @param params The parameters specifying details of the order."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public CompleteOrder(Map\u003cString, List\u003cString\u003e\u003e params) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        this.params \u003d params;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void undo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void redo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void execute(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        orders \u003d CommandParser.getOrders(bakingList.getOrderList(), params);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        for (Order order : orders) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            order.setStatus(Order.Status.COMPLETED);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ui.refreshOrderList(bakingList.getOrderList(), bakingList.getOrderList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 51
    }
  },
  {
    "path": "src/main/java/duke/logic/command/decrypted/DeleteSale.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//package duke.logic.command.decrypted;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.command.Undoable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.commons.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.entities.Sale;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.parser.decrypted.CommandParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.storage.BakingList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//public class DeleteSale implements Undoable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private Sale sale;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private Map\u003cString, List\u003cString\u003e\u003e params;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public DeleteSale(Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        this.params \u003d params;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        checkParameters();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void execute(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        this.sale \u003d CommandParser.getSaleByIndexOrId(bakingList.getSaleList(), params);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        this.index \u003d CommandParser.getSaleIndex(bakingList.getSaleList(), params);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        bakingList.getSaleList().remove(sale);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ui.refreshSaleList(bakingList.getSaleList(), bakingList.getSaleList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void undo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        bakingList.getSaleList().add(index, sale);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ui.refreshOrderList(bakingList.getOrderList(), bakingList.getOrderList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void redo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        execute(bakingList, storage, ui);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private void checkParameters() throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (!(params.containsKey(\"secondary\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                ^ params.containsKey(\"i\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                ^ params.containsKey(\"id\"))) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throw new DukeException(\"Too many parameters\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (!params.containsKey(\"secondary\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                \u0026\u0026 !params.containsKey(\"i\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                \u0026\u0026 !params.containsKey(\"id\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throw new DukeException(\"Too few parameters\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private Sale getSale(List\u003cSale\u003e sales) throws DukeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (params.containsKey(\"secondary\") || params.containsKey(\"i\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            return getSaleByIndexParameter(sales);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } else if (params.containsKey(\"id\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throw new DukeException(\"Please specify an order\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        return null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private Sale getSaleByIndexParameter(List\u003cSale\u003e sales) throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        String indexParameter;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (params.containsKey(\"secondary\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            indexParameter \u003d params.get(\"secondary\").get(0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            indexParameter \u003d params.get(\"i\").get(0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            index \u003d Integer.parseInt(indexParameter) - 1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            return sales.get(index);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throw new DukeException(\"Please enter a valid index.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } catch (IndexOutOfBoundsException i) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throw new DukeException(\"Index out of bound\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 86
    }
  },
  {
    "path": "src/main/java/duke/logic/command/decrypted/EditSale.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//package duke.logic.command.decrypted;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.command.Undoable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.commons.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.entities.Sale;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.parser.commons.TimeParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.parser.decrypted.CommandParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.storage.BakingList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//public class EditSale implements Undoable {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private Map\u003cString, List\u003cString\u003e\u003e params;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private Sale sale;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private Sale unmodifiedSale \u003d new Sale();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public EditSale(Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (!(params.containsKey(\"i\") \u003d\u003d !params.containsKey(\"id\"))) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throw new DukeException(\"Please specify order ID or index\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        this.params \u003d params;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void execute(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        sale \u003d getSale(bakingList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        copySale(unmodifiedSale, sale);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        CommandParser.modifySale(params, sale);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ui.refreshSaleList(bakingList.getSaleList(), bakingList.getSaleList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void undo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        copySale(sale, unmodifiedSale);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ui.refreshSaleList(bakingList.getSaleList(), bakingList.getSaleList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void redo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        sale \u003d getSale(bakingList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        CommandParser.modifySale(params, sale);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ui.refreshOrderList(bakingList.getOrderList(), bakingList.getOrderList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private Sale getSale(BakingList bakingList) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (params.containsKey((\"i\"))) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            return getSaleByIndex(bakingList, params.get(\"i\").get(0));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            return getSaleById(bakingList, params.get(\"id\").get(0));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private Sale getSaleById(BakingList bakingList, String i) throws DukeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        long id;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            id \u003d Long.parseLong(params.get(\"id\").get(0));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throw new DukeException(\"Please provide a valid order ID\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        for (Sale sale : bakingList.getSaleList()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            if (sale.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                return sale;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        throw new DukeException(\"Unknown ID\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private Sale getSaleByIndex(BakingList bakingList, String i) throws DukeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        int index;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            index \u003d Integer.parseInt(params.get(\"i\").get(0)) - 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throw new DukeException(\"Please provide a valid index\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (index \u003c 0 || index \u003e\u003d bakingList.getSaleList().size()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throw new DukeException(\"Index out of bound.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        return bakingList.getSaleList().get(index);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private void modifySale(Sale sale, Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (params.containsKey(\"desc\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            sale.setDescription(params.get(\"desc\").get(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (params.containsKey(\"contact\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            sale.setValue(Double.parseDouble(params.get(\"value\").get(0)));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (params.containsKey(\"rmk\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            sale.setRemarks(params.get(\"rmk\").get(0));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (params.containsKey(\"at\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            sale.setSaleDate(TimeParser.convertStringToDate(params.get(\"at\").get(0)));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private void copySale(Sale to, Sale from) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        to.setId(from.getId());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        to.setDescription(from.getDescription());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        to.setValue(from.getValue());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        to.setSaleDate(from.getSaleDate());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        to.setRemarks(from.getRemarks());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 114
    }
  },
  {
    "path": "src/main/java/duke/logic/command/decrypted/ExecuteShortcut.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//package duke.logic.command.decrypted;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.command.Undoable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.commons.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.parser.decrypted.OldParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.storage.BakingList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.ListIterator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "///**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "// * A command to execute a user-defined set of commands."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "// */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//public class ExecuteShortcut extends Command implements Undoable {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private List\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private List\u003cCommand\u003e commands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * Class constructor."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * @param lines A list containing user inputs. Each entry represents a line of user input is to be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     *              converted to a \u003ccode\u003eCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * @throws DukeException if fails to convert any line into a \u003ccode\u003eCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public ExecuteShortcut(@JsonProperty(\"lines\") List\u003cString\u003e lines) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        this.lines \u003d lines;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        for (String line : lines) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                Command command \u003d OldParser.getCommand(line.strip(), new HashMap\u003cString, ExecuteShortcut\u003e());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                commands.add(command);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            } catch (DukeException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                //TODO: Improve catching"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                throw new DukeException(\"Error when adding shortcut: \" + e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void undo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ListIterator\u003cCommand\u003e itr \u003d commands.listIterator(commands.size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        while (itr.hasPrevious()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            Command command \u003d itr.previous();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            if (command instanceof Undoable) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                ((Undoable) command).undo(bakingList, storage, ui);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ui.showMessage(\"Undo: Execute shortcut\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void redo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        execute(bakingList, storage, ui);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ui.showMessage(\"Redo: Execute shortcut\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void execute(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        for (Command command : commands) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            command.execute(bakingList, storage, ui);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ui.showMessage(\"Shortcut executed successfully\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * Returns a list containing user inputs."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * @return A list containing user inputs. Each entry represents a line of user input is to be converted to"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * a \u003ccode\u003eCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public List\u003cString\u003e getLines() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        return lines;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * Sets a set of inputs to be converted to \u003ccode\u003eCommand\u003c/code\u003e objects."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * @param lines A list containing user inputs. Each entry represents a line of user input is to be"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     *              converted to a \u003ccode\u003eCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void setLines(List\u003cString\u003e lines) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        this.lines \u003d lines;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 91
    }
  },
  {
    "path": "src/main/java/duke/logic/command/decrypted/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//package duke.logic.command.decrypted;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.commons.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.storage.BakingList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "///**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "// * A command that restores any actions that have been previously undone using undo."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "// */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void execute(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 20
    }
  },
  {
    "path": "src/main/java/duke/logic/command/decrypted/SetShortcut.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//package duke.logic.command.decrypted;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.command.Undoable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.commons.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.storage.BakingList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "///**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "// * A command to set a new shortcut. A shortcut is a set of user-defined commands that can be executed by"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "// * entering the shortcut keyword."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "// */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//public class SetShortcut extends Command implements Undoable {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private ExecuteShortcut unmodifiedExecuteShortCutCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private List\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private final Set\u003cString\u003e reservedWords \u003d Set.of("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            \"undo\", \"redo\", \"order\", \"recipe\", \"add\", \"remove\", \"edit\", \"done\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    );"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * Class constructor."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * @param line A line of user input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * @throws DukeException if shortcut name contains the application\u0027s reserved words."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public SetShortcut(String line) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        splitIntoLines(line);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (containsReservedWords(name)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throw new DukeException(\"Cannot contain reserved words\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void undo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (unmodifiedExecuteShortCutCommand \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            System.out.println(\"here\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            bakingList.getShortcuts().remove(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            bakingList.getShortcuts().put(name, unmodifiedExecuteShortCutCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ui.showMessage(\"Undo: Set shortcut\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void redo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        execute(bakingList, storage, ui);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ui.showMessage(\"Redo: Set shortcut\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void execute(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ExecuteShortcut executeShortcutCommand \u003d new ExecuteShortcut(lines);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (bakingList.getShortcuts().containsKey(name)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            unmodifiedExecuteShortCutCommand \u003d bakingList.getShortcuts().get(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        bakingList.getShortcuts().put(name, executeShortcutCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ui.showMessage(\"Shortcut added\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private void splitIntoLines(String line) throws DukeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        Pattern pattern \u003d Pattern.compile(\"^\\\\w+\\\\s+(\\\\w+)\\\\s+\\\\\\\"(.*?)\\\\\\\"\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        Matcher matcher \u003d pattern.matcher(line);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (!matcher.find()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throw new DukeException(\"Please enter valid parameters\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        this.name \u003d matcher.group(1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        this.lines \u003d Arrays.asList(matcher.group(2).split(\";\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private boolean containsReservedWords(String str) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        return reservedWords.contains(str.strip());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 86
    }
  },
  {
    "path": "src/main/java/duke/logic/command/decrypted/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//package duke.logic.command.decrypted;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.commons.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.storage.BakingList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "///**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "// * A command that reverses the action of an earlier action."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "// */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void execute(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 20
    }
  },
  {
    "path": "src/main/java/duke/logic/command/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.command.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 14
    }
  },
  {
    "path": "src/main/java/duke/logic/command/order/AddOrderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.command.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.Undoable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Order;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A command to add an order to BakingHome."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class AddOrderCommand extends OrderCommand implements Undoable {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New order added [Order ID: %s]\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Order toAdd;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates an AddOrderCommand to add the specified {@code Order}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param toAdd the {@code Order} to be added"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public AddOrderCommand(Order toAdd) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        model.addOrder(toAdd);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.getId()), CommandResult.DisplayedPage.ORDER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void undo(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        model.deleteOrder(toAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void redo(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        model.addOrder(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 46
    }
  },
  {
    "path": "src/main/java/duke/logic/command/order/DeleteOrderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//package duke.logic.command.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.commons.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.commons.core.Message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.command.Undoable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.model.order.Order;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "///**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "// * A command to remove an \u003ccode\u003eOrder\u003c/code\u003e object from an \u003ccode\u003eOrderList\u003c/code\u003e object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "// */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//public class DeleteOrderCommand extends OrderCommand implements Undoable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private List\u003cOrder\u003e toDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private List\u003cInteger\u003e toDeleteIndexes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public DeleteOrderCommand(int... index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        for (int i \u003d 0; i \u003c index.length; i++) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            toDeleteIndexes.add(index[i]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public DeleteOrderCommand(int start, int end) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        for (int i \u003d start; i \u003c\u003d end; i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            toDeleteIndexes.add(i);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public DeleteOrderCommand(List\u003cInteger\u003e toDeleteIndexes) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        this.toDeleteIndexes \u003d toDeleteIndexes;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void undo(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        for (int i \u003d 0; i \u003c toDeleteIndexes.size(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            model.getOrderList().add(toDeleteIndexes.get(i), toDelete.get(i));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        storage.serialize(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ui.refreshOrderList(model.getOrderList(), model.getOrderList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ui.showMessage(\"Undo: Remove order\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void redo(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            execute(bakingList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } catch (CommandException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            e.printStackTrace();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ui.showMessage(\"Redo: Remove order\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        for (int i : toDeleteIndexes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            if (i \u003e\u003d model.getOrderList().size() || i \u003c 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                throw new DukeException(Message.MESSAGE_INVALID_RANGE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            toDelete.add(model.getOrderList().get(i));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        model.getOrderList().removeAll(toDelete);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        storage.serialize(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ui.refreshOrderList(model.getOrderList(), model.getOrderList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ui.showMessage(\"Order removed\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 73
    }
  },
  {
    "path": "src/main/java/duke/logic/command/order/EditOrderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.command.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.Undoable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.commons.comProduct;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Customer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Order;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A command to edit the details of an existing order."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class EditOrderCommand extends OrderCommand implements Undoable {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Order [%1$s]\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final EditOrderDescriptor editOrderDescriptor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Order orderToEdit;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates an EditOrderCommand to modify the details of an {@code Order}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param index               of the the order in the filtered order list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param editOrderDescriptor details to edit the order with"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public EditOrderCommand(Index index, EditOrderDescriptor editOrderDescriptor) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireAllNonNull(index, editOrderDescriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.editOrderDescriptor \u003d new EditOrderDescriptor(editOrderDescriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void undo(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        model.setOrder(index, orderToEdit);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void redo(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        execute(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        List\u003cOrder\u003e lastShownList \u003d model.getFilteredOrderList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new CommandException(Message.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        orderToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Order editedOrder \u003d createEditedOrder(orderToEdit, editOrderDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        model.setOrder(orderToEdit, editedOrder);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        model.updateFilteredOrderList(Model.PREDICATE_SHOW_ALL_ORDERS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedOrder.getId()),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                CommandResult.DisplayedPage.ORDER);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static Order createEditedOrder(Order toEdit, EditOrderDescriptor editOrderDescriptor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        assert toEdit !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Customer newCustomer \u003d new Customer("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                editOrderDescriptor.getCustomerName().orElse(toEdit.getCustomer().name),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                editOrderDescriptor.getCustomerContact().orElse(toEdit.getCustomer().contact)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Date newDate \u003d editOrderDescriptor.getDeliveryDate().orElse(toEdit.getDeliveryDate());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        Map\u003ccomProduct, Integer\u003e newItems \u003d editOrderDescriptor.getItems().orElse(toEdit.getItems());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String newRemarks \u003d editOrderDescriptor.getRemarks().orElse(toEdit.getRemarks());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Order.Status newStatus \u003d editOrderDescriptor.getStatus().orElse(toEdit.getStatus());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new Order(newCustomer, newDate, newStatus, newRemarks, newItems);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Stores the details to edit the order with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * corresponding field value of the order."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static class EditOrderDescriptor {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        private String customerName;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        private String customerContact;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        private Date deliveryDate;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        private Map\u003ccomProduct, Integer\u003e items;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        private String remarks;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        private Order.Status status;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        public EditOrderDescriptor() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "         * @param toCopy the EditOrderDescriptor to copy from"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "         */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        public EditOrderDescriptor(EditOrderDescriptor toCopy) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            setCustomerName(toCopy.customerName);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            setCustomerContact(toCopy.customerContact);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            setDeliveryDate(toCopy.deliveryDate);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            setItems(toCopy.items);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            setRemarks(toCopy.remarks);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            setStatus(toCopy.status);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "         */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return CollectionUtil.isAnyNonNull(customerName, customerContact, deliveryDate, items, remarks, status);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        public void setCustomerName(String name) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            this.customerName \u003d name;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        public void setCustomerContact(String contact) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            this.customerContact \u003d contact;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        public void setDeliveryDate(Date deliveryDate) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            this.deliveryDate \u003d deliveryDate;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        public void setItems(Map\u003ccomProduct, Integer\u003e items) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            this.items \u003d (items !\u003d null) ? new HashMap\u003c\u003e(items) : null;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        public void setRemarks(String remarks) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        public void setStatus(Order.Status status) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            this.status \u003d status;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        public Optional\u003cString\u003e getCustomerName() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return Optional.ofNullable(customerName);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        public Optional\u003cString\u003e getCustomerContact() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return Optional.ofNullable(customerContact);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        public Optional\u003cDate\u003e getDeliveryDate() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return Optional.ofNullable(deliveryDate);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        public Optional\u003cMap\u003ccomProduct, Integer\u003e\u003e getItems() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return Optional.ofNullable(items);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        public Optional\u003cString\u003e getRemarks() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return Optional.ofNullable(remarks);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        public Optional\u003cOrder.Status\u003e getStatus() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return Optional.ofNullable(status);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        public boolean equals(Object o) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            EditOrderDescriptor that \u003d (EditOrderDescriptor) o;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return Objects.equals(customerName, that.customerName)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    \u0026\u0026 Objects.equals(customerContact, that.customerContact)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    \u0026\u0026 Objects.equals(deliveryDate, that.deliveryDate)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    \u0026\u0026 Objects.equals(items, that.items)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    \u0026\u0026 Objects.equals(remarks, that.remarks)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    \u0026\u0026 status \u003d\u003d that.status;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        public int hashCode() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return Objects.hash(customerName, customerContact, deliveryDate, items, remarks, status);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 196,
      "liushiru": 5
    }
  },
  {
    "path": "src/main/java/duke/logic/command/order/OrderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.command.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A abstract base class for commands that manages orders."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public abstract class OrderCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"order\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 10
    }
  },
  {
    "path": "src/main/java/duke/logic/command/product/AddProductCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.logic.command.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class AddProductCommand extends ProductCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static String MESSAGE_SUCCESS \u003d \"New product: %s added\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static String MESSAGE_NEW_INGREDIENTS_CREATED \u003d MESSAGE_SUCCESS + \", new ingredients created\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private final Product toAdd;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public AddProductCommand(Product toAdd) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        model.addProduct(toAdd);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.getName()),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                CommandResult.DisplayedPage.PRODUCT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liushiru": 36
    }
  },
  {
    "path": "src/main/java/duke/logic/command/product/EditProductCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.logic.command.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.product.EditProductCommandParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import static duke.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class EditProductCommand extends ProductCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final String MESSAGE_EDIT_PRODUCT_SUCCESS \u003d \"Edited Products %s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public final Index index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public final EditProductDescriptor editProductDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private Product toEdit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EditProductCommandParser.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Creates an EditProductCommand to modify the details of an {@code comProduct}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @param index                 of the product in the filtered product list"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @param editProductDescriptor details to edit the product with"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public EditProductCommand(Index index, EditProductDescriptor editProductDescriptor) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        requireAllNonNull(index, editProductDescriptor);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.editProductDescriptor \u003d new EditProductDescriptor(editProductDescriptor);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        requireAllNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        List\u003cProduct\u003e lastShownList \u003d model.getFilteredProductList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            logger.warning(\"edit product index out of bound\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            throw new CommandException(Message.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        toEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        Product editedProduct \u003d createEditedProduct(toEdit, editProductDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        model.setProduct(toEdit, editedProduct);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        model.updateFilteredProductList(Model.PREDICATE_SHOW_ALL_PRODUCTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PRODUCT_SUCCESS, editedProduct.getName()),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                CommandResult.DisplayedPage.PRODUCT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private static Product createEditedProduct(Product toEdit, EditProductDescriptor editProductDescriptor) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        assert toEdit !\u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        String newName \u003d editProductDescriptor.getProductName().orElse(toEdit.getName());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        String newPrice \u003d editProductDescriptor.getRetailPrice().orElse(String.valueOf(toEdit.getPrice()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        //System.out.println(toEdit.getPrice());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        //System.out.println(editProductDescriptor.getRetailPrice());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        //System.out.println(newPrice);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        String newCost \u003d editProductDescriptor.getIngredientCost().orElse(String.valueOf(toEdit.getCost()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        Product.Status newStatus \u003d editProductDescriptor.getStatus().orElse(toEdit.getStatus());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return new Product(newName, newPrice, newCost, newStatus);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /** Stores the details to edit the product with. Each non-empty field value will replace the previous"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * field value of the product."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static class EditProductDescriptor {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        private String productName;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        //private IngredientList ingredientList;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        private String ingredientCost;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        private String retailPrice;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        private Product.Status status;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        public EditProductDescriptor() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        private EditProductDescriptor(EditProductDescriptor toCopy) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            setProductName(toCopy.productName);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            setIngredientCost(toCopy.ingredientCost);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            setRetailPrice(toCopy.retailPrice);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            System.out.println(toCopy.retailPrice);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            setStatus(toCopy.status);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        public void setProductName(String newProductName) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            this.productName \u003d newProductName;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        public void setIngredientCost(String newIngredientCost) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            this.ingredientCost \u003d newIngredientCost;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        public void setRetailPrice(String newRetailPrice) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            this.retailPrice \u003d newRetailPrice;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        public void setStatus(Product.Status newStatus) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            this.status \u003d newStatus;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        public Optional\u003cString\u003e getProductName() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            return Optional.ofNullable(productName);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        public Optional\u003cString\u003e getIngredientCost() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            return Optional.ofNullable(ingredientCost);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        public Optional\u003cString\u003e getRetailPrice() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            return Optional.ofNullable(retailPrice);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        public Optional\u003cProduct.Status\u003e getStatus() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            return Optional.ofNullable(status);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liushiru": 139
    }
  },
  {
    "path": "src/main/java/duke/logic/command/product/ProductCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.logic.command.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": " * A abstract base class for commands that manages products."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public abstract class ProductCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"product\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liushiru": 10
    }
  },
  {
    "path": "src/main/java/duke/logic/command/shortcut/ExecuteShortcutCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.command.shortcut;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.Undoable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.BakingHomeParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.shortcut.Shortcut;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A command to execute a series of user-defined commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class ExecuteShortcutCommand extends Command implements Undoable {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"do\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_SHORTCUT_NOT_FOUND \u003d \"Shortcut not found\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Shortcut executed successfully\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_EXECUTION_FAILED \u003d \"Execute [%s] failed: %s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final String shortcutName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Shortcut toExecute;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates ExecuteShortcutCommand."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param shortcutName The name of the shortcut. Must be non-empty."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public ExecuteShortcutCommand(String shortcutName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(shortcutName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.shortcutName \u003d shortcutName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        getShortcut(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        BakingHomeParser parser \u003d new BakingHomeParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (String line : toExecute.getUserInputs()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                Command command \u003d parser.parseCommand(line);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                command.execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_EXECUTION_FAILED, line, e.getMessage()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void undo(Model model) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //TBD"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void redo(Model model) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //TBD"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void getShortcut(Model model) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (Shortcut shortcut : model.getShortcutList()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (shortcut.getName().equals(shortcutName)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                this.toExecute \u003d shortcut;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        throw new CommandException(MESSAGE_SHORTCUT_NOT_FOUND);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 74
    }
  },
  {
    "path": "src/main/java/duke/logic/command/shortcut/SetShortcutCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.command.shortcut;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.Undoable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.shortcut.Shortcut;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class SetShortcutCommand extends Command implements Undoable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"short\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_SET_SUCCESS \u003d \"Shortcut [%s] is set.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_REMOVE_SUCCESS \u003d \"Shortcut [%s] is removed.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_EMPTY_SHORTCUT \u003d \"Shortcut cannot be empty.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Shortcut shortcut;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final boolean isEmptyShortcut;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public SetShortcutCommand(Shortcut shortcut) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.shortcut \u003d shortcut;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        isEmptyShortcut \u003d shortcut.getUserInputs().get(0).equals(\"\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (isEmptyShortcut \u0026\u0026 model.hasShortcut(shortcut)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            model.removeShortcut(shortcut);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_REMOVE_SUCCESS, shortcut.getName()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } else if (isEmptyShortcut) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return new CommandResult(MESSAGE_EMPTY_SHORTCUT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            model.setShortcut(shortcut);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SET_SUCCESS, shortcut.getName()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void undo(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //TBD"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void redo(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //TBD"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 47
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/commons/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Prefixes mapped to their respective arguments."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 62
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/commons/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * e.g. {@code some preamble text -name jiajun -contact 12345678 -i}  where prefixes are {@code -name -contact -i}.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code -i} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final Pattern PREAMBLE_ARGS_FORMAT \u003d Pattern.compile(\"^([^-]+)?\\\\s*(.*)\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final Pattern PREFIX_VALUE_FORMAT \u003d Pattern.compile(\"(-\\\\w+)\\\\s*([^-]+|-\\\\w+)?\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String preamble \u003d extractPreambleAndArgs(argsString).get(0).strip();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String args \u003d extractPreambleAndArgs(argsString).get(1).strip();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ArgumentMultimap map \u003d extractArgs(prefixes, argsString);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        map.put(new Prefix(\"\"), preamble);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static List\u003cString\u003e extractPreambleAndArgs(String argString) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        final Matcher matcher \u003d PREAMBLE_ARGS_FORMAT.matcher(argString.strip());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        List\u003cString\u003e res \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (matcher.group(1) \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            res.add(\"\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            res.add(matcher.group(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (matcher.group(2) \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            res.add(\"\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            res.add(matcher.group(2));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static ArgumentMultimap extractArgs(Prefix[] prefixes, String args) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        List\u003cPrefix\u003e prefixList \u003d Arrays.asList(prefixes);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ArgumentMultimap map \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        final Matcher matcher \u003d PREFIX_VALUE_FORMAT.matcher(args);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        while (matcher.find()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            String prefixString \u003d matcher.group(1).strip();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            Prefix prefix \u003d new Prefix(prefixString);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            String value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (matcher.group(2) !\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                value \u003d matcher.group(2).strip();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                value \u003d \"\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (prefixList.contains(prefix)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                map.put(prefix, value);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new ParseException(Message.MESSAGE_INVALID_PREFIX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 80
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/commons/BakingHomeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.shortcut.SetShortcutCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.shortcut.ExecuteShortcutCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.order.OrderCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.product.ProductCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.order.OrderCommandParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.product.ProductCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.shortcut.SetShortcutCommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.shortcut.ExecuteShortcutCommandParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Parser that parses user input into {@code Command}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class BakingHomeParser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Used to get primary command word."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Capture group 1: primary command word."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Capture group 2: (optional) sub-command word and args."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final Pattern PRIMARY_COMMAND_FORMAT \u003d Pattern.compile(\"^(\\\\w+)\\\\s*(.+)?\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Parses user input into {@code Command}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param userInput full input text from user"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        final Matcher matcher \u003d PRIMARY_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String primaryCommand \u003d matcher.group(1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String subCommandAndArgs \u003d matcher.group(2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (subCommandAndArgs \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            subCommandAndArgs \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        switch (primaryCommand) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        case OrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return new OrderCommandParser().parse(subCommandAndArgs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        case ProductCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            return new ProductCommandParser().parse(subCommandAndArgs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        case SetShortcutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return new SetShortcutCommandParser().parse(subCommandAndArgs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        case ExecuteShortcutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return new ExecuteShortcutCommandParser().parse(subCommandAndArgs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(Message.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 59,
      "liushiru": 4
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/commons/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /* Command keywords */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final Set\u003cString\u003e KEYWORDS \u003d new HashSet\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            .asList(\"order\", \"add\", \"remove\", \"edit\", \"short\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final Prefix PREFIX_ORDER_ITEM \u003d new Prefix(\"-item\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final Prefix PREFIX_CUSTOMER_NAME \u003d new Prefix(\"-name\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final Prefix PREFIX_CUSTOMER_CONTACT \u003d new Prefix(\"-contact\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final Prefix PREFIX_ORDER_REMARKS \u003d new Prefix(\"-rmk\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final Prefix PREFIX_ORDER_DEADLINE \u003d new Prefix(\"-by\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final Prefix PREFIX_ORDER_STATUS \u003d new Prefix(\"-status\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final Prefix PREFIX_ORDER_INDEX \u003d new Prefix(\"-i\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final Prefix PREFIX_PRODUCT_NAME \u003d new Prefix(\"-name\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final Prefix PREFIX_PRODUCT_INGREDIENT \u003d new Prefix(\"-ingt\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final Prefix PREFIX_PRODUCT_COST \u003d new Prefix(\"-cost\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final Prefix PREFIX_PRODUCT_PRICE \u003d new Prefix(\"-price\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final Prefix PREFIX_PRODUCT_INDEX \u003d new Prefix(\"-i\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final Prefix PREFIX_PRODUCT_STATUS \u003d new Prefix(\"-status\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 24,
      "liushiru": 7
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/commons/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Represents a Parser that is able to parse full user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * @param \u003cT\u003e the type of the command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 17
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/commons/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.commons.comProduct;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Order;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * TODO: Fill in details."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    ///Common utilities."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    ///Order-related utilities."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static Map\u003ccomProduct, Integer\u003e parseItems(List\u003cString\u003e itemArg) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        Map\u003ccomProduct, Integer\u003e items \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (String itemString : itemArg) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            String[] itemAndQty \u003d itemString.split(\",\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (itemAndQty.length \u003c 2) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new ParseException(Message.MESSAGE_ITEM_MISSING_NAME_OR_QUANTITY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (itemAndQty[0].strip().equals(\"\") || itemAndQty[1].strip().equals(\"\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new ParseException(Message.MESSAGE_ITEM_MISSING_NAME_OR_QUANTITY);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liushiru"
        },
        "content": "              //  items.put(new comProduct(itemAndQty[0].strip()), Integer.parseInt(itemAndQty[1].strip()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new ParseException(Message.MESSAGE_INVALID_NUMBER_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return items;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static Order.Status parseStatus(String statusString) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return Order.Status.valueOf(statusString.trim().toUpperCase());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_STATUS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static Product.Status parseProductStatus(String statusString) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            return Product.Status.valueOf(statusString.trim().toUpperCase());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_STATUS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static List\u003cInteger\u003e getIndexes(String indexString) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        List\u003cInteger\u003e indexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (indexString.contains(\"~\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            indexes \u003d getIndexesInInterval(indexString);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            indexes \u003d getIndexesFromString(indexString);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return indexes;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static List\u003cInteger\u003e getIndexesInInterval(String interval) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String[] startAndEndIndexes \u003d interval.split(\"~\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        int start;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        int end;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            start \u003d Integer.parseInt(startAndEndIndexes[0]) - 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            end \u003d Integer.parseInt(startAndEndIndexes[1]) - 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_NUMBER_FORMAT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (start \u003e end) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_RANGE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (int i \u003d start; i \u003c\u003d end; i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            result.add(i);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static List\u003cInteger\u003e getIndexesFromString(String string) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String[] indexStrings \u003d string.split(\",\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (String indexString : indexStrings) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                result.add(Integer.parseInt(indexString) - 1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new ParseException(Message.MESSAGE_INVALID_NUMBER_FORMAT);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 104,
      "liushiru": 15
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/commons/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * E.g. \u0027-item\u0027 in \u0027order add -item bread, 2\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 39
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/commons/SubCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Represents a Parser that is able to parse the sub command into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * @param \u003cT\u003e the type of the sub command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public interface SubCommandParser\u003cT extends Command\u003e extends Parser\u003cT\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Used to get sub-command and args."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Capture group 1: Sub-command word."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Capture group 2: (Optional) Args."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    Pattern SUB_COMMAND_AND_ARGS_FORMAT \u003d Pattern.compile(\"^(\\\\w+)\\\\s*(.*)\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns the sub command word."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * For example, in {@code add -name jj}, {@code add} is returned."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param subCommandAndArgs a string containing sub command and args"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @return the sub command word"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    static String getSubCommandWord(String subCommandAndArgs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(subCommandAndArgs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        final Matcher matcher \u003d SUB_COMMAND_AND_ARGS_FORMAT.matcher(subCommandAndArgs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return matcher.group(1).strip();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns the args."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * For example, in {@code add -name jj}, {@code -name jj} is returned."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param subCommandAndArgs a string containing sub command and args"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @return the args"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    static String getArgs(String subCommandAndArgs) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(subCommandAndArgs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        final Matcher matcher \u003d SUB_COMMAND_AND_ARGS_FORMAT.matcher(subCommandAndArgs.trim());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return matcher.group(2).strip();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 58
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/commons/TimeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import org.ocpsoft.prettytime.PrettyTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import org.ocpsoft.prettytime.nlp.PrettyTimeParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Parser to parse time."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Convert between date object and String date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * TODO: explain in detail with examples."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class TimeParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static PrettyTime prettyTime \u003d new PrettyTime();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static PrettyTimeParser prettyTimeParser \u003d new PrettyTimeParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"EEE, MMM d, yyyy HH:mm\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Converts a Date object to a human-friendly string representing the date."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param date Date object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @return a human-friendly string representing the date"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static String convertDateToString(Date date) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (date.getTime() - System.currentTimeMillis() \u003e 1000 * 3600 * 24 * 5) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return dateFormat.format(date);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return prettyTime.format(date);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Converts a string representing the date to a Date object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param str a string representing the date."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @return the date based on the string."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws ParseException if cannot parse the string into a date."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static Date convertStringToDate(String str) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        List\u003cDate\u003e dates \u003d prettyTimeParser.parse(str);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (dates.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return dates.get(0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 49,
      "liushiru": 1
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/decrypted/CommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//package duke.logic.parser.decrypted;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.commons.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.entities.Sale;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "////import duke.logic.command.recipe.AddRecipeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.model.order.Order;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.parser.commons.TimeParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//public class CommandParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "////    public static Command parseSaleAdd(Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "////        return new AddSaleCommand(params);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "////    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "////"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "////"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "////    public static Command parseSaleDelete(Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "////        return new DeleteSaleCommand(params);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "////    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "////"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "////    public static Command parseOrderEdit(Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "////        return new EditOrderCommand(params);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "////    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "////"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "////    public static Command parseSaleEdit(Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "////        return new EditSaleCommand(params);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "////    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public static void modifyOrdrer(Map\u003cString, List\u003cString\u003e\u003e params, Order order) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (params.containsKey(\"name\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            order.setCustomerName(params.get(\"name\").get(0));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (params.containsKey(\"contact\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            order.setCustomerContact(params.get(\"contact\").get(0));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (params.containsKey(\"rmk\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            order.setRemarks(params.get(\"rmk\").get(0));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (params.containsKey(\"by\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            order.setDeliveryDate(TimeParser.convertStringToDate(params.get(\"by\").get(0)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (params.containsKey(\"status\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                order.setStatus(Order.Status.valueOf(params.get(\"status\").get(0).toUpperCase()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                throw new DukeException(\"Invalid status\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        addItemsToOrder(params, order);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public static void modifySale(Map\u003cString, List\u003cString\u003e\u003e params, Sale sale) throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (params.containsKey(\"desc\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            sale.setDescription(params.get(\"desc\").get(0));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (params.containsKey(\"value\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            sale.setValue(Double.parseDouble(params.get(\"value\").get(0)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (params.containsKey(\"at\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            sale.setSaleDate(TimeParser.convertStringToDate(params.get(\"at\").get(0)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public static void addItemsToOrder(Map\u003cString, List\u003cString\u003e\u003e params, Order order) throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (!params.containsKey(\"item\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            return;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        for (String item : params.get(\"item\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            String[] itemAndQty \u003d item.split(\",\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            if (itemAndQty.length \u003c 2) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                throw new DukeException(\"Must have item name and quantity\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            if (itemAndQty[0].strip().equals(\"\") || itemAndQty[1].strip().equals(\"\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                throw new DukeException(\"Item name and quantity should not be empty\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                order.addItem(itemAndQty[0].strip(), Integer.parseInt(itemAndQty[1].strip()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                throw new DukeException(\"Quantity should be an integer\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    //////////////////////////////////////////////////////////////////////////////////"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "////    public static Command parseRecipeDelete(Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "////        //return new DeleteRecipeCommand(params);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "////    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public static Command parseRecipeAdd(Map\u003cString, List\u003cString\u003e\u003e params) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        return new AddRecipeCommand(params);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private static void checkParameters(Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (!(params.containsKey(\"secondary\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                || params.containsKey(\"i\"))"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                \u0026\u0026 !params.containsKey(\"id\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throw new DukeException(\"must contain ids or indexes or both\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (params.containsKey(\"secondary\") \u0026\u0026 (params.containsKey(\"i\") || params.containsKey(\"id\"))) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throw new DukeException(\"Primary parameter cannot co-exist with -i or -id.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public static List\u003cOrder\u003e getOrders(List\u003cOrder\u003e orders, Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        checkParameters(params);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        List\u003cOrder\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        List\u003cInteger\u003e indexes \u003d getOrderIndexes(params);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        for (int index : indexes) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            if (index \u003e\u003d orders.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                throw new DukeException(\"Invalid index\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            result.add(orders.get(index));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        return result;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public static List\u003cInteger\u003e getOrderIndexes(Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        List\u003cInteger\u003e indexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (params.containsKey(\"secondary\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            if (params.get(\"secondary\").get(0).contains(\"~\")) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                indexes \u003d getIndexesInInterval(params.get(\"secondary\").get(0));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                indexes \u003d getIndexesFromString(params.get(\"secondary\").get(0));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            assert (params.get(\"i\") !\u003d null);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            if (params.get(\"i\").get(0).contains(\"~\")) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                indexes \u003d getIndexesInInterval(params.get(\"i\").get(0));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                indexes \u003d getIndexesFromString(params.get(\"i\").get(0));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        return indexes;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private static List\u003cInteger\u003e getIndexesInInterval(String interval) throws DukeException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        String[] startAndEndIndexes \u003d interval.split(\"~\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        int start;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        int end;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            start \u003d Integer.parseInt(startAndEndIndexes[0]) - 1;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            end \u003d Integer.parseInt(startAndEndIndexes[1]) - 1;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throw new DukeException(\"Wrong number format\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (start \u003e end) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throw new DukeException(\"Starting index should be no more than ending index\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        for (int i \u003d start; i \u003c\u003d end; i++) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            result.add(i);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        return result;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private static List\u003cInteger\u003e getIndexesFromString(String string) throws DukeException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        String[] indexStrings \u003d string.split(\",\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        for (String indexString : indexStrings) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                result.add(Integer.parseInt(indexString) - 1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                throw new DukeException(\"Wrong number format\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        return result;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public static Sale getSaleByIndexOrId(List\u003cSale\u003e sales, Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        checkParameters(params);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (params.containsKey(\"secondary\") || params.containsKey(\"i\")) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            int index \u003d getSaleIndex(sales, params);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            return sales.get(index);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } else if (params.containsKey(\"id\")) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throw new DukeException(\"Please specify an order\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        return null;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public static int getSaleIndex(List\u003cSale\u003e sales, Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        String indexParameter;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (params.containsKey(\"secondary\")) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            indexParameter \u003d params.get(\"secondary\").get(0);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            indexParameter \u003d params.get(\"i\").get(0);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        int index;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            index \u003d Integer.parseInt(indexParameter) - 1;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throw new DukeException(\"Please enter a valid index.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (index \u003c 0 || index \u003e\u003d sales.size()) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throw new DukeException(\"Index out of bound\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        return index;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 209
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/decrypted/OldParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//package duke.logic.parser.decrypted;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.commons.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.commons.core.Message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.command.decrypted.ExecuteShortcut;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.command.decrypted.RedoCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.command.decrypted.UndoCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "///**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "// * Parse user input into commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "// */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//public class OldParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private static final Set\u003cString\u003e reservedParameters \u003d new HashSet\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            \"line\", \"primary\", \"secondary\", \"cmd\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    ));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private static final String COMMAND_UNDO \u003d \"undo\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private static final String COMMAND_REDO \u003d \"redo\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private static final String COMMAND_ORDER \u003d \"order\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private static final String COMMAND_ORDER_ADD \u003d \"add\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private static final String COMMAND_ORDER_DELETE \u003d \"remove\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private static final String COMMAND_ORDER_EDIT \u003d \"edit\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private static final String COMMAND_ORDER_COMPLETE \u003d \"done\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private static final String COMMAND_SHORTCUT \u003d \"short\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * Parses user input into a \u003ccode\u003eCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * @param line the user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * @return the command from user input."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * @throws DukeException if input is not valid command or command parameters are invalid."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public static Command getCommand(String line, Map\u003cString, ExecuteShortcut\u003e shortcuts) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (shortcuts.containsKey(line.strip())) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            //return shortcuts.get(line.strip());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        Map\u003cString, List\u003cString\u003e\u003e params \u003d parseCommandAndParams(line);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        String commandWord \u003d params.get(\"cmd\").get(0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        switch (commandWord) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            case COMMAND_ORDER:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                return parseOrder(line);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            case COMMAND_UNDO:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                return parseUndo(line);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            case COMMAND_REDO:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                return parseRedo(line);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            case COMMAND_SHORTCUT:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                //return new SetShortcutCommand(line);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                throw new DukeException(Message.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private static Map\u003cString, List\u003cString\u003e\u003e parseCommandAndParams(String line) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        Map\u003cString, List\u003cString\u003e\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        addToParameter(\"line\", line, params);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        parseCommandAndPrimaryAndSecondary(line, params);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        parseParameterBlocks(line, params);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        return params;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private static void parseCommandAndPrimaryAndSecondary(String line, Map\u003cString, List\u003cString\u003e\u003e params)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throws DukeException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        //Regex to get the command word and the sub command, and primary parameter."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        Pattern commandWordPattern \u003d Pattern.compile(\"^(\\\\w+)\\\\s*(\\\\w+)?\\\\s*([^-]+)?\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        Matcher commandWordMatcher \u003d commandWordPattern.matcher(line);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (!commandWordMatcher.find()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throw new DukeException(\"Please enter a command\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        //In \"order remove 1\", \"order\" is \"cmd\"."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        addToParameter(\"cmd\", commandWordMatcher.group(1).strip(), params);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        if (commandWordMatcher.group(2) !\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            //In \"order remove 1\", \"remove\" is \"primary\"."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            addToParameter(\"primary\", commandWordMatcher.group(2).strip(), params);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            if (commandWordMatcher.group(3) !\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                //In \"order remove 1\", \"1\" is \"secondary\"."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                addToParameter(\"secondary\", commandWordMatcher.group(3).strip(), params);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private static void parseParameterBlocks(String line, Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        //Regex to get each parameter block. e.g. \"-at some place\" is one command block."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        Pattern paramsPattern \u003d Pattern.compile(\"(-\\\\w+ [^-]+|-\\\\w+)\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        Matcher paramsMatcher \u003d paramsPattern.matcher(line);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        while (paramsMatcher.find()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            String s \u003d paramsMatcher.group().strip();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            if (s.isEmpty() || s.isBlank()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                continue;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            //Regex to get parameter and value."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            // e.g. in \"-at some place\", \"at\" is the parameter and \"some place\" is the value."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            Pattern attrAndValuePattern \u003d Pattern.compile(\"-(\\\\w+) ([^-]+)|-(\\\\w+)\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            Matcher attrAndValueMatcher \u003d attrAndValuePattern.matcher(s);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            if (!attrAndValueMatcher.find()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                throw new DukeException(\"Please enter valid parameters\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            if (attrAndValueMatcher.group(2) \u003d\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                if (reservedParameters.contains(attrAndValueMatcher.group(3))) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                    throw new DukeException(\"Parameters contain reserved words\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                if (!params.containsKey(attrAndValueMatcher.group(3))) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                    addToParameter(attrAndValueMatcher.group(3), \"\", params);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                    params.get(attrAndValueMatcher.group(3)).add(\"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                if (reservedParameters.contains(attrAndValueMatcher.group(1))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                    throw new DukeException(\"Parameters contain reserved words\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                if (!params.containsKey(attrAndValueMatcher.group(1))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                    addToParameter(attrAndValueMatcher.group(1).strip(), attrAndValueMatcher.group(2), params);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                    params.get(attrAndValueMatcher.group(1).strip()).add(attrAndValueMatcher.group(2));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private static void addToParameter(String key, String value, Map\u003cString, List\u003cString\u003e\u003e params) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        params.put(key, new ArrayList\u003cString\u003e() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                add(value);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        });"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private static Command parseOrder(String line) throws DukeException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        Map\u003cString, List\u003cString\u003e\u003e params \u003d parseCommandAndParams(line);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        assert params.size() \u003e 0;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        switch (params.get(\"primary\").get(0)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            case COMMAND_ORDER_ADD:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                //return CommandParser.parseOrderAdd(params);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            case COMMAND_ORDER_DELETE:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                //return CommandParser.parseOrderDelete(params);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            case COMMAND_ORDER_EDIT:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                //return CommandParser.parseOrderEdit(params);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            case COMMAND_ORDER_COMPLETE:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                //return new CompleteOrderCommand(params);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            default:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                throw new DukeException(\"Invalid command\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private static Command parseUndo(String line) throws DukeException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        return new UndoCommand();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private static Command parseRedo(String line) throws DukeException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        return new RedoCommand();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 175
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class ParseException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 15
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/order/AddOrderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.order.AddOrderCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.ArgumentMultimap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.ArgumentTokenizer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.TimeParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Customer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Order;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_CUSTOMER_CONTACT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_CUSTOMER_NAME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_ORDER_DEADLINE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_ORDER_ITEM;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_ORDER_REMARKS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_ORDER_STATUS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class AddOrderCommandParser implements Parser\u003cAddOrderCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public AddOrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ArgumentMultimap map \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                PREFIX_CUSTOMER_NAME,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                PREFIX_CUSTOMER_CONTACT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                PREFIX_ORDER_ITEM,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                PREFIX_ORDER_DEADLINE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                PREFIX_ORDER_STATUS,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                PREFIX_ORDER_REMARKS"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Customer customer \u003d new Customer("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                map.getValue(PREFIX_CUSTOMER_NAME).orElse(\"customer\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                map.getValue(PREFIX_CUSTOMER_CONTACT).orElse(\"N/A\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Order order \u003d new Order("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                customer,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                TimeParser.convertStringToDate(map.getValue(PREFIX_ORDER_DEADLINE).orElse(\"now\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                ParserUtil.parseStatus(map.getValue(PREFIX_ORDER_STATUS).orElse(\"ACTIVE\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                map.getValue(PREFIX_ORDER_REMARKS).orElse(\"N/A\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                ParserUtil.parseItems(map.getAllValues(PREFIX_ORDER_ITEM))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new AddOrderCommand(order);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 47
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/order/DeleteOrderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//package duke.logic.parser.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.command.order.DeleteOrderCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.parser.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//public class DeleteOrderCommandParser implements Parser\u003cDeleteOrderCommand\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public DeleteOrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        ArgumentMultimap map \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                CliSyntax.PREFIX_ORDER_INDEX"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        );"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        return new DeleteOrderCommand(ParserUtil.getIndexes(map.getPreamble()));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 17
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/order/EditOrderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.order.EditOrderCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.ArgumentMultimap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.ArgumentTokenizer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.TimeParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_CUSTOMER_CONTACT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_CUSTOMER_NAME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_ORDER_DEADLINE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_ORDER_INDEX;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_ORDER_ITEM;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_ORDER_REMARKS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_ORDER_STATUS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class EditOrderCommandParser implements Parser\u003cEditOrderCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public EditOrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ArgumentMultimap map \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                PREFIX_ORDER_INDEX,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                PREFIX_CUSTOMER_NAME,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                PREFIX_CUSTOMER_CONTACT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                PREFIX_ORDER_ITEM,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                PREFIX_ORDER_DEADLINE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                PREFIX_ORDER_STATUS,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                PREFIX_ORDER_REMARKS"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            index \u003d ParserUtil.parseIndex(map.getValue(PREFIX_ORDER_INDEX).orElse(\"\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        EditOrderCommand.EditOrderDescriptor editOrderDescriptor \u003d new EditOrderCommand.EditOrderDescriptor();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (map.getValue(PREFIX_CUSTOMER_NAME).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            editOrderDescriptor.setCustomerName(map.getValue(PREFIX_CUSTOMER_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (map.getValue(PREFIX_CUSTOMER_CONTACT).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            editOrderDescriptor.setCustomerContact(map.getValue(PREFIX_CUSTOMER_CONTACT).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (map.getValue(PREFIX_ORDER_DEADLINE).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            editOrderDescriptor.setDeliveryDate(TimeParser.convertStringToDate("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    map.getValue(PREFIX_ORDER_DEADLINE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (map.getValue(PREFIX_ORDER_REMARKS).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            editOrderDescriptor.setRemarks(map.getValue(PREFIX_ORDER_REMARKS).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (map.getValue(PREFIX_ORDER_ITEM).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            editOrderDescriptor.setItems(ParserUtil.parseItems(map.getAllValues(PREFIX_ORDER_ITEM)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (map.getValue(PREFIX_ORDER_STATUS).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            editOrderDescriptor.setStatus(ParserUtil.parseStatus(map.getValue(PREFIX_ORDER_STATUS).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new EditOrderCommand(index, editOrderDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 66
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/order/OrderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.order.AddOrderCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.order.EditOrderCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.order.OrderCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.SubCommandParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class OrderCommandParser implements SubCommandParser\u003cOrderCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public OrderCommand parse(String subCommandAndArgs) throws ParseException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String subCommand \u003d SubCommandParser.getSubCommandWord(subCommandAndArgs);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String args \u003d SubCommandParser.getArgs(subCommandAndArgs);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        switch (subCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        case AddOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return new AddOrderCommandParser().parse(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        case EditOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return new EditOrderCommandParser().parse(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(Message.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 26
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/product/AddProductCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.logic.parser.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.product.AddProductCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.commons.ArgumentMultimap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.commons.ArgumentTokenizer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.commons.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.commons.Ingredient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.ingredient.IngredientList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class AddProductCommandParser implements Parser\u003cAddProductCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public AddProductCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        ArgumentMultimap map \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                PREFIX_PRODUCT_NAME,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                PREFIX_PRODUCT_INGREDIENT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                PREFIX_PRODUCT_COST,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                PREFIX_PRODUCT_PRICE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        );"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        IngredientList ingredients \u003d new IngredientList(){};"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        Product product \u003d new Product("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                map.getValue(PREFIX_CUSTOMER_NAME).orElse(\"ProductName\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                map.getValue(PREFIX_PRODUCT_PRICE).orElse(String.valueOf(0)),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                map.getValue(PREFIX_PRODUCT_COST).orElse(String.valueOf(0))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return new AddProductCommand(product);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    //Todo: IngredientList Parser -ingt [ingredient_name, qty] [ingredient_name2, qty] [ingredient_name3]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private IngredientList ingredientListParser() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return new IngredientList() {};"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liushiru": 45
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/product/EditProductCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.logic.parser.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.product.EditProductCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.commons.ArgumentMultimap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.commons.ArgumentTokenizer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.commons.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.commons.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_PRODUCT_INDEX;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_PRODUCT_NAME;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_PRODUCT_INGREDIENT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_PRODUCT_PRICE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_PRODUCT_COST;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.PREFIX_PRODUCT_STATUS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class EditProductCommandParser implements Parser\u003cEditProductCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EditProductCommandParser.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public EditProductCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        ArgumentMultimap map \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                PREFIX_PRODUCT_INDEX,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                PREFIX_PRODUCT_NAME,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                PREFIX_PRODUCT_INGREDIENT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                PREFIX_PRODUCT_PRICE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                PREFIX_PRODUCT_COST"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            index \u003d ParserUtil.parseIndex(map.getValue(PREFIX_PRODUCT_INDEX).orElse(\"\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            logger.log(Level.WARNING, \"Parse Index error in EditProductCommandParse\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        EditProductCommand.EditProductDescriptor editProductDescriptor \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                new EditProductCommand.EditProductDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        if (map.getValue(PREFIX_PRODUCT_NAME).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            editProductDescriptor.setProductName(map.getValue(PREFIX_PRODUCT_NAME).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        if (map.getValue(PREFIX_PRODUCT_PRICE).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            editProductDescriptor.setRetailPrice(map.getValue(PREFIX_PRODUCT_PRICE).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        if (map.getValue(PREFIX_PRODUCT_COST).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            editProductDescriptor.setIngredientCost(map.getValue(PREFIX_PRODUCT_COST).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        if (map.getValue(PREFIX_PRODUCT_STATUS).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            editProductDescriptor.setStatus(ParserUtil.parseProductStatus(map.getValue(PREFIX_PRODUCT_STATUS).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return new EditProductCommand(index, editProductDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liushiru": 63
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/product/IngredientListParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.logic.parser.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.ingredient.IngredientList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class IngredientListParser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private String inputIngredientList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /** Constructs a IngredientListParser with the userInput */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public IngredientListParser(String inputIngredientList) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.inputIngredientList \u003d inputIngredientList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public IngredientList getIngredientList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return new IngredientList() {};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    //todo: add logic"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void addIngredients(String ingredientName) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        if (!IngredientList.contain(ingredientName)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            //add ingredient;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liushiru": 24
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/product/ProductCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.logic.parser.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.commons.core.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.product.AddProductCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.product.EditProductCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.command.product.ProductCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.commons.SubCommandParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class ProductCommandParser implements SubCommandParser\u003cProductCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public ProductCommand parse(String subCommandAndArgs) throws ParseException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        String subCommand \u003d SubCommandParser.getSubCommandWord(subCommandAndArgs);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        String args \u003d SubCommandParser.getArgs(subCommandAndArgs);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        switch (subCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        case AddProductCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            return new AddProductCommandParser().parse(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        case EditProductCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            return new EditProductCommandParser().parse(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        throw new ParseException(Message.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liushiru": 27
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/shortcut/ExecuteShortcutCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.shortcut;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.shortcut.ExecuteShortcutCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.SubCommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class ExecuteShortcutCommandParser implements SubCommandParser\u003cExecuteShortcutCommand\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_NAME_NOT_FOUND \u003d \"Please specify the shortcut name\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public ExecuteShortcutCommand parse(String subCommandAndArgs) throws ParseException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String shortcutName \u003d SubCommandParser.getSubCommandWord(subCommandAndArgs);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (shortcutName.isBlank()) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(MESSAGE_NAME_NOT_FOUND);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new ExecuteShortcutCommand(shortcutName);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 19
    }
  },
  {
    "path": "src/main/java/duke/logic/parser/shortcut/SetShortcutCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.logic.parser.shortcut;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.shortcut.SetShortcutCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.SubCommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.shortcut.Shortcut;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.logic.parser.commons.CliSyntax.KEYWORDS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class SetShortcutCommandParser implements SubCommandParser\u003cSetShortcutCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_CONTAIN_KEYWORD \u003d \"[%s] is a keyword and cannot be set as shortcut name.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public SetShortcutCommand parse(String subCommandAndArgs) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String shortcutName \u003d SubCommandParser.getSubCommandWord(subCommandAndArgs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (containsKeywords(shortcutName)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_CONTAIN_KEYWORD, shortcutName));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String args \u003d SubCommandParser.getArgs(subCommandAndArgs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Shortcut shortcut \u003d new Shortcut(shortcutName, getUserInputs(args));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new SetShortcutCommand(shortcut);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private List\u003cString\u003e getUserInputs(String userInputsString) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new ArrayList\u003cString\u003e(Arrays.asList(userInputsString.split(\";\")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private boolean containsKeywords(String word) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return KEYWORDS.contains(word.strip());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 40
    }
  },
  {
    "path": "src/main/java/duke/model/BakingHome.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Order;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.shortcut.Shortcut;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Wraps all data at the baking-home level."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class BakingHome implements ReadOnlyBakingHome {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final UniqueEntityList\u003cOrder\u003e orders;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private final UniqueEntityList\u003cProduct\u003e products;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final UniqueEntityList\u003cShortcut\u003e shortcuts;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public BakingHome() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        orders \u003d new UniqueEntityList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        products \u003d new UniqueEntityList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        shortcuts \u003d new UniqueEntityList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public BakingHome(ReadOnlyBakingHome toBeCopied) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Resets the existing data of this {@code BakingHome} with {@code newData}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void resetData(ReadOnlyBakingHome newData) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        setOrders(newData.getOrderList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        setShortcuts(newData.getShortcutList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dOrder operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Replaces the contents of the order list with {@code orders}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setOrders(List\u003cOrder\u003e orders) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.orders.setAll(orders);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns true if an order with the same identity as {@code order} exists in {@code orders}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean hasOrder(Order order) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(order);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return orders.contains(order);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Adds an order to orders"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * The order must not already exist in orders."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void addOrder(Order o) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        orders.add(o);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Replaces the given order {@code target} in the list with {@code editedOrder}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * {@code target} must exist in orders"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setOrder(Order target, Order editedOrder) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(editedOrder);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        orders.set(target, editedOrder);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Replaces the order at {@code Index} in the list with {@code editedOrder}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * {@code Index} must be a valid index"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * {@code target} must exist in orders"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setOrder(Index index, Order order) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireAllNonNull(index, order);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        orders.set(index, order);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Removes {@code key} from {@code orders}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * {@code key} must exist in {@code orders}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void removeOrder(Order key) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        orders.remove(key);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public ObservableList\u003cOrder\u003e getOrderList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return orders.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dcomProduct operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Adds an product to products"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * The order must not already exist in orders."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void addProduct(Product p) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        products.add(p);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void setProduct(Product originalProduct, Product editedOrder) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        requireNonNull(editedOrder);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        products.set(originalProduct, editedOrder);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public ObservableList\u003cProduct\u003e getProductList() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return products.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //// shortcut-related operations"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Adds {@code shortcut} to shortcut list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * If the shortcut already exists, it overrides the old shortcut."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setShortcut(Shortcut shortcut) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(shortcut);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (shortcuts.contains(shortcut)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            shortcuts.set(shortcut, shortcut);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            shortcuts.add(shortcut);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Replaces the contents of the shortcut list with {@code shortcuts}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setShortcuts(List\u003cShortcut\u003e shortcuts) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.shortcuts.setAll(shortcuts);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Deletes the given {@code shortcut}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * The shortcut must exist in order list."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void removeShortcut(Shortcut key) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(key);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        shortcuts.remove(key);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns true if a shortcut with the same name as {@code order} exists in shortcut list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean hasShortcut(Shortcut shortcut) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(shortcut);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return shortcuts.contains(shortcut);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public List\u003cShortcut\u003e getShortcutList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return shortcuts.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return orders.asUnmodifiableObservableList().size() + \" orders\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                || (other instanceof BakingHome // instanceof handles nulls"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                \u0026\u0026 orders.equals(((BakingHome) other).orders));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return orders.hashCode();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 165,
      "liushiru": 24
    }
  },
  {
    "path": "src/main/java/duke/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Order;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.shortcut.Shortcut;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    Predicate\u003cOrder\u003e PREDICATE_SHOW_ALL_ORDERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    Predicate\u003cProduct\u003e PREDICATE_SHOW_ALL_PRODUCTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    Predicate\u003cProduct\u003e PREDICATE_SHOW_ACTIVE_PRODUCTS \u003d product -\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return product.getStatus() \u003d\u003d Product.Status.ACTIVE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    };"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns the BakingHome."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    ReadOnlyBakingHome getBakingHome();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Replaces baking home data with the data in {@code bakingHome}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    void setBakingHome(ReadOnlyBakingHome bakingHome);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dOrder operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns true if an order with the same id as {@code order} exists in order list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    boolean hasOrder(Order order);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Deletes the given order."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * The order must exist in order list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    void deleteOrder(Order target);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Adds the given order."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * The order must not exist in order list"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    void addOrder(Order order);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Replaces the given order {@code target} in the list with {@code editedOrder}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * {@code target} must exist in order list"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    void setOrder(Order target, Order editedOrder);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Replaces the order at {@code Index} in the list with {@code editedOrder}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * {@code Index} must be a valid index"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * {@code target} must exist in order list"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    void setOrder(Index index, Order order);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns an unmodifiable view of the filtered order list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    ObservableList\u003cOrder\u003e getFilteredOrderList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Updates the filter of the filtered order list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dcomProduct operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /** Adds the given product */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    void addProduct(Product product);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Replaces the given product {@code original} in the list with {@code editedProduct}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * {@code originalProduct} must exist in product list"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    void setProduct(Product originalProduct, Product editedProduct);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Returns an unmodifiable view of the filtered product list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    ObservableList\u003cProduct\u003e getFilteredProductList(); //implement archive"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    void updateFilteredProductList(Predicate\u003cProduct\u003e predicate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dFinance operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dIngredient operations\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003dShopping list operations\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dShortcut operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Adds {@code shortcut} to shortcut list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * If the shortcut already exists, it overrides the old shortcut."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    void setShortcut(Shortcut shortcut);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Deletes the given {@code shortcut}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * The shortcut must exist in order list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    void removeShortcut(Shortcut shortcut);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns true if a shortcut with the same name as {@code order} exists in shortcut list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    boolean hasShortcut(Shortcut shortcut);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns an unmodifiable view of the shortcut list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    List\u003cShortcut\u003e getShortcutList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 101,
      "liushiru": 27
    }
  },
  {
    "path": "src/main/java/duke/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Order;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.shortcut.Shortcut;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Represents the in-memory model of baking home data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final BakingHome bakingHome;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final FilteredList\u003cOrder\u003e filteredOrders;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private final FilteredList\u003cProduct\u003e filteredProducts;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Initializes a ModelManager with the given BakingHome."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public ModelManager(ReadOnlyBakingHome bakingHome) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.bakingHome \u003d new BakingHome(bakingHome);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.filteredOrders \u003d new FilteredList\u003c\u003e(this.bakingHome.getOrderList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.filteredProducts \u003d new FilteredList\u003c\u003e(this.bakingHome.getProductList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this(new BakingHome());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setBakingHome(ReadOnlyBakingHome bakingHome) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.bakingHome.resetData(bakingHome);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public ReadOnlyBakingHome getBakingHome() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return this.bakingHome;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dOrder operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean hasOrder(Order order) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(order);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return bakingHome.getOrderList().contains(order);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void deleteOrder(Order target) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        bakingHome.getOrderList().remove(target);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void addOrder(Order order) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        bakingHome.addOrder(order);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setOrder(Order target, Order editedOrder) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(editedOrder);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        bakingHome.setOrder(target, editedOrder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setOrder(Index index, Order order) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireAllNonNull(index, order);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        bakingHome.setOrder(index, order);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public ObservableList\u003cOrder\u003e getFilteredOrderList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return filteredOrders;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        filteredOrders.setPredicate(predicate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dcomProduct operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void addProduct(Product product) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        bakingHome.addProduct(product);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        updateFilteredProductList(PREDICATE_SHOW_ACTIVE_PRODUCTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Replaces the given product {@code original} in the list with {@code editedProduct}. {@code"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * originalProduct} must exist in product list"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @param originalProduct"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @param editedProduct"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void setProduct(Product originalProduct, Product editedProduct) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        requireNonNull(originalProduct);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        requireNonNull(editedProduct);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        bakingHome.setProduct(originalProduct, editedProduct);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Returns an unmodifiable view of the filtered product list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public ObservableList\u003cProduct\u003e getFilteredProductList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return filteredProducts;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void updateFilteredProductList(Predicate\u003cProduct\u003e predicate) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        filteredProducts.setPredicate(predicate);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dShortcut operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setShortcut(Shortcut shortcut) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(shortcut);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        bakingHome.setShortcut(shortcut);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void removeShortcut(Shortcut shortcut) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(shortcut);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        bakingHome.removeShortcut(shortcut);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean hasShortcut(Shortcut shortcut) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(shortcut);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return bakingHome.hasShortcut(shortcut);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public List\u003cShortcut\u003e getShortcutList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return bakingHome.getShortcutList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 116,
      "liushiru": 37
    }
  },
  {
    "path": "src/main/java/duke/model/ReadOnlyBakingHome.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Order;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.shortcut.Shortcut;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Unmodifiable view of an address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public interface ReadOnlyBakingHome {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns an unmodifiable view of the order list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    ObservableList\u003cOrder\u003e getOrderList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    ObservableList\u003cProduct\u003e getProductList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    List\u003cShortcut\u003e getShortcutList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 20,
      "liushiru": 3
    }
  },
  {
    "path": "src/main/java/duke/model/UniqueEntityList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.exceptions.DuplicateEntityException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.exceptions.EntityNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class UniqueEntityList\u003cT\u003e implements Iterable\u003cT\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final ObservableList\u003cT\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean contains(T toCheck) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void add(T toAdd) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new DuplicateEntityException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void set(T target, T edited) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(edited);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new EntityNotFoundException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!target.equals(edited) \u0026\u0026 contains(edited)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new DuplicateEntityException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        internalList.set(index, edited);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void set(Index index, T edited) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(edited);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (index.getZeroBased() \u003c 0 || index.getZeroBased() \u003e\u003d internalList.size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new EntityNotFoundException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        internalList.set(index.getZeroBased(), edited);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void remove(T toRemove) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new EntityNotFoundException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setAll(UniqueEntityList\u003cT\u003e replacement) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setAll(List\u003cT\u003e replacement) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        internalList.setAll(replacement);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Iterator\u003cT\u003e iterator() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                || (other instanceof UniqueEntityList // instanceof handles nulls"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueEntityList) other).internalList));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns true if {@code items} contains only unique items."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private boolean itemsAreUnique(List\u003cT\u003e items) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size() - 1; i++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            for (int j \u003d i + 1; j \u003c items.size(); j++) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                if (items.get(i).equals(items.get(j))) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 119
    }
  },
  {
    "path": "src/main/java/duke/model/commons/Ingredient.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.commons.util.AppUtil.checkEmpty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Represents an ingredient of a product."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class Ingredient {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String VALIDATION_FLOAT_NUMBER_REGEX \u003d \"^[-+]?[0-9]*\\\\.?[0-9]+([eE][-+]?[0-9]+)?$\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS_NAME \u003d \"comProduct name can take any values, \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            + \"and should not be blank\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS_UNIT \u003d \"Unit can take any values, \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            + \"and should not be blank\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS_PRICE \u003d \"Price is a float number\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String DEFAULT_PRICE \u003d \"5.0\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String DEFAULT_UNIT \u003d \"unit\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public final double unitPrice;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public final String unit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates an ingredient."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param name      of the ingredient."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param unitPrice the price of the ingredient per unit."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param unit      of the ingredient. For example, \"kg\", \"liter\"."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Ingredient(String name, String unitPrice, String unit) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireAllNonNull(name, unitPrice, unit);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        checkEmpty(name, MESSAGE_CONSTRAINTS_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        checkEmpty(unit, MESSAGE_CONSTRAINTS_UNIT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        checkArgument(unitPrice.matches(VALIDATION_FLOAT_NUMBER_REGEX), MESSAGE_CONSTRAINTS_PRICE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.unitPrice \u003d Double.parseDouble(unitPrice);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.unit \u003d unit;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Ingredient(String name, String unitPrice) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this(name, unitPrice, DEFAULT_UNIT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Ingredient(String name) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this(name, DEFAULT_PRICE, DEFAULT_UNIT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Ingredient that \u003d (Ingredient) o;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Objects.equals(name, that.name);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return \"Ingredient{\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                + \"name\u003d\u0027\" + name + \u0027\\\u0027\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                + \", unitPrice\u003d\" + unitPrice"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                + \", unit\u003d\u0027\" + unit + \u0027\\\u0027\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                + \u0027}\u0027;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 78,
      "liushiru": 1
    }
  },
  {
    "path": "src/main/java/duke/model/commons/comProduct.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.commons.util.AppUtil.checkEmpty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Represents a product in product list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class comProduct {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"comProduct name can take any values, \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            + \"and should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //Identity field"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public final Map\u003cIngredient, Double\u003e ingredients; //TODO: maybe add a seperate class"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * All fields should not be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public comProduct(String name, Map\u003cIngredient, Double\u003e ingredients) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireAllNonNull(name, ingredients);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        checkEmpty(name, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.ingredients \u003d ingredients;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public comProduct(String name) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this(name, new HashMap\u003c\u003e());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        comProduct product \u003d (comProduct) o;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return name.equals(product.name);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 53,
      "liushiru": 6
    }
  },
  {
    "path": "src/main/java/duke/model/exceptions/DuplicateEntityException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class DuplicateEntityException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public DuplicateEntityException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        super(\"Operation would result in duplicate entities\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 11
    }
  },
  {
    "path": "src/main/java/duke/model/exceptions/EntityNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class EntityNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 7
    }
  },
  {
    "path": "src/main/java/duke/model/ingredient/Ingredient.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class Ingredient {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private String baseUnit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private double unitCost;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private double cost;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Ingredient(@JsonProperty(\"name\") String name) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Ingredient() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Ingredient(String name, double cost) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Ingredient createNewIngredient(String name) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        name \u003d \"cheese\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        cost \u003d 22.02;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        //setPicture(\"cheese\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liushiru"
        },
        "content": "//    public double getCost() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liushiru"
        },
        "content": "//        return cost;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liushiru"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liushiru"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liushiru"
        },
        "content": "//    public void setCost(double cost) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liushiru"
        },
        "content": "//        this.cost \u003d cost;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liushiru"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liushiru": 51
    }
  },
  {
    "path": "src/main/java/duke/model/ingredient/IngredientList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public interface IngredientList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    static boolean contain(String name) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liushiru": 9
    }
  },
  {
    "path": "src/main/java/duke/model/order/Customer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.commons.util.AppUtil.checkEmpty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Represents a customer of an order."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class Customer {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Customer name and contact can take any values, \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            + \"and should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //Identity field"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //Data field"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public final String contact;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Customer(String name, String contact) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(contact);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        checkEmpty(name, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        checkEmpty(contact, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.contact \u003d contact;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return String.format(\"Name: %s Contact: %s\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                name,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                contact);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Customer customer \u003d (Customer) o;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return name.equals(customer.name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 58
    }
  },
  {
    "path": "src/main/java/duke/model/order/Order.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.commons.comProduct;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static duke.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Represents an order in order list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class Order {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //Identity field"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final long id;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //Data fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Customer customer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Date deliveryDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private final Map\u003ccomProduct, Integer\u003e items;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final String remarks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Status status;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Creates an order."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Order(Customer customer, Date deliveryDate, Status status, String remarks, Map\u003ccomProduct, Integer\u003e items) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireAllNonNull(customer, deliveryDate, status, remarks, items);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.deliveryDate \u003d deliveryDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.id \u003d System.currentTimeMillis();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.items \u003d items;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public enum Status {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ACTIVE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        COMPLETED,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        CANCELED"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Customer getCustomer() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return customer;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public long getId() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Date getDeliveryDate() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return deliveryDate;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Map\u003ccomProduct, Integer\u003e getItems() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Collections.unmodifiableMap(items);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public String getRemarks() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return remarks;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return String.format(\"ID: %s Customer: [%s] Date: %s Status: %s Items: %s\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                id, customer, deliveryDate, status, items);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Order order \u003d (Order) o;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return id \u003d\u003d order.id;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Objects.hash(id);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 89,
      "liushiru": 4
    }
  },
  {
    "path": "src/main/java/duke/model/product/Product.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.model.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.ingredient.IngredientList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.awt.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import static duke.commons.util.AppUtil.checkEmpty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import static duke.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class Product {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public enum Status {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        ACTIVE,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        ARCHIVED"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"comProduct name can take any values, \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            + \"and should not be blank\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    //private List\u003cIngredient\u003e ingredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private IngredientList ingredients \u003d new IngredientList() {};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private double cost;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private double price;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private Status status;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /** Constructor for Order parser.util*/"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Product(String name) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Product(@JsonProperty(\"name\") String name, @JsonProperty(\"price\") String price,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                   @JsonProperty(\"cost\") String cost) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        checkEmpty(name, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            this.cost \u003d Double.parseDouble(cost);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            this.price \u003d Double.parseDouble(price);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            this.status \u003d Status.ACTIVE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /** Constructor for edit comProduct */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Product(String name, String price, String cost, Status status) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        checkEmpty(name, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            this.cost \u003d Double.parseDouble(cost);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            this.price \u003d Double.parseDouble(price);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            this.status \u003d status;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public double getCost() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return cost;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void setCost(double cost) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public double getPrice() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void setPrice(double price) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return this.status;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liushiru"
        },
        "content": "/*"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public List\u003cIngredient\u003e getIngredients() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return this.ingredients;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void setIngredients(List\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.ingredients \u003d ingredients;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liushiru"
        },
        "content": "*/"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liushiru"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    return name + \": \" + price + \"$\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        if (this \u003d\u003d o) return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        duke.model.product.Product product \u003d (duke.model.product.Product) o;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return name.equals(product.name);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "liushiru": 124
    }
  },
  {
    "path": "src/main/java/duke/model/shortcut/Shortcut.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.model.shortcut;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class Shortcut {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //Identity field"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final List\u003cString\u003e userInputs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Shortcut(String name, List\u003cString\u003e userInputs) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.userInputs \u003d userInputs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public List\u003cString\u003e getUserInputs() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return userInputs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (String userInput : userInputs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            stringBuilder.append(userInput + \"; \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Shortcut shortcut \u003d (Shortcut) o;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Objects.equals(name, shortcut.name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 51
    }
  },
  {
    "path": "src/main/java/duke/storage/BakingList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.command.decrypted.ExecuteShortcut;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class BakingList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private List\u003cOrder\u003e orderList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private List\u003cSale\u003e saleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private Map\u003cString, ExecuteShortcut\u003e shortcuts \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private List\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public List\u003cOrder\u003e getOrderList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        return orderList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public List\u003cRecipe\u003e getRecipeList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        return recipeList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public List\u003cSale\u003e getSaleList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        return saleList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void setOrderList(List\u003cOrder\u003e orderList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        this.orderList \u003d orderList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void setSaleList(List\u003cSale\u003e saleList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        this.saleList \u003d saleList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public Map\u003cString, ExecuteShortcut\u003e getShortcuts() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        return shortcuts;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void setRecipeList(List\u003cRecipe\u003e recipeList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        this.recipeList \u003d recipeList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void setShortcuts(Map\u003cString, ExecuteShortcut\u003e shortcuts) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        this.shortcuts \u003d shortcuts;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 44
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores tasks in file and reads tasks from file."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private String path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * Constructor for Storage."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * @param path the path to store the file, including the file name."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public Storage(String path) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        this.path \u003d path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * Serialize BakingList to json file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * @param bakingList the TaskList to serialize."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * @throws DukeException if fails to serialize due to IO exception."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public void serialize(BakingList bakingList) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            ObjectMapper mapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            //mapper.setDateFormat(new SimpleDateFormat(TimeParser.getDatePattern()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            mapper.writerWithType(BakingList.class).writeValue(new File(path), bakingList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } catch (IOException i) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            throw new DukeException(\"IO Exception\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * Deserializes BakingList from file. If the file is not found, creates new file and returns an empty"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * BakingList."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * @return a BakingList object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     * @throws DukeException if file is damaged."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    public BakingList deserialize() throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        BakingList bakingList \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            ObjectMapper mapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            //mapper.setDateFormat(new SimpleDateFormat(TimeParser.getDatePattern()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            bakingList \u003d mapper.readValue(new File(path), BakingList.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            return bakingList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } catch (IOException i) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            if (i instanceof FileNotFoundException) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                return new BakingList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                i.printStackTrace();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                throw new DukeException(\"IO exception when loading data\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 51,
      "-": 8
    }
  },
  {
    "path": "src/main/java/duke/storage/recipe/RecipeList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.storage.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class RecipeList extends ArrayList\u003cProduct\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private List\u003cProduct\u003e productList \u003d new ArrayList\u003cProduct\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public List\u003cProduct\u003e getProductList() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return productList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liushiru": 14
    }
  },
  {
    "path": "src/main/java/duke/ui/InventoryPage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class InventoryPage extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String FXML \u003d \"InventoryPage.fxml\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public InventoryPage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "liujiajun": 11,
      "eugenelim97": 1
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.jfoenix.controls.JFXButton;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.Logic;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private OrderPage orderPage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private ProductPage productPage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private SalePage salePage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private InventoryPage inventoryPage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private List\u003cString\u003e inputHistory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private int historyIndex \u003d inputHistory.size();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //Popup box"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox popUp;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label popUpLabel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    JFXButton popUpButton;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //Main page"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Label currentPage;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private AnchorPane pagePane;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    //Sidebar"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private JFXButton recipeButton;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private JFXButton orderButton;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private JFXButton inventoryButton;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private JFXButton salesButton;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        setUpKeyEvent();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        orderPage \u003d new OrderPage(logic.getFilteredOrderList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        productPage \u003d new ProductPage(logic.getFilteredProductList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        salePage \u003d new SalePage();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        inventoryPage \u003d new InventoryPage();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        setAllPageAnchor(orderPage.getRoot(), productPage.getRoot(), salePage.getRoot(), inventoryPage.getRoot());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        popUp.setVisible(false);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        inputHistory.add(input);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        historyIndex \u003d inputHistory.size();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(input);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            showPage(commandResult.getDisplayedPage());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            showMessagePopUp(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            showErrorPopUp(e.getMessage());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void handleInputHistory() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Sets UP key to show previous input, and sets DOWN key to the next input."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private void setUpKeyEvent() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        userInput.setOnKeyPressed(new EventHandler\u003cKeyEvent\u003e() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            public void handle(KeyEvent event) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                if(event.getCode().equals(KeyCode.UP)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                    if (historyIndex \u003e 0) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                        historyIndex--;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                        userInput.setText(inputHistory.get(historyIndex));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                        userInput.setFocusTraversable(false);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                if(event.getCode().equals(KeyCode.DOWN)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                    if (historyIndex \u003c (inputHistory.size() - 1)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                        historyIndex++;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                        userInput.setText(inputHistory.get(historyIndex));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                        userInput.setFocusTraversable(false);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        });"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleOk() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        popUp.setVisible(false);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void handleShowRecipe() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        showProductPage();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void handleShowOrder() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        showOrderPage();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void handleShowInventory() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        showInventoryPage();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private void handleShowSale() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        showSalesPage();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void showMessagePopUp(String message) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        popUpLabel.setText(message);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        popUpButton.getStyleClass().clear();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        popUpButton.getStyleClass().add(\"message-popup\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        popUp.getStyleClass().clear();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        popUp.getStyleClass().add(\"message-popup\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        popUp.setVisible(true);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void showErrorPopUp(String message) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        popUpLabel.setText(message);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        popUpButton.getStyleClass().clear();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        popUpButton.getStyleClass().add(\"error-popup\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        popUp.getStyleClass().clear();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        popUp.getStyleClass().add(\"error-popup\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        popUp.setVisible(true);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void showPage(CommandResult.DisplayedPage toDisplay) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        switch (toDisplay) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        case SALE:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            showSalesPage();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        case ORDER:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            showOrderPage();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        case PRODUCT:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            showProductPage();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        case INVENTORY:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            showInventoryPage();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void showOrderPage() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        pagePane.getChildren().clear();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        pagePane.getChildren().add(orderPage.getRoot());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        recipeButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        orderButton.setButtonType(JFXButton.ButtonType.RAISED);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        inventoryButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        salesButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        currentPage.setText(\"Orders\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private void showProductPage() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        pagePane.getChildren().clear();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        pagePane.getChildren().add(productPage.getRoot());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        recipeButton.setButtonType(JFXButton.ButtonType.RAISED);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        orderButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        inventoryButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        salesButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        currentPage.setText(\"Recipes\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void showInventoryPage() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        pagePane.getChildren().clear();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        pagePane.getChildren().add(inventoryPage.getRoot());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        recipeButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        orderButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        inventoryButton.setButtonType(JFXButton.ButtonType.RAISED);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        salesButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        currentPage.setText(\"Inventory\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void showSalesPage() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        pagePane.getChildren().clear();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        pagePane.getChildren().add(salePage.getRoot());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        recipeButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        orderButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        inventoryButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        salesButton.setButtonType(JFXButton.ButtonType.RAISED);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        currentPage.setText(\"Sales\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    void disableInput() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.setDisable(true);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void setAllPageAnchor(AnchorPane... pages) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (AnchorPane page : pages) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            AnchorPane.setLeftAnchor(page, 0.0);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            AnchorPane.setRightAnchor(page, 0.0);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            AnchorPane.setTopAnchor(page, 0.0);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            AnchorPane.setBottomAnchor(page, 4.0);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 142,
      "liushiru": 56,
      "chekjun": 8,
      "-": 58
    }
  },
  {
    "path": "src/main/java/duke/ui/OrderCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.parser.commons.TimeParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.commons.comProduct;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Order;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": " * Controller for OrderCard. An OrderCard displays an order, including its creation time, customer, items,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": " * delivery date, index, and status."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class OrderCard extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    static final String FXML \u003d \"OrderCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private AnchorPane innerPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private FlowPane itemFlow;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Label index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Label contact;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Label remarks;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public OrderCard(Order order, int displayedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        id.setText(Long.toString(order.getId()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        index.setText(\"#\" + displayedIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        deadline.setText(TimeParser.convertDateToString(order.getDeliveryDate()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        name.setText(order.getCustomer().name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        contact.setText(order.getCustomer().contact);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        remarks.setText(order.getRemarks());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        status.setText(order.getStatus().toString().toLowerCase());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        status.getStyleClass().clear();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        status.getStyleClass().addAll(\"status-\" + order.getStatus().toString().toLowerCase());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        for (comProduct item : order.getItems().keySet()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            itemFlow.getChildren().add(new OrderItemBox(item.name, order.getItems().get(item)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 49,
      "liushiru": 4
    }
  },
  {
    "path": "src/main/java/duke/ui/OrderItemBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class OrderItemBox extends AnchorPane {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Label itemName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Label itemQuantity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public OrderItemBox(String name, int quantity) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/OrderItemBox.fxml\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //id.setText(Long.toString(orderID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //index.setText(Integer.toString(indexNumber));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        itemName.setText(name);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        itemQuantity.setText(Integer.toString(quantity));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 30
    }
  },
  {
    "path": "src/main/java/duke/ui/OrderPage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.model.order.Order;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class OrderPage extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String FXML \u003d \"OrderPage.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(OrderPage.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private ListView\u003cOrder\u003e orderListView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public OrderPage(ObservableList\u003cOrder\u003e orderList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        orderListView.setItems(orderList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        orderListView.setCellFactory(listView -\u003e new OrderListViewCell());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    class OrderListViewCell extends ListCell\u003cOrder\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        protected void updateItem(Order order, boolean empty) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            super.updateItem(order, empty);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            updateSelected(false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (empty || order \u003d\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                setGraphic(new OrderCard(order, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 40
    }
  },
  {
    "path": "src/main/java/duke/ui/ProductPage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.order.Order;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.model.product.Product;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.scene.control.TableCell;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class ProductPage extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private static final String FXML \u003d \"ProductPage.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ProductPage.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private Label tableTitle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private TableView productListTable;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private ObservableList\u003cProduct\u003e productList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public ProductPage(ObservableList\u003cProduct\u003e productList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        requireNonNull(productList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.productList \u003d productList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        setupTable();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    void setupTable() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        productListTable.setItems(productList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        productListTable.getColumns().clear();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        setIndexColumn();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        setProductInfoColumns();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    void setIndexColumn() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        TableColumn\u003cProduct, Void\u003e indexColumn \u003d new TableColumn\u003c\u003e(\"S/N\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        indexColumn.setMinWidth(50);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        indexColumn.setPrefWidth(70);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        indexColumn.setResizable(true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        //Solution below adapted from: https://stackoverflow.com/questions/31212400/adding-index-of-records-in-a-javafx-tableview-column"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        ///////////////////////////////////////////////////////index column"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            indexColumn.setCellFactory(col -\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                // just a default table cell:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                TableCell\u003cProduct, Void\u003e cell \u003d new TableCell\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                cell.textProperty().bind(Bindings.createStringBinding(() -\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                    if (cell.isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                        return null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                        return Integer.toString(cell.getIndex() + 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                }, cell.emptyProperty(), cell.indexProperty()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                return cell;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        ////////////////////////////////index column created"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        productListTable.getColumns().add(indexColumn);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    void setProductInfoColumns() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        TableColumn\u003cProduct, String\u003e nameColumn \u003d new TableColumn\u003c\u003e(\"Name\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        nameColumn.setResizable(true);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        nameColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"name\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        TableColumn\u003cProduct, Double\u003e priceColumn \u003d new TableColumn\u003c\u003e(\"Retail Price\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        priceColumn.setResizable(true);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        priceColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"price\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        TableColumn\u003cProduct, Double\u003e costColumn \u003d new TableColumn\u003c\u003e(\"Ingredient Cost\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        costColumn.setResizable(true);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        costColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"cost\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        productListTable.getColumns().addAll(nameColumn, priceColumn,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                costColumn);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liushiru"
        },
        "content": "/*"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    //RecipeList"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    void refreshRecipeListPage(List\u003ccomProduct\u003e rpl) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        recipeListPane.setVisible(true);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        recipeShowPane.setVisible(false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        ObservableList\u003ccomProduct\u003e productObservableList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        for (comProduct product : rpl) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            productObservableList.add(product);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        recipeTable.getColumns().clear();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        if (rpl.size() !\u003d 0) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            TableColumn\u003ccomProduct, Void\u003e indexColumn \u003d new TableColumn\u003c\u003e(\"S/N\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            indexColumn.setMinWidth(50);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            indexColumn.setPrefWidth(70);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            indexColumn.setResizable(true);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            //Solution below adapted from: https://stackoverflow.com/questions/31212400/adding-index-of-records-in-a-javafx-tableview-column"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            ///////////////////////////////////////////////////////index column"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                indexColumn.setCellFactory(col -\u003e {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                    // just a default table cell:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                    TableCell\u003ccomProduct, Void\u003e cell \u003d new TableCell\u003c\u003e();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                    cell.textProperty().bind(Bindings.createStringBinding(() -\u003e {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                        if (cell.isEmpty()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                            return null;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                            return Integer.toString(cell.getIndex() + 1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                    }, cell.emptyProperty(), cell.indexProperty()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                    return cell;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                });"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            ////////////////////////////////index column created"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            TableColumn\u003ccomProduct, String\u003e nameColumn \u003d new TableColumn\u003c\u003e(\"Name\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            nameColumn.setMinWidth(150);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            nameColumn.setPrefWidth(500);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            nameColumn.setResizable(true);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            nameColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"name\"));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            TableColumn\u003ccomProduct, Integer\u003e timeColumn \u003d new TableColumn\u003c\u003e(\"Time\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            timeColumn.setMinWidth(50);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            timeColumn.setPrefWidth(100);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            timeColumn.setResizable(true);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            timeColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"time\"));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            TableColumn\u003ccomProduct, Double\u003e costColumn \u003d new TableColumn\u003c\u003e(\"Cost\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            costColumn.setMinWidth(50);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            costColumn.setPrefWidth(70);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            costColumn.setResizable(true);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            costColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"cost\"));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            TableColumn\u003ccomProduct, Integer\u003e difficultyLevelColumn \u003d new TableColumn\u003c\u003e(\"Difficulty Level\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            difficultyLevelColumn.setMinWidth(70);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            difficultyLevelColumn.setPrefWidth(300);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            difficultyLevelColumn.setResizable(true);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            difficultyLevelColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"difficultyLevel\"));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            recipeTable.setItems(productObservableList);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            recipeTable.getColumns().addAll(indexColumn, nameColumn, timeColumn, costColumn,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                    difficultyLevelColumn);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "liushiru"
        },
        "content": "*/"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liushiru": 173
    }
  },
  {
    "path": "src/main/java/duke/ui/SalePage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chekjun"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.entities_decrypted.Sale;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class SalePage extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String FXML \u003d \"SalePage.fxml\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private VBox saleList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public SalePage() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void refreshSaleList(List\u003cSale\u003e saleList, List\u003cSale\u003e all) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        saleList.getChildren().clear();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        for (Sale sale : saleList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            saleList.getChildren().add(new SaleCard(sale, i));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            ++i;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chekjun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 5,
      "chekjun": 26
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * API of UI component."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 9,
      "-": 6
    }
  },
  {
    "path": "src/main/java/duke/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.Launcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.logic.Logic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new Image(Launcher.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 86
    }
  },
  {
    "path": "src/main/java/duke/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.Launcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param root     Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        URL fxmlFileUrl \u003d Launcher.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 93
    }
  },
  {
    "path": "src/main/resources/css/duke.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".root {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: WHITE;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-pane {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-pane:focused {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-pane .corner {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ".jfx-list-view {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -jfx-cell-horizontal-margin: 0.0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -jfx-cell-vertical-margin: 5.0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -jfx-vertical-gap: 10;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -jfx-expanded: false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".status-completed {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-color: #00bfa5;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-padding: 4;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".status-active {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-color: #32cb00;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-padding: 4;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".status-canceled {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-color: #bdbdbd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-padding: 4;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".error-popup {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 25;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: rgb(237, 107, 96);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".message-popup {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 25;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-color: #00bfa5;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-selection-bar: white;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-selection-bar-non-focused: white;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-padding: 10 10 10 10;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".list-cell:filled {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-color: -fx-background;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-color: -fx-background;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "liujiajun": 35,
      "liushiru": 5,
      "-": 40
    }
  },
  {
    "path": "src/main/resources/css/product.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    -fx-background-color: rgba(151, 217, 143, 0.5);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": ".table-view .column-header {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    -fx-background-color: rgba(151, 217, 143, 0.5);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": ".table-view .table-column {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": ".scroll-pane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    -fx-hbar-policy: never;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    -fx-vbar-policy: never;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": ".table-view .table-cell {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": ".split-pane:horizontal \u003e .split-pane-divider {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liushiru"
        },
        "content": ".split-pane:vertical \u003e .split-pane-divider {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    -fx-padding: 0 0.05em 0 0.05em;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liushiru"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    -fx-background-color: rgba(62, 135, 52, 0.5);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    -fx-box-border: transparent;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 2,
      "liushiru": 37
    }
  },
  {
    "path": "src/main/resources/view/InventoryPage.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003cAnchorPane prefHeight\u003d\"591.0\" prefWidth\u003d\"857.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "      \u003cSplitPane dividerPositions\u003d\"0.5\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        \u003citems\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "          \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"160.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                  \u003cTitledPane fx:id\u003d\"inventoryListPane\" animated\u003d\"false\" prefHeight\u003d\"211.0\" prefWidth\u003d\"600.0\" text\u003d\"Inventory List\" textFill\u003d\"#c51a1a\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                    \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                      \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                              \u003cTableView fx:id\u003d\"inventoryTable\" prefHeight\u003d\"162.0\" prefWidth\u003d\"594.0\" AnchorPane.bottomAnchor\u003d\"-10.0\" AnchorPane.leftAnchor\u003d\"-10.0\" AnchorPane.rightAnchor\u003d\"-10.0\" AnchorPane.topAnchor\u003d\"-10.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                                \u003ccolumns\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                                    \u003cTableColumn fx:id\u003d\"inventoryListNum\" prefWidth\u003d\"75.0\" text\u003d\"S/N\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                                  \u003cTableColumn fx:id\u003d\"inventoryListIngredient\" prefWidth\u003d\"425.0\" text\u003d\"Ingredient\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                                  \u003cTableColumn fx:id\u003d\"inventoryListQuantity\" minWidth\u003d\"0.0\" prefWidth\u003d\"300.0\" text\u003d\"Quantity\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                                \u003c/columns\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                              \u003c/TableView\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                    \u003c/content\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                        \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                  \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "          \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"160.0\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                  \u003cTitledPane fx:id\u003d\"shoppingListPane\" animated\u003d\"false\" prefWidth\u003d\"598.0\" text\u003d\"Shopping List\" textFill\u003d\"#c51a1a\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                    \u003ccontent\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                      \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                              \u003cTableView fx:id\u003d\"shoppingTable\" prefHeight\u003d\"165.33333333333334\" prefWidth\u003d\"596.0\" AnchorPane.bottomAnchor\u003d\"-10.0\" AnchorPane.leftAnchor\u003d\"-10.0\" AnchorPane.rightAnchor\u003d\"-10.0\" AnchorPane.topAnchor\u003d\"-10.0\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                                \u003ccolumns\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                                    \u003cTableColumn fx:id\u003d\"shoppingListNum\" prefWidth\u003d\"75.0\" text\u003d\"S/N\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                                  \u003cTableColumn fx:id\u003d\"shoppingListIngredient\" prefWidth\u003d\"325.0\" text\u003d\"Ingredient\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                                  \u003cTableColumn fx:id\u003d\"shoppingListQuantity\" minWidth\u003d\"0.0\" prefWidth\u003d\"200.0\" text\u003d\"Quantity\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                                    \u003cTableColumn fx:id\u003d\"shoppingListPrice\" prefWidth\u003d\"200.0\" text\u003d\"Price\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                                \u003c/columns\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                              \u003c/TableView\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                    \u003c/content\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                        \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "                  \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "        \u003c/items\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "      \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 9,
      "eugenelim97": 50
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import com.jfoenix.controls.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.text.*?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003cfx:root type\u003d\"Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        \u003cScene stylesheets\u003d\"@../css/duke.css\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            \u003croot\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                \u003cAnchorPane prefHeight\u003d\"600.0\" prefWidth\u003d\"900.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003cAnchorPane prefHeight\u003d\"600.0\" prefWidth\u003d\"200.0\" AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    AnchorPane.leftAnchor\u003d\"200.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cJFXTextField fx:id\u003d\"userInput\" focusColor\u003d\"#00bfa5\" layoutX\u003d\"10.0\" layoutY\u003d\"493.0\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                              onAction\u003d\"#handleUserInput\" prefHeight\u003d\"33.0\" prefWidth\u003d\"338.0\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                              promptText\u003d\"Enter any duke.logic.command to start\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                              AnchorPane.bottomAnchor\u003d\"6.0\" AnchorPane.leftAnchor\u003d\"5.0\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                              AnchorPane.rightAnchor\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"currentPage\" text\u003d\"Orders\" textFill\u003d\"#5086ec\" AnchorPane.leftAnchor\u003d\"15.0\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                       AnchorPane.topAnchor\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial Bold\" size\u003d\"30.0\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cSeparator prefHeight\u003d\"3.0\" prefWidth\u003d\"200.0\" AnchorPane.leftAnchor\u003d\"15.0\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                           AnchorPane.rightAnchor\u003d\"15.0\" AnchorPane.topAnchor\u003d\"45.0\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cAnchorPane fx:id\u003d\"pagePane\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            AnchorPane.bottomAnchor\u003d\"40.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"50.0\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cAnchorPane visible\u003d\"false\" AnchorPane.bottomAnchor\u003d\"40.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cScrollPane fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                    minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"324.0\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                    prefWidth\u003d\"268.0\" styleClass\u003d\"edge-to-edge\" vvalue\u003d\"1.0\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                    AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                    AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cJFXListView fx:id\u003d\"taskList\" prefHeight\u003d\"401.0\" prefWidth\u003d\"413.0\"/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/content\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cInsets/\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cHBox fx:id\u003d\"popUp\" alignment\u003d\"BOTTOM_CENTER\" layoutX\u003d\"10.0\" layoutY\u003d\"523.0\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                      maxHeight\u003d\"30.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"200.0\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                      AnchorPane.bottomAnchor\u003d\"60.0\" AnchorPane.leftAnchor\u003d\"10.0\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                      AnchorPane.rightAnchor\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cLabel fx:id\u003d\"popUpLabel\" alignment\u003d\"CENTER\" maxHeight\u003d\"30.0\" prefHeight\u003d\"30.0\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                               text\u003d\"fvfvdvfdfvfvdvfdfvfvdvfdfvfvdvfdfvfvdvfdfvfvdvfdfvfvdvfd\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                               textFill\u003d\"WHITE\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cJFXButton fx:id\u003d\"popUpButton\" alignment\u003d\"CENTER\" defaultButton\u003d\"true\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                   minWidth\u003d\"61.0\" onAction\u003d\"#handleOk\" prefHeight\u003d\"30.0\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                   prefWidth\u003d\"61.0\" text\u003d\"Okay\"/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003cAnchorPane maxWidth\u003d\"200.0\" minWidth\u003d\"200.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    style\u003d\"-fx-background-color: #00bfa5;\" AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                      AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                      AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"110.0\" prefWidth\u003d\"200.0\" text\u003d\"BakingHome\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                               textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003cfont\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cFont name\u003d\"Arial Bold\" size\u003d\"30.0\"/\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/font\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cJFXButton fx:id\u003d\"recipeButton\" onAction\u003d\"#handleShowRecipe\" prefHeight\u003d\"50.0\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                   prefWidth\u003d\"200.0\" text\u003d\"Recipes\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003cfont\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cFont name\u003d\"Arial\" size\u003d\"18.0\"/\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/font\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003c/JFXButton\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cJFXButton fx:id\u003d\"orderButton\" onAction\u003d\"#handleShowOrder\" prefHeight\u003d\"50.0\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                   prefWidth\u003d\"200.0\" text\u003d\"Orders\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003cfont\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cFont name\u003d\"Arial\" size\u003d\"18.0\"/\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/font\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003c/JFXButton\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cJFXButton fx:id\u003d\"inventoryButton\" onAction\u003d\"#handleShowInventory\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                   prefHeight\u003d\"50.0\" prefWidth\u003d\"200.0\" text\u003d\"Inventory\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                   textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003cfont\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cFont name\u003d\"Arial\" size\u003d\"18.0\"/\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/font\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003c/JFXButton\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cJFXButton fx:id\u003d\"salesButton\" onAction\u003d\"#handleShowSale\" prefHeight\u003d\"50.0\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                   prefWidth\u003d\"200.0\" text\u003d\"Sales\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003cfont\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cFont name\u003d\"Arial\" size\u003d\"18.0\"/\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/font\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003c/JFXButton\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            \u003c/root\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 110,
      "liushiru": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/OrderCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.image.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.text.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"230.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"800.0\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            style\u003d\"-fx-background-color: white;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        \u003cAnchorPane fx:id\u003d\"innerPane\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    style\u003d\"-fx-background-color: white; -fx-border-color: #CCCCCC; -fx-effect: dropshadow(three-pass-box, grey, 10.0,0, 0, 0);\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    AnchorPane.bottomAnchor\u003d\"15.0\" AnchorPane.leftAnchor\u003d\"50.0\" AnchorPane.rightAnchor\u003d\"50.0\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    AnchorPane.topAnchor\u003d\"15.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                      AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"45.0\" prefWidth\u003d\"200.0\" spacing\u003d\"10.0\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                              style\u003d\"-fx-background-color: #5086ec;\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"index\" text\u003d\"#14g4ar\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"18.0\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cInsets left\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"status\" alignment\u003d\"CENTER\" text\u003d\"active\" textAlignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                       textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"18.0\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cInsets/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"deadline\" alignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                       style\u003d\"-fx-background-color: white; -fx-background-radius: 5; -fx-padding: 4;\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                       text\u003d\"March 18\" textAlignment\u003d\"CENTER\" textFill\u003d\"#5086ec\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"18.0\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cInsets/\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cImageView fitHeight\u003d\"17.0\" fitWidth\u003d\"17.0\" pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                   preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003cimage\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cImage url\u003d\"@../images/alarm-clock.png\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/image\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"30.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cLabel alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cInsets left\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cImageView fitHeight\u003d\"150.0\" fitWidth\u003d\"15.0\" pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                   preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003cimage\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cImage url\u003d\"@../images/name.png\"/\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/image\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"name\" alignment\u003d\"CENTER\" text\u003d\"Jiajun\"\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cInsets left\u003d\"5.0\" right\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cLabel alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cInsets left\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cImageView fitHeight\u003d\"150.0\" fitWidth\u003d\"15.0\" pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                   preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003cimage\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cImage url\u003d\"@../images/phone-contact.png\"/\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/image\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"contact\" alignment\u003d\"CENTER\" text\u003d\"83486144\"\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cInsets left\u003d\"5.0\" right\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cLabel alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cInsets left\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cImageView fitHeight\u003d\"150.0\" fitWidth\u003d\"15.0\" pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                   preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003cimage\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cImage url\u003d\"@../images/commentary.png\"/\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/image\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"remarks\" alignment\u003d\"CENTER\" text\u003d\"No nuts\"\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cInsets left\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003cSeparator prefWidth\u003d\"200.0\"/\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"60.0\" prefWidth\u003d\"200.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cScrollPane fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            style\u003d\"-fx-background-color: white;\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003ccontent\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cFlowPane fx:id\u003d\"itemFlow\" alignment\u003d\"CENTER_LEFT\" columnHalignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                  hgap\u003d\"10.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                  style\u003d\"-fx-background-color: white;\" vgap\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/content\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003cSeparator prefWidth\u003d\"200.0\"/\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003cHBox alignment\u003d\"TOP_RIGHT\" prefHeight\u003d\"18.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cLabel alignment\u003d\"CENTER\" text\u003d\"Order ID:\"\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"12.0\"/\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cInsets left\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"id\" alignment\u003d\"CENTER\" text\u003d\"Jiajun\" textFill\u003d\"#96663b\"\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"12.0\"/\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cInsets left\u003d\"5.0\" right\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cLabel alignment\u003d\"CENTER\" text\u003d\"Created on:\"\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"12.0\"/\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cInsets left\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"creationDate\" alignment\u003d\"CENTER\" text\u003d\"01/01/1999 18:00\""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                       textFill\u003d\"#96663b\"\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"12.0\"/\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cInsets left\u003d\"5.0\" right\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 196
    }
  },
  {
    "path": "src/main/resources/view/OrderItemBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003cfx:root maxHeight\u003d\"100.0\" minWidth\u003d\"100.0\" prefHeight\u003d\"80.0\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "         style\u003d\"-fx-background-radius: 5; -fx-background-color: #00bfa5;\" type\u003d\"AnchorPane\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\" prefHeight\u003d\"200.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "              AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                \u003cLabel fx:id\u003d\"itemName\" alignment\u003d\"CENTER\" text\u003d\"White bread\" textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003cFont name\u003d\"Arial\" size\u003d\"24.0\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                \u003cLabel fx:id\u003d\"itemQuantity\" alignment\u003d\"CENTER\" text\u003d\"5 pieces\" textAlignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                       textFill\u003d\"#ebebeb\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        \u003cFont name\u003d\"Arial\" size\u003d\"18.0\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 30,
      "eugenelim97": 1
    }
  },
  {
    "path": "src/main/resources/view/OrderPage.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import com.jfoenix.controls.JFXListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003cAnchorPane prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        \u003cJFXListView fx:id\u003d\"orderListView\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                     AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 11
    }
  },
  {
    "path": "src/main/resources/view/ProductPage.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "\u003c?import com.jfoenix.controls.JFXTextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "\u003cAnchorPane prefHeight\u003d\"591.0\" prefWidth\u003d\"877.0\" stylesheets\u003d\"@../css/product.css\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenelim97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        \u003cAnchorPane fx:id\u003d\"productListPane\" prefHeight\u003d\"566.0\" prefWidth\u003d\"770.0\" AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    AnchorPane.leftAnchor\u003d\"30.0\" AnchorPane.rightAnchor\u003d\"30.0\" AnchorPane.topAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                    \u003cSplitPane dividerPositions\u003d\"0.15655577299412915\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"566.0\" prefWidth\u003d\"770.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                        \u003citems\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            \u003cAnchorPane maxHeight\u003d\"80.0\" minHeight\u003d\"80.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"80.0\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        prefWidth\u003d\"478.0\" stylesheets\u003d\"@../css/duke.css\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                    \u003cLabel fx:id\u003d\"tableTitle\" alignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                           contentDisplay\u003d\"CENTER\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                           layoutX\u003d\"293.0\" layoutY\u003d\"22.0\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                           prefHeight\u003d\"77.0\" prefWidth\u003d\"758.0\" text\u003d\"All Products\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                           textAlignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                           AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                           AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                        \u003cfont\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                            \u003cFont name\u003d\"Arial\" size\u003d\"25.0\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                        \u003c/font\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                \u003c/children\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                            \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"435.0\" prefWidth\u003d\"768.0\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cSplitPane dividerPositions\u003d\"0.7871485943775101\" orientation\u003d\"VERTICAL\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                               AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                               AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                        \u003citems\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003cScrollPane fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" prefHeight\u003d\"379.0\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                        prefWidth\u003d\"815.0\" vbarPolicy\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                                \u003ccontent\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                                    \u003cTableView fx:id\u003d\"productListTable\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                                               stylesheets\u003d\"@../css/product.css\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                                        \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                                            \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\"/\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                                        \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                                    \u003c/TableView\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                                \u003c/content\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                            \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003cJFXTextArea prefHeight\u003d\"113.0\" prefWidth\u003d\"815.0\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                         promptText\u003d\"Add Recipe Here (Ctrl + Enter)\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                         style\u003d\"-fx-background-color: white;\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                        \u003c/items\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                    \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                \u003c/children\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                        \u003c/items\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                    \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 20,
      "liushiru": 45,
      "eugenelim97": 1
    }
  },
  {
    "path": "src/main/resources/view/SaleCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003cfx:root maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"230.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"800.0\" style\u003d\"-fx-background-color: white;\" type\u003d\"AnchorPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        \u003cAnchorPane fx:id\u003d\"innerPane\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: white; -fx-border-color: #CCCCCC; -fx-effect: dropshadow(three-pass-box, grey, 10.0,0, 0, 0);\" AnchorPane.bottomAnchor\u003d\"15.0\" AnchorPane.leftAnchor\u003d\"50.0\" AnchorPane.rightAnchor\u003d\"50.0\" AnchorPane.topAnchor\u003d\"15.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"45.0\" prefWidth\u003d\"200.0\" spacing\u003d\"10.0\" style\u003d\"-fx-background-color: #5086ec;\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"index\" text\u003d\"#14g4ar\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"deadline\" alignment\u003d\"CENTER\" style\u003d\"-fx-background-color: white; -fx-background-radius: 5; -fx-padding: 4;\" text\u003d\"March 18\" textAlignment\u003d\"CENTER\" textFill\u003d\"#5086ec\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cImageView fitHeight\u003d\"17.0\" fitWidth\u003d\"17.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                            \u003cimage\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                \u003cImage url\u003d\"@../images/alarm-clock.png\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                            \u003c/image\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"30.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003cLabel alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cImageView fitHeight\u003d\"150.0\" fitWidth\u003d\"15.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                            \u003cimage\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                \u003cImage url\u003d\"@../images/name.png\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                            \u003c/image\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"name\" alignment\u003d\"CENTER\" text\u003d\"Set A\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cInsets left\u003d\"5.0\" right\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003cLabel alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cInsets left\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cImageView fitHeight\u003d\"150.0\" fitWidth\u003d\"15.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                            \u003cimage\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                \u003cImage url\u003d\"@../images/phone-contact.png\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                            \u003c/image\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"contact\" alignment\u003d\"CENTER\" text\u003d\"\\$9.49\"\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cInsets left\u003d\"5.0\" right\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003cLabel alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cInsets left\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cImageView fitHeight\u003d\"150.0\" fitWidth\u003d\"15.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                            \u003cimage\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                \u003cImage url\u003d\"@../images/commentary.png\" /\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                            \u003c/image\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"remarks\" alignment\u003d\"CENTER\" text\u003d\"No dairy\"\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003cSeparator prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"60.0\" prefWidth\u003d\"200.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003cScrollPane fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: white;\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003ccontent\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cFlowPane fx:id\u003d\"itemFlow\" alignment\u003d\"CENTER_LEFT\" columnHalignment\u003d\"CENTER\" hgap\u003d\"10.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: white;\" vgap\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/content\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003cSeparator prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003cHBox alignment\u003d\"TOP_RIGHT\" prefHeight\u003d\"18.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003cLabel alignment\u003d\"CENTER\" text\u003d\"Sale ID:\"\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"id\" alignment\u003d\"CENTER\" text\u003d\"Chek Jun\" textFill\u003d\"#96663b\"\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cInsets left\u003d\"5.0\" right\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003cLabel alignment\u003d\"CENTER\" text\u003d\"Created on:\"\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cInsets left\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"creationDate\" alignment\u003d\"CENTER\" text\u003d\"29/05/1997 12:30\" textFill\u003d\"#96663b\"\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cInsets left\u003d\"5.0\" right\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "chekjun": 177
    }
  },
  {
    "path": "src/main/resources/view/SalePage.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import com.jfoenix.controls.JFXButton?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003cAnchorPane prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        \u003cJFXButton layoutX\u003d\"200.0\" layoutY\u003d\"128.0\" prefHeight\u003d\"159.0\" prefWidth\u003d\"304.0\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        \u003cLabel layoutX\u003d\"8.0\" layoutY\u003d\"65.0\" prefHeight\u003d\"17.0\" prefWidth\u003d\"534.0\" text\u003d\"Label\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 12
    }
  },
  {
    "path": "src/test/java/duke/Command/DeleteOrderCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class DeleteOrderCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 5
    }
  },
  {
    "path": "src/test/java/duke/entities_decrypted/OrderTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//package duke.entities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.model.order.Order;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.parser.commons.TimeParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//public class OrderTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private void createOrder_withRemarksAndOneItem_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            Order order \u003d new Order(\"jj\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                    \"12345678\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                    TimeParser.convertStringToDate(\"10/10/2019 18:00\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            order.setRemarks(\"no nuts\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            order.addItem(\"cake\", 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            assertEquals(\"no nuts\", order.getRemarks());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            assertEquals(\"jj\", order.getCustomerName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            assertEquals(1, order.getItems().size());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } catch (ParseException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            fail();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private void createOrder_invalidDate_dukeException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            Order order \u003d new Order(\"jj\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                    \"12345678\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//                    TimeParser.convertStringToDate(\"123\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            fail();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        } catch (ParseException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//            assertEquals(\"Please enter date in correct format: dd/mm/yyyy hhmm. e.g. 18/12/1999 18:00.\", e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 43
    }
  },
  {
    "path": "src/test/java/duke/storage/StorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.commons.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.model.order.Order;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import duke.logic.parser.commons.TimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//public class StorageTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    private void serializeAndDeserialize_bakingListWithOnlyOrderList_success() throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        Order order \u003d new Order(\"jj\", \"1234\", TimeParser.convertStringToDate(\"10/10/1999 18:00\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        BakingList bakingList \u003d new BakingList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        bakingList.getOrderList().add(order);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        Storage storage \u003d new Storage(\"baking.json\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        BakingList deserializedBakingList \u003d storage.deserialize();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//        assertEquals(\"jj\", deserializedBakingList.getOrderList().get(0).getCustomerName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 20
    }
  }
]
