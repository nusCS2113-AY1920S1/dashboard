[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "group \u0027seedu.oof\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    mainClassName \u003d \"oof.Oof\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    archiveBaseName \u003d \"\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    archiveVersion \u003d \"v1.4\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation(\u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntime(\u0027org.junit.jupiter:junit-jupiter-engine:5.5.0\u0027)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    compile group: \u0027org.fusesource.jansi\u0027, name: \u0027jansi\u0027, version: \u00271.18\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 1,
      "jasperosy": 5,
      "-": 37
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "rootProject.name \u003d \u0027oof\u0027"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 1
    }
  },
  {
    "path": "src/main/java/oof/Oof.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "package oof;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.ParserException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.StorageFileCorruptedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.CommandParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.Reminder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " * Represents a Personal Assistant bot. An Oof object corresponds to three other classes,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * namely called Storage, Ui and TaskList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "public class Oof {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private SemesterList semesterList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private Reminder reminder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Constructor for Oof for instantiation of other classes Ui, Storage and TaskList."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public Oof() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        reminder \u003d new Reminder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            semesterList \u003d new SemesterList(storageManager.readSemesterList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (NullPointerException | StorageFileCorruptedException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            semesterList \u003d new SemesterList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            taskList \u003d new TaskList(storageManager.readTaskList(semesterList));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (NullPointerException | StorageFileCorruptedException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Executes command entered by user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param line Command to be tested."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws CommandException if command fails to execute."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws ParserException if command cannot be parsed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public boolean executeCommand(String line) throws CommandException, ParserException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Command command \u003d CommandParser.parse(line);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        command.execute(semesterList, taskList, ui, storageManager);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return command.isExit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Runs the Personal Assistant."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        ui.hello();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        reminder.checkDeadline(taskList, ui, storageManager);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                ui.printCommandPrompt();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                String line \u003d ui.scanLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                if (line.trim().isEmpty()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                isExit \u003d executeCommand(line);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            } catch (CommandException | ParserException exception) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                ui.printCommandException(exception);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public TaskList getTaskList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public StorageManager getStorageManager() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return storageManager;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * This is the main method which makes use of run method."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param args Unused."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        new Oof().run();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public SemesterList getSemesterList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return semesterList;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 2,
      "KahLokKee": 53,
      "jasperosy": 44
    }
  },
  {
    "path": "src/main/java/oof/commons/exceptions/CommandNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class CommandNotFoundException extends ParserException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public CommandNotFoundException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 8
    }
  },
  {
    "path": "src/main/java/oof/commons/exceptions/IllegalCommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class IllegalCommandException extends ParserException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public IllegalCommandException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 8
    }
  },
  {
    "path": "src/main/java/oof/commons/exceptions/ParserException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class ParserException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public ParserException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 8
    }
  },
  {
    "path": "src/main/java/oof/commons/exceptions/StorageFileCorruptedException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class StorageFileCorruptedException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public StorageFileCorruptedException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 8
    }
  },
  {
    "path": "src/main/java/oof/commons/exceptions/command/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.commons.exceptions.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 8
    }
  },
  {
    "path": "src/main/java/oof/commons/exceptions/command/InvalidArgumentException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.commons.exceptions.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class InvalidArgumentException extends CommandException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public InvalidArgumentException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 8
    }
  },
  {
    "path": "src/main/java/oof/commons/exceptions/command/MissingArgumentException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.commons.exceptions.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class MissingArgumentException extends CommandException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public MissingArgumentException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 9
    }
  },
  {
    "path": "src/main/java/oof/commons/exceptions/command/OofManualNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.commons.exceptions.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class OofManualNotFoundException extends CommandException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public OofManualNotFoundException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 8
    }
  },
  {
    "path": "src/main/java/oof/logic/CommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SelectedInstance;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.task.AddAssessmentCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.task.AddAssignmentCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.task.AddDeadlineCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.task.AddEventCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.lesson.AddLessonCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.module.AddModuleCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.semester.AddSemesterCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.task.AddToDoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.ByeCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.productivity.CalendarCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.lesson.DeleteLessonCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.module.DeleteModuleCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.semester.DeleteSemesterCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.task.DeleteTaskCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.organization.DoneCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.organization.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.productivity.FreeCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.organization.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.organization.RecurringCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.productivity.ScheduleCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.module.SelectModuleCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.semester.SelectSemesterCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.organization.SnoozeCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.productivity.SummaryCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.productivity.ThresholdCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.productivity.TrackerCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.module.ViewAllModuleCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.semester.ViewAllSemesterCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.lesson.ViewLessonCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.module.ViewSelectedModuleCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.semester.ViewSelectedSemesterCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.productivity.ViewWeekCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.CommandNotFoundException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.IllegalCommandException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.ParserException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.InvalidArgumentException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.MissingArgumentException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.module.exceptions.ModuleNotSelectedException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.semester.exceptions.SemesterNotSelectedException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Module;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Semester;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "//@@author KahLokKee"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a parser to process the commands inputted by the user."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final String DELIMITER \u003d \"|\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Parses the input given by user and calls specific Commands"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * after checking the validity of the input."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param input Command entered by user."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return Command based on the user input."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws ParserException  if command contains illegal strings or if command does not exists."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws CommandException if command contains invalid arguments."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public static Command parse(String input) throws ParserException, CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (containsIllegalInput(input)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new IllegalCommandException(\"OOPS!!! Command contains illegal input!\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String command \u003d getFirstWord(input);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        input \u003d removeFirstWord(input);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        case ByeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return new HelpCommand(input);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return parseDoneCommand(input);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        case AddToDoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return parseAddToDoCommand(input);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        case AddAssignmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return parseAddAssignmentCommand(input);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        case AddDeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return parseAddDeadlineCommand(input);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        case AddAssessmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return parseAddAssessmentCommand(input);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        case AddEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return parseAddEventCommand(input);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        case DeleteTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return parseDeleteCommand(input);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return new FindCommand(input);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        case SnoozeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return parseSnooze(input);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        case ScheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return new ScheduleCommand(input);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        case SummaryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return new SummaryCommand();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        case RecurringCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return new RecurringCommand(input);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        case CalendarCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return new CalendarCommand(input);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        case ViewWeekCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return parseViewWeekCommand(input);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        case FreeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return new FreeCommand(input);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        case TrackerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return new TrackerCommand(input);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        case ThresholdCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return parseThresholdCommand(input);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        case AddSemesterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return parseSemesterCommand(input);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        case AddModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return parseModuleCommand(input);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        case AddLessonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return parseLessonCommand(input);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new CommandNotFoundException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks if user input contains illegal characters."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param line User input."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return True if user input contains illegal characters, false otherwise."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static boolean containsIllegalInput(String line) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return line.contains(DELIMITER);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Extracts the first word from user input."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return String containing the first word."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static String getFirstWord(String input) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        int index \u003d input.indexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (index \u003d\u003d -1) { // Input only contains a single word"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return input;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return input.substring(0, index).trim(); // Extracts first word."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Removes the first word from user input."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return string without first word or empty string if user input contains one word."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static String removeFirstWord(String input) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        int index \u003d input.indexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (index \u003d\u003d -1) { // Input only contains a single word"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return input.substring(index + 1).trim(); // Extracts after space."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Tokenize the user input into an argument array."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param input              User input."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param argumentDelimiters Specific delimiters for the command to be tokenized."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return ArrayList of tokenized user input."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static ArrayList\u003cString\u003e tokenizeToStringArray(String input, String[] argumentDelimiters) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        int argumentDelimitersIndex \u003d 0;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String[] inputSplit \u003d input.split(\" \");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ArrayList\u003cString\u003e argumentArray \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        StringBuilder argument \u003d new StringBuilder();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (int index \u003d 0; index \u003c inputSplit.length; index++) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            if (argumentDelimitersIndex \u003e\u003d argumentDelimiters.length) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                argument.append(inputSplit[index]).append(\" \");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            } else if (inputSplit[index].equals(argumentDelimiters[argumentDelimitersIndex])) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                argumentArray.add(argument.toString().trim());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                argumentDelimitersIndex++;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                argument \u003d new StringBuilder();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                argument.append(inputSplit[index]).append(\" \");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        argumentArray.add(argument.toString().trim());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return argumentArray;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Parses input if the user input starts with done."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param input Command inputted by user in string format."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return Instance of CompleteCommand with parsed input as arguments"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws MissingArgumentException if input is empty or not a valid integer."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static Command parseDoneCommand(String input) throws MissingArgumentException {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new MissingArgumentException(\"OOPS!!! Please enter a number!\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                int index \u003d Integer.parseInt(input) - 1;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                return new DoneCommand(index);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                throw new MissingArgumentException(\"OOPS!!! Please enter a valid number!\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Parses command for adding todo tasks."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return Instance of AddToDoCommand if the user input is successfully tokenized."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static Command parseAddToDoCommand(String input) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String[] argumentDelimiters \u003d {\"/on\"};"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ArrayList\u003cString\u003e arguments \u003d tokenizeToStringArray(input, argumentDelimiters);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return new AddToDoCommand(arguments);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Parses command for adding assignment tasks."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return Instance of AddAssignmentCommand if the user input is successfully tokenized."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static Command parseAddAssignmentCommand(String input) throws ModuleNotSelectedException {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        SelectedInstance selectedInstance \u003d SelectedInstance.getInstance();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Module module \u003d selectedInstance.getModule();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (module \u003d\u003d null) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new ModuleNotSelectedException(\"OOPS!! No module selected.\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String[] argumentDelimiters \u003d {\"/by\"};"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ArrayList\u003cString\u003e arguments \u003d tokenizeToStringArray(input, argumentDelimiters);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return new AddAssignmentCommand(arguments);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Parses command for adding deadline tasks."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return Instance of AddDeadlineCommand if the user input is successfully tokenized."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static Command parseAddDeadlineCommand(String input) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String[] argumentDelimiters \u003d {\"/by\"};"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ArrayList\u003cString\u003e arguments \u003d tokenizeToStringArray(input, argumentDelimiters);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return new AddDeadlineCommand(arguments);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Parses command for adding Assessment tasks."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return Instance of AddAssessmentCommand if the user input is successfully tokenized."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static Command parseAddAssessmentCommand(String input) throws ModuleNotSelectedException {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        SelectedInstance selectedInstance \u003d SelectedInstance.getInstance();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Module module \u003d selectedInstance.getModule();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (module \u003d\u003d null) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new ModuleNotSelectedException(\"OOPS!! No module selected.\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String[] argumentDelimiters \u003d {\"/from\", \"/to\"};"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ArrayList\u003cString\u003e arguments \u003d tokenizeToStringArray(input, argumentDelimiters);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return new AddAssessmentCommand(arguments);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Parses command for adding event tasks."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return Instance of AddEventCommand if the user input is successfully tokenized."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static Command parseAddEventCommand(String input) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String[] argumentDelimiters \u003d {\"/from\", \"/to\"};"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ArrayList\u003cString\u003e arguments \u003d tokenizeToStringArray(input, argumentDelimiters);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return new AddEventCommand(arguments);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Parses input if the user input starts with delete."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param input Command inputted by user in string format."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return Instance of DeleteCommand if the parameters are valid."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws MissingArgumentException if the arguments are missing."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static Command parseDeleteCommand(String input) throws MissingArgumentException {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new MissingArgumentException(\"OOPS!!! Please enter a number!\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                int index \u003d Integer.parseInt(input) - 1;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                return new DeleteTaskCommand(index);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                throw new MissingArgumentException(\"OOPS!!! Please enter a valid number!\");"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Parses input if the user input starts with snooze."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param input Command inputted by user in string format"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return Returns an instance of SnoozeCommand"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws InvalidArgumentException if the argument is invalid."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static Command parseSnooze(String input) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            int index \u003d Integer.parseInt(input) - 1;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return new SnoozeCommand(index);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!!! Please enter a valid number!\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Parses input for ThresholdCommand."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param input Command input by user"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return instance of ThresholdCommand with parsed input as arguments"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws InvalidArgumentException if command argument is not a valid integer."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws MissingArgumentException if command argument is missing."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static Command parseThresholdCommand(String input) throws InvalidArgumentException,"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            MissingArgumentException {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new MissingArgumentException(\"OOPS!!! Please enter a number!\");"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                int threshold \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                return new ThresholdCommand(threshold);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                throw new InvalidArgumentException(\"OOPS!!! Please enter a valid number!\");"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Parses input for ViewWeekCommand."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return Instance of ViewWeekCommand with parsed input as arguments."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static Command parseViewWeekCommand(String input) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String[] argumentArray \u003d input.split(\" \");"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return new ViewWeekCommand(argumentArray);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Parses input if the user input starts with semester."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param input Command inputted by user in string format."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return Returns relevant Semester Commands if the parameters are valid."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws CommandNotFoundException if command is invalid."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws InvalidArgumentException if command arguments are invalid."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static Command parseSemesterCommand(String input) throws CommandNotFoundException,"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            InvalidArgumentException {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return new ViewSelectedSemesterCommand();"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            String commandFlag \u003d getFirstWord(input);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            input \u003d removeFirstWord(input);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            switch (commandFlag) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            case \"/add\":"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                return parseSemesterAdd(input);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            case \"/delete\":"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                return parseSemesterDelete(input);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            case \"/select\":"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                return parseSemesterSelect(input);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            case \"/view\":"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                return new ViewAllSemesterCommand();"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                throw new CommandNotFoundException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static Command parseSemesterAdd(String input) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String[] argumentDelimiters \u003d {\"/name\", \"/from\", \"/to\"};"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ArrayList\u003cString\u003e argumentArray \u003d tokenizeToStringArray(input, argumentDelimiters);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return new AddSemesterCommand(argumentArray);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static Command parseSemesterDelete(String input) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            int deleteIndex \u003d Integer.parseInt(input) - 1;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return new DeleteSemesterCommand(deleteIndex);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!!! Please enter a valid number!\");"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static Command parseSemesterSelect(String input) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            int index \u003d Integer.parseInt(input) - 1;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return new SelectSemesterCommand(index);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!!! Please enter a valid number!\");"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Parses input if the user input starts with module."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param input Command inputted by user in string format."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return Returns relevant Module Commands if the parameters are valid."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws CommandNotFoundException if command is invalid."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws CommandException         if semester is not selected or if command arguments are invalid."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static Command parseModuleCommand(String input) throws CommandNotFoundException, CommandException {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        SelectedInstance selectedInstance \u003d SelectedInstance.getInstance();"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Semester semester \u003d selectedInstance.getSemester();"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (semester \u003d\u003d null) {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new SemesterNotSelectedException(\"OOPS!! Please select a semester!\");"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return new ViewSelectedModuleCommand();"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            String commandFlag \u003d getFirstWord(input);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            input \u003d removeFirstWord(input);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            switch (commandFlag) {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            case \"/add\":"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                return parseModuleAdd(input);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            case \"/delete\":"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                return parseModuleDelete(input);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            case \"/select\":"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                return parseModuleSelect(input);"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            case \"/view\":"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                return new ViewAllModuleCommand();"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                throw new CommandNotFoundException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static Command parseModuleAdd(String input) {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String[] argumentDelimiters \u003d {\"/name\"};"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ArrayList\u003cString\u003e argumentArray \u003d tokenizeToStringArray(input, argumentDelimiters);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return new AddModuleCommand(argumentArray);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static Command parseModuleDelete(String input) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            int deleteIndex \u003d Integer.parseInt(input) - 1;"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return new DeleteModuleCommand(deleteIndex);"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!!! Please enter a valid number!\");"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static Command parseModuleSelect(String input) throws CommandException {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            int index \u003d Integer.parseInt(input) - 1;"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return new SelectModuleCommand(index);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!!! Please enter a valid number!\");"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Parses input if the user input starts with lesson."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param input Command inputted by user in string format."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return Returns relevant Lesson Commands if the parameters are valid."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws CommandNotFoundException if command is invalid."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws CommandException         if module is not selected or if command arguments are invalid."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static Command parseLessonCommand(String input) throws CommandNotFoundException, CommandException {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        SelectedInstance selectedInstance \u003d SelectedInstance.getInstance();"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Module module \u003d selectedInstance.getModule();"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (module \u003d\u003d null) {"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new ModuleNotSelectedException(\"OOPS!! No module selected.\");"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (input.isEmpty()) {"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return new ViewLessonCommand();"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            String commandFlag \u003d getFirstWord(input);"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            input \u003d removeFirstWord(input);"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            switch (commandFlag) {"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            case \"/add\":"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                return parseLessonAdd(input);"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            case \"/delete\":"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                return parseLessonDelete(input);"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                throw new CommandNotFoundException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static Command parseLessonAdd(String input) {"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String[] argumentDelimiters \u003d {\"/day\", \"/from\", \"/to\"};"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ArrayList\u003cString\u003e argumentArray \u003d tokenizeToStringArray(input, argumentDelimiters);"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return new AddLessonCommand(argumentArray);"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static Command parseLessonDelete(String input) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            int deleteIndex \u003d Integer.parseInt(input) - 1;"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return new DeleteLessonCommand(deleteIndex);"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!!! Please enter a valid number!\");"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 533,
      "jasperosy": 1
    }
  },
  {
    "path": "src/main/java/oof/logic/Reminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Reminder class to remind user on upcoming deadlines."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class Reminder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final long MILLISECOND_TO_HOUR \u003d 60 * 60 * 1000;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String DEFAULT_DATETIME \u003d \"00-00-0000 00:00\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks Task objects dates to determine if it is due soon."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskList TaskList that contains Task objects."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui       Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void checkDeadline(TaskList taskList, Ui ui, StorageManager storageManager) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        int upcomingThreshold \u003d storageManager.readThreshold();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            Task task \u003d taskList.getTask(i);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                Date dueDate \u003d parseDateTime(((Deadline) task));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                count \u003d displayReminders(taskList, ui, dueDate, upcomingThreshold, count, i);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            if (isNoDeadlineReminded(i, taskList, count)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                ui.printNoDeadlines();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if deadline is within the threshold."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param dueDate Due date of current deadline."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param now     Current time."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if due date of current deadline is within threshold."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean isUpcoming(Date dueDate, Date now, int upcomingThreshold) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        long diff \u003d dueDate.getTime() - now.getTime(); // difference in time in milliseconds"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        long diffHours \u003d diff / MILLISECOND_TO_HOUR;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return diffHours \u003c upcomingThreshold \u0026\u0026 diffHours \u003e 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if there are no deadlines being reminded."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param index    Index of the task to be checked."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param taskList Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param count    Count of the deadlines being reminded"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if there are no deadlines being reminded, false otherwise."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean isNoDeadlineReminded(int index, TaskList taskList, int count) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return (index \u003d\u003d taskList.getSize() - 1 \u0026\u0026 count \u003d\u003d 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Parses the timestamp for the deadlines."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param task Deadline task object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return Returns the parsed date if the date format is parsable."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private Date parseDateTime(Deadline task) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Date defaultDate \u003d new Date();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            String dateTime \u003d task.getDeadlineDateTime();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            defaultDate \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\").parse(DEFAULT_DATETIME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            return new SimpleDateFormat(\"dd-MM-yyyy HH:mm\").parse(dateTime);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (ParseException | DateTimeException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            return defaultDate;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Displays the reminders and returns the number of reminders displayed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param taskList          Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param ui                Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param dueDate           Due date of current deadline."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param upcomingThreshold DateTime threshold for OOF to display the reminders."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param count             Number of reminders displayed thus far."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param index             Index in the taskList."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return Returns the updated number of reminders displayed."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private int displayReminders(TaskList taskList, Ui ui, Date dueDate, int upcomingThreshold, int count,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                                 int index) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Date now \u003d new Date();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (isUpcoming(dueDate, now, upcomingThreshold)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            if (isFirstReminder(count)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                ui.printReminder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            ui.printUpcomingDeadline(count, taskList.getTask(index));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return count;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if it is the first deadline being reminded."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param count Count of the deadlines being reminded"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if current deadline is indeed the first deadline being reminded, false otheriwse"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean isFirstReminder(int count) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return count \u003d\u003d 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 49,
      "KahLokKee": 28,
      "jasperosy": 42
    }
  },
  {
    "path": "src/main/java/oof/logic/command/ByeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " * Represents a Command to terminate Oof."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bye\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for ExitCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public ByeCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Exits the Oof program."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList   Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskList       Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList taskList, Ui ui, StorageManager storageManager) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ui.printByeMessage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Checks if ExitCommand is called for Oof to terminate."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return true."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 18,
      "jasperosy": 26
    }
  },
  {
    "path": "src/main/java/oof/logic/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Todo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Command object that corresponds to specific commands"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " * defined by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Abstract parent of all other Command subclasses."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Invokes other Command subclasses based on the input given by the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList   Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskList       Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                       objects to hard disk."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws CommandException if command fails to execute."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public abstract void execute(SemesterList semesterList, TaskList taskList, Ui ui, StorageManager storageManager)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throws CommandException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Checks if description and module code exceeds the maximum description length."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return True if maximum description length is exceeded, false otherwise."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public boolean exceedsMaxLength(String description, int limit) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return description.length() \u003e\u003d limit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Parses the Timestamp given by the user and returns the parsed"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * date as a string if the date is valid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param dateTime Timestamp supplied by user."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return Parsed Timestamp if the Timestamp is valid, else returns \"failed\"."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String parseDateTime(String dateTime) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            SimpleDateFormat format \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            format.setLenient(false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            Date parsed \u003d format.parse(dateTime);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return format.format(parsed);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (ParseException | DateTimeException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return \"failed\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Parses the Date input by user and returns the parsed date if the date is valid."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param date Date input by user"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return Parsed Date if the Date is valid, else returns \"failed\"."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String parseDate(String date) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            SimpleDateFormat format \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            format.setLenient(false);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            Date parsed \u003d format.parse(date);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return format.format(parsed);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (ParseException | DateTimeException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return \"failed\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Parses the Time given by the user and returns the parsed time as a string if the date is valid."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param time String containing time supplied by user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return Parsed Time if the Time is valid, else return \"failed\"."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String parseTime(String time) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            SimpleDateFormat format \u003d new SimpleDateFormat(\"HH:mm\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            format.setLenient(false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            Date parsed \u003d format.parse(time);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return format.format(parsed);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (ParseException | DateTimeException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return \"failed\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks if date is valid."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param date String processed by ParseTimeStamp method."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return true if date is not equals to \"failed\", false otherwise."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public boolean isDateValid(String date) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return !date.equals(\"failed\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     **"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Converts a string into a time."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param time The string to be converted."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return A time in the format specified."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws ParseException Throws an exception if time cannot be parsed."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public Date convertStringToTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return new SimpleDateFormat(\"HH:mm\").parse(time);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Converts a string into a date."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param date The string to be converted."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return A date in the format specified."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws ParseException Throws an exception if date cannot be parsed."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public Date convertStringToDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return new SimpleDateFormat(\"dd-MM-yyyy\").parse(date);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Convert a Date Object into a string."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param date The date to be converted."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return A string in the format specified."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public String convertDateToString(Date date) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return new SimpleDateFormat(\"dd-MM-yyyy\").format(date);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Get Date from Task object."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param task Task object."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return String containing date from Task object."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getDate(Task task) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (task instanceof Todo) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            return ((Todo) task).getTodoDate().substring(0, 10);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            return ((Deadline) task).getDeadlineDateTime().substring(0, 10);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            return ((Event) task).getStartDateTime().substring(0, 10);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Comparator to sort tasks by their time in ascending order."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public class SortByTime implements Comparator\u003cString[]\u003e {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        public int compare(String[] a, String[] b) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            if (a[0].equals(\"\")) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            } else if (b[0].equals(\"\")) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            int hour1 \u003d Integer.parseInt(a[0].substring(0, 2));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            int hour2 \u003d Integer.parseInt(b[0].substring(0, 2));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            if (hour1 !\u003d hour2) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                return hour1 - hour2;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                int minute1 \u003d Integer.parseInt(a[0].substring(3, 5));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                int minute2 \u003d Integer.parseInt(b[0].substring(3, 5));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                return minute1 - minute2;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        public boolean equals(Object object) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return this \u003d\u003d object;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Checks if ExitCommand is called for Oof to terminate."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 33,
      "KahLokKee": 133,
      "jasperosy": 33
    }
  },
  {
    "path": "src/main/java/oof/logic/command/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.InvalidArgumentException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.OofManualNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Command to print a help manual."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private static final int COMMANDS_BEGIN \u003d 8;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Constructor for individual Help Command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param keyword to indicate keyword that help is needed for."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public HelpCommand(String keyword) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints a help manual."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList   Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskList       Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                       objects to hard disk."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws CommandException if help manual is missing or if user input contains invalid arguments."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList taskList, Ui ui, StorageManager storageManager)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ArrayList\u003cString\u003e commands \u003d storageManager.readManual();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            if (keyword.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                ui.printHelpCommands();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                String description \u003d individualQuery(keyword, commands);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                ui.printHelpCommand(description);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new OofManualNotFoundException(\"Manual Unavailable!\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Get instruction for individual Help Command."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param keyword keyword where individual instruction is needed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @return description      use of individual instruction."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws InvalidArgumentException if user input contains invalid arguments."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String individualQuery(String keyword, ArrayList\u003cString\u003e commands) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        String description \u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        for (int i \u003d COMMANDS_BEGIN; i \u003c commands.size(); i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            if (isMatchCommand(keyword, commands.get(i))) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                description \u003d commands.get(i);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"Invalid keyword!\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Check if keyword and command String values match."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param keyword given by user."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param command stored in manual.txt."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return True if String values match."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private boolean isMatchCommand(String keyword, String command) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        int keywordEnd \u003d command.indexOf(\"  \");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        String instruction \u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        if (isKeyword(keywordEnd)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            instruction \u003d command.substring(0, keywordEnd).toUpperCase();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            keyword \u003d keyword.toUpperCase();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return keyword.equals(instruction);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Check if keyword exists."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param index supposed end of keyword"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return True if end of keyword is more than zero (i.e. exists)."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private boolean isKeyword(int index) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return index \u003e 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 51,
      "debbiextan": 55
    }
  },
  {
    "path": "src/main/java/oof/logic/command/lesson/AddLessonCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SelectedInstance;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.InvalidArgumentException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.MissingArgumentException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Lesson;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "//@@author KahLokKee"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class AddLessonCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lesson\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private ArrayList\u003cString\u003e arguments;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_NAME \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_DAY \u003d 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_START_TIME \u003d 2;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_END_TIME \u003d 3;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int ARRAY_SIZE_DAY \u003d 2;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int ARRAY_SIZE_START_TIME \u003d 3;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int ARRAY_SIZE_END_TIME \u003d 4;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int LESSON_NAME_LENGTH_MAX \u003d 20;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final String[] days \u003d {\"MONDAY\", \"TUESDAY\", \"WEDNESDAY\", \"THURSDAY\", \"FRIDAY\", \"SATURDAY\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            \"SUNDAY\"};"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for AddLessonCommand."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param arguments Command inputted by user for processing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public AddLessonCommand(ArrayList\u003cString\u003e arguments) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Adds a lesson to module."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList   Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param tasks          Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                       objects to hard disk."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws CommandException if module is not selected or if user input contains missing or invalid arguments."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, StorageManager storageManager)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (arguments.get(INDEX_NAME).isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new MissingArgumentException(\"OOPS!!! The lesson needs a name.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (arguments.size() \u003c ARRAY_SIZE_DAY || arguments.get(INDEX_DAY).isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new MissingArgumentException(\"OOPS!!! The lesson needs a day.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (arguments.size() \u003c ARRAY_SIZE_START_TIME || arguments.get(INDEX_START_TIME).isEmpty()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new MissingArgumentException(\"OOPS!!! The lesson needs a start time.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (arguments.size() \u003c ARRAY_SIZE_END_TIME || arguments.get(INDEX_END_TIME).isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new MissingArgumentException(\"OOPS!!! The lesson needs an end time.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String startTime \u003d parseTime(arguments.get(INDEX_START_TIME));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String endTime \u003d parseTime(arguments.get(INDEX_END_TIME));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String day \u003d arguments.get(INDEX_DAY);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (!isDayValid(day.toUpperCase())) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!!! The day is invalid.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (!isDateValid(startTime)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!!! The start time is invalid.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (!isDateValid(endTime)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!!! The end time is invalid.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        SimpleDateFormat format \u003d new java.text.SimpleDateFormat(\"HH:mm\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            Date newStartTime \u003d format.parse(startTime);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            Date newEndTime \u003d format.parse(endTime);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            if (!isStartDateBeforeEndDate(newStartTime, newEndTime)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                throw new InvalidArgumentException(\"OOPS!!! The start time of a lesson must be strictly before the \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                        + \"end time.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"Timestamp given is invalid! Please try again.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        SelectedInstance selectedInstance \u003d SelectedInstance.getInstance();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Module module \u003d selectedInstance.getModule();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String name \u003d arguments.get(INDEX_NAME);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String moduleCode \u003d module.getModuleCode();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String description \u003d moduleCode + \" \" + name;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (exceedsMaxLength(description, LESSON_NAME_LENGTH_MAX)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"Lesson Name exceeds maximum length of: \" + LESSON_NAME_LENGTH_MAX);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        DayOfWeek dayOfWeek \u003d DayOfWeek.valueOf(arguments.get(INDEX_DAY).toUpperCase());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Lesson lesson \u003d new Lesson(moduleCode, name, dayOfWeek, startTime, endTime);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        module.addLesson(lesson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ui.printLessonAddedMessage(lesson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        storageManager.writeSemesterList(semesterList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private boolean isDayValid(String day) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (String i : days) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            if (day.equals(i)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks if start and end date are chronologically accurate."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param startTime Start time of lesson being added."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param endTime   End time of lesson being added."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return true if start date occurs before end date, false otherwise."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private boolean isStartDateBeforeEndDate(Date startTime, Date endTime) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return startTime.compareTo(endTime) \u003c 0;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 3,
      "KahLokKee": 127
    }
  },
  {
    "path": "src/main/java/oof/logic/command/lesson/DeleteLessonCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SelectedInstance;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.InvalidArgumentException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Lesson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "//@@author KahLokKee"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Command to delete a specific Lesson."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class DeleteLessonCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for DeleteLessonCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param index Represents the index of the Lesson to be deleted."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public DeleteLessonCommand(int index) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Deletes a lesson from module."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList   Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param tasks          Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                       objects to hard disk."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws InvalidArgumentException if user input contains invalid commands."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, StorageManager storageManager)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throws InvalidArgumentException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        SelectedInstance selectedInstance \u003d SelectedInstance.getInstance();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Module module \u003d selectedInstance.getModule();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (!module.isLessonIndexValid(index)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!!! Invalid number!\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Lesson lesson \u003d module.getLesson(this.index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        module.deleteLesson(this.index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ui.printLessonRemovalMessage(lesson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        storageManager.writeSemesterList(semesterList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 3,
      "KahLokKee": 57
    }
  },
  {
    "path": "src/main/java/oof/logic/command/lesson/ViewLessonCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SelectedInstance;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.organization.exceptions.EmptyListException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "//@@author KahLokKee"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Command to view the list of Lessons."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class ViewLessonCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Default Constructor for ViewLessonCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public ViewLessonCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Retrieves and prints list of lessons."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList   Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskList       Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                       objects to hard disk."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws CommandException if module instance is not selected or if lessons list is empty."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList taskList, Ui ui, StorageManager storageManager)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        SelectedInstance selectedInstance \u003d SelectedInstance.getInstance();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Module module \u003d selectedInstance.getModule();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (module.getLessons().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new EmptyListException(\"OOPS!! Lesson list is empty!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ui.printLessonList(module);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 3,
      "KahLokKee": 50
    }
  },
  {
    "path": "src/main/java/oof/logic/command/module/AddModuleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SelectedInstance;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.InvalidArgumentException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.MissingArgumentException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Semester;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "//@@author KahLokKee"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class AddModuleCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"module\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private ArrayList\u003cString\u003e arguments;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_CODE \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_NAME \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int ARRAY_SIZE_NAME \u003d 2;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int MODULE_CODE_LENGTH_MAX \u003d 10;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int MODULE_NAME_LENGTH_MAX \u003d 100;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for AddModuleCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param arguments Command inputted by user for processing."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public AddModuleCommand(ArrayList\u003cString\u003e arguments) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Adds a module to semester."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList   Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param tasks          Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                       objects to hard disk."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws CommandException if user input contains missing or invalid arguments."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, StorageManager storageManager)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (arguments.get(INDEX_CODE).isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new MissingArgumentException(\"OOPS!! The module needs a code.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (arguments.size() \u003c ARRAY_SIZE_NAME || arguments.get(INDEX_NAME).isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new MissingArgumentException(\"OOPS!! The module needs a name.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String moduleName \u003d arguments.get(INDEX_NAME);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String moduleCode \u003d arguments.get(INDEX_CODE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (exceedsMaxLength(moduleCode, MODULE_CODE_LENGTH_MAX)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"Module Code exceeds maximum length of: \" + MODULE_CODE_LENGTH_MAX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (exceedsMaxLength(moduleName, MODULE_NAME_LENGTH_MAX)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"Module name exceeds maximum length of: \" + MODULE_NAME_LENGTH_MAX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        SelectedInstance selectedInstance \u003d SelectedInstance.getInstance();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Semester semester \u003d selectedInstance.getSemester();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Module module \u003d new Module(moduleCode, moduleName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        semester.addModule(module);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ui.printModuleAddedMessage(module);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        selectedInstance.selectModule(module);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        storageManager.writeSemesterList(semesterList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks if description and module code exceeds the maximum description length."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return True if maximum description length is exceeded, false otherwise."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public boolean exceedsMaxLength(String description, int limit) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return description.length() \u003e\u003d limit;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 3,
      "KahLokKee": 80
    }
  },
  {
    "path": "src/main/java/oof/logic/command/module/DeleteModuleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SelectedInstance;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.InvalidArgumentException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Semester;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "//@@author KahLokKee"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Command to delete a specific Module."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class DeleteModuleCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for DeleteModuleCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param index Represents the index of the Module to be deleted."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public DeleteModuleCommand(int index) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Deletes module from semester."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList   Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param tasks          Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                       objects to hard disk."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws InvalidArgumentException if user input contains invalid commands."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, StorageManager storageManager)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throws InvalidArgumentException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        SelectedInstance selectedInstance \u003d SelectedInstance.getInstance();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Semester semester \u003d selectedInstance.getSemester();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (!semester.isIndexValid(index)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!!! Invalid number!\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Module module \u003d semester.getModule(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        semester.deleteModule(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ui.printModuleRemovalMessage(module);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        storageManager.writeSemesterList(semesterList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 3,
      "KahLokKee": 57
    }
  },
  {
    "path": "src/main/java/oof/logic/command/module/SelectModuleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SelectedInstance;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.InvalidArgumentException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Semester;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "//@@author KahLokKee"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Command to select a module."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class SelectModuleCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for SelectModuleCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param index Module index in the semester."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public SelectModuleCommand(int index) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Selects a module in a semester."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList   Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskList       Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                       objects to hard disk."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws CommandException if user input contains invalid arguments."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList taskList, Ui ui, StorageManager storageManager)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            SelectedInstance selectedInstance \u003d SelectedInstance.getInstance();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            Semester semester \u003d selectedInstance.getSemester();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            Module module \u003d semester.getModule(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            selectedInstance.selectModule(module);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ui.printSelectModuleMessage(module);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!! The index is out of bounds.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!! The index is invalid.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 58
    }
  },
  {
    "path": "src/main/java/oof/logic/command/module/ViewAllModuleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SelectedInstance;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.organization.exceptions.EmptyListException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Semester;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "//@@author KahLokKee"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Command to view the list of Modules."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class ViewAllModuleCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Default Constructor for SemesterCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public ViewAllModuleCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints the list of Modules in a selected Semester."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList   Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskList       Instance of TaskList that stores oof.model.task.Task objects."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                       objects to hard disk."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws CommandException if Semester intance is not selected or module list is empty."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList taskList, Ui ui, StorageManager storageManager)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        SelectedInstance selectedInstance \u003d SelectedInstance.getInstance();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Semester semester \u003d selectedInstance.getSemester();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (semester.getModules().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new EmptyListException(\"Module list is empty!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ui.printModuleList(semester);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 3,
      "KahLokKee": 49
    }
  },
  {
    "path": "src/main/java/oof/logic/command/module/ViewSelectedModuleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SelectedInstance;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.module.exceptions.ModuleNotSelectedException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "//@@author KahLokKee"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a command to view selected Module."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class ViewSelectedModuleCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public ViewSelectedModuleCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Retrieves and prints seleceted module."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList   Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskList       Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                       objects to hard disk."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws ModuleNotSelectedException if module instance is not selected."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList taskList, Ui ui, StorageManager storageManager)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throws ModuleNotSelectedException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        SelectedInstance selectedInstance \u003d SelectedInstance.getInstance();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Module module \u003d selectedInstance.getModule();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (module \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new ModuleNotSelectedException(\"OOPS!! No module selected.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ui.printCurrentlySelectedModule(module);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 42
    }
  },
  {
    "path": "src/main/java/oof/logic/command/module/exceptions/ModuleNotSelectedException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class ModuleNotSelectedException extends CommandException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public ModuleNotSelectedException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 10
    }
  },
  {
    "path": "src/main/java/oof/logic/command/organization/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.organization;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.InvalidArgumentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.organization.exceptions.TaskAlreadyCompletedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Command to mark Task as done."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for CompleteCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param index Represents the index of the Task to be marked as done."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Marks a task as done."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList   Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskList       Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws CommandException if task is already completed or index argument is invalid."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList taskList, Ui ui, StorageManager storageManager)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (!taskList.isIndexValid(this.index)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!!! The index is invalid.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (taskList.getTask(this.index).getStatus()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new TaskAlreadyCompletedException(\"OOPS!!! The task is already marked as done.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            Task task \u003d taskList.getTask(this.index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            task.setStatus();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            ui.completeMessage(task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            storageManager.writeTaskList(taskList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 32,
      "jasperosy": 23
    }
  },
  {
    "path": "src/main/java/oof/logic/command/organization/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.organization;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.MissingArgumentException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Command that finds and displays specific tasks in the TaskList."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String argument;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for FindCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param argument Command inputted by user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public FindCommand(String argument) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.argument \u003d argument;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Finds the Tasks that contain the keyword(s) specified."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList   Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskList       Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                       objects to hard disk."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws MissingArgumentException if user input contains missing arguments."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList taskList, Ui ui, StorageManager storageManager)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throws MissingArgumentException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (argument.isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new MissingArgumentException(\"OOPS!!! The find command needs a description.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String[] lineSplit \u003d argument.split(\" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ArrayList\u003cTask\u003e matchedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            for (String s : lineSplit) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                Task task \u003d taskList.getTask(i);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                String description \u003d task.getDescription();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                String keyword \u003d s.trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                if (description.contains(keyword)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                    matchedTasks.add(task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ui.printMatchingTasks(matchedTasks);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 36,
      "jasperosy": 24
    }
  },
  {
    "path": "src/main/java/oof/logic/command/organization/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.organization;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Command to list all Tasks in the TaskList."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * List all the Tasks present in the TaskList."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList   Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskList       Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList taskList, Ui ui, StorageManager storageManager) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ui.printTaskList(taskList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 17,
      "jasperosy": 17
    }
  },
  {
    "path": "src/main/java/oof/logic/command/organization/RecurringCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.organization;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.InputMismatchException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.InvalidArgumentException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.MissingArgumentException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Deadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Todo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "//@@author jasperosy"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " * Represents a command to select and recur a task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "public class RecurringCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"recurring\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private int recurringCount;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private int recurringFrequency;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int INDEX_TASK_INDEX \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int INDEX_RECURRING_COUNT \u003d 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int INDEX_RECURRING_FREQUENCY \u003d 2;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int ARGUMENT_COUNT \u003d 3;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private ArrayList\u003cString\u003e arguments;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int COUNT_MIN \u003d 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int COUNT_MAX \u003d 10;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int DAILY \u003d 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int WEEKLY \u003d 2;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int MONTHLY \u003d 3;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int YEARLY \u003d 4;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int DAYS_IN_WEEK \u003d 7;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int DATE_ONLY \u003d 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Constructor for RecurringCommand."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param input arguments input by user"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public RecurringCommand(String input) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        List\u003cString\u003e arguments \u003d Arrays.asList(input.split(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        this.arguments \u003d new ArrayList\u003c\u003e(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Recurs a task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param semesterList   Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param taskList       Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *                       objects to hard disk."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws CommandException if user input contains missing or invalid arguments."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList taskList, Ui ui, StorageManager storageManager)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (arguments.size() !\u003d ARGUMENT_COUNT) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            throw new MissingArgumentException(\"OOPS!!! Please enter the right number of arguments!\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                taskIndex \u003d Integer.parseInt(arguments.get(INDEX_TASK_INDEX)) - 1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                recurringCount \u003d Integer.parseInt(arguments.get(INDEX_RECURRING_COUNT));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                recurringFrequency \u003d Integer.parseInt(arguments.get(INDEX_RECURRING_FREQUENCY));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                if (!taskList.isIndexValid(taskIndex)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                    throw new InvalidArgumentException(\"OOPS!!! Please select a valid task!\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                } else if (!isCountValid(recurringCount)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                    throw new InvalidArgumentException(\"OOPS!!! Please enter a valid number of recurrences!\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                } else if (!isFrequencyValid(recurringFrequency)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                    throw new InvalidArgumentException(\"OOPS!!! Please enter a valid frequency!\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                    runRecurringCommand(ui, taskList, storageManager);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                throw new InvalidArgumentException(\"OOPS!!! Please enter valid numbers!\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Wrapper function for running a successful instance of RecurringCommand."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param ui             Instance of Ui."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param taskList       Instance of TaskList."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param storageManager Instance of StorageManager."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws InvalidArgumentException if datetime cannot be parsed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void runRecurringCommand(Ui ui, TaskList taskList, StorageManager storageManager)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            throws InvalidArgumentException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            setRecurringTask(taskList, taskIndex, recurringCount, recurringFrequency);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            ui.printRecurringMessage(taskList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            storageManager.writeTaskList(taskList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (InputMismatchException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!!! Please enter valid numbers!\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Sets the recurring task based on the number of recurrences and frequency."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param taskList  Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param index     Index of the task."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param count     Number of recurrences for the recurring task."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param frequency Frequency of recurrence for the recurring task."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws InvalidArgumentException if datetime cannot be parsed."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void setRecurringTask(TaskList taskList, int index, int count, int frequency) throws"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            InvalidArgumentException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Task task \u003d taskList.getTask(index);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        taskList.deleteTask(index);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        taskList.addTaskToIndex(index, task);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        recurInstances(taskList, task, count, frequency);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Increments the datetime of a task based on recurring frequency and adds the task to TaskList."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param taskList  Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param task      Recurring task."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param count     Number of recurrences for the recurring task."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param frequency Frequency of recurrence for the recurring task."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws InvalidArgumentException if datetime cannot be parsed."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void recurInstances(TaskList taskList, Task task, int count, int frequency)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            throws InvalidArgumentException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (task instanceof Todo) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d count; i++) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                addToDoTask(taskList, task, i, frequency);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d count; i++) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                addDeadlineTask(taskList, task, i, frequency);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d count; i++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                addEventTask(taskList, task, i, frequency);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Adds recurring todo task to the current list of task."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param taskList  Current list of tasks stored in program."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param task      Task to be set as a recurring instance."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param index     Represents the nth time to which the recurring instance has been generated."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param frequency Represents the frequency of recurrence."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws InvalidArgumentException if datetime cannot be parsed."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void addToDoTask(TaskList taskList, Task task, int index, int frequency) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String date \u003d ((Todo) task).getTodoDate();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        date \u003d dateTimeIncrement(date, frequency, index);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Todo todo \u003d new Todo(task.getDescription(), date);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        taskList.addTask(todo);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Adds recurring deadline task to the current list of task."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param taskList  Current list of tasks stored in program."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param task      Task to be set as a recurring instance."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param index     Represents the nth time to which the recurring instance has been generated."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param frequency Represents the frequency of recurrence."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws InvalidArgumentException if datetime cannot be parsed."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void addDeadlineTask(TaskList taskList, Task task, int index, int frequency)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            throws InvalidArgumentException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String date \u003d ((Deadline) task).getDeadlineDateTime();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        date \u003d dateTimeIncrement(date, frequency, index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Deadline deadline \u003d new Deadline(task.getDescription(), date);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        taskList.addTask(deadline);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Adds recurring event task to the current list of task."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param taskList  Current list of tasks stored in program."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param task      Task to be set as a recurring instance."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param index     Represents the nth time to which the recurring instance has been generated."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param frequency Represents the frequency of recurrence."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws InvalidArgumentException if datetime cannot be parsed."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void addEventTask(TaskList taskList, Task task, int index, int frequency) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String startTiming \u003d ((Event) task).getStartDateTime();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        startTiming \u003d dateTimeIncrement(startTiming, frequency, index);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String endTiming \u003d ((Event) task).getEndDateTime();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        endTiming \u003d dateTimeIncrement(endTiming, frequency, index);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Event event \u003d new Event(task.getDescription(), startTiming, endTiming);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        taskList.addTask(event);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Increments the datetime based on the frequency of recurrence."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param dateTime  Date and time."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param frequency Frequency of recurrence of task."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param increment Number of hops from the first recurrence."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return New datetime after incrementation."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws InvalidArgumentException if datetime cannot be parsed."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private String dateTimeIncrement(String dateTime, int frequency, int increment) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        SimpleDateFormat format;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (dateTime.split(\" \").length \u003d\u003d DATE_ONLY) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            format \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            format \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            calendar.setTime(format.parse(dateTime));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            if (frequency \u003d\u003d DAILY) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                calendar.add(Calendar.DATE, DAILY * increment);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            } else if (frequency \u003d\u003d WEEKLY) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                calendar.add(Calendar.DATE, DAYS_IN_WEEK * increment);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            } else if (frequency \u003d\u003d MONTHLY) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                calendar.add(Calendar.MONTH, COUNT_MIN * increment);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            } else if (frequency \u003d\u003d YEARLY) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                calendar.add(Calendar.YEAR, COUNT_MIN * increment);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            dateTime \u003d format.format(calendar.getTime());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!!! Datetime is in the wrong format!\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Checks if the number of recurrences for the task selected is valid."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param count Number of recurrences in user input."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return True if count is valid, false otherwise."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private boolean isCountValid(int count) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return ((count \u003e\u003d COUNT_MIN) \u0026\u0026 (count \u003c\u003d COUNT_MAX));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Checks if the frequency of the recurrence is valid."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param frequency Frequency of the recurrence."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return True if the frequency is valid, false otherwise."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private boolean isFrequencyValid(int frequency) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return ((frequency \u003e\u003d DAILY) \u0026\u0026 (frequency \u003c\u003d YEARLY));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 21,
      "jasperosy": 241
    }
  },
  {
    "path": "src/main/java/oof/logic/command/organization/SnoozeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.organization;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.InvalidArgumentException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Todo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "//@@author jasperosy"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " * Represents a Command to snooze a Task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "public class SnoozeCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"snooze\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Constructor for SnoozeCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param index Index of Task to be snoozed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public SnoozeCommand(int index) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Replaces the timestamp of a Task after checking the validity of the task selected as well as the new"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * timestamp before performing the replacement."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param semesterList   Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param taskList       Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws InvalidArgumentException if task index or datetime arguments are invalid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList taskList, Ui ui, StorageManager storageManager) throws"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (!isIndexValid(taskList, this.index)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!!! Invalid number!\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Task task \u003d taskList.getTask(this.index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            snoozeDeadline(task, taskList, ui, storageManager);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            snoozeEvent(task, taskList, ui, storageManager);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            snoozeTodo(task, taskList, ui, storageManager);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Snoozes Deadline tasks."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param task           Deadline task to be snoozed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param taskList       Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws InvalidArgumentException if datetime argument is invalid."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void snoozeDeadline(Task task, TaskList taskList, Ui ui, StorageManager storageManager)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            throws InvalidArgumentException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String description \u003d task.getDescription();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String date \u003d ui.getTimeStamp();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        date \u003d parseDateTime(date);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (isDateValid(date)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            Deadline deadline \u003d new Deadline(description, date);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            taskList.deleteTask(this.index);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            taskList.addTaskToIndex(this.index, deadline);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            ui.printSnoozeMessage(deadline);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            storageManager.writeTaskList(taskList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            throw new InvalidArgumentException(\"Timestamp given is invalid! Please try again.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Snoozes Event tasks."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param task           Event task to be snoozed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param taskList       Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws InvalidArgumentException if datetime argument is invalid."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void snoozeEvent(Task task, TaskList taskList, Ui ui, StorageManager storageManager)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            throws InvalidArgumentException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String description \u003d task.getDescription();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String startDate \u003d ui.getTimeStamp();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String endDate \u003d ui.getTimeStamp();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        startDate \u003d parseDateTime(startDate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        endDate \u003d parseDateTime(endDate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (isDateValid(startDate) \u0026\u0026 isDateValid(endDate)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            Event event \u003d new Event(description, startDate, endDate);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            taskList.deleteTask(this.index);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            taskList.addTaskToIndex(this.index, event);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            ui.printSnoozeMessage(event);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            storageManager.writeTaskList(taskList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            throw new InvalidArgumentException(\"Timestamp given is invalid! Please try again.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Snoozes Todo tasks."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param task           Todo task to be snoozed."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param taskList       Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws InvalidArgumentException if datetime argument is invalid."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void snoozeTodo(Task task, TaskList taskList, Ui ui, StorageManager storageManager)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            throws InvalidArgumentException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String description \u003d task.getDescription();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String date \u003d ui.getTimeStamp();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (isDateValid(date)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            Todo todo \u003d new Todo(description, date);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            taskList.deleteTask(this.index);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            taskList.addTaskToIndex(this.index, todo);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            ui.printSnoozeMessage(todo);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            storageManager.writeTaskList(taskList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            throw new InvalidArgumentException(\"Timestamp given is invalid! Please try again.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Checks if index is within bounds of TaskList."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param arr   TaskList containing tasks."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param index Index of TaskList."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return True if index is within bounds of TaskList, false otherwise."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private boolean isIndexValid(TaskList arr, int index) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return index \u003c arr.getSize() \u0026\u0026 index \u003e\u003d 0;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 12,
      "jasperosy": 134
    }
  },
  {
    "path": "src/main/java/oof/logic/command/organization/exceptions/EmptyListException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.organization.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class EmptyListException extends CommandException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public EmptyListException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 10
    }
  },
  {
    "path": "src/main/java/oof/logic/command/organization/exceptions/TaskAlreadyCompletedException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.organization.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class TaskAlreadyCompletedException extends CommandException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public TaskAlreadyCompletedException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 10
    }
  },
  {
    "path": "src/main/java/oof/logic/command/productivity/CalendarCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.productivity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.InvalidArgumentException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Lesson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Semester;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Deadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Todo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "//@@author KahLokKee"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Command to print calendar."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class CalendarCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"calendar\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private YearMonth yearMonth;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_DATE \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_TIME \u003d 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_DAY \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_MONTH \u003d 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_YEAR \u003d 2;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_ARGUMENT_MONTH \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_ARGUMENT_YEAR \u003d 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int MONTH_JANUARY \u003d 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int MONTH_DECEMBER \u003d 12;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int SIZE_CALENDAR \u003d 32;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final String DELIMITER_DATE \u003d \"-\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final String DELIMITER_DATE_TIME \u003d \" \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private ArrayList\u003cArrayList\u003cString[]\u003e\u003e calendarTasks \u003d new ArrayList\u003c\u003e(SIZE_CALENDAR);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for CalendarCommand."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param input Array of command arguments input by user."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public CalendarCommand(String input) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        while (calendarTasks.size() !\u003d SIZE_CALENDAR) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            calendarTasks.add(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String[] arguments \u003d input.split(\" \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            this.month \u003d Integer.parseInt(arguments[INDEX_ARGUMENT_MONTH]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            this.year \u003d Integer.parseInt(arguments[INDEX_ARGUMENT_YEAR]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            if (month \u003c MONTH_JANUARY || month \u003e MONTH_DECEMBER) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                throw new InvalidArgumentException(\"Invalid month\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException | InvalidArgumentException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            // The current month and year will be used if there is an invalid input."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            this.month \u003d calendar.get(Calendar.MONTH) + 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            this.year \u003d calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.yearMonth \u003d YearMonth.of(year, month);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints the calendar for the queried month and year."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList   Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskList       Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws InvalidArgumentException if date of Semester is invalid."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList taskList, Ui ui, StorageManager storageManager)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throws InvalidArgumentException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        parseTaskList(taskList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        parseSemesterList(semesterList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (ArrayList\u003cString[]\u003e day : calendarTasks) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            day.sort(new SortByTime());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ui.printCalendar(yearMonth, calendarTasks);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Parses the task list for tasks that occurs within the queried month."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskList Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private void parseTaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (Task task : taskList.getTaskList()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            String description \u003d task.getDescription();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            String[] dateSplit \u003d {};"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            String time \u003d \"\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            if (task instanceof Todo) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                Todo todo \u003d (Todo) task;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                dateSplit \u003d todo.getTodoDate().split(DELIMITER_DATE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                Deadline deadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                String[] dateTimeSplit \u003d deadline.getDeadlineDateTime().split(DELIMITER_DATE_TIME);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                dateSplit \u003d dateTimeSplit[INDEX_DATE].split(DELIMITER_DATE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                time \u003d dateTimeSplit[INDEX_TIME];"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                String[] dateTimeSplit \u003d event.getStartDateTime().split(DELIMITER_DATE_TIME);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                dateSplit \u003d dateTimeSplit[INDEX_DATE].split(DELIMITER_DATE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                time \u003d dateTimeSplit[INDEX_TIME];"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            if (verifyTask(dateSplit)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                int day \u003d Integer.parseInt(dateSplit[INDEX_DAY]);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                addEntry(time, description, day);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Parses the semester list for lessons that occurs within the queried month."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private void parseSemesterList(SemesterList semesterList) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (Semester semester : semesterList.getSemesterList()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            LocalDate startDate \u003d LocalDate.parse(semester.getStartDate(), format);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            LocalDate endDate \u003d LocalDate.parse(semester.getEndDate(), format);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            for (int day \u003d 1; day \u003c\u003d yearMonth.lengthOfMonth(); day++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                queryModules(semester, startDate, endDate, day);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Adds lessons of each module to the calendar if they fall within the queried month."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semester  Instance of Semester containing Module data."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param startDate Start date of Semester."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param endDate   End date of Semester."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param day       Day of Month."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private void queryModules(Semester semester, LocalDate startDate, LocalDate endDate, int day) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        LocalDate queryDate \u003d yearMonth.atDay(day);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (isWithinRange(queryDate, startDate, endDate)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            for (Module module : semester.getModules()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                addLessons(queryDate, module);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Adds lesson to the calendar."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param queryDate Day of the month."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param module    Instance of Module containing Lesson data"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private void addLessons(LocalDate queryDate, Module module) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (Lesson lesson : module.getLessons()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            DayOfWeek dayOfWeek \u003d lesson.getDay();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            if (queryDate.getDayOfWeek() \u003d\u003d dayOfWeek) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                addEntry(lesson.getStartTime(), lesson.getDescription(), queryDate.getDayOfMonth());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks if task occurs in the month and year queried by user."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param dateSplit Array containing day, month and year."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return true if task month and year is equal to month and year queried by user."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private boolean verifyTask(String[] dateSplit) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        int month \u003d Integer.parseInt(dateSplit[INDEX_MONTH]);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        int year \u003d Integer.parseInt(dateSplit[INDEX_YEAR]);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return this.month \u003d\u003d month \u0026\u0026 this.year \u003d\u003d year;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Adds an entry to the calendarTask ArrayList."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param time        Time of task."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param day         Day of task."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private void addEntry(String time, String description, int day) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String[] entry \u003d {time, description};"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.calendarTasks.get(day).add(entry);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks if a date is within two dates."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param queryDate Date to be checked."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param startDate Starting Date used for checking."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param endDate   Ending Date used for checking."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return true if queried date is within start and end date."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private boolean isWithinRange(LocalDate queryDate, LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return queryDate.isAfter(startDate) \u0026\u0026 queryDate.isBefore(endDate) || queryDate.isEqual(startDate)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                || queryDate.isEqual(endDate);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 210
    }
  },
  {
    "path": "src/main/java/oof/logic/command/productivity/FreeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.productivity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.InvalidArgumentException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Lesson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Module;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Semester;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.task.Deadline;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Event;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "//@@author Kenlhc"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * Represents a Command to search for free time slots."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class FreeCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"free\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private String dateWanted;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int INDEX_DATE \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int INDEX_TIME \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int INDEX_TIME_START \u003d 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int INDEX_TIME_END \u003d 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int TOTAL_TIME_SLOTS \u003d 17;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int SLOT_FREE \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int SLOT_BUSY \u003d 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int SUGGESTIONS_BLOCK \u003d 4;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int ONE_WEEK \u003d 7;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final String FIRST_START_SLOT \u003d \"07:00\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final String LAST_END_SLOT \u003d \"23:59\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private String[] startingTimeSlots \u003d {\"07:00\", \"08:00\", \"09:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        \"14:00\", \"15:00\", \"16:00\", \"17:00\", \"18:00\", \"19:00\", \"20:00\", \"21:00\", \"22:00\", \"23:00\"};"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private String[] endingTimeSlots \u003d {\"08:00\", \"09:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\", \"14:00\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        \"15:00\", \"16:00\", \"17:00\", \"18:00\", \"19:00\", \"20:00\", \"21:00\", \"22:00\", \"23:00\", \"23:59\"};"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private ArrayList\u003cDate\u003e startTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private ArrayList\u003cDate\u003e endTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private ArrayList\u003cDate\u003e deadlinesDue \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private ArrayList\u003cString\u003e deadlineNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private ArrayList\u003cString\u003e sortedDeadlineNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private ArrayList\u003cInteger\u003e slotStates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Constructor for FreeCommand."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param dateWanted The date to search for free time slots given by user."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public FreeCommand(String dateWanted) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        this.dateWanted \u003d dateWanted;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Finds free time during the queried time period."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param semesterList   Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param taskList       Instance of TaskList that contains list of tasks."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *                       objects to hard disk."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws CommandException if user input contains missing or invalid arguments."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList taskList, Ui ui, StorageManager storageManager)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        throws CommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Date current \u003d new Date();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String freeDate \u003d parseDate(dateWanted);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (!isDateValid(freeDate)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!!! The date is invalid.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            if (isDateAfterCurrentDate(current, dateWanted) || isDateSame(current, dateWanted)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                findFreeTime(semesterList, ui, taskList, this.dateWanted);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                throw new InvalidArgumentException(\"OOPS!!! Please enter either today\u0027s date or a date in the future!\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!!! Please enter the date in the following format: DD-MM-YYYY\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Search for free time slots based on the current events recorded."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param ui       Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param tasks    Instance of TaskList that stores Task Objects."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param freeDate The user specified date."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws ParseException   exception may be thrown when parsing datetime."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws CommandException print customised error message."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private void findFreeTime(SemesterList semesterList, Ui ui, TaskList tasks, String freeDate)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        throws ParseException, CommandException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            Task task \u003d tasks.getTask(i);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            if (task instanceof Event) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                Event event \u003d (Event) tasks.getTask(i);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                String dateStart \u003d event.getStartDateTime().split(\" \")[INDEX_DATE];"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                String dateEnd \u003d event.getEndDateTime().split(\" \")[INDEX_DATE];"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                String startTime \u003d event.getStartDateTime().split(\" \")[INDEX_TIME_START];"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                String endTime \u003d event.getEndDateTime().split(\" \")[INDEX_TIME_END];"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                populateEventTimes(dateStart, dateEnd, freeDate, startTime, endTime);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                Deadline deadline \u003d (Deadline) tasks.getTask(i);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                String dueDateAndTime \u003d deadline.getDeadlineDateTime();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                String dueDate \u003d deadline.getDeadlineDateTime().split(\" \")[INDEX_DATE];"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                String fullDescription \u003d deadline.toString();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                boolean isCompleted \u003d deadline.getStatus();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                populateDeadlines(dueDateAndTime, fullDescription, freeDate, dueDate, isCompleted);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        parseSemesterList(semesterList, freeDate);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        startTimes.sort(new SortByTime());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        endTimes.sort(new SortByTime());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        deadlinesDue.sort(new SortByTime());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        sortDeadlineNames();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        ui.printFreeTimeHeader(freeDate, getDayOfTheWeek(freeDate));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        parseSlotStates();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        parseOutput(ui);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Parses the semester list for lessons that occurs within the queried date."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param semesterList Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param freeDate     The user specified date."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private void parseSemesterList(SemesterList semesterList, String freeDate) throws ParseException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        for (Semester semester : semesterList.getSemesterList()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            Date startDate \u003d convertStringToDate(semester.getStartDate());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            Date endDate \u003d convertStringToDate(semester.getEndDate());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            Date freeSlotsDate \u003d convertStringToDate(freeDate);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            if (isWithinRange(freeSlotsDate, startDate, endDate)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                queryModules(semester, freeSlotsDate);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Adds lessons of each module to the calendar if they fall within the queried month."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param semester Instance of Semester containing Module data."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param freeDate The user specified date."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private void queryModules(Semester semester, Date freeDate) throws ParseException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        for (Module module : semester.getModules()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            addLessons(freeDate, module);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Adds lesson to the calendar."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param freeDate The user specified date."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param module   Instance of Module containing Lesson data."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private void addLessons(Date freeDate, Module module) throws ParseException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String freeSlotsDate \u003d convertDateToString(freeDate);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        for (Lesson lesson : module.getLessons()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            DayOfWeek day \u003d lesson.getDay();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            String dayOfWeek \u003d day.getDisplayName(TextStyle.FULL, Locale.getDefault());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            Date lessonStart \u003d convertStringToTime(lesson.getStartTime());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            Date lessonEnd \u003d convertStringToTime(lesson.getEndTime());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            if (getDayOfTheWeek(freeSlotsDate).equals(dayOfWeek) \u0026\u0026 !isDuplicateEvent(lessonStart, lessonEnd)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                startTimes.add(lessonStart);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                endTimes.add(lessonEnd);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Parses the slot states for all time slots if they are free or busy."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws InvalidArgumentException if user input contains invalid arguments."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private void parseSlotStates() throws CommandException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            for (int i \u003d 0; i \u003c TOTAL_TIME_SLOTS; i++) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                Date slotStart \u003d convertStringToTime(startingTimeSlots[i]);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                Date slotEnd \u003d convertStringToTime(endingTimeSlots[i]);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                if (startTimes.isEmpty()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    slotStates.add(SLOT_FREE);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                } else if (isClash(slotStart, slotEnd, startTimes.get(INDEX_TIME),"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                        endTimes.get(INDEX_TIME))) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    slotStates.add(SLOT_BUSY);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    removeEventTimes(slotEnd);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    slotStates.add(SLOT_FREE);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } catch (DateTimeException | ParseException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new InvalidArgumentException(\"Timestamp given is invalid! Please try again.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Removes event timings if the end timing is within the current time slot."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param endTimeSlot The end timing of the time slot."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private void removeEventTimes(Date endTimeSlot) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (isEventEndTimeWithinSlot(endTimeSlot, endTimes.get(INDEX_TIME))) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            startTimes.remove(INDEX_TIME);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            endTimes.remove(INDEX_TIME);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Parses the output for finding free time slots if there are occupied slots."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param ui Prints relevant output."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws InvalidArgumentException if user input contains invalid arguments."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private void parseOutput(Ui ui) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            for (int i \u003d 0; i \u003c TOTAL_TIME_SLOTS; i++) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                if (slotStates.get(i) \u003d\u003d SLOT_FREE) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    ui.printFreeSlots(startingTimeSlots[i], endingTimeSlots[i]);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                } else if (slotStates.get(i) \u003d\u003d SLOT_BUSY) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    ui.printBusySlots(startingTimeSlots[i], endingTimeSlots[i]);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            if (isSuggestionBlockPresent() \u0026\u0026 !sortedDeadlineNames.isEmpty()) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                ui.printSuggestionDetails(sortedDeadlineNames);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new InvalidArgumentException(\"Timestamp given is invalid! Please try again.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks the list of slot states for a consecutive 4 hour free block."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if there is a 4 hour free block, false otherwise"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean isSuggestionBlockPresent() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        int consecutiveFreeSlots \u003d 0;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        for (int i \u003d 0; i \u003c TOTAL_TIME_SLOTS; i++) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            if (consecutiveFreeSlots \u003d\u003d SUGGESTIONS_BLOCK) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            } else if (SLOT_FREE \u003d\u003d slotStates.get(i)) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                consecutiveFreeSlots++;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                consecutiveFreeSlots \u003d 0;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Populates the lists for tracking event times."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param dateStart     Start date of event."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param dateEnd       End date of event."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param freeSlotsDate Date inputted by user."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param startTime     Starting time of event."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param endTime       Ending time of event."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws InvalidArgumentException if user input contains invalid arguments."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private void populateEventTimes(String dateStart, String dateEnd, String freeSlotsDate, String startTime,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            String endTime) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            Date freeDate \u003d convertStringToDate(freeSlotsDate);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            Date eventStartTime \u003d convertStringToTime(startTime);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            Date eventEndTime \u003d convertStringToTime(endTime);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            Date eventStartDate \u003d convertStringToDate(dateStart);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            Date eventEndDate \u003d convertStringToDate(dateEnd);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            if (isEventDateWithin(dateStart, dateEnd, freeDate) \u0026\u0026 !isDuplicateEvent(eventStartTime, eventEndTime)) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                if (isDateAfterCurrentDate(eventStartDate, freeSlotsDate)) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    startTimes.add(convertStringToTime(FIRST_START_SLOT));"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    endTimes.add(eventEndTime);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                } else if (isDateBeforeCurrentDate(eventEndDate, freeDate)) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    startTimes.add(eventStartTime);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    endTimes.add(convertStringToTime(LAST_END_SLOT));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    startTimes.add(eventStartTime);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    endTimes.add(eventEndTime);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } catch (DateTimeException | ParseException e) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new InvalidArgumentException(\"Timestamp given is invalid! Please try again.\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Populates the list for upcoming deadlines."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param dueDateAndTime Due date and time of deadline."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws InvalidArgumentException if user input contains invalid arguments."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private void populateDeadlines(String dueDateAndTime, String fullDescription, String freeSlotsDate, String dueDate,"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            boolean isCompleted) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            SimpleDateFormat format \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            Date upcomingDateAndTime \u003d format.parse(dueDateAndTime);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            Date upcomingDate \u003d convertStringToDate(dueDate);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            if (isDeadlineDueNextWeek(upcomingDate, freeSlotsDate) \u0026\u0026 !isDuplicateDeadline(upcomingDateAndTime)"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    \u0026\u0026 !isCompleted) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                deadlinesDue.add(upcomingDateAndTime);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                deadlineNames.add(fullDescription);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                sortedDeadlineNames.add(fullDescription);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!!! Please enter the date in the following format: DD-MM-YYYY\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks for the list of events for duplicates."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param startTime The start time of the event"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if the list contains the same start and end time, false otherwise."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean isDuplicateEvent(Date startTime, Date endTime) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (startTimes.isEmpty()) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            return startTimes.contains(startTime) \u0026\u0026 endTimes.contains(endTime);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks the list of deadlines for duplicates."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param dueDateAndTime The date and time of the deadline."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if the list contains the same date and time, false otherwise."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean isDuplicateDeadline(Date dueDateAndTime) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (deadlinesDue.isEmpty()) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            return deadlinesDue.contains(dueDateAndTime);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if the deadline is due within a week."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param dueDate The date of the deadline."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if deadline is due within a week, false otherwise."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean isDeadlineDueNextWeek(Date dueDate, String freeDate) throws ParseException {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Date freeSlotsDate \u003d convertStringToDate(freeDate);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Calendar oneWeekFromFreeDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        oneWeekFromFreeDate.setTime(freeSlotsDate);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        oneWeekFromFreeDate.add(Calendar.DATE, ONE_WEEK);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Date nextWeek \u003d convertStringToDate(convertDateToString(oneWeekFromFreeDate.getTime()));"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return (dueDate.compareTo(nextWeek) \u003c\u003d 0 \u0026\u0026 dueDate.compareTo(freeSlotsDate) \u003e\u003d 0);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if there is an overlap of event timing with hourly time slots."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param slotStartTime Start time of the time slot being compared."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param slotEndTime   End time of the time slot being compared."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param eventStart    Start time of event being compared."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param eventEnd      End time of event being compared."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if there is an overlap of event timing."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean isClash(Date slotStartTime, Date slotEndTime, Date eventStart, Date eventEnd) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return (slotStartTime.compareTo(eventStart) \u003c\u003d 0 \u0026\u0026 slotEndTime.compareTo(eventStart) \u003e 0)"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            || (slotStartTime.compareTo(eventStart) \u003e\u003d 0 \u0026\u0026 eventEnd.compareTo(slotEndTime) \u003c\u003d 0)"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            || (slotStartTime.compareTo(eventStart) \u003e\u003d 0 \u0026\u0026 slotEndTime.compareTo(eventEnd) \u003c\u003d 0);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if event end time falls within the time slot."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param slotEndTime End time of the time slot being compared."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param eventEnd    End time of event being compared."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if the event end time lies within the time slot."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean isEventEndTimeWithinSlot(Date slotEndTime, Date eventEnd) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return eventEnd.compareTo(slotEndTime) \u003c\u003d 0;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if the user specified date is before the current date being compared."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param currDate Current date being compared."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param freeDate User specified date to search for free time."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if user specified date is before the current date being compared."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean isDateBeforeCurrentDate(Date currDate, Date freeDate) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return freeDate.compareTo(currDate) \u003c 0;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if the user specified date is after the current date being compared."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param currDate Current date being compared."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param freeDate User specified date to search for free time."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if user specified date is after the current date being compared, false otherwise."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws ParseException throws an exception if date cannot be parsed."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean isDateAfterCurrentDate(Date currDate, String freeDate) throws ParseException {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Date freeSlotsDate \u003d convertStringToDate(freeDate);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return freeSlotsDate.compareTo(currDate) \u003e 0;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if user specified date is current date."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param currDate Current Date."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param freeDate User specified date to search for free time."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if user specified date is current date."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean isDateSame(Date currDate, String freeDate) {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String currentDate \u003d convertDateToString(currDate);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return freeDate.equals(currentDate);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if event dates fall within the user specified date."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param eventStart Start date of event."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param eventEnd   End date of event."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param freeDate   User specified date to search for free time."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if event dates are within the user specified date, false otherwise."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws ParseException throws an exception if date cannot be parsed."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean isEventDateWithin(String eventStart, String eventEnd, Date freeDate) throws ParseException {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Date startDate \u003d convertStringToDate(eventStart);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Date endDate \u003d convertStringToDate(eventEnd);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return freeDate.compareTo(startDate) \u003d\u003d 0 || freeDate.compareTo(endDate) \u003d\u003d 0;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Comparator to sort events by their time in ascending order."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    class SortByTime implements Comparator\u003cDate\u003e {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        public int compare(Date firstStartTime, Date secondStartTime) {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            return firstStartTime.compareTo(secondStartTime);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Sorts the deadlines by their due dates in chronological order."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private void sortDeadlineNames() {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        for (int i \u003d 0; i \u003c sortedDeadlineNames.size(); i++) {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            String fullDescription \u003d deadlineNames.get(i);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            for (int j \u003d 0; j \u003c deadlinesDue.size(); j++) {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                SimpleDateFormat format \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                String dueDate \u003d format.format(deadlinesDue.get(j));"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                if (fullDescription.contains(dueDate)) {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    sortedDeadlineNames.set(j, fullDescription);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Gets the day of the week from the user specified date."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param freeDate The user specified date to search for free time."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return the day of the week spelt in full."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws ParseException throws an exception if date cannot be parsed."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private String getDayOfTheWeek(String freeDate) throws ParseException {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"EEEE\");"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Date dayOfTheWeek \u003d convertStringToDate(freeDate);"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return format.format(dayOfTheWeek);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if a date is within two dates."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param queryDate Date to be checked."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param startDate Starting Date used for checking."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param endDate   Ending Date used for checking."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if queried date is within start and end date."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean isWithinRange(Date queryDate, Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return queryDate.compareTo(startDate) \u003e 0 \u0026\u0026 queryDate.compareTo(endDate) \u003c 0"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            || queryDate.compareTo(startDate) \u003d\u003d 0 || queryDate.compareTo(endDate) \u003d\u003d 0;"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 482,
      "KahLokKee": 14
    }
  },
  {
    "path": "src/main/java/oof/logic/command/productivity/ScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.productivity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.commons.exceptions.command.InvalidArgumentException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.logic.command.productivity.exceptions.ScheduleEmptyException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.MissingArgumentException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Command to query schedule on a specified date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "public class ScheduleCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"schedule\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Constructor for ScheduleCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param input String containing input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public ScheduleCommand(String input) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Queries schedule on specified date."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList   Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskList       Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                       objects to hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws MissingArgumentException if user input contains missing arguments."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList taskList, Ui ui, StorageManager storageManager)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new MissingArgumentException(\"OOPS! Please enter a date!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String date \u003d parseDate(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (!isDateValid(date)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!!! The date is invalid.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        TaskList scheduledTasks \u003d scheduleByDate(taskList, date);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (scheduledTasks.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            throw new ScheduleEmptyException(\"There are no Tasks scheduled on \" + date + \".\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ui.printTasksByDate(scheduledTasks, date);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Checks TaskList for Tasks associated to indicated date."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskList ArrayList of Task objects."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param date     The user given date."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @return ArrayList of Task objects associated to given date."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private TaskList scheduleByDate(TaskList taskList, String date) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ArrayList\u003cTask\u003e scheduledTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (Task task : taskList.getTaskList()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            String currDate \u003d getDate(task);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            if (currDate.equals(date)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                scheduledTasks.add(task);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return new TaskList(scheduledTasks);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 12,
      "KahLokKee": 43,
      "debbiextan": 22
    }
  },
  {
    "path": "src/main/java/oof/logic/command/productivity/SummaryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.productivity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.logic.command.productivity.exceptions.ScheduleEmptyException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " * Shows a summary of tomorrow\u0027s tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "public class SummaryCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"summary\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private static final int ADD_A_DAY \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private TaskList summary \u003d new TaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Constructor for SummaryCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public SummaryCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Gets a summary of tomorrow\u0027s Tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param semesterList   Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param taskList       Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     *                       objects to hard disk."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList taskList, Ui ui,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                        StorageManager storageManager) throws ScheduleEmptyException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        String tomorrow \u003d getTomorrowDate();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        TaskList summary \u003d getSummary(tomorrow, taskList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        if (summary.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            throw new ScheduleEmptyException(\"There are no Tasks scheduled on \" + tomorrow + \".\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        ui.printTasksByDate(summary, tomorrow);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Get a summary of tomorrow\u0027s tasks."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param input LocalDateTime of a day after today."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param taskList   TaskList of all tasks"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @return a TaskList of tomorrow\u0027s tasks."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private TaskList getSummary(String input, TaskList taskList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            Task t \u003d taskList.getTask(i);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            String date \u003d getDate(t);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            if (input.equals(date)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                summary.addTask(t);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return summary;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Get the date of tomorrow in format DD-MM-YYYY."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @return date     String containing formatted date of tomorrow."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private String getTomorrowDate() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        LocalDateTime ldt \u003d LocalDateTime.now().plusDays(ADD_A_DAY);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return format.format(ldt);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 1,
      "KahLokKee": 14,
      "debbiextan": 63,
      "jasperosy": 3
    }
  },
  {
    "path": "src/main/java/oof/logic/command/productivity/ThresholdCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.productivity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.InvalidArgumentException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a command to choose the threshold for upcoming deadline reminders."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class ThresholdCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"threshold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private int newThreshold;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Constructor for ThresholdCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param newThreshold New threshold input by user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public ThresholdCommand(int newThreshold) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        this.newThreshold \u003d newThreshold;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Sets the threshold for upcoming deadline reminders."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList   Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param tasks          Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                       objects to hard disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws InvalidArgumentException if threshold argument is invalid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, StorageManager storageManager)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throws InvalidArgumentException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (isNegative(newThreshold)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"Threshold given invalid! Please input positive integers.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            storageManager.writeThreshold(newThreshold);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ui.printUpdatedThreshold(newThreshold);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if the new threshold given by user is negative."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param threshold New value of threshold input by user."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if threshold given is negative, false otherwise."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public boolean isNegative(int threshold) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return threshold \u003c 0;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 29,
      "KahLokKee": 29
    }
  },
  {
    "path": "src/main/java/oof/logic/command/productivity/TrackerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.productivity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.InvalidArgumentException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.MissingArgumentException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.organization.exceptions.TaskAlreadyCompletedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.productivity.exceptions.TrackerNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.StorageFileCorruptedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.model.tracker.Tracker;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "public class TrackerCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tracker\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private static final long DEFAULT_TIMETAKEN \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private static final int INDEX_INSTRUCTION \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private static final int PERIOD_INDEX \u003d 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private static final int DELETE_INDEX \u003d 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private static final int TASK_INDEX \u003d 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private static final int CORRECT_INDEX \u003d 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private static final int MODULE_CODE_INDEX \u003d 2;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private static final int SPLIT_INPUT \u003d 3;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private static final int NOT_FOUND \u003d -1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private static final int VIEW_COMMAND_LENGTH \u003d 2;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private static final int DELETE_COMMAND_LENGTH \u003d 2;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private static final int TIMER_COMMAND_LENGTH \u003d 3;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private static final String PERIOD_DAY \u003d \"day\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private static final String PERIOD_WEEK \u003d \"week\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private static final String PERIOD_ALL \u003d \"all\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private static final String START_COMMAND \u003d \"/start\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private static final String STOP_COMMAND \u003d \"/stop\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private static final String PAUSE_COMMAND \u003d \"/pause\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private static final String VIEW_COMMAND \u003d \"/view\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private static final String DELETE_COMMAND \u003d \"/delete\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private static final String LIST_COMMAND \u003d \"/list\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public TrackerCommand(String description) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList taskList, Ui ui, StorageManager storageManager)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new MissingArgumentException(\"Please enter your instructions!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        ArrayList\u003cTracker\u003e trackerList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            trackerList \u003d storageManager.readTrackerList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (NullPointerException | StorageFileCorruptedException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            trackerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        String[] input \u003d description.split(\" \", SPLIT_INPUT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        String trackerCommand \u003d input[INDEX_INSTRUCTION].toLowerCase();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        Tracker tracker;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        switch (trackerCommand) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        case VIEW_COMMAND:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            if (input.length !\u003d VIEW_COMMAND_LENGTH) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                throw new InvalidArgumentException(\"Invalid Commmand!\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            String period \u003d input[PERIOD_INDEX].toLowerCase();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            ArrayList\u003cTracker\u003e sortedTL \u003d processModuleTrackerList(period, trackerList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            long totalTimeTaken \u003d calculateTotalTime(sortedTL);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            ui.printTrackerDiagram(sortedTL, totalTimeTaken);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        case LIST_COMMAND:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            ui.printTrackerList(trackerList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        case DELETE_COMMAND:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            if (input.length !\u003d DELETE_COMMAND_LENGTH) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                throw new InvalidArgumentException(\"Please enter the correct number of arguments!\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            int deleteIndex \u003d Integer.parseInt(input[DELETE_INDEX]) - CORRECT_INDEX;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            if (deleteIndex \u003e\u003d taskList.getSize()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                throw new InvalidArgumentException(\"Please select a valid index to delete!\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            tracker \u003d trackerList.get(deleteIndex);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            String description \u003d tracker.getDescription();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            long timeTaken \u003d tracker.getTimeTaken();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            trackerList.remove(deleteIndex);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            int size \u003d trackerList.size();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            ui.printTrackerDelete(size, description, timeTaken);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            storageManager.writeTrackerList(trackerList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            if (input.length !\u003d TIMER_COMMAND_LENGTH) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                throw new InvalidArgumentException(\"Please enter the correct number of arguments!\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            String moduleCode \u003d input[MODULE_CODE_INDEX].toLowerCase();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(input[TASK_INDEX]);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            taskIndex -\u003d CORRECT_INDEX;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            if (taskIndex \u003e taskList.getSize()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                throw new InvalidArgumentException(\"Invalid Task Index!\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            tracker \u003d findTrackerByTaskIndex(trackerList, taskIndex);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            Task task \u003d findTask(taskIndex, taskList);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            boolean isCompleted \u003d task.getStatus();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            if (isCompleted) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                throw new TaskAlreadyCompletedException(\"Task has already been completed.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            boolean isValidDescription \u003d isValidDescription(taskIndex, trackerList, taskList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            switch (trackerCommand) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            case START_COMMAND:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                if (tracker \u003d\u003d null) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                    tracker \u003d addNewTracker(taskIndex, moduleCode, taskList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                    trackerList.add(tracker);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                    if (!isValidDescription) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                        throw new InvalidArgumentException(\"Task descriptions do not match!\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                    updateTrackerList(taskIndex, moduleCode, trackerList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                storageManager.writeTrackerList(trackerList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                ui.printStartAtCurrent(tracker, taskList);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            case STOP_COMMAND:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                if (tracker \u003d\u003d null || tracker.isNotStarted()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    throw new TrackerNotFoundException(\"Tracker for this Assignment has not started.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                    if (!isValidDescription) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                        throw new InvalidArgumentException(\"Task descriptions do not match!\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                    updateTimeTaken(tracker);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                    task.setStatus();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    storageManager.writeTrackerList(trackerList);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    storageManager.writeTaskList(taskList);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                    ui.printEndAtCurrent(tracker, taskList);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            case PAUSE_COMMAND:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                if (tracker \u003d\u003d null || tracker.isNotStarted()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    throw new TrackerNotFoundException(\"Tracker for this Assignment has not started.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                    if (!isValidDescription) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                        throw new InvalidArgumentException(\"Task descriptions do not match!\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                    updateTimeTaken(tracker);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    storageManager.writeTrackerList(trackerList);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                    ui.printPauseAtCurrent(tracker, taskList);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                throw new InvalidArgumentException(\"Invalid Command!\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Process Tracker data by Module Code."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param period        limiting period of time given by user."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param trackerList   ArrayList of Tracker objects."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @return ArrayList of Tracker objects grouped by Module Code and limited by given period."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws CommandException if period given by user is invalid or if no data is available within given period."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private ArrayList\u003cTracker\u003e processModuleTrackerList("
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            String period, ArrayList\u003cTracker\u003e trackerList) throws CommandException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        ArrayList\u003cTracker\u003e moduleTrackerList;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        if (PERIOD_DAY.equals(period)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            Date date \u003d new Date();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            Date today;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                today \u003d dateFormat.parse(dateFormat.format(date));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                throw new InvalidArgumentException(\"Unable to parse Date.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            moduleTrackerList \u003d timeSpentByModule(trackerList, today);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        } else if (PERIOD_WEEK.equals(period)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            cal.add(Calendar.DATE, -7);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            Date date \u003d cal.getTime();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            Date startPeriod;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                startPeriod \u003d dateFormat.parse(dateFormat.format(date));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                throw new InvalidArgumentException(\"Unable to parse Date.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            moduleTrackerList \u003d timeSpentByModule(trackerList, startPeriod);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        } else if (PERIOD_ALL.equals(period)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            moduleTrackerList \u003d timeSpentByModule(trackerList);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"Invalid Period!\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        if (moduleTrackerList.isEmpty()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new TrackerNotFoundException(\"No tracked data available. Please begin by tracking a Task!\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        sortAscending(moduleTrackerList);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return moduleTrackerList;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Calculate total amount of time taken over all modules."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param trackerList  ArrayList of Tracker objects."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @return total amount of time spent on all modules."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private long calculateTotalTime(ArrayList\u003cTracker\u003e trackerList) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        long totalTimeTaken \u003d 0;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        for (Tracker tracker : trackerList) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            totalTimeTaken +\u003d tracker.getTimeTaken();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return totalTimeTaken;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Find Tracker object in ArrayList of Tracker objects where index match."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param trackerList   ArrayList of Tracker objects."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param taskIndex     Index of Task object given by user."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @return Tracker object that matches user given index."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private Tracker findTrackerByTaskIndex(ArrayList\u003cTracker\u003e trackerList, int taskIndex) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        for (Tracker tracker : trackerList) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            int currIndex \u003d tracker.getTaskIndex();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            if (taskIndex \u003d\u003d currIndex) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                return tracker;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Create a new Tracker object."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param taskIndex     task index given by User."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param moduleCode    module code given by User."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param tasks         TaskList object."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @return a newly created Tracker object."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private Tracker addNewTracker(int taskIndex, String moduleCode, TaskList tasks) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        Task t \u003d tasks.getTask(taskIndex);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        Date current \u003d new Date();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        String desc \u003d t.getDescription();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return new Tracker(moduleCode, taskIndex, desc, current, current, DEFAULT_TIMETAKEN);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Updated Assignment that have been tracked in the past."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param taskIndex     task index given by User."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param moduleCode    module code given by user."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param trackerList   TrackerList of Tracker objects."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private void updateTrackerList(int taskIndex, String moduleCode, ArrayList\u003cTracker\u003e trackerList) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        for (Tracker currTracker : trackerList) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            int currentIndex \u003d currTracker.getTaskIndex();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            String currentModuleCode \u003d currTracker.getModuleCode().toLowerCase();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            if (taskIndex \u003d\u003d currentIndex \u0026\u0026 moduleCode.equals(currentModuleCode)) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                currTracker.setLastUpdated(new Date());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                currTracker.setStartDate(new Date());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Check if Task description matches tracked Task description."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param taskIndex     index of Task given by user."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param trackerList   ArrayList of Tracker objects."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param taskList      TaskList object."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @return true if Task description matches tracked Task description."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private boolean isValidDescription(int taskIndex, ArrayList\u003cTracker\u003e trackerList, TaskList taskList) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        if (trackerList.isEmpty()) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        Task currTask \u003d taskList.getTask(taskIndex);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        String taskDescription \u003d currTask.getDescription();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        for (Tracker tracker : trackerList) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            int index \u003d tracker.getTaskIndex();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            String desc \u003d tracker.getDescription();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            if (taskDescription.equals(desc) \u0026\u0026 index \u003d\u003d taskIndex) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Update Tracker object TimeTaken property."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param tracker   Tracker object."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private void updateTimeTaken(Tracker tracker) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        long totalTime \u003d tracker.getTimeTaken();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        Date now \u003d new Date();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        Date startDate \u003d tracker.getStartDate();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        totalTime +\u003d Integer.parseInt(tracker.getDateDiff(startDate));"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        tracker.updateTracker(totalTime, now);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private Task findTask(int taskIndex, TaskList taskList) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return taskList.getTask(taskIndex);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Calculate total time spent on various modules."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param trackerList     list of Tracker objects."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @return TrackerList of Tracker objects."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private ArrayList\u003cTracker\u003e timeSpentByModule(ArrayList\u003cTracker\u003e trackerList) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        ArrayList\u003cTracker\u003e moduleTrackerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        for (Tracker tracker : trackerList) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            String moduleCode \u003d tracker.getModuleCode();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            Tracker moduleTracker \u003d updateModuleTrackerList(moduleTrackerList, tracker, moduleCode);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            moduleTrackerList.add(moduleTracker);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return moduleTrackerList;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Calculate total time spent on various modules based on a time period."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param trackerList   list of Tracker objects."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param period        limiting Date given by user."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @return TrackerList of Tracker objects."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private ArrayList\u003cTracker\u003e timeSpentByModule(ArrayList\u003cTracker\u003e trackerList, Date period) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        ArrayList\u003cTracker\u003e moduleTrackerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        for (Tracker tracker : trackerList) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            Date currDate \u003d tracker.getLastUpdated();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            if (period.compareTo(currDate) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                String moduleCode \u003d tracker.getModuleCode();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                Tracker moduleTracker \u003d updateModuleTrackerList(moduleTrackerList, tracker, moduleCode);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                moduleTrackerList.add(moduleTracker);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return moduleTrackerList;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Update Tracker object."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param moduleTrackerList     ArrayList of Tracker objects."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param tracker               Tracker object."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param moduleCode            String containing module code."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @return Tracker object."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private Tracker updateModuleTrackerList(ArrayList\u003cTracker\u003e moduleTrackerList,"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                                                  Tracker tracker, String moduleCode) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        Tracker moduleTracker;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        long timeTaken \u003d tracker.getTimeTaken();"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        int i \u003d matchModuleTracker(moduleTrackerList, moduleCode);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        if (tracker.getStartDate() !\u003d null) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            long totalTime \u003d tracker.getTimeTaken();"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            Date startDate \u003d tracker.getStartDate();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            totalTime +\u003d Integer.parseInt(tracker.getDateDiff(startDate));"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            tracker.setTimeTaken(totalTime);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            timeTaken \u003d tracker.getTimeTaken();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        if (moduleTrackerList.isEmpty() || i \u003d\u003d NOT_FOUND) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            moduleTracker \u003d new Tracker(moduleCode,timeTaken);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            moduleTracker \u003d moduleTrackerList.get(i);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            long totalTime \u003d moduleTracker.getTimeTaken();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            totalTime +\u003d timeTaken;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            moduleTracker.setTimeTaken(totalTime);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return moduleTracker;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Check if Tracker objects have the same ModuleCode."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param moduleTrackerList     ArrayList of Tracker objects."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param moduleCode            Module code in process."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @return index of Tracker object found in moduleTrackerList that matches ModuleCode."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private int matchModuleTracker(ArrayList\u003cTracker\u003e moduleTrackerList, String moduleCode) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        for (int i \u003d 0; i \u003c moduleTrackerList.size(); i++) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            Tracker moduleTracker \u003d moduleTrackerList.get(i);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            String savedModule \u003d moduleTracker.getModuleCode();"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            if (moduleCode.equals(savedModule)) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return NOT_FOUND;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Sort trackerList by timeTaken in ascending order."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param moduleTrackerList   ArrayList of Tracker objects."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private void sortAscending(ArrayList\u003cTracker\u003e moduleTrackerList) {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        moduleTrackerList.sort(timeTakenComparator);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Compare time taken property between two Tracker objects."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private static Comparator\u003cTracker\u003e timeTakenComparator \u003d new Comparator\u003c\u003e() {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "         * Compare time taken property between two Tracker objects."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "         * @param mt1    Tracker object."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "         * @param mt2    Tracker object."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "         * @return      difference between time taken property between two Tracker objects."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        public int compare(Tracker mt1, Tracker mt2) {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            int timeTaken1 \u003d (int) mt1.getTimeTaken();"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            int timeTaken2 \u003d (int) mt2.getTimeTaken();"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            return timeTaken1 - timeTaken2;"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    };"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 41,
      "debbiextan": 390,
      "jasperosy": 3
    }
  },
  {
    "path": "src/main/java/oof/logic/command/productivity/ViewWeekCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.productivity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Lesson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Semester;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Deadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Todo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "//@@author jasperosy"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " * Represents a Command to view tasks for a particular week."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "public class ViewWeekCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewweek\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String TODO \u003d \"TODO\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String EVENT \u003d \"EVENT\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String DEADLINE \u003d \"DEADLINE\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String LESSON \u003d \"LESSON\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private int day;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private int week;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private int lastDate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private YearMonth yearMonth;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int TIME \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int DESCRIPTION \u003d 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int DATE_FIRST \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int INDEX_DATE \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int INDEX_TIME \u003d 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int INDEX_DAY \u003d 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int INDEX_MONTH \u003d 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int INDEX_YEAR \u003d 2;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int OFFSET \u003d 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int MONTH_JANUARY \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int MONTH_DECEMBER \u003d 11;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int DAYS_IN_WEEK \u003d 7;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int LEAST_POSSIBLE_TASK_SIZE \u003d 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int LEAST_POSSIBLE_COL_SIZE \u003d 19;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private ArrayList\u003cArrayList\u003cString[]\u003e\u003e calendarTasks \u003d new ArrayList\u003c\u003e(DAYS_IN_WEEK);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Constructor for ViewWeekCommand."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param argumentArray Array of command arguments input by user."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public ViewWeekCommand(String[] argumentArray) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        while (calendarTasks.size() !\u003d DAYS_IN_WEEK) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            calendarTasks.add(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            this.day \u003d Integer.parseInt(argumentArray[INDEX_DAY]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            this.month \u003d Integer.parseInt(argumentArray[INDEX_MONTH]) - OFFSET;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            this.year \u003d Integer.parseInt(argumentArray[INDEX_YEAR]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            calendar.set(year, month, day);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            this.week \u003d calendar.get(Calendar.WEEK_OF_YEAR);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            this.yearMonth \u003d YearMonth.of(year, month + OFFSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            this.lastDate \u003d yearMonth.lengthOfMonth();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            if ((this.day \u003c DATE_FIRST || this.day \u003e lastDate)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                    || (this.month \u003c MONTH_JANUARY || this.month \u003e MONTH_DECEMBER)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                this.day \u003d calendar.get(Calendar.DATE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                this.month \u003d calendar.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                this.year \u003d calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                calendar.set(year, month, day);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                this.week \u003d calendar.get(Calendar.WEEK_OF_YEAR);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                this.yearMonth \u003d YearMonth.of(year, month + OFFSET);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                this.lastDate \u003d yearMonth.lengthOfMonth();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            this.day \u003d calendar.get(Calendar.DATE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            this.month \u003d calendar.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            this.year \u003d calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            calendar.set(year, month, day);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            this.week \u003d calendar.get(Calendar.WEEK_OF_YEAR);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            this.yearMonth \u003d YearMonth.of(year, month + OFFSET);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            this.lastDate \u003d yearMonth.lengthOfMonth();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Prints calendar for the current week."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param semesterList   Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param taskList       Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList taskList, Ui ui, StorageManager storageManager) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Date date \u003d getStartDate(this.day, this.month, this.year);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        calendar.setTime(date);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        day \u003d calendar.get(Calendar.DATE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        month \u003d calendar.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        year \u003d calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        for (Task task : taskList.getTaskList()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            if (task instanceof Todo) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                addToDoTask(task, calendar);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                addDeadlineTask(task, calendar);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                addEventTask(task, calendar);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        for (Semester semester : semesterList.getSemesterList()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            parseLessons(semester, calendar);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        for (ArrayList\u003cString[]\u003e day : calendarTasks) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            day.sort(new SortByTime());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        int largestTaskSize \u003d getLargestTaskNo(calendarTasks);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        int largestColSize \u003d getLargestColSize(calendarTasks);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        ui.printViewWeek(calendarTasks, date, largestTaskSize, largestColSize);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Adds todo task to the list of task for the week if the task falls into the week of interest."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param task     Task to be added to the list of task."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param calendar Instance of calendar index generation."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void addToDoTask(Task task, Calendar calendar) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Todo todo \u003d (Todo) task;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String[] dateSplit \u003d todo.getTodoDate().split(\"-\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (dateMatches(dateSplit)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            String description \u003d todo.getDescription();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            String time \u003d \"\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            int day \u003d ((Integer.parseInt(dateSplit[INDEX_DAY]) - calendar.get(Calendar.DATE)) + lastDate)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                    % lastDate;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            addEntry(TODO, time, description, day);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Adds deadline task to the list of task for the week if the task falls into the week of interest."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param task     Task to be added to the list of task."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param calendar Instance of calendar index generation."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void addDeadlineTask(Task task, Calendar calendar) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Deadline deadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String[] dateTimeSplit \u003d deadline.getDeadlineDateTime().split(\" \");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String[] dateSplit \u003d dateTimeSplit[INDEX_DATE].split(\"-\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (dateMatches(dateSplit)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            String description \u003d deadline.getDescription();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            String time \u003d dateTimeSplit[INDEX_TIME];"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            int day \u003d ((Integer.parseInt(dateSplit[INDEX_DAY]) - calendar.get(Calendar.DATE)) + lastDate)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                    % lastDate;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            addEntry(DEADLINE, time, description, day);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Adds event task to the list of task for the week if the task falls into the week of interest."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param task     Task to be added to the list of task."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param calendar Instance of calendar index generation."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void addEventTask(Task task, Calendar calendar) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String[] dateTimeSplit \u003d event.getStartDateTime().split(\" \");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String[] dateSplit \u003d dateTimeSplit[INDEX_DATE].split(\"-\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (dateMatches(dateSplit)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            String description \u003d event.getDescription();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            String time \u003d dateTimeSplit[INDEX_TIME];"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            int day \u003d ((Integer.parseInt(dateSplit[INDEX_DAY]) - calendar.get(Calendar.DATE)) + lastDate)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                    % lastDate;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            addEntry(EVENT, time, description, day);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Parses the semester for lessons that occurs within the queried month."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param semester Instance of Semester that stores Module objects."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param calendar Instance of Calendar."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void parseLessons(Semester semester, Calendar calendar) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        LocalDate startingDate \u003d LocalDate.parse(semester.getStartDate(), format);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        LocalDate endingDate \u003d LocalDate.parse(semester.getEndDate(), format);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        int startDay \u003d calendar.get(Calendar.DATE);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        for (int day \u003d startDay; day \u003c startDay + DAYS_IN_WEEK; day++) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            queryModules(semester, startingDate, endingDate, day);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Adds lessons of each module to the calendar if they fall within the queried month."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param semester  Instance of Semester containing Module data."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param startDate Start date of Semester."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param endDate   End date of Semester."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param day       Day of Month."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void queryModules(Semester semester, LocalDate startDate, LocalDate endDate, int day) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (day \u003d\u003d lastDate + OFFSET) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            day -\u003d lastDate;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            yearMonth \u003d yearMonth.plusMonths(OFFSET);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            if (yearMonth.getYear() \u003e MONTH_DECEMBER + OFFSET) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                yearMonth \u003d yearMonth.plusYears(OFFSET);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } else if (day \u003e lastDate) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            day -\u003d lastDate;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        LocalDate queryDate \u003d yearMonth.atDay(day);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (isWithinRange(queryDate, startDate, endDate)) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            for (Module module : semester.getModules()) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                addLesson(queryDate, module);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Adds lesson to the calendar."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param queryDate Day of the month."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param module    Instance of Module containing Lesson data"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void addLesson(LocalDate queryDate, Module module) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        for (Lesson lesson : module.getLessons()) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            DayOfWeek dayOfWeek \u003d lesson.getDay();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            if (queryDate.getDayOfWeek() \u003d\u003d dayOfWeek) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                addEntry(LESSON, lesson.getStartTime(), lesson.getDescription(), dayOfWeek.getValue());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Checks if a date is within two dates."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param queryDate Date to be checked."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param startDate Starting Date used for checking."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param endDate   Ending Date used for checking."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return true if queried date is within start and end date."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private boolean isWithinRange(LocalDate queryDate, LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return queryDate.isAfter(startDate) \u0026\u0026 queryDate.isBefore(endDate) || queryDate.isEqual(startDate)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                || queryDate.isEqual(endDate);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Finds the largest number of tasks in the week to be printed."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param calendarTasks Tasks to be printed for the week."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return Largest number of tasks in the week to be printed."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private int getLargestTaskNo(ArrayList\u003cArrayList\u003cString[]\u003e\u003e calendarTasks) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        int maximum \u003d LEAST_POSSIBLE_TASK_SIZE;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        for (int i \u003d 0; i \u003c DAYS_IN_WEEK; i++) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            int currentSize \u003d calendarTasks.get(i).size();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            if (currentSize \u003e maximum) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                maximum \u003d currentSize;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return maximum;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Finds the task with the longest description and time."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param calendarTasks Tasks to be printed for the week."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return Size of the task with the longest description and time."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private int getLargestColSize(ArrayList\u003cArrayList\u003cString[]\u003e\u003e calendarTasks) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        int maximum \u003d LEAST_POSSIBLE_COL_SIZE;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        for (int i \u003d 0; i \u003c DAYS_IN_WEEK; i++) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            for (int j \u003d 0; j \u003c calendarTasks.get(i).size(); j++) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                String[] entry \u003d calendarTasks.get(i).get(j);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                String task \u003d entry[TIME] + \" \" + entry[DESCRIPTION];"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                if (task.length() \u003e maximum) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                    maximum \u003d task.length();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return maximum;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Gets Date object from day, month and year."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param day   Day of the month."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param month Month of the year."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param year  Year."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return Date object based on the day, month and year."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private Date getStartDate(int day, int month, int year) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        calendar.set(year, month, day);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        int dayOfWeek \u003d calendar.get(Calendar.DAY_OF_WEEK) - OFFSET;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        calendar.add(Calendar.DATE, -dayOfWeek);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return calendar.getTime();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Checks if task occurs in the month and year queried by user."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param dateSplit Array containing day, month and year."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return true if task month and year is equal to month and year queried by user."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private boolean dateMatches(String[] dateSplit) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        int day \u003d Integer.parseInt(dateSplit[INDEX_DATE]);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        int month \u003d Integer.parseInt(dateSplit[INDEX_MONTH]) - OFFSET;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        int year \u003d Integer.parseInt(dateSplit[INDEX_YEAR]);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Date date \u003d getStartDate(day, month, year);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        calendar.setTime(date);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        year \u003d calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        int week \u003d calendar.get(Calendar.WEEK_OF_YEAR);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return this.week \u003d\u003d week \u0026\u0026 this.year \u003d\u003d year;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Adds an entry to the calendarTask ArrayList."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param time        Time of task."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param day         Day of task."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void addEntry(String type, String time, String description, int day) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String[] entry \u003d {time, description, type};"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        this.calendarTasks.get(day).add(entry);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 17,
      "jasperosy": 324
    }
  },
  {
    "path": "src/main/java/oof/logic/command/productivity/exceptions/ScheduleEmptyException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "package oof.logic.command.productivity.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "public class ScheduleEmptyException extends CommandException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public ScheduleEmptyException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "debbiextan": 9
    }
  },
  {
    "path": "src/main/java/oof/logic/command/productivity/exceptions/TrackerNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.productivity.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class TrackerNotFoundException extends CommandException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public TrackerNotFoundException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 10
    }
  },
  {
    "path": "src/main/java/oof/logic/command/semester/AddSemesterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.semester;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.InvalidArgumentException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.MissingArgumentException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Semester;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "//@@author KahLokKee"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class AddSemesterCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"semester\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private ArrayList\u003cString\u003e arguments;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_YEAR \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_NAME \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_DATE_START \u003d 2;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_DATE_END \u003d 3;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int SIZE_NAME \u003d 2;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int SIZE_DATE_START \u003d 3;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int SIZE_DATE_END \u003d 4;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int SEMESTER_YEAR_LENGTH_MAX \u003d 10;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int SEMESTER_NAME_LENGTH_MAX \u003d 100;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for AddSemesterCommand."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param arguments Command inputted by user for processing."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public AddSemesterCommand(ArrayList\u003cString\u003e arguments) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks if semester being added clashes with other semesters."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList Instance of SemesterList that stores Semesters."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param startDate    Start date of Semester being added."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param endDate      End date of Semester being added."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return true if semester being added clashes with other semesters, false otherwise."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws CommandException if start date is after end date or if date is invalid."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private boolean hasClashes(SemesterList semesterList, String startDate, String endDate) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            Date dateStart \u003d format.parse(startDate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            Date dateEnd \u003d format.parse(endDate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            if (!isStartDateBeforeEndDate(dateStart, dateEnd)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                throw new InvalidArgumentException(\"OOPS!! The start date of a semester cannot be after the end date.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            for (Semester semester : semesterList.getSemesterList()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                Date semesterDateStart \u003d format.parse(semester.getStartDate());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                Date semesterEndStart \u003d format.parse(semester.getEndDate());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                if (isClash(dateStart, dateEnd, semesterDateStart, semesterEndStart)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!! The date is invalid.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Adds a semester to semesterList."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList   Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param tasks          Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                       objects to hard disk."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws CommandException if user input contains missing or invalid arguments."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, StorageManager storageManager)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (arguments.get(INDEX_YEAR).isEmpty()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new MissingArgumentException(\"OOPS!! The semester needs a year.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (arguments.size() \u003c SIZE_NAME || arguments.get(INDEX_NAME).isEmpty()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new MissingArgumentException(\"OOPS!! The semester needs a name.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (arguments.size() \u003c SIZE_DATE_START || arguments.get(INDEX_DATE_START).isEmpty()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new MissingArgumentException(\"OOPS!! The semester needs a start date.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (arguments.size() \u003c SIZE_DATE_END || arguments.get(INDEX_DATE_END).isEmpty()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new MissingArgumentException(\"OOPS!! The semester needs an end date.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String year \u003d arguments.get(INDEX_YEAR);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String name \u003d arguments.get(INDEX_NAME);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String startDate \u003d arguments.get(INDEX_DATE_START);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String endDate \u003d arguments.get(INDEX_DATE_END);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (exceedsMaxLength(year, SEMESTER_YEAR_LENGTH_MAX)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!!! Semester Year exceeds maximum length of \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    + SEMESTER_YEAR_LENGTH_MAX + \"!\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (exceedsMaxLength(name, SEMESTER_NAME_LENGTH_MAX)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!!! Semester Name exceeds maximum length of \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    + SEMESTER_NAME_LENGTH_MAX + \"!\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (isDateValid(startDate) \u0026\u0026 isDateValid(endDate) \u0026\u0026 (hasClashes(semesterList, startDate, endDate))) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!! The semester clashes with another semester.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Semester semester \u003d new Semester(year, name, startDate, endDate);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        semesterList.addSemester(semester);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ui.printSemesterAddedMessage(semester);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        storageManager.writeSemesterList(semesterList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks if start and end date are chronologically accurate."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param startTime Start date of semester being added."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param endTime   End date of semester being added."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return true if start date occurs before end date, false otherwise."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private boolean isStartDateBeforeEndDate(Date startTime, Date endTime) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return startTime.compareTo(endTime) \u003c 0;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks if there is an overlap of semester date."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param newStartTime  Start date of semester being added."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param newEndTime    End date of semester being added."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param currStartTime Start date of semester being compared."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param currEndTime   End date of semester being added."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return true if there is an overlap of event timing."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private boolean isClash(Date newStartTime, Date newEndTime, Date currStartTime, Date currEndTime) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return (newStartTime.compareTo(currStartTime) \u003e\u003d 0 \u0026\u0026 newStartTime.compareTo(currEndTime) \u003c 0)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                || (newEndTime.compareTo(currStartTime) \u003e 0 \u0026\u0026 newEndTime.compareTo(currEndTime) \u003c\u003d 0);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks if description and module code exceeds the maximum description length."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return True if maximum description length is exceeded, false otherwise."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public boolean exceedsMaxLength(String description, int limit) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return description.length() \u003e\u003d limit;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 3,
      "KahLokKee": 148
    }
  },
  {
    "path": "src/main/java/oof/logic/command/semester/DeleteSemesterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.semester;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SelectedInstance;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.InvalidArgumentException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Semester;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "//@@author KahLokKee"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Command to delete a specific Semester."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class DeleteSemesterCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for DeleteSemesterCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param index Represents the index of the Semester to be deleted."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public DeleteSemesterCommand(int index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Deletes semester from semesterList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList   Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param tasks          Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                       objects to hard disk."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws InvalidArgumentException if user input contains invalid commands."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, StorageManager storageManager)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throws InvalidArgumentException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (!semesterList.isIndexValid(index)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!!! The index is invalid.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Semester semester \u003d semesterList.getSemester(this.index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        semesterList.deleteSemester(this.index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        SelectedInstance selectedInstance  \u003d SelectedInstance.getInstance();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        selectedInstance.resetSemester();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ui.printSemesterRemovalMessage(semester);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        storageManager.writeSemesterList(semesterList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 3,
      "KahLokKee": 51
    }
  },
  {
    "path": "src/main/java/oof/logic/command/semester/SelectSemesterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.semester;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SelectedInstance;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.InvalidArgumentException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Semester;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "//@@author KahLokKee"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Command to select a semester from semesterList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class SelectSemesterCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for SelectSemesterCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param index Semester index in the semesterList."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public SelectSemesterCommand(int index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Selects a semester from semesterList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList   Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskList       Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                       objects to hard disk."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws InvalidArgumentException if user input invalid commands."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList taskList, Ui ui, StorageManager storageManager)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throws InvalidArgumentException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            SelectedInstance selectedInstance \u003d SelectedInstance.getInstance();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            Semester semester \u003d semesterList.getSemester(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            selectedInstance.selectSemester(semester);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ui.printSelectSemesterMessage(semester);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!! The index is invalid.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 53
    }
  },
  {
    "path": "src/main/java/oof/logic/command/semester/ViewAllSemesterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.semester;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.organization.exceptions.EmptyListException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "//@@author KahLokKee"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Command to view the list of Semesters."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class ViewAllSemesterCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Default Constructor for ViewSemesterCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public ViewAllSemesterCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Opens menu to view, add, edit or remove Semesters."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param tasks        Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui           Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storageManager      Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                     objects to hard disk."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws EmptyListException if semester list or module list is empty."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, StorageManager storageManager)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (semesterList.getSemesterList().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new EmptyListException(\"Semester list is empty!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ui.printSemesterList(semesterList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 3,
      "KahLokKee": 41
    }
  },
  {
    "path": "src/main/java/oof/logic/command/semester/ViewSelectedSemesterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.semester;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SelectedInstance;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.semester.exceptions.SemesterNotSelectedException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Semester;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "//@@author KahLokKee"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a class to view selected semester."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class ViewSelectedSemesterCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Retrieves and prints selected semester."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList   Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskList       Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                       objects to hard disk."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws SemesterNotSelectedException if semester instance is not selected."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList taskList, Ui ui, StorageManager storageManager)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throws SemesterNotSelectedException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        SelectedInstance selectedInstance \u003d SelectedInstance.getInstance();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Semester semester \u003d selectedInstance.getSemester();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (semester \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new SemesterNotSelectedException(\"OOPS!! No semester selected.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ui.printCurrentlySelectedSemester(semester);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 39
    }
  },
  {
    "path": "src/main/java/oof/logic/command/semester/exceptions/SemesterNotSelectedException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.semester.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class SemesterNotSelectedException extends CommandException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public SemesterNotSelectedException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 10
    }
  },
  {
    "path": "src/main/java/oof/logic/command/task/AddAssessmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SelectedInstance;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.InvalidArgumentException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.MissingArgumentException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Assessment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "//@@author KahLokKee"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class AddAssessmentCommand extends AddEventCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"assessment\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for AddAssessmentCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param arguments Command inputted by user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public AddAssessmentCommand(ArrayList\u003cString\u003e arguments) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        super(arguments);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Adds an event task to taskList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList   Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskList       Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                       objects to hard disk."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws CommandException if user input contains missing or invalid arguments."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList taskList, Ui ui, StorageManager storageManager) throws"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        SelectedInstance selectedInstance \u003d SelectedInstance.getInstance();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Module module \u003d selectedInstance.getModule();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (arguments.get(INDEX_DESCRIPTION).isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new MissingArgumentException(\"OOPS!!! The assessment needs a name.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (arguments.size() \u003c ARRAY_SIZE_DATE_TIME_START || arguments.get(INDEX_DATE_TIME_START).isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new MissingArgumentException(\"OOPS!!! The assessment needs a start time.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (arguments.size() \u003c ARRAY_SIZE_DATE_TIME_END || arguments.get(INDEX_DATE_TIME_END).isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new MissingArgumentException(\"OOPS!!! The assessment needs an end time.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String description \u003d arguments.get(INDEX_DESCRIPTION);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String startDateTime \u003d parseDateTime(arguments.get(INDEX_DATE_TIME_START));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String endDateTime \u003d parseDateTime(arguments.get(INDEX_DATE_TIME_END));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (!isDateValid(startDateTime)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!!! The start date is invalid.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (!isDateValid(endDateTime)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!!! The end date is invalid.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ArrayList\u003cEvent\u003e eventClashes \u003d checkClashes(taskList, startDateTime, endDateTime);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ui.printClashWarning(eventClashes);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            String moduleCode \u003d module.getModuleCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            Assessment assessment \u003d new Assessment(moduleCode, description, startDateTime, endDateTime);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            if (exceedsMaxLength(assessment.getDescription(), DESCRIPTION_LENGTH_MAX)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                throw new InvalidArgumentException(\"OOPS!!! Assessment Name exceeds maximum length of \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                        + DESCRIPTION_LENGTH_MAX + \"!\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            taskList.addTask(assessment);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            module.addAssessment(assessment);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ui.addTaskMessage(assessment, taskList.getSize());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            storageManager.writeTaskList(taskList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 3,
      "KahLokKee": 73
    }
  },
  {
    "path": "src/main/java/oof/logic/command/task/AddAssignmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SelectedInstance;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.InvalidArgumentException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.MissingArgumentException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.task.Assignment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "//@@author KahLokKee"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class AddAssignmentCommand extends AddDeadlineCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"assignment\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for AddAssignmentCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param arguments Command inputted by user for processing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public AddAssignmentCommand(ArrayList\u003cString\u003e arguments) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        super(arguments);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Adds a deadline task to taskList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList   Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskList       Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                       objects to hard disk."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws CommandException if user input contains missing or invalid arguments."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList taskList, Ui ui, StorageManager storageManager)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        SelectedInstance selectedInstance \u003d SelectedInstance.getInstance();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Module module \u003d selectedInstance.getModule();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String moduleCode \u003d module.getModuleCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String description \u003d arguments.get(INDEX_DESCRIPTION);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (arguments.get(INDEX_DESCRIPTION).equals(\"\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new MissingArgumentException(\"OOPS!!! The assignment needs a name.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (arguments.size() \u003c ARRAY_SIZE_DATE || arguments.get(INDEX_DATE).equals(\"\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new MissingArgumentException(\"OOPS!!! The assignment needs a due date.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String date \u003d parseDateTime(arguments.get(INDEX_DATE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (!isDateValid(date)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!!! The due date is invalid.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            Assignment assignment \u003d new Assignment(moduleCode, description, date);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            if (exceedsMaxLength(assignment.getDescription(), DESCRIPTION_LENGTH_MAX)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                throw new InvalidArgumentException(\"OOPS!!! Assignment Name exceeds maximum length of \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                        + DESCRIPTION_LENGTH_MAX + \"!\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            taskList.addTask(assignment);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            module.addAssignment(assignment);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ui.addTaskMessage(assignment, taskList.getSize());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            storageManager.writeTaskList(taskList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 4,
      "KahLokKee": 70
    }
  },
  {
    "path": "src/main/java/oof/logic/command/task/AddDeadlineCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.InvalidArgumentException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.MissingArgumentException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Command that appends a new Deadline"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * object to the TaskList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "public class AddDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deadline\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    protected ArrayList\u003cString\u003e arguments;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    static final int INDEX_DESCRIPTION \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    protected static final int INDEX_DATE \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    static final int ARRAY_SIZE_DATE \u003d 2;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    static final int DESCRIPTION_LENGTH_MAX \u003d 20;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for AddDeadlineCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param arguments Command inputted by user for processing."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public AddDeadlineCommand(ArrayList\u003cString\u003e arguments) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Adds a deadline task to taskList."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList   Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskList       Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *                       objects to hard disk."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws CommandException if user input contains missing or invalid arguments."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList taskList, Ui ui, StorageManager storageManager)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (arguments.get(INDEX_DESCRIPTION).isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new MissingArgumentException(\"OOPS!!! The deadline needs a description.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (arguments.size() \u003c ARRAY_SIZE_DATE || arguments.get(INDEX_DATE).isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new MissingArgumentException(\"OOPS!!! The deadline needs a due date.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String description \u003d arguments.get(INDEX_DESCRIPTION);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String date \u003d parseDateTime(arguments.get(INDEX_DATE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (exceedsMaxLength(description, DESCRIPTION_LENGTH_MAX)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!!! Task description exceeds maximum length of \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    + DESCRIPTION_LENGTH_MAX + \"!\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (!isDateValid(date)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!!! The due date is invalid.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            Deadline deadline \u003d new Deadline(description, date);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            taskList.addTask(deadline);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ui.addTaskMessage(deadline, taskList.getSize());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            storageManager.writeTaskList(taskList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 49,
      "jasperosy": 22
    }
  },
  {
    "path": "src/main/java/oof/logic/command/task/AddEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.InvalidArgumentException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.MissingArgumentException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Command to add Event objects"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * to the TaskList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"event\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    protected ArrayList\u003cString\u003e arguments;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    static final int INDEX_DESCRIPTION \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    static final int INDEX_DATE_TIME_START \u003d 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    static final int INDEX_DATE_TIME_END \u003d 2;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    static final int ARRAY_SIZE_DATE_TIME_START \u003d 2;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    static final int ARRAY_SIZE_DATE_TIME_END \u003d 3;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    static final int DESCRIPTION_LENGTH_MAX \u003d 20;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for AddEventCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param arguments Command inputted by user."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public AddEventCommand(ArrayList\u003cString\u003e arguments) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Adds an event task to taskList."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList   Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskList       Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *                       objects to hard disk."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws CommandException if user input contains missing or invalid arguments."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList taskList, Ui ui, StorageManager storageManager)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (arguments.get(INDEX_DESCRIPTION).isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new MissingArgumentException(\"OOPS!!! The event needs a description.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (arguments.size() \u003c ARRAY_SIZE_DATE_TIME_START || arguments.get(INDEX_DATE_TIME_START).isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new MissingArgumentException(\"OOPS!!! The event needs a start date.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (arguments.size() \u003c ARRAY_SIZE_DATE_TIME_END || arguments.get(INDEX_DATE_TIME_END).isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new MissingArgumentException(\"OOPS!!! The event needs an end date.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String description \u003d arguments.get(INDEX_DESCRIPTION);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String startDateTime \u003d parseDateTime(arguments.get(INDEX_DATE_TIME_START));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String endDateTime \u003d parseDateTime(arguments.get(INDEX_DATE_TIME_END));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (exceedsMaxLength(description, DESCRIPTION_LENGTH_MAX)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!!! Task description exceeds maximum length of \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    + DESCRIPTION_LENGTH_MAX + \"!\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (!isDateValid(startDateTime)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!!! The start date is invalid.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (!isDateValid(endDateTime)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!!! The end date is invalid.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ArrayList\u003cEvent\u003e eventClashes \u003d checkClashes(taskList, startDateTime, endDateTime);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ui.printClashWarning(eventClashes);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            Event event \u003d new Event(description, startDateTime, endDateTime);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            taskList.addTask(event);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ui.addTaskMessage(event, taskList.getSize());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            storageManager.writeTaskList(taskList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks if event being added clashes with other events."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskList      Instance of TaskList that stores Task objects"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param startDateTime String containing event start date and time"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param endDateTime   String containing event end date and time"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return ArrayList containing events that clashes with event being added"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws CommandException if start date is after end date or if timestamp is invalid."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    protected ArrayList\u003cEvent\u003e checkClashes(TaskList taskList, String startDateTime, String endDateTime)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            Date newStartDateTime \u003d format.parse(startDateTime);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            Date newEndDateTime \u003d format.parse(endDateTime);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            if (!isStartDateBeforeEndDate(newStartDateTime, newEndDateTime)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                throw new InvalidArgumentException(\"OOPS!!! The start date cannot be after the end date.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return compareEvents(taskList, newStartDateTime, newEndDateTime);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"Timestamp given is invalid! Please try again.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Compares the start date time and end date time of two events."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskList         Instance of TaskList that stores Task objects"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param newStartDateTime Date object containing event start date and time"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param newEndDateTime   Date object containing event end date and time"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return ArrayList containing events that clashes with event being added."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws ParseException if timestamp given is invalid"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    protected ArrayList\u003cEvent\u003e compareEvents(TaskList taskList, Date newStartDateTime, Date newEndDateTime)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ArrayList\u003cEvent\u003e eventClashes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (Task task : taskList.getTaskList()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            if (task instanceof Event) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                Date currStartDateTime \u003d format.parse(event.getStartDateTime());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                Date currEndDateTime \u003d format.parse(event.getEndDateTime());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                if (isClash(newStartDateTime, newEndDateTime, currStartDateTime, currEndDateTime)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    eventClashes.add(event);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return eventClashes;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks if start and end date are chronologically accurate."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param startTime Start time of event being added."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param endTime   End time of event being added."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return true if start date occurs before end date, false otherwise."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    protected boolean isStartDateBeforeEndDate(Date startTime, Date endTime) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return startTime.compareTo(endTime) \u003c 0;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks if there is an overlap of event timing."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param newStartTime  Start time of event being added."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param newEndTime    End time of event being added."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param currStartTime Start time of event being compared."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param currEndTime   End time of event being added."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return true if there is an overlap of event timing."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    protected boolean isClash(Date newStartTime, Date newEndTime, Date currStartTime, Date currEndTime) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return (newStartTime.compareTo(currStartTime) \u003e\u003d 0 \u0026\u0026 newStartTime.compareTo(currEndTime) \u003c 0)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                || (newEndTime.compareTo(currStartTime) \u003e 0 \u0026\u0026 newEndTime.compareTo(currEndTime) \u003c\u003d 0);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 133,
      "jasperosy": 24
    }
  },
  {
    "path": "src/main/java/oof/logic/command/task/AddToDoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.InvalidArgumentException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.MissingArgumentException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Todo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Command to add Todo objects to TaskList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "public class AddToDoCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"todo\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private ArrayList\u003cString\u003e arguments;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_DESCRIPTION \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_DATE \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int ARRAY_SIZE_DATE \u003d 2;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int DESCRIPTION_LENGTH_MAX \u003d 20;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for AddTodoCommand."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param arguments Command inputted by user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public AddToDoCommand(ArrayList\u003cString\u003e arguments) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Adds a todo task to taskList."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList   Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskList       Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                       objects to hard disk."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws CommandException if user input invalid commands."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList taskList, Ui ui, StorageManager storageManager)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (arguments.get(INDEX_DESCRIPTION).equals(\"\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new MissingArgumentException(\"OOPS!!! The todo needs a description.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (arguments.size() \u003c ARRAY_SIZE_DATE || arguments.get(INDEX_DATE).equals(\"\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new MissingArgumentException(\"OOPS!!! The todo needs a date.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String description \u003d arguments.get(INDEX_DESCRIPTION);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String date \u003d parseDate(arguments.get(INDEX_DATE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (exceedsMaxLength(description, DESCRIPTION_LENGTH_MAX)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!!! Task description exceeds maximum length of \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    + DESCRIPTION_LENGTH_MAX + \"!\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (!isDateValid(date)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!!! The date is invalid.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            Task task \u003d new Todo(description, date);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            taskList.addTask(task);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ui.addTaskMessage(task, taskList.getSize());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            storageManager.writeTaskList(taskList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 2,
      "KahLokKee": 51,
      "jasperosy": 18
    }
  },
  {
    "path": "src/main/java/oof/logic/command/task/DeleteTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.InvalidArgumentException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "//@@author KahLokKee"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Command to delete a specific Task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class DeleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for DeleteCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param index Represents the index of the Task to be deleted."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public DeleteTaskCommand(int index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Deletes a task from taskList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList   Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskList       Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui             Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storageManager Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                       objects to hard disk."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws InvalidArgumentException if user input contains invalid commands."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList taskList, Ui ui, StorageManager storageManager)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throws InvalidArgumentException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (!taskList.isIndexValid(this.index)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new InvalidArgumentException(\"OOPS!!! Invalid number!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Task task \u003d taskList.getTask(this.index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        taskList.deleteTask(this.index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ui.deleteMessage(task, taskList.getSize());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        storageManager.writeTaskList(taskList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 50,
      "jasperosy": 2
    }
  },
  {
    "path": "src/main/java/oof/model/task/Assessment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Assessment class for module assessments."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class Assessment extends Event {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final String DELIMITER \u003d \"||\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for Assessment."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param moduleCode    String containing module code."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param description   String containing assessment description."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param startDateTime String containing start time of assessment."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param endDateTime   String containing end time of assessment."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public Assessment(String moduleCode, String description, String startDateTime, String endDateTime) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        super(description, startDateTime, endDateTime);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return \"[A][\" + getStatusIcon() + \"] \" + moduleCode + \" \" + super.getDescription() + \" (from: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + startDateTime + \" to: \" + endDateTime + \")\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void setDate(String date) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return moduleCode + \" \" + super.getDescription();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Converts a Lesson object to string format for storage."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return Lesson object in string format for storage."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String toStorageString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String startDate \u003d startDateTime.split(\" \")[INDEX_DATE];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String startTime \u003d startDateTime.split(\" \")[INDEX_TIME];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String endDate \u003d endDateTime.split(\" \")[INDEX_DATE];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String endTime \u003d endDateTime.split(\" \")[INDEX_TIME];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return \"ASSESSMENT\" + DELIMITER + getStatusIcon() + DELIMITER + moduleCode + DELIMITER + description"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + DELIMITER + startDate + DELIMITER + startTime + DELIMITER + endDate + DELIMITER + endTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 57
    }
  },
  {
    "path": "src/main/java/oof/model/task/Assignment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class Assignment extends Deadline {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for Assignment."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param moduleCode       Assignment Module"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param description      Details of the Assignment."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param deadlineDateTime Due date and time of the Assignment."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public Assignment(String moduleCode, String description, String deadlineDateTime) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        super(description, deadlineDateTime);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return moduleCode + \" \" + super.getDescription();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Converts a task object to string format for storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return Task object in string format for storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public String toStorageString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String date \u003d deadlineDateTime.split(\" \")[INDEX_DATE];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String time \u003d deadlineDateTime.split(\" \")[INDEX_TIME];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return \"ASSIGNMENT\" + DELIMITER + getStatusIcon() + DELIMITER + moduleCode + DELIMITER + description"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + DELIMITER + date + DELIMITER + time + DELIMITER + DELIMITER;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return \"[A][\" + getStatusIcon() + \"] \" + moduleCode + \" \" + super.getDescription() + \" (by: \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                + deadlineDateTime + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 36,
      "jasperosy": 14
    }
  },
  {
    "path": "src/main/java/oof/model/task/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Task object. A Deadline object is a type of Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    protected String deadlineDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for Deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param description Details of the Task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param deadlineDateTime Due date and time of the Deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public Deadline(String description, String deadlineDateTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        this.deadlineDateTime \u003d deadlineDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public String getDeadlineDateTime() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return deadlineDateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Converts a task object to string format for storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return Task object in string format for storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public String toStorageString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String date \u003d deadlineDateTime.split(\" \")[INDEX_DATE];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String time \u003d deadlineDateTime.split(\" \")[INDEX_TIME];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return \"DEADLINE\" + DELIMITER + getStatusIcon() + DELIMITER + description + DELIMITER + date"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + DELIMITER + time + DELIMITER + DELIMITER + DELIMITER;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + deadlineDateTime + \")\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 10,
      "jasperosy": 29,
      "debbiextan": 2
    }
  },
  {
    "path": "src/main/java/oof/model/task/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * An Event object is a type of Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    protected String startDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    protected String endDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for Event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param description Details of the Task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param startDateTime Starting date and time of the Event."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param endDateTime   Ending date and time of the Event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public Event(String description, String startDateTime, String endDateTime) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public String getStartDateTime() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return startDateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public String getEndDateTime() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return endDateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Converts a task object to string format for storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return Task object in string format for storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public String toStorageString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String startDate \u003d startDateTime.split(\" \")[INDEX_DATE];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String startTime \u003d startDateTime.split(\" \")[INDEX_TIME];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String endDate \u003d endDateTime.split(\" \")[INDEX_DATE];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String endTime \u003d endDateTime.split(\" \")[INDEX_TIME];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return \"EVENT\" + DELIMITER + getStatusIcon() + DELIMITER + description + DELIMITER + startDate"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + DELIMITER + startTime + DELIMITER + endDate + DELIMITER + endTime  + DELIMITER;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return \"[E]\" + super.toString() + \" (from: \" + startDateTime + \" to: \" + endDateTime + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 32,
      "jasperosy": 18
    }
  },
  {
    "path": "src/main/java/oof/model/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Abstract parent class of all subclasses of Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    static final String DELIMITER \u003d \"||\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    static final int INDEX_DATE \u003d 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    static final int INDEX_TIME \u003d 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private boolean status;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for Task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        this.status \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void setStatus() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        this.status \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Retrieves the status icon of the Task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return Status icon of the Task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return (status ? \"Y\" : \"N\"); //return tick or X symbols"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Converts a task object to string format for storage."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return Task object in string format for storage."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public abstract String toStorageString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Customises the toString() method to print the Task object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return Customised String for Task object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 24,
      "debbiextan": 1,
      "jasperosy": 35
    }
  },
  {
    "path": "src/main/java/oof/model/task/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a list of Task objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for TaskList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param tasks TaskList that contains Task objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for TaskList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Retrieves all the Task objects in TaskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return TaskList containing all its Task objects."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Retrieves the number of Task objects in the TaskList."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return Number of Task objects in the TaskList."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Retrieves the Task object at a particular index."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param index Index of Task object, specified by the user."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return Task object at a particular index."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Adds a Task object to the TaskList."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param task Task object to be added to TaskList."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Adds a Task object to a specific index in the TaskList."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param index Index to be inserted."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param task  Task to be added."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void addTaskToIndex(int index, Task task) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        tasks.add(index, task);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Deletes a Task object from the TaskList."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param index Index of Task object, specified by the user."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks if index is within bounds of TaskList."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param index Index of TaskList."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return True if index is within bounds of TaskList, false otherwise."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public boolean isIndexValid(int index) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return index \u003c tasks.size() \u0026\u0026 index \u003e\u003d 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if TaskList is empty."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return  true if empty, false otherwise."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return tasks.isEmpty();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 8,
      "KahLokKee": 46,
      "jasperosy": 47
    }
  },
  {
    "path": "src/main/java/oof/model/task/Todo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * A Todo object is a type of Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private String todoDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for Todo."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param description Description of the Todo object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public Todo(String description, String todoDate) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        this.todoDate \u003d todoDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public String getTodoDate() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return todoDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Converts a task object to string format for storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return Task object in string format for storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public String toStorageString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return \"TODO\" + DELIMITER + getStatusIcon() + DELIMITER + description + DELIMITER + todoDate"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + DELIMITER + DELIMITER + DELIMITER + DELIMITER;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return \"[T]\" + super.toString() + \" (on: \" + todoDate + \")\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 10,
      "jasperosy": 28
    }
  },
  {
    "path": "src/main/java/oof/model/tracker/Tracker.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "package oof.model.tracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "public class Tracker {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private static final String DELIMITER \u003d \",\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private Date startDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private Date lastUpdated;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private long timeTaken;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private static final int TO_MINUTES \u003d 60000;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Constructor for Tracker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param moduleCode    module code of Task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param taskIndex     index of Task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param description   description of Task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param startDate     start Date of Tracker."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param lastUpdated   last updated Date of Tracker."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param timeTaken     total time spent on Task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public Tracker(String moduleCode, int taskIndex, String description,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                   Date startDate, Date lastUpdated, long timeTaken) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        this.lastUpdated \u003d lastUpdated;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        this.timeTaken \u003d timeTaken;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Constructor for Tracker."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param moduleCode    module code."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param timeTaken     total time spent on time taken."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public Tracker(String moduleCode, long timeTaken) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        this.timeTaken \u003d timeTaken;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Get time difference between start date of a tracked Assignment object and current datetime."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param start     start time in Date format."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @return number of minutes between start and end time of a tracked Assignment."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public String getDateDiff(Date start) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        Date end \u003d new Date();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        long diff \u003d end.getTime() - start.getTime();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        int diffMin \u003d (int) (diff / TO_MINUTES);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        String difference \u003d Integer.toString(diffMin);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return difference;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Store details of Tracker in desired format."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @return formatted details of Tracker"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public String toStorageString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        SimpleDateFormat writeFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        Date start \u003d getStartDate();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        Date updated \u003d getLastUpdated();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        String moduleCode \u003d getModuleCode();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        String taskIndex \u003d Integer.toString(getTaskIndex());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        String description \u003d getDescription();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        String startDate;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        if (start !\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            startDate \u003d writeFormat.format(start);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            startDate \u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        String lastUpdated \u003d writeFormat.format(updated);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        String timeTaken \u003d Long.toString(getTimeTaken());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        String line \u003d moduleCode + DELIMITER + taskIndex + DELIMITER + description + DELIMITER + startDate + DELIMITER"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                + lastUpdated + DELIMITER + timeTaken;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return line;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Updates startDate and timeTaken properties of Tracker object."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param totalTime     total Time spent on Assignment."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void updateTracker(long totalTime, Date lastUpdated) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        setLastUpdated(lastUpdated);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        setTimeTaken(totalTime);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        setStartDate(null);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Check if tracker has started."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @return true if tracker start date equals null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public boolean isNotStarted() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return getStartDate() \u003d\u003d null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public int getTaskIndex() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return taskIndex;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void setTaskIndex(int taskIndex) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public Date getStartDate() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void setStartDate(Date startDate) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public Date getLastUpdated() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return lastUpdated;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void setLastUpdated(Date lastUpdated) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        this.lastUpdated \u003d lastUpdated;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public long getTimeTaken() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return timeTaken;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void setTimeTaken(long timeTaken) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        this.timeTaken \u003d timeTaken;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "debbiextan": 157
    }
  },
  {
    "path": "src/main/java/oof/model/university/Lesson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.model.university;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Lesson class for module lessons."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class Lesson {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final String DELIMITER \u003d \"||\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String lessonName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private DayOfWeek day;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String startTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String endTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for Lesson object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param moduleCode String containing Module code."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param lessonName String containing Lesson name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param day        Day of the week."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param startTime  String containing start time of Lesson."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param endTime    String containing end time of Lesson."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public Lesson(String moduleCode, String lessonName, DayOfWeek day, String startTime, String endTime) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.lessonName \u003d lessonName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getLessonTimeString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return startTime + \" to \" + endTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getStartTime() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getEndTime() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getLessonName() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return lessonName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public DayOfWeek getDay() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getDayString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return day.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return moduleCode + \" \" + lessonName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Converts a Lesson object to string format for storage."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return Lesson object in string format for storage."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public String toStorageString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return \"LESSON\" + DELIMITER + moduleCode + DELIMITER + lessonName + DELIMITER + day.name() + DELIMITER"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + startTime + DELIMITER + endTime;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 10,
      "KahLokKee": 66
    }
  },
  {
    "path": "src/main/java/oof/model/university/Module.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.model.university;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Assessment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Assignment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Module class for university modules."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final String DELIMITER \u003d \"||\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String moduleName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private ArrayList\u003cLesson\u003e lessons;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private ArrayList\u003cAssessment\u003e assessments;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private ArrayList\u003cAssignment\u003e assignments;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for Module object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param moduleCode String containing module code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param moduleName String containing module name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public Module(String moduleCode, String moduleName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.moduleCode \u003d moduleCode.toUpperCase();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        assessments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        assignments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public Module(ArrayList\u003cLesson\u003e lessons, ArrayList\u003cAssessment\u003e assessments) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        this.lessons \u003d lessons;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        this.assessments \u003d assessments;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public Module() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.assessments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getModuleName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return moduleName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public ArrayList\u003cLesson\u003e getLessons() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return lessons;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public Lesson getLesson(int index) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return lessons.get(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void addAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        assignments.add(assignment);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        lessons.add(lesson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void deleteLesson(int index) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        lessons.remove(index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void addAssessment(Assessment assessment) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        assessments.add(assessment);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Converts a Module object to string format for storage."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return Module object in string format for storage."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public String toStorageString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return \"MODULE\" + DELIMITER + moduleCode + DELIMITER + moduleName;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return moduleCode + \" \" + moduleName;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public boolean isLessonIndexValid(int index) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c lessons.size();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 25,
      "KahLokKee": 72
    }
  },
  {
    "path": "src/main/java/oof/model/university/SelectedInstance.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.model.university;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class SelectedInstance {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static SelectedInstance selectedInstance;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private Semester semester;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private Module module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private SelectedInstance() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.semester \u003d null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.module \u003d null;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Returns an instance of the SelectedInstance class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return an instance of the SelectedInstance class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public static SelectedInstance getInstance() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (selectedInstance \u003d\u003d null) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            selectedInstance \u003d new SelectedInstance();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return selectedInstance;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void selectSemester(Semester semester) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.module \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public Semester getSemester() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return this.semester;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void selectModule(Module module) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public Module getModule() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return this.module;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void resetModule() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.module \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void resetSemester() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.semester \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.module \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 51
    }
  },
  {
    "path": "src/main/java/oof/model/university/Semester.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.model.university;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Semester class for an university semester."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class Semester {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final String DELIMITER \u003d \"||\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String academicYear;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String semesterName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String startDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String endDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private ArrayList\u003cModule\u003e modules;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for Semester object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param academicYear String containing academic year of Semester."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterName String containing name of Semester."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param startDate    String containing start date of Semester."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param endDate      String containing end date of Semester."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public Semester(String academicYear, String semesterName, String startDate, String endDate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.academicYear \u003d academicYear;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.semesterName \u003d semesterName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public Semester(ArrayList\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        this.modules \u003d modules;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public Semester() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        modules.add(module);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void deleteModule(int index) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        modules.remove(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getAcademicYear() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return academicYear;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getSemesterName() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return semesterName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getStartDate() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getEndDate() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public ArrayList\u003cModule\u003e getModules() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public Module getModule(int index) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return modules.get(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Converts a semester object to string format for storage."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return Semester object in string format for storage."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public String toStorageString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return \"SEMESTER\" + DELIMITER + academicYear + DELIMITER + semesterName + DELIMITER + startDate + DELIMITER"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + endDate;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return \"Academic Year \" + academicYear + \", \" + semesterName + \" (\" + startDate + \" to \" + endDate + \")\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public boolean isIndexValid(int index) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c modules.size();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 19,
      "KahLokKee": 72
    }
  },
  {
    "path": "src/main/java/oof/model/university/SemesterList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.model.university;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a list of Semester objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class SemesterList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private ArrayList\u003cSemester\u003e semesterList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for SemesterList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList ArrayList of Semesters."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public SemesterList(ArrayList\u003cSemester\u003e semesterList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.semesterList \u003d semesterList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public SemesterList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.semesterList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public ArrayList\u003cSemester\u003e getSemesterList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return semesterList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return semesterList.size();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public Semester getSemester(int index) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return semesterList.get(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void addSemester(Semester semester) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        semesterList.add(semester);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void deleteSemester(int index) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        semesterList.remove(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public boolean isIndexValid(int index) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return index \u003c semesterList.size() \u0026\u0026 index \u003e\u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 49
    }
  },
  {
    "path": "src/main/java/oof/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Storage class to load and write data from/to persistent storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(\"OofLogger\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for Storage class."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Loads a file from persistent storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param filePath String containing file path name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return ArrayList of String containing data stored in file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws NullPointerException if file does not exist."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public ArrayList\u003cString\u003e loadFile(String filePath) throws NullPointerException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        BufferedReader bufferedReader;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            FileReader fileReader \u003d new FileReader(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            bufferedReader \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            InputStream inputStream \u003d getClass().getClassLoader().getResourceAsStream(filePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            bufferedReader \u003d new BufferedReader(new InputStreamReader(inputStream));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ArrayList\u003cString\u003e data \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                data.add(line);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            LOGGER.log(Level.SEVERE, e.getMessage(), e);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Writes to a file from persistent storage."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param filePath String containing file path name"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param data     ArrayList of data to be written"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void writeFile(String filePath, ArrayList\u003cString\u003e data) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            BufferedWriter bufferedWriter \u003d new BufferedWriter(new FileWriter(filePath));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            for (String datum : data) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                bufferedWriter.write(datum + \u0027\\n\u0027);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            LOGGER.log(Level.SEVERE, e.getMessage(), e);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 74
    }
  },
  {
    "path": "src/main/java/oof/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.StorageFileCorruptedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Semester;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.tracker.Tracker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Storage Manager to invoke StorageParser and Storage classes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class StorageManager {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final String PATH_OUTPUT \u003d \"output.txt\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final String PATH_MANUAL \u003d \"manual.txt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final String PATH_THRESHOLD \u003d \"oof.config\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final String PATH_TRACKER \u003d \"tracker.csv\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final String PATH_SEMESTER \u003d \"semester.txt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_THRESHOLD \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int DEFAULT_THRESHOLD \u003d 24;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public StorageManager() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Reads list of Semesters from persistent storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return ArrayList containing list of Semester objects."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws NullPointerException if file does not exist."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public ArrayList\u003cSemester\u003e readSemesterList() throws NullPointerException, StorageFileCorruptedException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ArrayList\u003cString\u003e data \u003d storage.loadFile(PATH_SEMESTER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return StorageParser.dataToSemester(data);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Writes list of Semesters to persistent storage."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList Instance of SemesterList containing Semester data"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void writeSemesterList(SemesterList semesterList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ArrayList\u003cSemester\u003e semesters \u003d semesterList.getSemesterList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ArrayList\u003cString\u003e data \u003d StorageParser.semestersToData(semesters);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        storage.writeFile(PATH_SEMESTER, data);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Reads list of Task from persistent storage."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList Instance of SemesterList containing Semester data"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return ArrayList containing list of Task objects."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws NullPointerException if file does not exist."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public ArrayList\u003cTask\u003e readTaskList(SemesterList semesterList) throws NullPointerException,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            StorageFileCorruptedException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ArrayList\u003cString\u003e data \u003d storage.loadFile(PATH_OUTPUT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return StorageParser.dataToTask(data, semesterList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Writes list of Task objects to persistent storage."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskList Instance of TaskList containing Task data"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void writeTaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d taskList.getTaskList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ArrayList\u003cString\u003e data \u003d StorageParser.tasksToData(tasks);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        storage.writeFile(PATH_OUTPUT, data);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Reads threshold value from storage."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return value of threshold if file exists, else returns default threshold"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public int readThreshold() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ArrayList\u003cString\u003e data \u003d storage.loadFile(PATH_THRESHOLD);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return Integer.parseInt(data.get(INDEX_THRESHOLD));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (NullPointerException | NumberFormatException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return DEFAULT_THRESHOLD;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Writes updated threshold to hard disk."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param updateThreshold The new threshold to be saved."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void writeThreshold(int updateThreshold) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            BufferedWriter out \u003d new BufferedWriter(new FileWriter(PATH_THRESHOLD));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            out.write(String.valueOf(updateThreshold));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            out.close();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.println(e + \", thus please try inputting other things.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Reads Tracker objects that were previously saved to hard disk."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return TrackerList that contains Tracker objects."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public ArrayList\u003cTracker\u003e readTrackerList() throws NullPointerException, StorageFileCorruptedException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ArrayList\u003cString\u003e data \u003d storage.loadFile(PATH_TRACKER);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return StorageParser.dataToTrackerList(data);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Writes Tracker objects to hard disk."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param trackerList TrackerList of Tracker objects."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void writeTrackerList(ArrayList\u003cTracker\u003e trackerList) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ArrayList\u003cString\u003e data \u003d StorageParser.trackerListToData(trackerList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        storage.writeFile(PATH_TRACKER, data);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public ArrayList\u003cString\u003e readManual() throws NullPointerException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return storage.loadFile(PATH_MANUAL);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 1,
      "KahLokKee": 129,
      "debbiextan": 1
    }
  },
  {
    "path": "src/main/java/oof/storage/StorageParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.StorageFileCorruptedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Lesson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Semester;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Assessment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.model.task.Assignment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Todo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.model.tracker.Tracker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a class to parse save file data and object data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "class StorageParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final String DELIMITER \u003d \"\\\\|\\\\|\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private static final String DELIMITER_TRACKER \u003d \",\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String DONE \u003d \"Y\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String SPACE \u003d \" \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final String TODO \u003d \"TODO\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final String DEADLINE \u003d \"DEADLINE\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final String EVENT \u003d \"EVENT\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final String ASSIGNMENT \u003d \"ASSIGNMENT\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final String SEMESTER \u003d \"SEMESTER\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final String MODULE \u003d \"MODULE\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final String LESSON \u003d \"LESSON\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final String ASSESSMENT \u003d \"ASSESSMENT\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_CLASS_TYPE \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_SEMESTER_YEAR \u003d 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_SEMESTER_NAME \u003d 2;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_SEMESTER_DATE_START \u003d 3;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_SEMESTER_DATE_END \u003d 4;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_MODULE_CODE \u003d 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_MODULE_NAME \u003d 2;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_LESSON_MODULE_CODE \u003d 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_LESSON_NAME \u003d 2;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_LESSON_DAY \u003d 3;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_LESSON_TIME_START \u003d 4;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_LESSON_TIME_END \u003d 5;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_ASSESSMENT_MODULE_CODE \u003d 2;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_ASSESSMENT_DESCRIPTION \u003d 3;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_ASSESSMENT_START_DATE \u003d 4;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_ASSESSMENT_START_TIME \u003d 5;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_ASSESSMENT_END_DATE \u003d 6;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_ASSESSMENT_END_TIME \u003d 7;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_ASSIGNMENT_MODULE_CODE \u003d 2;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_ASSIGNMENT_DESCRIPTION \u003d 3;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_ASSIGNMENT_DEADLINE_DATE \u003d 4;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_ASSIGNMENT_DEADLINE_TIME \u003d 5;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_TASK_NAME \u003d 2;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_TASK_DATE_START \u003d 3;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_TASK_TIME_START \u003d 4;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_TASK_DATE_END \u003d 5;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_TASK_TIME_END \u003d 6;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_TASK_STATUS \u003d 1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_TRACKER_MODULE_CODE \u003d 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_TRACKER_TASK_INDEX \u003d 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private static final int INDEX_TRACKER_DESCRIPTION \u003d 2;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_TRACKER_START_DATE \u003d 3;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_TRACKER_LAST_UPDATED \u003d 4;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_TRACKER_TIME_TAKEN \u003d 5;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Converts data to ArrayList of Semester objects."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param data input supplied by storage file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return ArrayList containing list of Semesters."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws StorageFileCorruptedException if file is corrupted."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    static ArrayList\u003cSemester\u003e dataToSemester(ArrayList\u003cString\u003e data) throws StorageFileCorruptedException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ArrayList\u003cSemester\u003e semesters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Semester semester \u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Module module \u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (String datum : data) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            String[] dataSplit \u003d datum.split(DELIMITER);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            switch (dataSplit[INDEX_CLASS_TYPE]) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            case SEMESTER:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                semester \u003d addSemester(dataSplit);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                semesters.add(semester);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            case MODULE:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                if (semester !\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    module \u003d addModule(dataSplit);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    semester.addModule(module);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            case LESSON:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                if (module !\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    Lesson lesson \u003d addLesson(dataSplit);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    module.addLesson(lesson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                throw new StorageFileCorruptedException(\"OOPS!! semester.txt is corrupted.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return semesters;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Adds Semester from persistent storage to semesterList."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param lineSplit Semester object split in string array format."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return Semester added to semesterList."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static Semester addSemester(String[] lineSplit) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String year \u003d lineSplit[INDEX_SEMESTER_YEAR];"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String name \u003d lineSplit[INDEX_SEMESTER_NAME];"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String startDate \u003d lineSplit[INDEX_SEMESTER_DATE_START];"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String endDate \u003d lineSplit[INDEX_SEMESTER_DATE_END];"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return new Semester(year, name, startDate, endDate);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Adds Module from persistent storage to Semester."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param lineSplit Module object split in string array format."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return Module added to Semester."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static Module addModule(String[] lineSplit) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String moduleCode \u003d lineSplit[INDEX_MODULE_CODE];"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String moduleName \u003d lineSplit[INDEX_MODULE_NAME];"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return new Module(moduleCode, moduleName);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Adds Lesson from persistent storage to Module."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param lineSplit Lesson object split in string array format."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return Lesson added to Module."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static Lesson addLesson(String[] lineSplit) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String moduleCode \u003d lineSplit[INDEX_LESSON_MODULE_CODE];"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String lessonName \u003d lineSplit[INDEX_LESSON_NAME];"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        DayOfWeek dayOfWeek \u003d DayOfWeek.valueOf(lineSplit[INDEX_LESSON_DAY]);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String startTime \u003d lineSplit[INDEX_LESSON_TIME_START];"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String endTime \u003d lineSplit[INDEX_LESSON_TIME_END];"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return new Lesson(moduleCode, lessonName, dayOfWeek, startTime, endTime);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Converts ArrayList of Semester objects into data strings."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesters ArrayList containing semester objects"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return ArrayList containing data strings."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    static ArrayList\u003cString\u003e semestersToData(ArrayList\u003cSemester\u003e semesters) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ArrayList\u003cString\u003e data \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (Semester semester : semesters) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            data.add(semester.toStorageString());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            writeModules(data, semester);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Writes module data."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param data     ArrayList of Strings containing object data"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semester Semester object containing Module data."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static void writeModules(ArrayList\u003cString\u003e data, Semester semester) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (Module module : semester.getModules()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            data.add(module.toStorageString());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            writeLessons(data, module);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Writes lesson data."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param data   ArrayList of Strings containing object data"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param module Module object containing Lesson data."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static void writeLessons(ArrayList\u003cString\u003e data, Module module) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (Lesson lesson : module.getLessons()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            data.add(lesson.toStorageString());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Converts data to ArrayList of Task objects."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param data         input supplied by storage file."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList instance of SemesterList containing Semester data."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return ArrayList containing list of Tasks."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws StorageFileCorruptedException if file is corrupted."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    static ArrayList\u003cTask\u003e dataToTask(ArrayList\u003cString\u003e data, SemesterList semesterList)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throws StorageFileCorruptedException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (String datum : data) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            String[] dataSplit \u003d datum.split(DELIMITER);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            switch (dataSplit[INDEX_CLASS_TYPE]) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                tasks.add(addToDo(dataSplit));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                tasks.add(addDeadline(dataSplit));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                tasks.add(addEvent(dataSplit));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            case ASSIGNMENT:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                tasks.add(addAssignment(dataSplit, semesterList));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            case ASSESSMENT:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                tasks.add(addAssessment(dataSplit, semesterList));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                throw new StorageFileCorruptedException(\"Output.txt is corrupted!\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Adds todo task from persistent storage to taskList."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param lineSplit Task object split in string array format."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static Todo addToDo(String[] lineSplit) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String description \u003d lineSplit[INDEX_TASK_NAME].trim();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String date \u003d lineSplit[INDEX_TASK_DATE_START].trim();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Todo todo \u003d new Todo(description, date);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (checkDone(lineSplit[INDEX_TASK_STATUS])) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            todo.setStatus();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return todo;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Adds deadline task from persistent storage to taskList."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param lineSplit Task object split in string array format."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static Deadline addDeadline(String[] lineSplit) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String description \u003d lineSplit[INDEX_TASK_NAME].trim();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String date \u003d lineSplit[INDEX_TASK_DATE_START].trim() + SPACE + lineSplit[INDEX_TASK_TIME_START].trim();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Deadline deadline \u003d new Deadline(description, date);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (checkDone(lineSplit[INDEX_TASK_STATUS])) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            deadline.setStatus();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Adds event task from persistent storage to taskList."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param lineSplit Task object split in string array format."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static Event addEvent(String[] lineSplit) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String description \u003d lineSplit[INDEX_TASK_NAME].trim();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String startDate \u003d lineSplit[INDEX_TASK_DATE_START].trim() + SPACE + lineSplit[INDEX_TASK_TIME_START];"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String endDate \u003d lineSplit[INDEX_TASK_DATE_END].trim() + SPACE + lineSplit[INDEX_TASK_TIME_END];"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Event event \u003d new Event(description, startDate, endDate);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (checkDone(lineSplit[INDEX_TASK_STATUS])) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            event.setStatus();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Adds Assignment task from persistent storage to taskList."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param lineSplit    Task object split in string array format."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList Instance of SemesterList containing list of semesters."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static Assignment addAssignment(String[] lineSplit, SemesterList semesterList) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String moduleCode \u003d lineSplit[INDEX_ASSIGNMENT_MODULE_CODE];"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String description \u003d lineSplit[INDEX_ASSIGNMENT_DESCRIPTION];"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String deadlineDate \u003d lineSplit[INDEX_ASSIGNMENT_DEADLINE_DATE];"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String deadlineTime \u003d lineSplit[INDEX_ASSIGNMENT_DEADLINE_TIME];"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String deadlineDateTime \u003d deadlineDate + \" \" + deadlineTime;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Assignment assignment \u003d new Assignment(moduleCode, description, deadlineDateTime);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (checkDone(lineSplit[INDEX_TASK_STATUS])) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            assignment.setStatus();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        addToModule(semesterList, moduleCode, assignment);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return assignment;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Iterates through each module and adds assignment or assessment to correct module."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList Instance of SemesterList containing list of semesters."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param moduleCode   String containing module code of assignment."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param task         Assignment or Assessment Object to be added."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static void addToModule(SemesterList semesterList, String moduleCode, Task task) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (Semester semester : semesterList.getSemesterList()) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            for (Module module : semester.getModules()) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                if (task instanceof Assignment \u0026\u0026 module.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    module.addAssignment((Assignment) task);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                } else if (task instanceof Assessment \u0026\u0026 module.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    module.addAssessment((Assessment) task);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Adds Assessment from persistent storage to Module."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param lineSplit    Assessment object split in string array format."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList Instance of SemesterList containing list of semesters."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return instance of Assessment."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static Assessment addAssessment(String[] lineSplit, SemesterList semesterList) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String moduleCode \u003d lineSplit[INDEX_ASSESSMENT_MODULE_CODE];"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String description \u003d lineSplit[INDEX_ASSESSMENT_DESCRIPTION];"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String startDate \u003d lineSplit[INDEX_ASSESSMENT_START_DATE];"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String startTime \u003d lineSplit[INDEX_ASSESSMENT_START_TIME];"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String startDateTime \u003d startDate + \" \" + startTime;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String endDate \u003d lineSplit[INDEX_ASSESSMENT_END_DATE];"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String endTime \u003d lineSplit[INDEX_ASSESSMENT_END_TIME];"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String endDateTime \u003d endDate + \" \" + endTime;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Assessment assessment \u003d new Assessment(moduleCode, description, startDateTime, endDateTime);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (checkDone(lineSplit[INDEX_TASK_STATUS])) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            assessment.setStatus();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        addToModule(semesterList, moduleCode, assessment);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return assessment;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Converts ArrayList of Task objects into string data."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param tasks ArrayList containing task objects"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return ArrayList of strings representing data strings."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    static ArrayList\u003cString\u003e tasksToData(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ArrayList\u003cString\u003e data \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            data.add(task.toStorageString());"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Processes String of line obtained from tracker.csv."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param data ArrayList of data from tracker.csv."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return ArrayList of Tracker objects."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws StorageFileCorruptedException if tracker.csv is corrupted"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    static ArrayList\u003cTracker\u003e dataToTrackerList(ArrayList\u003cString\u003e data) throws StorageFileCorruptedException {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ArrayList\u003cTracker\u003e trackers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (String datum : data) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            trackers.add(processLine(datum));"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return trackers;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Processes String of line obtained from tracker.csv."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param line String from tracker.csv."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return Tracker object updated from data found in line."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws StorageFileCorruptedException if file is corrupted."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static Tracker processLine(String line) throws StorageFileCorruptedException {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        SimpleDateFormat readFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Date start;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String[] processed \u003d line.split(DELIMITER_TRACKER);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String moduleCode \u003d processed[INDEX_TRACKER_MODULE_CODE];"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        int taskIndex \u003d Integer.parseInt(processed[INDEX_TRACKER_TASK_INDEX]);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String description \u003d processed[INDEX_TRACKER_DESCRIPTION];"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String startDate \u003d processed[INDEX_TRACKER_START_DATE];"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String lastUpdated \u003d processed[INDEX_TRACKER_LAST_UPDATED];"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        long timeTaken \u003d Long.parseLong(processed[INDEX_TRACKER_TIME_TAKEN]);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            if (startDate.equals(\"null\")) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                start \u003d null;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                start \u003d readFormat.parse(startDate);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            Date updated \u003d readFormat.parse(lastUpdated);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            return new Tracker(moduleCode, taskIndex, description, start, updated, timeTaken);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new StorageFileCorruptedException((\"Unable to process stored Tracker data.\"));"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks if the Task has already been marked as done."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param line Task object in string format."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return true if the Task object has already been marked as done, false otherwise."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static boolean checkDone(String line) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return line.equals(DONE);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Converts TrackerList into ArrayList of Strings."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param trackerList Instance of trackerList that stores tracker objects"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return ArrayList containing data strings of tracker data."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    static ArrayList\u003cString\u003e trackerListToData(ArrayList\u003cTracker\u003e trackerList) {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ArrayList\u003cString\u003e data \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        for (Tracker tracker : trackerList) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            data.add(tracker.toStorageString());"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 31,
      "KahLokKee": 345,
      "jasperosy": 40,
      "debbiextan": 5
    }
  },
  {
    "path": "src/main/java/oof/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import org.fusesource.jansi.AnsiConsole;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.tracker.Tracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Lesson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Semester;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Ui class that is responsible for Input/Output operations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private Scanner scan;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int DATE_SPACES \u003d 3;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int SPLIT_EVEN \u003d 2;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int DAY_FIRST \u003d 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int DAYS_IN_WEEK \u003d 7;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int WEEKS_IN_MONTH \u003d 4;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_SPACE \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_START_OF_ARRAY \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int TEXT_SIZE_SHORT \u003d 19;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int TEXT_SIZE_LONG \u003d 25;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int TEXT_WIDTH \u003d 35;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int TEXT_CENTER \u003d 2;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int HEADER_WIDTH \u003d 49;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int DESCRIPTION_SHORT_START \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int DESCRIPTION_SHORT_END \u003d 17;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int DESCRIPTION_LONG_START \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int DESCRIPTION_LONG_END \u003d 23;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int DATE \u003d 11;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int TIME \u003d 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int DESCRIPTION \u003d 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int TYPE \u003d 2;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private static final int FIRST_VAR \u003d 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private static final int SEGMENT_SIZE \u003d 10;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int ANSI_LENGTH \u003d 9;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String TODO \u003d \"TODO\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String DEADLINE \u003d \"DEADLINE\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String EVENT \u003d \"EVENT\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String ANSI_RESET \u003d \"\\u001B[0m\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String ANSI_BRIGHT_RED \u003d \"\\u001B[91m\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String ANSI_BRIGHT_GREEN \u003d \"\\u001B[92m\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String ANSI_BRIGHT_CYAN \u003d \"\\u001B[96m\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String ANSI_BRIGHT_WHITE \u003d \"\\u001B[97m\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String ANSI_BG_BLUE \u003d \"\\u001B[44m\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String ANSI_BG_BLACK \u003d \"\\u001B[40m\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private StorageManager storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        scan \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Scans for an integer of user input."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return Scanner to scan for an integer of user input."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public int scanInt() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return scan.nextInt();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Scans for a line of user input."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return Scanner to scan for next line of user input."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String scanLine() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        scan.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return scan.nextLine();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints 3D ascii logo OOF."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void printOofLogo() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String logo \u003d \"                          ________  ________  ________ \\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + \"                         |\\\\   __  \\\\|\\\\   __  \\\\|\\\\  _____\\\\\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + \"                         \\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\__/ \\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + \"                          \\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\   __\\\\\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + \"                           \\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\  \\\\_|\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + \"                            \\\\ \\\\_______\\\\ \\\\_______\\\\ \\\\__\\\\ \\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + \"                             \\\\|_______|\\\\|_______|\\\\|__|\\n\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints welcome message for OOF."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void hello() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printOofLogo();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" Hello! I\u0027m OOF\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" What can I do for you?\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints command prompt."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printCommandPrompt() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" Enter a command: \");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Shows termination message before OOF exits."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printByeMessage() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Prints lines."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void printLine() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\"________________________________________________________________________________\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints the Task object that was added and its relevant messages."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param task Task object that was added."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param size Number of Task objects in the TaskList."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void addTaskMessage(Task task, int size) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" \\t\" + task);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (size \u003e 1) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.println(\" Now you have \" + size + \" tasks in your list.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.println(\" Now you have \" + size + \" task in the list.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Shows the Task object that has been marked as done and its relevant messages."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param task Task object that was marked as done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void completeMessage(Task task) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" \\t\" + task);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Shows the Task object that has been deleted and its relevant messages."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param task Task object that was deleted."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param size Number of Task objects in the TaskList."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void deleteMessage(Task task, int size) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" \\t\" + task);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (size \u003e 1) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.println(\" Now you have \" + size + \" tasks in your list.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.println(\" Now you have \" + size + \" task in the list.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Shows the error message."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param exception Exception encountered."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printCommandException(Exception exception) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" \" + exception.getMessage());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Displays the Task to be snoozed."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param task Task to be snoozed."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printSnoozeMessage(Task task) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" I have changed the date of this task!\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" \\t\" + task);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Retrieves a new Timestamp from the user for the Task to be snoozed."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return Timestamp input by user."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public String getTimeStamp() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" Please enter the new date: \");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return scanLine();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints a warning regarding event clashes."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printClashWarning(ArrayList\u003cEvent\u003e eventClashes) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (eventClashes.isEmpty()) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" Warning! Event being added clashes with the following events:\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (Event e : eventClashes) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.println(\" \\t\" + e.toString());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints all tasks scheduled on the provided date."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param scheduledTasks List of all Tasks scheduled on the date provided."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param date           Date parameter provided by user."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void printTasksByDate(TaskList scheduledTasks, String date) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" Here are your tasks for \" + date + \": \");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (int i \u003d 0; i \u003c scheduledTasks.getSize(); i++) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.println(\" \\t\" + (i + 1) + \". \" + scheduledTasks.getTask(i));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints list of matching tasks."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param matchedTasks ArrayList containing matching tasks."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printMatchingTasks(ArrayList\u003cTask\u003e matchedTasks) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (matchedTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.println(\" There are no matching tasks in your list!\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            printLine();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.println(\" Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            for (int i \u003d 0; i \u003c matchedTasks.size(); i++) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                System.out.println(\" \\t\" + (i + 1) + \". \" + matchedTasks.get(i));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Displays the newly added recurring tasks."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param arr TaskList containing saved tasks."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printRecurringMessage(TaskList arr) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" I have added recurring tasks:\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printTaskList(arr);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints all tasks in TaskList."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param arr TaskList containing saved tasks."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printTaskList(TaskList arr) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (int i \u003d 0; i \u003c arr.getSize(); i++) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.println(\" \\t\" + (i + 1) + \". \" + arr.getTask(i));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Prints and applies format for command list available to user."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printHelpCommands() throws FileNotFoundException {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ArrayList\u003cString\u003e commands \u003d storageManager.readManual();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        for (String command : commands) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            System.out.println(\" \\t\" + command);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Prints instruction related to individual command available to user."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param command instruction of command given by user."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void printHelpCommand(String command) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        System.out.println(\" \\t\" + command);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    //@@author jasperosy"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Prints the tasks for a particular week."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param tasks           Tasks for the particular week to be printed."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param startDate       Starting date of the week."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param largestTaskSize Size of the day with the largest number of tasks."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param largestColSize  Size of the largest column in the View Week output."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void printViewWeek("
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            ArrayList\u003cArrayList\u003cString[]\u003e\u003e tasks, Date startDate, int largestTaskSize, int largestColSize) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printViewWeekLegend();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printViewWeekHeader(largestColSize);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printViewWeekBody(startDate, largestColSize);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printViewWeekDetails(tasks, largestTaskSize, largestColSize);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Prints the legend for ViewWeek command."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void printViewWeekLegend() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String legend \u003d \"Legend: \\n\""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                + ANSI_BG_BLACK + ANSI_BRIGHT_GREEN + \"\\tTodo\\n\""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                + ANSI_BG_BLACK + ANSI_BRIGHT_RED + \"\\tDeadline\\n\""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                + ANSI_BG_BLACK + ANSI_BRIGHT_CYAN + \"\\tEvent\\n\""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                + ANSI_RESET + \"\\tLesson\\n\";"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        AnsiConsole.out.println(legend);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        System.out.println(\"Note that assignments are considered as Deadline tasks.\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        System.out.println(\"Note that assessments are considered as Event tasks.\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Prints header for ViewWeek command."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param largestColSize Size of the largest column in the View Week output."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void printViewWeekHeader(int largestColSize) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String[] days \u003d {\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"};"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (!isEven(largestColSize)) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            largestColSize++;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        int numberOfHyphens \u003d ((largestColSize + DATE_SPACES) * DAYS_IN_WEEK) + DAYS_IN_WEEK + DAY_FIRST;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        AnsiConsole.out.print(ANSI_BRIGHT_WHITE + ANSI_BG_BLUE);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printHyphens(numberOfHyphens);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        AnsiConsole.out.print(ANSI_BRIGHT_WHITE + ANSI_BG_BLUE + \"|\");"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        AnsiConsole.out.print(ANSI_RESET);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        for (int i \u003d 0; i \u003c DAYS_IN_WEEK; i++) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            printHeaderSpaces(largestColSize);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            System.out.print(days[i]);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            printHeaderSpaces(largestColSize);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            if (i !\u003d DAYS_IN_WEEK - 1) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                System.out.print(\"|\");"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                printViewWeekBorder();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                System.out.println();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printHyphens(numberOfHyphens);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Prints hyphens when the ViewWeek output needs to be resized."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param numberOfHyphens Number of hyphens to be printed."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void printHyphens(int numberOfHyphens) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        for (int i \u003d 0; i \u003c numberOfHyphens; i++) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            AnsiConsole.out.print(ANSI_BRIGHT_WHITE + ANSI_BG_BLUE + \"-\");"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        AnsiConsole.out.println(ANSI_RESET);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Prints only spaces for empty rows in View Week output."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param largestColSize Size of the largest column in the View Week output."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void printBodySpaces(int largestColSize) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        for (int i \u003d 0; i \u003c largestColSize; i++) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            System.out.print(\" \");"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Print spaces when the ViewWeek output needs to be resized."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param largestColSize Size of the largest column in the View Week output."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void printHeaderSpaces(int largestColSize) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        for (int i \u003d 0; i \u003c largestColSize / SPLIT_EVEN; i++) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            AnsiConsole.out.print(ANSI_BRIGHT_WHITE + ANSI_BG_BLUE + \" \");"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Checks if number is even."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param number Number to be checked."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return True if the number is even, false otherwise."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private boolean isEven(int number) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return number % SPLIT_EVEN \u003d\u003d 0;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Prints the body for ViewWeek command."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param startDate      Starting date of the week."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param largestColSize Size of the largest column in the View Week output."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void printViewWeekBody(Date startDate, int largestColSize) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        ArrayList\u003cString\u003e calendarDates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        calendar.setTime(startDate);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        for (int i \u003d 0; i \u003c DAYS_IN_WEEK; i++) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            if (i \u003e\u003d DAY_FIRST) {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                calendar.add(Calendar.DATE, DAY_FIRST);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            Date currentDate \u003d calendar.getTime();"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            String date \u003d formatter.format(currentDate);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            calendarDates.add(date);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printViewWeekDates(calendarDates, largestColSize);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Prints the dates for the ViewWeek command."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param calendarDates  List of dates for the week to be printed."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param largestColSize Size of the largest column in the View Week output."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void printViewWeekDates(ArrayList\u003cString\u003e calendarDates, int largestColSize) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printViewWeekBorder();"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String spaces \u003d \"\";"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (!isEven(largestColSize)) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            largestColSize++;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        for (int i \u003d 0; i \u003c largestColSize + DATE_SPACES - DATE; i++) {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            spaces +\u003d \" \";"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        AnsiConsole.out.print(ANSI_RESET);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        for (int i \u003d 0; i \u003c DAYS_IN_WEEK; i++) {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            if (i !\u003d DAYS_IN_WEEK - 1) {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                AnsiConsole.out.print(\" \" + ANSI_BG_BLACK + calendarDates.get(i) + ANSI_RESET + spaces + \"|\");"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        AnsiConsole.out.print(\" \" + ANSI_BG_BLACK + calendarDates.get(DAYS_IN_WEEK - 1) + ANSI_RESET + spaces);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printViewWeekBorder();"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Prints the details of tasks in the ViewWeek command."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param tasks          Tasks to be printed for the particular week."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param largestTaskNo  Size of the day with the largest number of tasks."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param largestColSize Size of the largest column in the View Week output."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void printViewWeekDetails(ArrayList\u003cArrayList\u003cString[]\u003e\u003e tasks, int largestTaskNo, int largestColSize) {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printEntryBodySpace(largestColSize);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        for (int taskNo \u003d 0; taskNo \u003c largestTaskNo; taskNo++) {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            printDetailsByLine(tasks, taskNo, largestColSize);"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printEntryBodySpace(largestColSize);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (!isEven(largestColSize)) {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            largestColSize++;"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        int numberOfHyphens \u003d ((largestColSize + DATE_SPACES) * DAYS_IN_WEEK) + DAYS_IN_WEEK + DAY_FIRST;"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printHyphens(numberOfHyphens);"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Prints the tasks for ViewWeek command line by line."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param tasks          Tasks for the particular week to be printed."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param taskNo         Current index of the task that is being printed."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param largestColSize Size of the largest column in the View Week output."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void printDetailsByLine(ArrayList\u003cArrayList\u003cString[]\u003e\u003e tasks, int taskNo, int largestColSize) {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printViewWeekBorder();"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        for (int dayInWeek \u003d 0; dayInWeek \u003c DAYS_IN_WEEK; dayInWeek++) {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            int colSize \u003d tasks.get(dayInWeek).size();"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            if (taskNo \u003c colSize) {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                ArrayList\u003cString[]\u003e dailyTasks \u003d tasks.get(dayInWeek);"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                String[] task \u003d dailyTasks.get(taskNo);"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                String taskDetails \u003d getTaskDetails(task);"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                taskDetails \u003d padTaskDetails(task, taskDetails, largestColSize);"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                AnsiConsole.out.print(taskDetails);"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                if (dayInWeek !\u003d DAYS_IN_WEEK - 1) {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                    System.out.print(\"|\");"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                    printViewWeekBorder();"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                    System.out.println();"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                if (!isEven(largestColSize)) {"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                    largestColSize++;"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                printBodySpaces(largestColSize + DATE_SPACES);"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                if (dayInWeek !\u003d DAYS_IN_WEEK - 1) {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                    System.out.print(\"|\");"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                    printViewWeekBorder();"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                    System.out.println();"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Prints the side borders of the View Week output."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void printViewWeekBorder() {"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        AnsiConsole.out.print(ANSI_BRIGHT_WHITE + ANSI_BG_BLUE + \"|\");"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        AnsiConsole.out.print(ANSI_RESET);"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Pads the details of a task to fit into a day of the ViewWeek command output."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param task           Array containing type, description and time of task."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param details        Details of a task."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param largestColSize Size of the largest column in the ViewWeek command output."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return Padded details of a task."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private String padTaskDetails(String[] task, String details, int largestColSize) {"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (!isEven(largestColSize)) {"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            largestColSize++;"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String newDetails \u003d \" \" + details;"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        switch (task[TYPE]) {"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            newDetails \u003d ANSI_BRIGHT_GREEN + newDetails + ANSI_RESET;"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            newDetails \u003d ANSI_BRIGHT_RED + newDetails + ANSI_RESET;"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            newDetails \u003d ANSI_BRIGHT_CYAN + newDetails + ANSI_RESET;"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        int length \u003d newDetails.length();"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (task[TYPE].equals(TODO) || task[TYPE].equals(DEADLINE) || task[TYPE].equals(EVENT)) {"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            length \u003d newDetails.length() - ANSI_LENGTH;"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        while (length \u003c largestColSize + DATE_SPACES) {"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            newDetails +\u003d \" \";"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            length++;"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return newDetails;"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Outputs the details of a task in a string."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param details Array of the details containing time and description."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return String containing the details of a task."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private String getTaskDetails(String[] details) {"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (details[TYPE].equals(TODO)) {"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            return details[DESCRIPTION];"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return details[TIME] + \" \" + details[DESCRIPTION];"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Prints the empty columns in the View Week body."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param largestColSize Longest possible description for task."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void printEntryBodySpace(int largestColSize) {"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printViewWeekBorder();"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (!isEven(largestColSize)) {"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            largestColSize++;"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        for (int day \u003d 0; day \u003c DAYS_IN_WEEK; day++) {"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            for (int emptySpaceNo \u003d 0; emptySpaceNo \u003c largestColSize + DATE_SPACES; emptySpaceNo++) {"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                System.out.print(\" \");"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            if (day !\u003d DAYS_IN_WEEK - 1) {"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                System.out.print(\"|\");"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                printViewWeekBorder();"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                System.out.println();"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Print Tracker Diagram from TrackerList object."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param moduleTrackerList ArrayList of Tracker objects."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void printTrackerDiagram(ArrayList\u003cTracker\u003e moduleTrackerList, long totalTimeTaken) {"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        for (int i \u003d 0; i \u003c moduleTrackerList.size(); i++) {"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            Tracker moduleTracker \u003d moduleTrackerList.get(i);"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            int timeTaken \u003d (int) moduleTracker.getTimeTaken();"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            if (timeTaken \u003c SEGMENT_SIZE) {"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                System.out.print(\"|\\n| \");"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                int segmentedTimeTaken \u003d timeTaken / SEGMENT_SIZE;"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                printTrackerDiagramBar(segmentedTimeTaken);"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            String moduleCode \u003d moduleTracker.getModuleCode();"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            System.out.println(\"\\t\" + moduleCode + \" -- \" + timeTaken + \" minutes\");"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        System.out.println(\"Total Time: \" + totalTimeTaken + \" minutes\");"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Print a bar of Tracker Diagram according to number of 10 minute blocks."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param segmentedTimeTaken number of 10 minute blocks."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void printTrackerDiagramBar(int segmentedTimeTaken) {"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        for (int i \u003d 0; i \u003c segmentedTimeTaken; i++) {"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            if (i \u003d\u003d FIRST_VAR) {"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                System.out.println(\"| \");"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                System.out.print(\"| #\");"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                System.out.print(\"#\");"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Print when Start Tracker Command is completed."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param tracker  description of Tracker object."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param taskList TaskList object."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void printStartAtCurrent(Tracker tracker, TaskList taskList) {"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String moduleCode \u003d tracker.getModuleCode().toUpperCase();"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        int index \u003d tracker.getTaskIndex();"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Task task \u003d taskList.getTask(index);"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String taskDescription \u003d task.getDescription();"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        System.out.println(\"Begin Task: \" + taskDescription);"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        System.out.println(\"Module Code: \" + moduleCode);"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        System.out.println(\"It is currently \" + tracker.getLastUpdated());"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        System.out.println(\"Current total time spent on \" + taskDescription + \": \""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                + tracker.getTimeTaken() + \" minutes\");"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Print when Stop Tracker Command is completed."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param tracker  description of Tracker object."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param taskList TaskList object."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void printEndAtCurrent(Tracker tracker, TaskList taskList) {"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String moduleCode \u003d tracker.getModuleCode().toUpperCase();"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        int index \u003d tracker.getTaskIndex();"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Task task \u003d taskList.getTask(index);"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String taskDescription \u003d task.getDescription();"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        System.out.println(\"Ending Task: \" + taskDescription);"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        System.out.println(\"Module Code: \" + moduleCode);"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        System.out.println(\"It is currently \" + tracker.getLastUpdated());"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        System.out.println(\"Total time spent on \" + taskDescription + \": \" + tracker.getTimeTaken() + \" minutes\");"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Print when Stop Tracker Command is completed."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param tracker  description of Tracker object."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param taskList TaskList object."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void printPauseAtCurrent(Tracker tracker, TaskList taskList) {"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String moduleCode \u003d tracker.getModuleCode().toUpperCase();"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        int index \u003d tracker.getTaskIndex();"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Task task \u003d taskList.getTask(index);"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String taskDescription \u003d task.getDescription();"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        System.out.println(\"Pausing Task: \" + taskDescription);"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        System.out.println(\"Module Code: \" + moduleCode);"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        System.out.println(\"It is currently \" + tracker.getLastUpdated());"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        System.out.println(\"Total time spent on \" + taskDescription + \": \" + tracker.getTimeTaken() + \" minutes\");"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    //@@author KahLokKee"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints calendar."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param yearMonth Object containing month and year information."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printCalendar(YearMonth yearMonth, ArrayList\u003cArrayList\u003cString[]\u003e\u003e calendar) {"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printCalendarLabel(yearMonth);"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printCalendarHeader();"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printCalendarBody(yearMonth, calendar);"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints calendar label."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param yearMonth Object containing month and year information."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private void printCalendarLabel(YearMonth yearMonth) {"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String[] months \u003d {\"\", \"JANUARY\", \"FEBRUARY\", \"MARCH\", \"APRIL\", \"MAY\", \"JUNE\", \"JULY\", \"AUGUST\","
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                \"SEPTEMBER\", \"OCTOBER\", \"NOVEMBER\", \"DECEMBER\"};"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String month \u003d months[yearMonth.getMonthValue()];"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String year \u003d Integer.toString(yearMonth.getYear());"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(month + \" \" + year);"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints calendar header."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private void printCalendarHeader() {"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\"-----------------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + \"------------------------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + \"------------\");"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\"|            SUN            |            MON            |            TUE            |\""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + \"            WED            |            THU            |            FRI            |\""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + \"            SAT            |\");"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\"-----------------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + \"------------------------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + \"------------\");"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints calendar body."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param yearMonth Object containing month and year information."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private void printCalendarBody(YearMonth yearMonth, ArrayList\u003cArrayList\u003cString[]\u003e\u003e calendar) {"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String[] date \u003d {\"  \", \"1 \", \"2 \", \"3 \", \"4 \", \"5 \", \"6 \", \"7 \","
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                \"8 \", \"9 \", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\","
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\","
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ArrayList\u003cString\u003e calendarDates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d yearMonth.lengthOfMonth(); i++) {"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            calendarDates.add(date[i]);"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        DayOfWeek firstDayOfMonth \u003d yearMonth.atDay(DAY_FIRST).getDayOfWeek();"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (firstDayOfMonth !\u003d DayOfWeek.SUNDAY) {"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            for (int dayCount \u003d 0; dayCount \u003c firstDayOfMonth.getValue(); dayCount++) {"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                calendarDates.add(INDEX_START_OF_ARRAY, date[INDEX_SPACE]);"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        while (calendarDates.size() % DAYS_IN_WEEK !\u003d 0) {"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            calendarDates.add(date[INDEX_SPACE]);"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        int numberOfWeeks \u003d (int) Math.ceil((double) calendarDates.size() / DAYS_IN_WEEK);"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (int week \u003d 0; week \u003c numberOfWeeks; week++) {"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            int dayIndex \u003d week * DAYS_IN_WEEK;"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.print(\"|\");"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            int calendarRows \u003d WEEKS_IN_MONTH;"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            for (int day \u003d 0; day \u003c DAYS_IN_WEEK; day++) {"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                if (!calendarDates.get(dayIndex + day).equals(\"  \")) {"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    int currentDay \u003d Integer.parseInt(calendarDates.get(dayIndex + day).trim());"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    if (calendar.get(currentDay).size() \u003e calendarRows) {"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                        calendarRows \u003d calendar.get(currentDay).size();"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                System.out.print(\" \" + calendarDates.get(dayIndex + day) + \"                        |\");"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.println(\"|                           |                           |                           |\""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    + \"                           |                           |                           |\""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    + \"                           |\");"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            printCalendarDetails(calendar, calendarDates, dayIndex, calendarRows);"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.println(\"-------------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    + \"--------------------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    + \"--------------------\");"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints calendar details."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param calendar      ArrayList containing task information for current month."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param calendarDates ArrayList containing dates for current month."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param dayIndex      Offset for current day."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param calendarRows  Number of rows to be printed for current week."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private void printCalendarDetails(ArrayList\u003cArrayList\u003cString[]\u003e\u003e calendar, ArrayList\u003cString\u003e calendarDates,"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                                      int dayIndex, int calendarRows) {"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (int row \u003d 0; row \u003c calendarRows; row++) {"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.print(\"|\");"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            for (int day \u003d 0; day \u003c DAYS_IN_WEEK; day++) {"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                String dayString \u003d calendarDates.get(dayIndex + day).trim();"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                if (dayString.equals(\"\") || calendar.get(Integer.parseInt(dayString)).size() \u003c\u003d row) {"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    System.out.print(\"                           |\");"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    int currentDay \u003d Integer.parseInt(dayString);"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    String taskTime \u003d calendar.get(currentDay).get(row)[0];"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    String taskName \u003d calendar.get(currentDay).get(row)[1];"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    if (taskTime.equals(\"\")) {"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                        printTodo(taskName);"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                        printDeadlineAndEvent(taskTime, taskName);"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints deadline and event details."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskTime Time of deadline or event."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskName Name of deadline or event."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private void printDeadlineAndEvent(String taskTime, String taskName) {"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (taskName.length() \u003e TEXT_SIZE_SHORT) {"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            taskName \u003d taskName.substring(DESCRIPTION_SHORT_START, DESCRIPTION_SHORT_END);"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.print(\" \" + taskTime + \" \" + taskName + \".. |\");"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            taskName \u003d String.format(\"%-\" + TEXT_SIZE_SHORT + \"s\", taskName);"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.print(\" \" + taskTime + \" \" + taskName + \" |\");"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints todo details."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskName Name of todo."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private void printTodo(String taskName) {"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (taskName.length() \u003e TEXT_SIZE_LONG) {"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            taskName \u003d taskName.substring(DESCRIPTION_LONG_START, DESCRIPTION_LONG_END);"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.print(\" \" + taskName + \".. |\");"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            taskName \u003d String.format(\"%-\" + TEXT_SIZE_LONG + \"s\", taskName);"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.print(\" \" + taskName + \" |\");"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints list of semesters."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList Instance containing List of all Semester objects."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printSemesterList(SemesterList semesterList) {"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (Semester semester : semesterList.getSemesterList()) {"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.println(\" \\t\" + index++ + \". \" + semester.toString());"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints list of Modules in a selected Semester."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semester Instance of Semester object."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printModuleList(Semester semester) {"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(semester.toString());"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (index \u003d 1; index \u003c\u003d semester.getModules().size(); index++) {"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.println(\" \\t\" + index + \". \" + semester.getModules().get(index - 1).toString());"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints list of Lessons in a selected Module."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param module Instance of Module object."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printLessonList(Module module) {"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(module.toString());"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ArrayList\u003cLesson\u003e lessons \u003d module.getLessons();"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (index \u003d 1; index \u003c\u003d lessons.size(); index++) {"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            Lesson lesson \u003d lessons.get(index - 1);"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.println(\" \\t\" + index + \". \" + lesson.getLessonName() + \", \" + lesson.getDayString() + \" \""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    + lesson.getLessonTimeString());"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints notification for added Semester."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semester Semester object being added."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printSemesterAddedMessage(Semester semester) {"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" \\\"\" + semester.getAcademicYear() + \" \" + semester.getSemesterName()"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + \"\\\" has been added!\");"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints notification for removed Semester."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semester Semester object being removed."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printSemesterRemovalMessage(Semester semester) {"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" \\\"\" + semester.getAcademicYear() + \" \" + semester.getSemesterName()"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + \"\\\" has been removed!\");"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints notification for added Module."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param module Module object being added."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printModuleAddedMessage(Module module) {"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" \\\"\" + module.getModuleCode() + \" \" + module.getModuleName() + \"\\\" has been added!\");"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints notification for removed Module."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param module Module object being removed."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printModuleRemovalMessage(Module module) {"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" \\\"\" + module.getModuleCode() + \" \" + module.getModuleName() + \"\\\" has been removed!\");"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints notification for added Lesson."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param lesson Lesson object being added."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printLessonAddedMessage(Lesson lesson) {"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" \\\"\" + lesson.getModuleCode() + \" \" + lesson.getLessonName() + \"\\\" has been added!\");"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints notification for removed Lesson."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param lesson Lesson object to be removed."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printLessonRemovalMessage(Lesson lesson) {"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" \\\"\" + lesson.getModuleCode() + \" \" + lesson.getLessonName() + \"\\\" has been removed.\");"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints notification for removed Semester."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semester Semester object to be removed."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printSelectSemesterMessage(Semester semester) {"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" \\\"\" + semester.toString() + \"\\\" has been selected!\");"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints notification for removed Module."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param module Module object to be removed."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printSelectModuleMessage(Module module) {"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" \\\"\" + module.toString() + \"\\\" has been selected!\");"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints currently selected Semester."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semester Currently selected Semester."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printCurrentlySelectedSemester(Semester semester) {"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" Currently Selected: \" + semester.toString());"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints currently selected Module."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param module Currently selected Module."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printCurrentlySelectedModule(Module module) {"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" Currently Selected: \" + module.toString());"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    //@@author Kenlhc"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Prints the new threshold that the user wants."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param threshold The threshold for upcoming deadlines requested by the user."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void printUpdatedThreshold(int threshold) {"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        System.out.println(\" You will now be reminded of deadlines in \" + threshold + \" hours.\");"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Prints the header for the user specified date to search for free time in."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param freeDate  The user specified date to search for free time."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param dayOfWeek The day of the week for the user specified date."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void printFreeTimeHeader(String freeDate, String dayOfWeek) {"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        System.out.println(\"-----------------------------------------------------\");"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String dayWithDate \u003d dayOfWeek + \" \" + freeDate;"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        int padSize \u003d HEADER_WIDTH - dayWithDate.length();"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        int padStart \u003d dayWithDate.length() + padSize / TEXT_CENTER;"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        dayWithDate \u003d String.format(\"%\" + padStart + \"s\", dayWithDate);"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        dayWithDate \u003d String.format(\"%-\" + HEADER_WIDTH + \"s\", dayWithDate);"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        System.out.println(\"| \" + dayWithDate + \" |\");"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        System.out.println(\"-----------------------------------------------------\");"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Prints the free time slots in that day."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param timeSlotStart The start time of the time slot."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param timeSlotEnd   The end time of the time slot."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void printFreeSlots(String timeSlotStart, String timeSlotEnd) {"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        System.out.print(\"| \" + timeSlotStart + \" - \" + timeSlotEnd + \" |\");"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        System.out.println(centraliseDetails(\"free\") + \"|\");"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        System.out.println(\"-----------------------------------------------------\");"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Prints the event details."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param timeSlotStart The start time of the time slot."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param timeSlotEnd   The end time of the time slot."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void printBusySlots(String timeSlotStart, String timeSlotEnd) {"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        System.out.print(\"| \" + timeSlotStart + \" - \" + timeSlotEnd + \" |\");"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        AnsiConsole.out.println(ANSI_BRIGHT_RED + centraliseDetails(\"BUSY\") + ANSI_RESET + \"|\");"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        System.out.println(\"-----------------------------------------------------\");"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Prints deadlines to do as suggestions to the user."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param deadlineName The name of the deadline suggested."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void printSuggestionDetails(ArrayList\u003cString\u003e deadlineName) {"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        System.out.println(\"You may plan to complete the following deadlines in your free time:\");"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d deadlineName.size(); i++) {"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            System.out.println(\" \\t\" + i + \". \" + deadlineName.get(i - 1));"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Centralises the details to be printed."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param slotName Name of the slot being printed."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return A string that has been center justified."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private String centraliseDetails(String slotName) {"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        int padSize \u003d TEXT_WIDTH - slotName.length();"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        int padStart \u003d slotName.length() + padSize / TEXT_CENTER;"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        slotName \u003d String.format(\"%\" + padStart + \"s\", slotName);"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return String.format(\"%-\" + TEXT_WIDTH + \"s\", slotName);"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Prints a reminder regarding upcoming deadlines."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void printReminder() {"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        System.out.println(\" Reminder these tasks have upcoming deadlines:\");"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Prints a reminder that the user has no deadlines."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void printNoDeadlines() {"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        System.out.println(\" You have no upcoming deadlines :)\");"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Prints the details of an upcoming deadline."
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param count Position of upcoming deadline in reminder list."
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param task  Task object of upcoming deadline."
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void printUpcomingDeadline(int count, Task task) {"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        System.out.println(\" \\t\" + count + \".\" + task);"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Prints the details of the deleted Tracker entry."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param size        number of Tracker objects in ArrayList trackerList"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param description description of Task where Tracker is to be deleted."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param timeTaken   amount of time spent on the Task to be deleted."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void printTrackerDelete(int size, String description, long timeTaken) {"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        System.out.println(\" Deleting tracker: \" + description + \" -- \" + timeTaken + \" minutes\");"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        System.out.println(\" Now you have \" + size + \" trackers in your list.\");"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Prints a list of Tracker objects saved in trackerList."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param trackerList ArrayList of Tracker objects."
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void printTrackerList(ArrayList\u003cTracker\u003e trackerList) {"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        for (Tracker tracker : trackerList) {"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            String description \u003d tracker.getDescription();"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            long timeTaken \u003d tracker.getTimeTaken();"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            System.out.println(\" \" + index + \". \" + description + \" -- \" + timeTaken + \" minutes\");"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 136,
      "KahLokKee": 473,
      "jasperosy": 495,
      "debbiextan": 19
    }
  },
  {
    "path": "src/test/java/oof/CommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "package oof;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.task.AddDeadlineCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.task.AddEventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.task.AddToDoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.ByeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.productivity.CalendarCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.task.DeleteTaskCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.organization.DoneCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.organization.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.productivity.FreeCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.organization.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.organization.RecurringCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.productivity.ScheduleCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.command.organization.SnoozeCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.ParserException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.logic.CommandParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "//@@author jasperosy"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "class CommandParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for exiting Oof."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws CommandException if command is invalid."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws ParserException  if command cannot be parsed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    void parse_ByeEntered_ExitOof() throws CommandException, ParserException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertTrue(CommandParser.parse(\"bye\") instanceof ByeCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for listing tasks."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws CommandException if command is invalid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws ParserException  if command cannot be parsed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    void parse_ListEntered_ListTasks() throws CommandException, ParserException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertTrue(CommandParser.parse(\"list\") instanceof ListCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for printing command usage."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws CommandException if command is invalid."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws ParserException  if command cannot be parsed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    void parse_HelpEntered_PrintCommandUsage() throws CommandException, ParserException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertTrue(CommandParser.parse(\"help\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for marking a task as done."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws CommandException if command is invalid."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws ParserException  if command cannot be parsed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    void parse_DoneEnteredWithValidIndex_MarksTaskAsCompleted() throws CommandException, ParserException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertTrue(CommandParser.parse(\"done 2\") instanceof DoneCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for marking a task as done."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    void parse_DoneEnteredWithoutIndex_ThrowException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            CommandParser.parse(\"done\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter a number!\", e.getMessage());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for marking a task as done."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    void parse_DoneEnteredWithNonInteger_ThrowException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            CommandParser.parse(\"done a\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter a valid number!\", e.getMessage());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for adding a todo task."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws CommandException if command is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws ParserException  if command cannot be parsed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    void parse_TodoEnteredWithCorrectFields_AddsTodoTask() throws CommandException, ParserException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertTrue(CommandParser.parse(\"todo borrow book\") instanceof AddToDoCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for adding a deadline."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws CommandException if command is invalid."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws ParserException  if command cannot be parsed."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    void parse_DeadlineEnteredWithCorrectFields_AddsDeadlineTask() throws CommandException, ParserException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertTrue(CommandParser.parse(\"deadline homework /by 11-11-2019 11:11\") instanceof AddDeadlineCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for adding an event."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws CommandException if command is invalid."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws ParserException  if command cannot be parsed."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    void parse_EventEnteredWithCorrectFields_AddsEventTask() throws CommandException, ParserException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertTrue(CommandParser.parse(\"event testing /at 11-11-2019 11:11\") instanceof AddEventCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for deleting a task."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws CommandException if command is invalid."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws ParserException  if command cannot be parsed."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    void parse_DeleteEnteredWithValidIndex_DeletesTask() throws CommandException, ParserException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertTrue(CommandParser.parse(\"delete 1\") instanceof DeleteTaskCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for deleting a task."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    void parse_DeleteEnteredWithoutIndex_ThrowsException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            CommandParser.parse(\"delete\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter a number!\", e.getMessage());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for deleting a task."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    void parse_DeleteEnteredWithNonInteger_ThrowsException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            CommandParser.parse(\"delete a\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter a valid number!\", e.getMessage());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for finding a task."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws CommandException if command is invalid."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws ParserException  if command cannot be parsed."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    void parse_FindEntered_FindTasks() throws CommandException, ParserException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertTrue(CommandParser.parse(\"find\") instanceof FindCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for snoozing a task."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws CommandException if command is invalid."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws ParserException  if command cannot be parsed."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    void parse_SnoozeEnteredWithValidIndex_SnoozesTask() throws CommandException, ParserException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertTrue(CommandParser.parse(\"snooze 1\") instanceof SnoozeCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for snoozing a task."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    void parse_SnoozeEnteredWithoutIndex_ThrowsException() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            CommandParser.parse(\"snooze\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter a valid number!\", e.getMessage());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for snoozing a task."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    void parse_SnoozeEnteredWithNonInteger_ThrowsException() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            CommandParser.parse(\"snooze a\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter a valid number!\", e.getMessage());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for scheduling a task."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws CommandException if command is invalid."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws ParserException  if command cannot be parsed."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    void parse_ScheduleEntered_SchedulesTask() throws CommandException, ParserException {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertTrue(CommandParser.parse(\"schedule 11-11-2019\") instanceof ScheduleCommand);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for recurring a task."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws CommandException if command is invalid."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws ParserException  if command cannot be parsed."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    void parse_RecurringEnteredWithValidParameters() throws CommandException, ParserException {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertTrue(CommandParser.parse(\"recurring 1 1 1\") instanceof RecurringCommand);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for showing the calendar."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws CommandException if command is invalid."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws ParserException  if command cannot be parsed."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    void parse_CalendarEntered_ShowCalendar() throws CommandException, ParserException {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertTrue(CommandParser.parse(\"calendar\") instanceof CalendarCommand);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command to show free time slots."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws CommandException if command is invalid."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws ParserException  if command cannot be parsed."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    void parse_FreeEnteredWithCorrectFields_ShowFreeTimeSlots() throws CommandException, ParserException {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertTrue(CommandParser.parse(\"free 30-10-2019 23:59\") instanceof FreeCommand);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests invalid command."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    void testInvalid() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            CommandParser.parse(\"abcd\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\", e.getMessage());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 18,
      "jasperosy": 257
    }
  },
  {
    "path": "src/test/java/oof/logic/command/DeleteTaskCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "package oof.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.Oof;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.commons.exceptions.ParserException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "public class DeleteTaskCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private Oof oof \u003d new Oof();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private TaskList taskList \u003d oof.getTaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Test behavior when index is invalid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void execute_invalidIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            oof.executeCommand(\"delete 12345\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            assertEquals(\"OOPS!!! Invalid number!\", e.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Test behavior when index is of negative value."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void execute_negativeIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            oof.executeCommand(\"delete -1\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            assertEquals(\"OOPS!!! Invalid number!\", e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Test behavior when index is a String."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void execute_stringIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            oof.executeCommand(\"delete abc\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter a valid number!\", e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Test behavior for deleting Task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @throws CommandException if command in invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @throws ParserException if command cannot be parsed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void execute_correctIndex_deleteTask() throws CommandException, ParserException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        int size \u003d taskList.getSize() - 1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        final Task before \u003d taskList.getTask(size);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        oof.executeCommand(\"todo test /on 06-11-2019\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        size \u003d taskList.getSize();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        oof.executeCommand(\"delete \" + size);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        size \u003d taskList.getSize() - 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        Task after \u003d taskList.getTask(size);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        assertEquals(before, after);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "debbiextan": 75
    }
  },
  {
    "path": "src/test/java/oof/logic/command/DoneCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Oof;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.ParserException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "//@@author Kenlhc"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private Oof oof \u003d new Oof();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Tests the behaviour when an invalid index is given."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    void execute_DoneEnteredWithInvalidIndex_ThrowsException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            oof.executeCommand(\"done 100\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            assertEquals(\"OOPS!!! The index is invalid.\", e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            oof.executeCommand(\"done -1\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            assertEquals(\"OOPS!!! The index is invalid.\", e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            oof.executeCommand(\"done a\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter a valid number!\", e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Tests the behaviour of marking a deadline as done."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws CommandException if command is invalid."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws ParserException  if command cannot be parsed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    void execute_CorrectCommandEntered_MarkDeadlineAsDone() throws CommandException, ParserException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        oof.executeCommand(\"deadline test /by 30-10-2019 23:59\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        TaskList taskList \u003d oof.getTaskList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        int lastIndex \u003d taskList.getSize() - 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Task task \u003d taskList.getTask(lastIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        oof.executeCommand(\"done \" + (lastIndex + 1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        assertTrue(task.getStatus());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        taskList.deleteTask(taskList.getSize() - 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        StorageManager storageManager \u003d oof.getStorageManager();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        storageManager.writeTaskList(taskList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Tests the behaviour of marking a todo as done."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws CommandException if command is invalid."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws ParserException  if command cannot be parsed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    void execute_CorrectCommandEntered_MarkTodoAsDone() throws CommandException, ParserException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        oof.executeCommand(\"todo buy groceries /on 30-10-2019\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        TaskList taskList \u003d oof.getTaskList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        int lastIndex \u003d taskList.getSize() - 1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Task task \u003d taskList.getTask(lastIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        oof.executeCommand(\"done \" + (lastIndex + 1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        assertTrue(task.getStatus());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        taskList.deleteTask(taskList.getSize() - 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        StorageManager storageManager \u003d oof.getStorageManager();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        storageManager.writeTaskList(taskList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Tests the behaviour of marking an event as done."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws CommandException if command is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws ParserException  if command cannot be parsed."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    void execute_CorrectCommandEntered_MarkEventAsDone() throws CommandException, ParserException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        oof.executeCommand(\"event meeting /from 01-11-2019 10:00 /to 01-11-2019 12:00\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        TaskList taskList \u003d oof.getTaskList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        int lastIndex \u003d taskList.getSize() - 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Task task \u003d taskList.getTask(lastIndex);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        oof.executeCommand(\"done \" + (lastIndex + 1));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        assertTrue(task.getStatus());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        taskList.deleteTask(taskList.getSize() - 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        StorageManager storageManager \u003d oof.getStorageManager();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        storageManager.writeTaskList(taskList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 100,
      "KahLokKee": 3
    }
  },
  {
    "path": "src/test/java/oof/logic/command/FreeCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Oof;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.ParserException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "//@@author Kenlhc"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * Testing Class for FreeCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class FreeCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private Oof oof \u003d new Oof();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Tests the behaviour when an invalid date format is given."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    void parse_FreeEnteredWithWrongDateFormat_ThrowsException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            oof.executeCommand(\"free\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            assertEquals(\"OOPS!!! The date is invalid.\", e.getMessage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            oof.executeCommand(\"free 08/11/2019\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } catch (CommandException | ParserException  e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            assertEquals(\"OOPS!!! The date is invalid.\", e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            oof.executeCommand(\"free 08 11 2019\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            assertEquals(\"OOPS!!! The date is invalid.\", e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            oof.executeCommand(\"free 2019-11-08\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            assertEquals(\"OOPS!!! The date is invalid.\", e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Tests the behaviour when a non integer date is given."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    void parse_FreeEnteredWithNonIntegerAsDate_ThrowsException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            oof.executeCommand(\"free abc\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            assertEquals(\"OOPS!!! The date is invalid.\", e.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            oof.executeCommand(\"free aa-bb-cc\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            assertEquals(\"OOPS!!! The date is invalid.\", e.getMessage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Tests the behaviour when negative integer dates are given."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    void parse_FreeEnteredWithNegativeIntegersInDate_ThrowsException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            oof.executeCommand(\"free -1-11-2019\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            assertEquals(\"OOPS!!! The date is invalid.\", e.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Tests the behaviour when dates before the current dates are given."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    void parse_FreeEnteredWithDateBeforeCurrentDate_ThrowsException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            oof.executeCommand(\"free 01-10-2019\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter either today\u0027s date or a date in the future!\", e.getMessage());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 92,
      "KahLokKee": 3
    }
  },
  {
    "path": "src/test/java/oof/logic/command/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "package oof.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "//@@author debbiextan"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.Oof;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.commons.exceptions.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private Oof oof \u003d new Oof();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Tests behavior when keyword is invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void execute_invalidKeyword_exceptionThrown() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            oof.executeCommand(\"help test\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            assertEquals(\"Invalid keyword!\", e.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "debbiextan": 30
    }
  },
  {
    "path": "src/test/java/oof/logic/command/RecurringCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.Oof;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.ParserException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "//@@author jasperosy"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " * Testing class for RecurringCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "class RecurringCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private Oof oof \u003d new Oof();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private TaskList taskList \u003d oof.getTaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the behaviour when an invalid number of parameters are given."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    void parse_RecurringEnteredWithWrongNumberOfParameters_RecursTask() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            oof.executeCommand(\"recurring\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter the right number of arguments!\", e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            oof.executeCommand(\"recurring 1\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter the right number of arguments!\", e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            oof.executeCommand(\"recurring 1 1\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter the right number of arguments!\", e.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            oof.executeCommand(\"recurring 1 1 1 1\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter the right number of arguments!\", e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the behaviour when a non integer index is given."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    void parse_RecurringEnteredWithNonIntegerIndex_RecursTask() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            oof.executeCommand(\"recurring a 1 1\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter valid numbers!\", e.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the behaviour when a non integer recurring count is given."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    void parse_RecurringEnteredWithNonIntegerCount_RecursTask() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            oof.executeCommand(\"recurring 1 a 1\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter valid numbers!\", e.getMessage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the behaviour when a non integer recurring frequency is given."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    void parse_RecurringEnteredWithNonIntegerFrequency_RecursTask() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            oof.executeCommand(\"recurring 1 1 a\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter valid numbers!\", e.getMessage());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the behaviour when an invalid index is given."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    void parse_RecurringEnteredWithInvalidIndex_ThrowsException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            oof.executeCommand(\"recurring -1 1 1\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please select a valid task!\", e.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            oof.executeCommand(\"recurring 0 1 1\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please select a valid task!\", e.getMessage());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            oof.executeCommand(\"recurring 2147483647 1 1\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please select a valid task!\", e.getMessage());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the behaviour when an invalid recurring count is given."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    void parse_RecurringEnteredWithInvalidCount_ThrowsException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            oof.executeCommand(\"recurring 1 -1 1\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter a valid number of recurrences!\", e.getMessage());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            oof.executeCommand(\"recurring 1 11 1\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter a valid number of recurrences!\", e.getMessage());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            oof.executeCommand(\"recurring 1 0 1\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter a valid number of recurrences!\", e.getMessage());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the behaviour when an invalid frequency is given."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    void parse_RecurringEnteredWithInvalidFrequency_ThrowsException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            oof.executeCommand(\"recurring 1 1 -1\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter a valid frequency!\", e.getMessage());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            oof.executeCommand(\"recurring 1 1 0\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter a valid frequency!\", e.getMessage());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            oof.executeCommand(\"recurring 1 1 5\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter a valid frequency!\", e.getMessage());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the behaviour for adding Todo Task."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws CommandException if command is invalid."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws ParserException  if command cannot be parsed."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    void execute_CorrectCommandAndRecurOnce_AddTodo() throws CommandException, ParserException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        oof.executeCommand(\"recurring 1 1 1\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        int lastIndex \u003d taskList.getSize() - 1;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Task task \u003d taskList.getTask(lastIndex);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertEquals(\"[T][N] borrow another book (on: 31-12-2019)\", task.toString());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        oof.executeCommand(\"delete \" + (++lastIndex));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        oof.executeCommand(\"recurring 1 1 2\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        lastIndex \u003d taskList.getSize() - 1;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        task \u003d taskList.getTask(lastIndex);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertEquals(\"[T][N] borrow another book (on: 06-01-2020)\", task.toString());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        oof.executeCommand(\"delete \" + (++lastIndex));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        oof.executeCommand(\"recurring 1 1 3\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        lastIndex \u003d taskList.getSize() - 1;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        task \u003d taskList.getTask(lastIndex);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertEquals(\"[T][N] borrow another book (on: 30-01-2020)\", task.toString());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        oof.executeCommand(\"delete \" + (++lastIndex));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        oof.executeCommand(\"recurring 1 1 4\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        lastIndex \u003d taskList.getSize() - 1;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        task \u003d taskList.getTask(lastIndex);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertEquals(\"[T][N] borrow another book (on: 30-12-2020)\", task.toString());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        oof.executeCommand(\"delete \" + (++lastIndex));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the behaviour for adding Deadline."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws CommandException if command is invalid."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws ParserException  if command cannot be parsed."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    void execute_CorrectCommandAndRecurOnce_AddDeadline() throws CommandException, ParserException {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        oof.executeCommand(\"recurring 2 1 1\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        int lastIndex \u003d taskList.getSize() - 1;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Task task \u003d taskList.getTask(lastIndex);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertEquals(\"[D][N] homework (by: 14-10-2019 23:59)\", task.toString());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        oof.executeCommand(\"delete \" + (++lastIndex));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        oof.executeCommand(\"recurring 2 1 2\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        lastIndex \u003d taskList.getSize() - 1;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        task \u003d taskList.getTask(lastIndex);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertEquals(\"[D][N] homework (by: 20-10-2019 23:59)\", task.toString());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        oof.executeCommand(\"delete \" + (++lastIndex));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        oof.executeCommand(\"recurring 2 1 3\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        lastIndex \u003d taskList.getSize() - 1;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        task \u003d taskList.getTask(lastIndex);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertEquals(\"[D][N] homework (by: 13-11-2019 23:59)\", task.toString());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        oof.executeCommand(\"delete \" + (++lastIndex));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        oof.executeCommand(\"recurring 2 1 4\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        lastIndex \u003d taskList.getSize() - 1;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        task \u003d taskList.getTask(lastIndex);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertEquals(\"[D][N] homework (by: 13-10-2020 23:59)\", task.toString());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        oof.executeCommand(\"delete \" + (++lastIndex));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the behaviour for adding Deadline."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws CommandException if command is invalid."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws ParserException  if command cannot be parsed."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    void execute_CorrectCommandAndRecurOnce_AddEvent() throws CommandException, ParserException {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        oof.executeCommand(\"recurring 3 1 1\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        int lastIndex \u003d taskList.getSize() - 1;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Task task \u003d taskList.getTask(lastIndex);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertEquals(\"[E][N] lecture (from: 09-10-2019 10:00 to: 09-10-2019 12:00)\", task.toString());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        oof.executeCommand(\"delete \" + (++lastIndex));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        oof.executeCommand(\"recurring 3 1 2\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        lastIndex \u003d taskList.getSize() - 1;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        task \u003d taskList.getTask(lastIndex);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertEquals(\"[E][N] lecture (from: 15-10-2019 10:00 to: 15-10-2019 12:00)\", task.toString());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        oof.executeCommand(\"delete \" + (++lastIndex));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        oof.executeCommand(\"recurring 3 1 3\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        lastIndex \u003d taskList.getSize() - 1;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        task \u003d taskList.getTask(lastIndex);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertEquals(\"[E][N] lecture (from: 08-11-2019 10:00 to: 08-11-2019 12:00)\", task.toString());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        oof.executeCommand(\"delete \" + (++lastIndex));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        oof.executeCommand(\"recurring 3 1 4\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        lastIndex \u003d taskList.getSize() - 1;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        task \u003d taskList.getTask(lastIndex);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertEquals(\"[E][N] lecture (from: 08-10-2020 10:00 to: 08-10-2020 12:00)\", task.toString());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        oof.executeCommand(\"delete \" + (++lastIndex));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the behaviour for adding more than one recurring tasks."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws CommandException if command is invalid."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws ParserException  if command cannot be parsed."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    void execute_CorrectCommandAndRecurMoreThanOnce_AddTasks() throws Exception {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        oof.executeCommand(\"recurring 1 2 1\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        int lastIndex \u003d taskList.getSize() - 1;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Task task \u003d taskList.getTask(lastIndex);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertEquals(\"[T][N] borrow another book (on: 01-01-2020)\", task.toString());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        oof.executeCommand(\"delete \" + (++lastIndex));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        lastIndex \u003d taskList.getSize() - 1;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        task \u003d taskList.getTask(lastIndex);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertEquals(\"[T][N] borrow another book (on: 31-12-2019)\", task.toString());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        oof.executeCommand(\"delete \" + (++lastIndex));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 9,
      "jasperosy": 269
    }
  },
  {
    "path": "src/test/java/oof/logic/command/ScheduleCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "package oof.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.Oof;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.commons.exceptions.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "//@@author debbiextan"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "public class ScheduleCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private Oof oof \u003d new Oof();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private TaskList taskList \u003d oof.getTaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Tests behavior when no date is given."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void execute_dateEmpty_exceptionThrown() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            oof.executeCommand(\"schedule\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            assertEquals(\"OOPS! Please enter a date!\", e.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Tests behavior of displaying schedule by date when there are no tasks for that date."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void execute_noTasksOnDate_exceptionThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        String date \u003d \"01-01-2018\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            oof.executeCommand(\"schedule \" + date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            String message \u003d \"There are no Tasks scheduled on \" + date + \".\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            assertEquals(message, e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "debbiextan": 45
    }
  },
  {
    "path": "src/test/java/oof/logic/command/ThresholdCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Oof;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.ParserException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "//@@author Kenlhc"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * Testing Class for ThresholdCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class ThresholdCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private Oof oof \u003d new Oof();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Tests the behaviour when an invalid format is given."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    void parse_ThresholdEnteredWithWrongFormat_ThrowsException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            oof.executeCommand(\"threshold\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter a number!\", e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            oof.executeCommand(\"threshold 10:00\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter a valid number!\", e.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            oof.executeCommand(\"threshold 48/2\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter a valid number!\", e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Tests the behaviour when a non integer is given."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    void parse_ThresholdEnteredWithNonInteger_ThrowsException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            oof.executeCommand(\"threshold aa\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter a valid number!\", e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Tests the behaviour when a negative integer is given."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    void parse_ThresholdEnteredWithNegativeInteger_ThrowsException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            oof.executeCommand(\"threshold -10\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            assertEquals(\"Threshold given invalid! Please input positive integers.\", e.getMessage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Tests the behaviour for updating threshold."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws CommandException if command is invalid."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws ParserException  if command cannot be parsed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    void execute_CorrectCommand_WriteThreshold() throws CommandException, ParserException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        ByteArrayOutputStream actualMessagePrinted \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        System.setOut(new PrintStream(actualMessagePrinted));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        oof.executeCommand(\"threshold 48\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String expectedMessage \u003d \"________________________________________________________________________________\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                + System.lineSeparator() + \" You will now be reminded of deadlines in 48 hours.\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        assertEquals(expectedMessage, actualMessagePrinted.toString().trim());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 86,
      "KahLokKee": 3
    }
  },
  {
    "path": "src/test/java/oof/logic/command/TrackerCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "package oof.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.Oof;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.commons.exceptions.ParserException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.commons.exceptions.StorageFileCorruptedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.model.tracker.Tracker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "//@@author debbiextan"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "public class TrackerCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private Oof oof \u003d new Oof();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private TaskList taskList \u003d oof.getTaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Test behavior when tracker instruction not given."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void execute_emptyDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            oof.executeCommand(\"tracker\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            assertEquals(\"Please enter your instructions!\", e.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Test behavior when tracker instruction is invalid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void execute_invalidDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            oof.executeCommand(\"tracker /test \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            assertEquals(\"Please enter the correct number of arguments!\", e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Test behavior when tracker view period is empty."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void execute_emptyPeriod_exceptionThrown() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            oof.executeCommand(\"tracker /view\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            assertEquals(\"Invalid Commmand!\", e.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Test behavior when tracker view period is invalid."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void execute_stringPeriod_exceptionThrown() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            oof.executeCommand(\"tracker /view abc\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            assertEquals(\"Invalid Period!\", e.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Test behavior when tracker view period is an integer."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void execute_integerPeriod_exceptionThrown() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            oof.executeCommand(\"tracker /view 12\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            assertEquals(\"Invalid Period!\", e.getMessage());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * test behavior when an invalid task index is given."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void execute_invalidTaskIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            oof.executeCommand(\"tracker /start 12345 CS2113T\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            assertEquals(\"Invalid Task Index!\", e.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Test behavior when tracker tries to stop without starting."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @throws CommandException if Command is invalid."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @throws ParserException if Command cannot be parsed."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void execute_stopTimerWithoutStarting_exceptionThrown() throws CommandException, ParserException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            oof.executeCommand(\"todo stop without start /on 05-11-2019\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            int recent \u003d taskList.getSize();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            String command \u003d \"tracker /stop \" + recent + \" CS2113T\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            oof.executeCommand(command);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            assertEquals(\"Tracker for this Assignment has not started.\", e.getMessage());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        int index \u003d taskList.getSize();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        oof.executeCommand(\"delete \" + index);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Test behavior when tracker tries to pause without starting."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @throws CommandException if Command is invalid."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @throws ParserException if Command cannot be parsed."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void execute_pauseTimerWithoutStarting_exceptionThrown() throws CommandException, ParserException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            oof.executeCommand(\"todo pause test /on 05-11-2019\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            int recent \u003d taskList.getSize();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            String command \u003d \"tracker /pause \" + recent + \" CS2113T\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            oof.executeCommand(command);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            assertEquals(\"Tracker for this Assignment has not started.\", e.getMessage());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        int index \u003d taskList.getSize();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        oof.executeCommand(\"delete \" + index);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Test behavior when tracker tries to start a task tracker that has already been stopped and completed."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @throws CommandException if Command is invalid."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @throws ParserException if Command cannot be parsed."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void execute_startTimerThatHasStopped_exceptionThrown() throws CommandException, ParserException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            oof.executeCommand(\"todo start stopped timer /on 06-11-2019\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            int recent \u003d taskList.getSize();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            oof.executeCommand(\"done \" + recent);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            String command \u003d \"tracker /start \" + recent + \" CS2113T\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            oof.executeCommand(command);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            assertEquals(\"Task has already been completed.\", e.getMessage());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        int index \u003d taskList.getSize();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        oof.executeCommand(\"delete \" + index);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Test behavior when tracker tries to start/stop/pause a task description"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * that does not match the previous start entry."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @throws CommandException if Command is invalid."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @throws ParserException if Command cannot be parsed."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @throws StorageFileCorruptedException if tracker.csv cannot be read."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void execute_taskDescriptionsNotMatched_exceptionThrown() throws CommandException,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            ParserException, StorageFileCorruptedException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            oof.executeCommand(\"todo description /on 06-11-2019\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            oof.executeCommand(\"todo desc /on 07-11-2019\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            int index \u003d taskList.getSize() - 1;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            String command \u003d \"tracker /start \" + index + \" CS2113T\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            oof.executeCommand(command);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            oof.executeCommand(\"delete \" + index);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            command \u003d \"tracker /start \" + index + \" CS2113T\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            oof.executeCommand(command);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            assertEquals(\"Task descriptions do not match!\", e.getMessage());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        int index \u003d taskList.getSize();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        oof.executeCommand(\"delete \" + index);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        ArrayList\u003cTracker\u003e trackerList \u003d oof.getStorageManager().readTrackerList();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        int trackerIndex \u003d trackerList.size();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        oof.executeCommand(\"tracker /delete \" + trackerIndex);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Test behavior for starting a Tracker."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @throws CommandException if command is invalid."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @throws ParserException if command cannot be parsed."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @throws StorageFileCorruptedException if tracker.csv cannot be processed."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void execute_correctStartTracker_startTracker() throws CommandException,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            ParserException, StorageFileCorruptedException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        oof.executeCommand(\"todo start tracker /on 06-11-2019\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        int recent \u003d taskList.getSize();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        String command \u003d \"tracker /start \" + recent + \" CS2113T\";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        oof.executeCommand(command);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        StorageManager storageManager \u003d oof.getStorageManager();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        ArrayList\u003cTracker\u003e entries \u003d storageManager.readTrackerList();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        int lastEntry \u003d entries.size() - 1;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        Tracker tracker \u003d entries.get(lastEntry);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        String date \u003d simpleDateFormat.format(new Date());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        String lastUpdated \u003d simpleDateFormat.format(tracker.getLastUpdated());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        assertEquals(date, lastUpdated);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        oof.executeCommand(\"tracker /stop \" + recent + \" CS2113T\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        oof.executeCommand(\"delete \" + recent);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        ArrayList\u003cTracker\u003e trackerList \u003d oof.getStorageManager().readTrackerList();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        int trackerIndex \u003d trackerList.size();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        oof.executeCommand(\"tracker /delete \" + trackerIndex);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Test behavior for pausing a Tracker."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @throws CommandException if command is invalid."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @throws ParserException if command cannot be parsed."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @throws StorageFileCorruptedException if tracker.csv cannot be processed."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void execute_correctPauseTracker_pauseTracker() throws CommandException,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            ParserException, StorageFileCorruptedException {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        oof.executeCommand(\"todo pause tracker /on 06-11-2019\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        int recent \u003d taskList.getSize();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        String command \u003d \"tracker /start \" + recent + \" CS2113T\";"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        oof.executeCommand(command);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        command \u003d \"tracker /pause \" + recent + \" CS2113T\";"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        oof.executeCommand(command);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        StorageManager storageManager \u003d oof.getStorageManager();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        ArrayList\u003cTracker\u003e entries \u003d storageManager.readTrackerList();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        int lastEntry \u003d entries.size() - 1;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        Tracker tracker \u003d entries.get(lastEntry);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        String date \u003d simpleDateFormat.format(new Date());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        assertEquals(date, simpleDateFormat.format(tracker.getLastUpdated()));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        assertNull(tracker.getStartDate());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        oof.executeCommand(\"delete \" + recent);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        ArrayList\u003cTracker\u003e trackerList \u003d oof.getStorageManager().readTrackerList();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        int trackerIndex \u003d trackerList.size();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        oof.executeCommand(\"tracker /delete \" + trackerIndex);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Test behavior for stopping a Tracker."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @throws CommandException if command is invalid."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @throws ParserException if command cannot be parsed."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @throws StorageFileCorruptedException if tracker.csv cannot be processed."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void execute_correctStopTracker_stopTracker() throws CommandException,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            ParserException, StorageFileCorruptedException {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        oof.executeCommand(\"todo stop tracker /on 06-11-2019\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        int recent \u003d taskList.getSize();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        String command \u003d \"tracker /start \" + recent + \" CS2113T\";"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        oof.executeCommand(command);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        command \u003d \"tracker /stop \" + recent + \" CS2113T\";"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        oof.executeCommand(command);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        StorageManager storageManager \u003d oof.getStorageManager();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        ArrayList\u003cTracker\u003e entries \u003d storageManager.readTrackerList();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        int lastEntry \u003d entries.size() - 1;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        Tracker tracker \u003d entries.get(lastEntry);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        String date \u003d simpleDateFormat.format(new Date());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        assertEquals(date, simpleDateFormat.format(tracker.getLastUpdated()));"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        assertNull(tracker.getStartDate());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        int index \u003d tracker.getTaskIndex();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        Task task \u003d taskList.getTask(index);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        assertTrue(task.getStatus());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        oof.executeCommand(\"delete \" + recent);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        ArrayList\u003cTracker\u003e trackerList \u003d oof.getStorageManager().readTrackerList();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        int trackerIndex \u003d trackerList.size();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        oof.executeCommand(\"tracker /delete \" + trackerIndex);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "debbiextan": 302
    }
  },
  {
    "path": "src/test/java/oof/logic/command/semester/AddSemesterCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.semester;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.Oof;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.ParserException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Semester;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "//@@author KahLokKee"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class AddSemesterCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_MissingYearArgument_ThrowsException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            new Oof().executeCommand(\"semester /add  /name Semester 2 /from 05-01-2020 /to 05-05-2020\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            assertEquals(\"OOPS!! The semester needs a year.\", e.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_MissingNameArgument_ThrowsException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            new Oof().executeCommand(\"semester /add 19/20 /name /from 05-01-2020 /to 05-05-2020\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            assertEquals(\"OOPS!! The semester needs a name.\", e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_MissingStartDateArgument_ThrowsException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            new Oof().executeCommand(\"semester /add 19/20 /name Semester 2 /from /to 05-05-2020\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            assertEquals(\"OOPS!! The semester needs a start date.\", e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_MissingEndDateArgument_ThrowsException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            new Oof().executeCommand(\"semester /add 19/20 /name Semester 2 /from 05-01-2020 /to \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            assertEquals(\"OOPS!! The semester needs an end date.\", e.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_StartDateAfterEndDate_ThrowsException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            new Oof().executeCommand(\"semester /add 19/20 /name Semester 2 /from 05-05-2020 /to 05-01-2020\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            assertEquals(\"OOPS!! The start date of a semester cannot be after the end date.\", e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_InvalidStartDate_ThrowsException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            new Oof().executeCommand(\"semester /add 19/20 /name Semester 2 /from a /to 05-01-2020\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            assertEquals(\"OOPS!! The date is invalid.\", e.getMessage());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_InvalidEndDate_ThrowsException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            new Oof().executeCommand(\"semester /add 19/20 /name Semester 2 /from 05-01-2020 /to a\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            assertEquals(\"OOPS!! The date is invalid.\", e.getMessage());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_ClashWithOtherSemesters_ThrowsException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            new Oof().executeCommand(\"semester /add 19/20 /name Semester 2 /from 05-08-2019 /to 05-12-2019\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            assertEquals(\"OOPS!! The semester clashes with another semester.\", e.getMessage());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_DescriptionExceedsMaxLength_ThrowsException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            new Oof().executeCommand(\"semester /add 19/20 /name xiwangniyihoubuhuihouweimeixuanzewo\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    + \"yexiangxingniyougenhaodeshenghuowohuizaixinlimomodeweinierzhizhuobijingwomenyecengshenaiguo\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    + \" /from 05-01-2020 /to 05-05-2020\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            assertEquals(\"OOPS!!! Semester Name exceeds maximum length of 100!\", e.getMessage());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_ClashWithExistingSemester_ThrowsException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            new Oof().executeCommand(\"semester /add 19/20 /name Semester 2 /from 05-01-2020 /to a\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            assertEquals(\"OOPS!! The date is invalid.\", e.getMessage());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_CorrectCommandEntered_AddSemester() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        new Oof().executeCommand(\"semester /add 19/20 /name Semester 2 /from 05-01-2020 /to 05-05-2020\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        SemesterList semesterList \u003d new Oof().getSemesterList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Semester semester \u003d semesterList.getSemester(semesterList.getSize() - 1);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        assertEquals(\"Academic Year 19/20, Semester 2 (05-01-2020 to 05-05-2020)\", semester.toString());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        new Oof().executeCommand(\"semester /delete \" + (semesterList.getSize()));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 152
    }
  },
  {
    "path": "src/test/java/oof/logic/command/semester/DeleteSemesterCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.semester;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.Oof;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.ParserException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Semester;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class DeleteSemesterCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_InvalidIndex_ExceptionThrown() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            new Oof().executeCommand(\"semester /delete -1\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            assertEquals(\"OOPS!!! The index is invalid.\", e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_CorrectCommandEntered_DeleteSemester() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Oof oof \u003d new Oof();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        SemesterList semesterList \u003d oof.getSemesterList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Semester originalLastSemester \u003d semesterList.getSemester(semesterList.getSize() - 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        oof.executeCommand(\"semester /add 19/20 /name Semester 2 /from 05-01-2020 /to 05-05-2020\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        oof.executeCommand(\"semester /delete \" + (semesterList.getSize()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Semester newLastSemester \u003d semesterList.getSemester(semesterList.getSize() - 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        assertEquals(originalLastSemester, newLastSemester);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 42
    }
  },
  {
    "path": "src/test/java/oof/logic/command/semester/SelectSemesterCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.semester;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.Oof;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.ParserException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class SelectSemesterCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_InvalidIndexArgument_ExceptionThrown() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            new Oof().executeCommand(\"semester /select -1\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            assertEquals(\"OOPS!! The index is invalid.\", e.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 27
    }
  },
  {
    "path": "src/test/java/oof/logic/command/semester/ViewAllSemesterCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.semester;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SemesterList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class ViewAllSemesterCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_EmptySemesterList_ExceptionThrown() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        SemesterList semesterList \u003d new SemesterList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ViewAllSemesterCommand viewAllSemesterCommand \u003d new ViewAllSemesterCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            viewAllSemesterCommand.execute(semesterList, taskList, ui, storageManager);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            assertEquals(\"Semester list is empty!\", e.getMessage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 32
    }
  },
  {
    "path": "src/test/java/oof/logic/command/semester/ViewSelectedSemesterCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.semester;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.Oof;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.ParserException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.SelectedInstance;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.university.Semester;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class ViewSelectedSemesterCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Tests the behaviour when semester is not selected."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_SemesterNotSelected_ThrowsException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            SelectedInstance selectedInstance \u003d SelectedInstance.getInstance();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            selectedInstance.resetSemester();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            new Oof().executeCommand(\"semester\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            assertEquals(\"OOPS!! No semester selected.\", e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Tests the behaviour when semester is selected."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_SemesterSelected_ThrowsException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        new Oof().executeCommand(\"semester /select 1\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ByteArrayOutputStream actualMessagePrinted \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.setOut(new PrintStream(actualMessagePrinted));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        new Oof().executeCommand(\"semester\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        actualMessagePrinted.close();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        SelectedInstance selectedInstance \u003d SelectedInstance.getInstance();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Semester semester \u003d selectedInstance.getSemester();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String expectedMessage \u003d \"________________________________________________________________________________\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + System.lineSeparator() + \" Currently Selected: \" + semester.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        assertEquals(expectedMessage, actualMessagePrinted.toString().trim());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 55
    }
  },
  {
    "path": "src/test/java/oof/logic/command/task/AddDeadlineCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.Oof;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.ParserException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "//@@author KahLokKee"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class AddDeadlineCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Tests the behaviour when description of deadline is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_DescriptionNotFound_ThrowsException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            new Oof().executeCommand(\"deadline\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            assertEquals(\"OOPS!!! The deadline needs a description.\", e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Tests the behaviour when due date of deadline is not found."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_DueDateNotFound_ThrowsException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            new Oof().executeCommand(\"deadline lab\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            assertEquals(\"OOPS!!! The deadline needs a due date.\", e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Tests the behaviour when due date of deadline is invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_DueDateInvalid_ThrowsException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            new Oof().executeCommand(\"deadline lab /by a\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            assertEquals(\"OOPS!!! The due date is invalid.\", e.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Tests the behaviour when the description is too long."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_DescriptionExceedsMaxLength_ThrowsException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            new Oof().executeCommand(\"deadline abcdefghijklmnopqrstuvwxyz /by 11-11-2020 23:59\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            assertEquals(\"OOPS!!! Task description exceeds maximum length of 20!\", e.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Tests the behaviour of adding a deadline task."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws CommandException if command given is invalid."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws ParserException if command arguments cannot be parsed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_CorrectCommandEntered_AddDeadline() throws CommandException, ParserException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Oof oof \u003d new Oof();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        oof.executeCommand(\"deadline lab /by 29-10-2019 23:59\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        TaskList taskList \u003d oof.getTaskList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Task task \u003d taskList.getTask(taskList.getSize() - 1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        assertEquals(\"[D][N] lab (by: 29-10-2019 23:59)\", task.toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        taskList.deleteTask(taskList.getSize() - 1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        StorageManager storageManager \u003d oof.getStorageManager();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        storageManager.writeTaskList(taskList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 102
    }
  },
  {
    "path": "src/test/java/oof/logic/command/task/AddEventCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.Oof;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.ParserException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "//@@author KahLokKee"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class AddEventCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Tests the behaviour when description of event is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_DescriptionNotFound_ThrowsException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            new Oof().executeCommand(\"event\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            assertEquals(\"OOPS!!! The event needs a description.\", e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Tests the behaviour when description of event exceeds max length."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_DescriptionExceedsMaxLength_ThrowsException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            new Oof().executeCommand(\"event iwontbesilencedyoucantkeepmequietwonttremblewhenyoutryit \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    + \"/from 31-12-2019 20:00 /to 31-12-2019 21:00\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            assertEquals(\"OOPS!!! Task description exceeds maximum length of 20!\", e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_StartDateAfterEndDate_ThrowsException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            new Oof().executeCommand(\"event a /from 31-12-2019 22:00 /to 31-12-2019 21:00\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            assertEquals(\"OOPS!!! The start date cannot be after the end date.\", e.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Tests the behaviour when start date of an event is not found."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_StartDateNotFound_ThrowsException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            new Oof().executeCommand(\"event dinner\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            assertEquals(\"OOPS!!! The event needs a start date.\", e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Tests the behaviour when end date of an event is not found."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_EndDateNotFound_ThrowsException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            new Oof().executeCommand(\"event dinner /from 29-10-2019 18:00\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            assertEquals(\"OOPS!!! The event needs an end date.\", e.getMessage());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Tests the behaviour when start date of an event is invalid."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_InvalidStartDate_ThrowsException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            new Oof().executeCommand(\"event dinner /from a /to 02-10-2019 18:00\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            assertEquals(\"OOPS!!! The start date is invalid.\", e.getMessage());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Tests the behaviour when end date of an event is invalid."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_InvalidEndDate_ThrowsException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            new Oof().executeCommand(\"event dinner /from 02-10-2019 18:00 /to a\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            assertEquals(\"OOPS!!! The end date is invalid.\", e.getMessage());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Tests the behaviour of adding an event task."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws CommandException if command given is invalid."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws ParserException  if command cannot be parsed."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_CorrectCommandEnteredWithClash_AddEventWithWarningMessage() throws CommandException,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ParserException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Oof oof \u003d new Oof();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        oof.executeCommand(\"event date /from 29-10-2019 18:00 /to 29-10-2019 23:00\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        TaskList taskList \u003d oof.getTaskList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Task task \u003d taskList.getTask(taskList.getSize() - 1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        assertEquals(\"[E][N] date (from: 29-10-2019 18:00 to: 29-10-2019 23:00)\", task.toString());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        taskList.deleteTask(taskList.getSize() - 1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        StorageManager storageManager \u003d oof.getStorageManager();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        storageManager.writeTaskList(taskList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Tests the behaviour of adding an event task."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws CommandException if command given is invalid."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws ParserException  if command cannot be parsed."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_CorrectCommandEntered_AddEvent() throws CommandException, ParserException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Oof oof \u003d new Oof();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        oof.executeCommand(\"event date /from 29-10-2019 18:00 /to 29-10-2019 23:00\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        TaskList taskList \u003d oof.getTaskList();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Task task \u003d taskList.getTask(taskList.getSize() - 1);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        assertEquals(\"[E][N] date (from: 29-10-2019 18:00 to: 29-10-2019 23:00)\", task.toString());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        taskList.deleteTask(taskList.getSize() - 1);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        StorageManager storageManager \u003d oof.getStorageManager();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        storageManager.writeTaskList(taskList);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 165
    }
  },
  {
    "path": "src/test/java/oof/logic/command/task/AddToDoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.logic.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.Oof;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.command.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.commons.exceptions.ParserException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.storage.StorageManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "//@@author KahLokKee"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class AddToDoCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Tests the behaviour when description of todo is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_DescriptionNotFound_ThrowsException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            new Oof().executeCommand(\"todo\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            assertEquals(\"OOPS!!! The todo needs a description.\", e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Tests the behaviour when date of todo is not found."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_DateNotFound_ThrowsException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            new Oof().executeCommand(\"todo buy groceries\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            assertEquals(\"OOPS!!! The todo needs a date.\", e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Tests the behaviour when date of a todo is invalid."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_InvalidDate_ThrowsException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            new Oof().executeCommand(\"todo buy groceries /on a\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            assertEquals(\"OOPS!!! The date is invalid.\", e.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Tests the behaviour when description of todo exceeds max length."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_DescriptionExceedsMaxLength_ThrowsException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            new Oof().executeCommand(\"todo imonlyonecallawayillbetheretosavetheday /on 31-12-2019\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (CommandException | ParserException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            assertEquals(\"OOPS!!! Task description exceeds maximum length of 20!\", e.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Tests the behaviour of adding a todo task."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws CommandException if command given is invalid."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws ParserException if command cannot be parsed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute_CorrectCommandEntered_AddToDo() throws CommandException, ParserException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Oof oof \u003d new Oof();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        oof.executeCommand(\"todo buy groceries /on 29-10-2019\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        TaskList taskList \u003d oof.getTaskList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Task task \u003d taskList.getTask(taskList.getSize() - 1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        assertEquals(\"[T][N] buy groceries (on: 29-10-2019)\", task.toString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        taskList.deleteTask(taskList.getSize() - 1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        StorageManager storageManager \u003d oof.getStorageManager();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        storageManager.writeTaskList(taskList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 100
    }
  }
]
