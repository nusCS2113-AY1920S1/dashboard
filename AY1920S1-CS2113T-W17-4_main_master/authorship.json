[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "group \u0027seedu.oof\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    mainClassName \u003d \"oof.Oof\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    archiveBaseName \u003d \"\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    archiveVersion \u003d \"v1.3\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation(\u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntime(\u0027org.junit.jupiter:junit-jupiter-engine:5.5.0\u0027)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasperosy": 18,
      "-": 39
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "rootProject.name \u003d \u0027oof\u0027"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 1
    }
  },
  {
    "path": "src/main/java/oof/CommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "package oof;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.command.AddAssessmentCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.command.AddAssignmentCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.command.AddDeadlineCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.command.AddEventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.command.AddLessonCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.command.AddModuleCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.command.AddSemesterCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.command.AddToDoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.command.CalendarCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.command.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.command.CompleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.command.DeleteAssessmentCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.command.DeleteAssignmentCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.command.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.command.DeleteLessonCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.command.DeleteModuleCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.command.DeleteSemesterCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.command.ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.command.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.command.FreeCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.command.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.command.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.command.RecurringCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.command.ScheduleCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.command.SnoozeCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.command.StartTrackerCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.command.StopTrackerCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.command.SummaryCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.command.ThresholdCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.command.ViewAssessmentCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.command.ViewAssignmentCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.command.ViewLessonCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.command.ViewModuleCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.command.ViewSemesterCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.command.ViewWeekCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.util.InputMismatchException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " * Represents a parser to process the commands inputted by the user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int LENGTH_COMMAND_ONLY \u003d 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int LENGTH_COMMAND_AND_TASK \u003d 2;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_ARGUMENT_COMMAND \u003d 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_ARGUMENT_TASK_NUMBER \u003d 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_ARGUMENT_COUNT \u003d 2;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int INDEX_TASK_TYPE \u003d 1;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Parses the input given by user and calls specific Commands"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * after checking the validity of the input."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param line Command inputted by user."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return Command based on the user input."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws OofException Catches invalid commands given by user."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public static Command parse(String line) throws OofException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String[] argumentArray \u003d line.split(\" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        switch (argumentArray[INDEX_ARGUMENT_COMMAND]) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            line \u003d line.replaceFirst(\"help\", \"\").trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            return new HelpCommand(line);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            return parseDone(argumentArray, line);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            line \u003d line.replaceFirst(\"todo\", \"\").trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            return new AddToDoCommand(line);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            line \u003d line.replaceFirst(\"deadline\", \"\").trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            return new AddDeadlineCommand(line);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            line \u003d line.replaceFirst(\"event\", \"\").trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            return new AddEventCommand(line);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            return parseDelete(argumentArray, line);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            return new FindCommand(line);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        case \"snooze\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            return parseSnooze(argumentArray, line);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        case \"schedule\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            line \u003d line.replaceFirst(\"schedule\", \"\").trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            return new ScheduleCommand(line);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        case \"summary\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            return new SummaryCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        case \"recurring\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            return parseRecurring(argumentArray);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        case \"calendar\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            return new CalendarCommand(argumentArray);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        case \"viewweek\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            return new ViewWeekCommand(argumentArray);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        case \"free\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            line \u003d line.replaceFirst(\"free\", \"\").trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            return new FreeCommand(line);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        case \"start\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            line \u003d line.replaceFirst(\"start\", \"\").trim();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            return new StartTrackerCommand(line);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        case \"stop\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            line \u003d line.replaceFirst(\"stop\", \"\").trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            return new StopTrackerCommand(line);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        case \"threshold\":"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            line \u003d line.replaceFirst(\"threshold\", \"\").trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            return new ThresholdCommand(line);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        case \"semester\":"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            return parseSemester(argumentArray, line);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        case \"module\":"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            return parseModule(argumentArray, line);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        case \"lesson\":"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            return parseLesson(argumentArray, line);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        case \"assignment\":"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            return parseAssignment(argumentArray, line);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        case \"assessment\":"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            return parseAssessment(argumentArray, line);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            throw new OofException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Parses input if the user input starts with done."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param argumentArray Command inputted by user in string array format."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param line Command inputted by user in string format."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return Returns an instance of CompleteCommand if the parameters are valid."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws OofException Throws exception if the parameters are invalid."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static Command parseDone(String[] argumentArray, String line) throws OofException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (argumentArray.length \u003d\u003d LENGTH_COMMAND_ONLY) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new OofException(\"OOPS!!! Please enter a number!\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            int completeIndex \u003d Integer.parseInt(line.replaceFirst(\"done\", \"\").trim()) - 1;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            return new CompleteCommand(completeIndex);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            throw new OofException(\"OOPS!!! Please enter a valid number!\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Parses input if the user input starts with delete."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param argumentArray Command inputted by user in string array format."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param line Command inputted by user in string format."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return Returns an instance of DeleteCommand if the parameters are valid."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws OofException Throws exception if the parameters are invalid."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static Command parseDelete(String[] argumentArray, String line) throws OofException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (argumentArray.length \u003d\u003d LENGTH_COMMAND_ONLY) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            throw new OofException(\"OOPS!!! Please enter a number!\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else if (argumentArray.length \u003d\u003d LENGTH_COMMAND_AND_TASK) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                int deleteIndex \u003d Integer.parseInt(line.replaceFirst(\"delete\", \"\").trim()) - 1;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                return new DeleteCommand(deleteIndex);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                throw new OofException(\"OOPS!!! Please enter a valid number!\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new OofException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Parses input if the user input starts with semester."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param argumentArray Command inputted by user in string array format."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param line Command inputted by user in string format."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return Returns relevant Semester Commands if the parameters are valid."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws OofException Throws exception if the parameters are invalid."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static Command parseSemester(String[] argumentArray, String line) throws OofException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (argumentArray.length \u003d\u003d LENGTH_COMMAND_ONLY) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            return new ViewSemesterCommand();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            if (argumentArray[INDEX_TASK_TYPE].equals(\"add\")) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                line \u003d line.replaceFirst(\"semester add\", \"\").trim();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                return new AddSemesterCommand(line);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            } else if (argumentArray[INDEX_TASK_TYPE].equals(\"delete\")) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    int deleteIndex \u003d Integer.parseInt(line.replaceFirst(\"semester delete\", \"\")"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                            .trim()) - 1;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    return new DeleteSemesterCommand(deleteIndex);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    throw new OofException(\"OOPS!!! Please enter a valid number!\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                throw new OofException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Parses input if the user input starts with module."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param argumentArray Command inputted by user in string array format."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param line Command inputted by user in string format."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return Returns relevant Module Commands if the parameters are valid."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws OofException Throws exception if the parameters are invalid."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static Command parseModule(String[] argumentArray, String line) throws OofException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (argumentArray.length \u003d\u003d LENGTH_COMMAND_ONLY) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            return new ViewModuleCommand();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            if (argumentArray[INDEX_TASK_TYPE].equals(\"add\")) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                line \u003d line.replaceFirst(\"module add\", \"\").trim();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                return new AddModuleCommand(line);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            } else if (argumentArray[INDEX_TASK_TYPE].equals(\"delete\")) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    int deleteIndex \u003d Integer.parseInt(line.replaceFirst(\"module delete\", \"\")"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                            .trim()) - 1;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    return new DeleteModuleCommand(deleteIndex);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    throw new OofException(\"OOPS!!! Please enter a valid number!\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                throw new OofException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Parses input if the user input starts with lesson."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param argumentArray Command inputted by user in string array format."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param line Command inputted by user in string format."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return Returns relevant Lesson Commands if the parameters are valid."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws OofException Throws exception if the parameters are invalid."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static Command parseLesson(String[] argumentArray, String line) throws OofException {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (argumentArray.length \u003d\u003d LENGTH_COMMAND_ONLY) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            return new ViewLessonCommand();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            if (argumentArray[INDEX_TASK_TYPE].equals(\"add\")) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                line \u003d line.replaceFirst(\"lesson add\", \"\").trim();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                return new AddLessonCommand(line);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            } else if (argumentArray[INDEX_TASK_TYPE].equals(\"delete\")) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    int deleteIndex \u003d Integer.parseInt(line.replaceFirst(\"lesson delete\", \"\")"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                            .trim()) - 1;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    return new DeleteLessonCommand(deleteIndex);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    throw new OofException(\"OOPS!!! Please enter a valid number!\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                throw new OofException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Parses input if the user input starts with assignment."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param argumentArray Command inputted by user in string array format."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param line Command inputted by user in string format."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return Returns relevant Assignment Commands if the parameters are valid."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws OofException Throws exception if the parameters are invalid."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static Command parseAssignment(String[] argumentArray, String line) throws OofException {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (argumentArray.length \u003d\u003d LENGTH_COMMAND_ONLY) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            return new ViewAssignmentCommand();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            if (argumentArray[INDEX_TASK_TYPE].equals(\"add\")) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                line \u003d line.replaceFirst(\"assignment add\", \"\").trim();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                return new AddAssignmentCommand(line);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            } else if (argumentArray[INDEX_TASK_TYPE].equals(\"delete\")) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    int deleteIndex \u003d Integer.parseInt(line.replaceFirst(\"assignment delete\", \"\")"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                            .trim()) - 1;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    return new DeleteAssignmentCommand(deleteIndex);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    throw new OofException(\"OOPS!!! Please enter a valid number!\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                throw new OofException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Parses input if the user input starts with assessment."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param argumentArray Command inputted by user in string array format."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param line Command inputted by user in string format."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return Returns relevant Assessment Commands if the parameters are valid."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws OofException Throws exception if the parameters are invalid."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static Command parseAssessment(String[] argumentArray, String line) throws OofException {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (argumentArray.length \u003d\u003d LENGTH_COMMAND_ONLY) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            return new ViewAssessmentCommand();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            if (argumentArray[INDEX_TASK_TYPE].equals(\"add\")) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                line \u003d line.replaceFirst(\"assessment add\", \"\").trim();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                return new AddAssessmentCommand(line);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            } else if (argumentArray[INDEX_TASK_TYPE].equals(\"delete\")) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    int deleteIndex \u003d Integer.parseInt(line.replaceFirst(\"assessment delete\", \"\")"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                            .trim()) - 1;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    return new DeleteAssessmentCommand(deleteIndex);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    throw new OofException(\"OOPS!!! Please enter a valid number!\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                throw new OofException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Parses input if the user input starts with snooze."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param argumentArray Command inputted by user in string array format."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param line Command inputted by user in string format."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return Returns an instance of SnoozeCommand if the parameters are valid."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws OofException Throws exception if the parameters are invalid."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static Command parseSnooze(String[] argumentArray, String line) throws OofException {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (argumentArray.length \u003d\u003d LENGTH_COMMAND_ONLY) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            throw new OofException(\"OOPS!!! Please enter a number!\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            int snoozeIndex \u003d Integer.parseInt(line.replaceFirst(\"snooze\", \"\").trim()) - 1;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return new SnoozeCommand(snoozeIndex);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            throw new OofException(\"OOPS!!! Please enter a valid number!\");"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Parses input if the user input starts with recurring."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param argumentArray Command inputted by user in string array format."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return Returns an instance of RecurringCommand if the parameters are valid."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws OofException Throws exception if the parameters are invalid."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static Command parseRecurring(String[] argumentArray) throws OofException {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (argumentArray.length \u003d\u003d LENGTH_COMMAND_ONLY) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            throw new OofException(\"OOPS!!! Please enter the task number and number of recurrences!\");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (argumentArray.length \u003d\u003d LENGTH_COMMAND_AND_TASK) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            throw new OofException(\"OOPS!!! Please enter the number of recurrences!\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            int recurringIndex \u003d Integer.parseInt(argumentArray[INDEX_ARGUMENT_TASK_NUMBER].trim()) - 1;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            int recurringCount \u003d Integer.parseInt(argumentArray[INDEX_ARGUMENT_COUNT].trim());"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            ui \u003d new Ui();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            ui.printRecurringOptions();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            int recurringFrequency \u003d ui.scanInt();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            return new RecurringCommand(recurringIndex, recurringCount, recurringFrequency);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            throw new OofException(\"OOPS!!! Please enter valid numbers!\");"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (InputMismatchException e) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            throw new OofException(\"OOPS!!! Please enter a valid number!\");"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 172,
      "KahLokKee": 30,
      "jasperosy": 132,
      "debbiextan": 19
    }
  },
  {
    "path": "src/main/java/oof/Oof.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "package oof;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Assessment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Lesson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Semester;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.command.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " * Represents a Personal Assistant bot. An Oof object corresponds to three other classes,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * namely called Storage, Ui and TaskList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "public class Oof {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private SemesterList semesterList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private Semester semester;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private Module module;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private Lesson lesson;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private Assessment assessment;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private Reminder reminder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Constructor for Oof for instantiation of other classes Ui, Storage and TaskList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public Oof() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        reminder \u003d new Reminder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            semesterList \u003d new SemesterList(storage.readSemesterList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            semester \u003d new Semester(storage.readModuleList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            module \u003d new Module(storage.readLessonList(), storage.readAssessmentList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } catch (IOException | OofException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            semesterList \u003d new SemesterList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            semester \u003d new Semester();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            module \u003d new Module();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            tasks \u003d new TaskList(storage.readTaskList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (IOException | OofException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public TaskList getArr() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Executes command entered by user."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param line Command to be tested."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws OofException Exceptions thrown by Command classes."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public boolean executeCommand(String line) throws OofException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Command command \u003d CommandParser.parse(line);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        command.execute(semesterList, tasks, ui, storage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return command.isExit();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Runs the Personal Assistant."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        ui.hello();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        reminder.checkDeadline(tasks, ui, storage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                ui.printCommandPrompt();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                String line \u003d ui.scanLine();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                isExit \u003d executeCommand(line);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            } catch (OofException exception) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                ui.printOofException(exception);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * This is the main method which makes use of run method."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param args Unused."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        new Oof().run();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 15,
      "KahLokKee": 28,
      "jasperosy": 52
    }
  },
  {
    "path": "src/main/java/oof/Reminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "package oof;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Reminder class to remind user on upcoming deadlines."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class Reminder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final long MILLISECOND_TO_HOUR \u003d 60 * 60 * 1000;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String DEFAULT_DATETIME \u003d \"00-00-0000 00:00\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks Task objects dates to determine if it is due soon."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskList TaskList that contains Task objects."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui       Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void checkDeadline(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        int upcomingThreshold \u003d storage.readThreshold();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            Task task \u003d taskList.getTask(i);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                Date dueDate \u003d parseDateTime(ui, ((Deadline) task));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                count \u003d displayReminders(taskList, ui, dueDate, upcomingThreshold, count, i);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            if (isNoDeadlineReminded(i, taskList, count)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                ui.printNoDeadlines();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if deadline is within the threshold."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param dueDate Due date of current deadline."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param now     Current time."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if due date of current deadline is within threshold."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean isUpcoming(Date dueDate, Date now, int upcomingThreshold) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        long diff \u003d dueDate.getTime() - now.getTime(); // difference in time in milliseconds"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        long diffHours \u003d diff / MILLISECOND_TO_HOUR;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return diffHours \u003c upcomingThreshold \u0026\u0026 diffHours \u003e 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if there are no deadlines being reminded."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param index    Index of the task to be checked."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param taskList Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param count    Count of the deadlines being reminded"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if there are no deadlines being reminded, false otherwise."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean isNoDeadlineReminded(int index, TaskList taskList, int count) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return (index \u003d\u003d taskList.getSize() - 1 \u0026\u0026 count \u003d\u003d 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Parses the timestamp for the deadlines."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param task Deadline task object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return Returns the parsed date if the date format is parsable."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private Date parseDateTime(Ui ui, Deadline task) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String defaultDateTime \u003d DEFAULT_DATETIME;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Date defaultDate \u003d new Date();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            String dateTime \u003d task.getDeadlineDateTime();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            defaultDate \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\").parse(defaultDateTime);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            Date dueDate \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\").parse(dateTime);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            return dueDate;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (ParseException | DateTimeException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            ui.printOofException((OofException) e);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            return defaultDate;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Displays the reminders and returns the number of reminders displayed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param taskList Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param ui Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param dueDate Due date of current deadline."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param upcomingThreshold DateTime threshold for OOF to display the reminders."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param count Number of reminders displayed thus far."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param index Index in the taskList."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return Returns the updated number of reminders displayed."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private int displayReminders(TaskList taskList, Ui ui, Date dueDate, int upcomingThreshold, int count,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                                 int index) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Date now \u003d new Date();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (isUpcoming(dueDate, now, upcomingThreshold)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            if (isFirstReminder(count)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                ui.printReminder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            ui.printUpcomingDeadline(count, taskList.getTask(index));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return count;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if it is the first deadline being reminded."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param count Count of the deadlines being reminded"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if current deadline is indeed the first deadline being reminded, false otheriwse"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean isFirstReminder(int count) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return count \u003d\u003d 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 52,
      "KahLokKee": 19,
      "jasperosy": 48
    }
  },
  {
    "path": "src/main/java/oof/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "package oof;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Assessment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Lesson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Semester;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.model.task.Assignment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Todo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Storage class to store and read Task objects to/from hard disk."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private ArrayList\u003cTask\u003e arr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private ArrayList\u003cSemester\u003e semesterList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private ArrayList\u003cModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private ArrayList\u003cAssessment\u003e assessments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private ArrayList\u003cLesson\u003e lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String DELIMITER_ESCAPED \u003d \"\\\\|\\\\|\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String DONE \u003d \"Y\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String SPACE \u003d \" \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String PATH_OUTPUT \u003d \"./output.txt\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String PATH_MANUAL \u003d \"./manual.txt\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String PATH_THRESHOLD \u003d \"./oof.config\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final String PATH_SEMESTER \u003d \"./semester.txt\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String TODO \u003d \"T\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String DEADLINE \u003d \"D\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String EVENT \u003d \"E\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String ASSIGNMENT \u003d \"A\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final String SEMESTER \u003d \"S\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final String MODULE \u003d \"M\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final String LESSON \u003d \"L\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final String ASSESSMENT \u003d \"A\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int INDEX_TYPE \u003d 0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int INDEX_YEAR \u003d 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int INDEX_CODE \u003d 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int INDEX_NAME \u003d 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int INDEX_MODULE_CODE \u003d 2;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int INDEX_STATUS \u003d 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int INDEX_DESCRIPTION \u003d 2;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int INDEX_DESCRIPTION_ASSIGNMENT \u003d 3;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int INDEX_DATE_START \u003d 3;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int INDEX_DATE_START_ASSIGNMENT \u003d 4;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int INDEX_DATE_START_LESSON \u003d 2;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int INDEX_DATE_END_LESSON \u003d 3;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int INDEX_DATE_START_ASSESSMENT \u003d 3;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int INDEX_DATE_END_ASSESSMENT \u003d 4;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int INDEX_DATE_END \u003d 5;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int INDEX_TIME_START \u003d 4;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int INDEX_TIME_START_ASSIGNMENT \u003d 5;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int INDEX_TIME_END \u003d 6;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int DEFAULT_THRESHOLD \u003d 24;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Reads and prints all commands available to user."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @return commandList  ArrayList of available commands."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @throws OofException if manual cannot be retrieved from file path."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public ArrayList\u003cString\u003e readManual() throws OofException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            File file \u003d new File(PATH_MANUAL);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            FileReader fileReader \u003d new FileReader(file);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            ArrayList\u003cString\u003e commandList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                commandList.add(line);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            return commandList;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            throw new OofException(\"Manual Unavailable!\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Reads the threshold previously saved to hard disk."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return threshold    Integer of threshold."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public int readThreshold() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            File file \u003d new File(PATH_THRESHOLD);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(new FileReader(file));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            line \u003d reader.readLine();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            int threshold;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            threshold \u003d Integer.parseInt(line);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            return threshold;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            System.out.println(e + \", thus please try inputting other things.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            return DEFAULT_THRESHOLD;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Writes updated threshold to hard disk."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param updateThreshold The new threshold to be saved."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void writeThreshold(String updateThreshold) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            BufferedWriter out \u003d new BufferedWriter(new FileWriter(PATH_THRESHOLD));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            out.write(updateThreshold);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            out.close();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            System.out.println(e + \", thus please try inputting other things.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Writes Task objects to hard disk."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskList TaskList that contains Task objects."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void writeTaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ArrayList\u003cTask\u003e arr \u003d taskList.getTasks();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            String filename \u003d PATH_OUTPUT;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            BufferedWriter out \u003d new BufferedWriter(new FileWriter(filename));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            for (Task task : arr) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                out.write(task.toStorageString() + \"\\n\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            out.close();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            System.out.println(e + \", thus please try inputting other things.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Reads Task objects that were previously saved to hard disk."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return TaskList containing Task objects."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws IOException if file does not exist."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws OofException if file is corrupted."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public ArrayList\u003cTask\u003e readTaskList() throws IOException, OofException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        BufferedReader reader \u003d new BufferedReader(new FileReader(PATH_OUTPUT));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        while ((line \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            counter +\u003d 1;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            String[] lineSplit \u003d line.split(DELIMITER_ESCAPED);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            switch (lineSplit[INDEX_TYPE]) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                addToDo(lineSplit, counter);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                addDeadline(lineSplit, counter);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                addEvent(lineSplit, counter);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            case ASSIGNMENT:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                addAssignment(lineSplit, counter);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                throw new OofException(\"Output.txt is corrupted!\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        reader.close();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return arr;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Writes Semester objects to hard disk."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param semesterList SemesterList that contains Semester objects."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void writeSemesterList(SemesterList semesterList, Semester semester, Module module) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            ArrayList\u003cSemester\u003e semesters \u003d semesterList.getSemesterList();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            BufferedWriter out \u003d new BufferedWriter(new FileWriter(PATH_SEMESTER));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            for (Semester sem : semesters) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                out.write(sem.toStorageString() + \"\\n\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            ArrayList\u003cModule\u003e modules \u003d semester.getModules();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            for (Module mod : modules) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                out.write(mod.toStorageString() + \"\\n\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            ArrayList\u003cLesson\u003e lessons \u003d module.getLessons();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            for (Lesson lesson : lessons) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                out.write(lesson.toStorageString() + \"\\n\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            ArrayList\u003cAssessment\u003e assessments \u003d module.getAssessments();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            for (Assessment assessment : assessments) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                out.write(assessment.toStorageString() + \"\\n\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            out.close();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            System.out.println(e + \", thus please try inputting other things.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Reads Semester objects that were previously saved to hard disk."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return SemesterList containing Semester objects."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws IOException if file does not exist."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws OofException if file is corrupted."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public ArrayList\u003cSemester\u003e readSemesterList() throws IOException, OofException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        BufferedReader reader \u003d new BufferedReader(new FileReader(PATH_SEMESTER));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        while ((line \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            String[] lineSplit \u003d line.split(DELIMITER_ESCAPED);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            if (lineSplit[INDEX_TYPE].equals(SEMESTER)) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                addSemester(lineSplit);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        reader.close();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return semesterList;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Reads Module objects that were previously saved to hard disk."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return Modules containing module objects."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws IOException if file does not exist."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws OofException if file is corrupted."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public ArrayList\u003cModule\u003e readModuleList() throws IOException, OofException {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        BufferedReader reader \u003d new BufferedReader(new FileReader(PATH_SEMESTER));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        while ((line \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            String[] lineSplit \u003d line.split(DELIMITER_ESCAPED);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            if (lineSplit[INDEX_TYPE].equals(MODULE)) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                addModule(lineSplit);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        reader.close();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Reads Lesson objects that were previously saved to hard disk."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return Lessons containing lesson objects."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws IOException if file does not exist."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws OofException if file is corrupted."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public ArrayList\u003cLesson\u003e readLessonList() throws IOException, OofException {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        BufferedReader reader \u003d new BufferedReader(new FileReader(PATH_SEMESTER));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        while ((line \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            String[] lineSplit \u003d line.split(DELIMITER_ESCAPED);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            if (lineSplit[INDEX_TYPE].equals(LESSON)) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                addLesson(lineSplit);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        reader.close();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return lessons;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Reads Assessment objects that were previously saved to hard disk."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return Assessments containing assessment objects."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws IOException if file does not exist."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws OofException if file is corrupted."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public ArrayList\u003cAssessment\u003e readAssessmentList() throws IOException, OofException {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        BufferedReader reader \u003d new BufferedReader(new FileReader(PATH_SEMESTER));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        while ((line \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            String[] lineSplit \u003d line.split(DELIMITER_ESCAPED);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            if (lineSplit[INDEX_TYPE].equals(ASSESSMENT)) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                addAssessment(lineSplit);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        reader.close();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return assessments;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks if the Task has already been marked as done."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param line Task object in string format."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return true if the Task object has already been marked as done, false otherwise."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public boolean checkDone(String line) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return line.equals(DONE);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Adds todo task from persistent storage to taskList."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param lineSplit Task object split in string array format."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param counter Current task number in 1 based indexing."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void addToDo(String[] lineSplit, int counter) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String description \u003d lineSplit[INDEX_DESCRIPTION].trim();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String date \u003d lineSplit[INDEX_DATE_START].trim();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Todo todo \u003d new Todo(description, date);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        arr.add(todo);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (checkDone(lineSplit[INDEX_STATUS])) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            arr.get(counter - 1).setStatus();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Adds deadline task from persistent storage to taskList."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param lineSplit Task object split in string array format."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param counter Current task number in 1 based indexing."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void addDeadline(String[] lineSplit, int counter) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String description \u003d lineSplit[INDEX_DESCRIPTION].trim();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String date \u003d lineSplit[INDEX_DATE_START].trim() + SPACE + lineSplit[INDEX_TIME_START].trim();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Deadline deadline \u003d new Deadline(description, date);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        arr.add(deadline);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (checkDone(lineSplit[INDEX_STATUS])) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            arr.get(counter - 1).setStatus();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Adds event task from persistent storage to taskList."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param lineSplit Task object split in string array format."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param counter Current task number in 1 based indexing."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void addEvent(String[] lineSplit, int counter) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String description \u003d lineSplit[INDEX_DESCRIPTION].trim();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String startDate \u003d lineSplit[INDEX_DATE_START].trim() + SPACE + lineSplit[INDEX_TIME_START];"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String endDate \u003d lineSplit[INDEX_DATE_END].trim() + SPACE + lineSplit[INDEX_TIME_END];"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Event event \u003d new Event(description, startDate, endDate);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        arr.add(event);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (checkDone(lineSplit[INDEX_STATUS])) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            arr.get(counter - 1).setStatus();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Adds Assignment task from persistent storage to taskList."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param lineSplit Task object split in string array format."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param counter Current task number in 1 based indexing."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void addAssignment(String[] lineSplit, int counter) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String moduleCode \u003d lineSplit[INDEX_MODULE_CODE];"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String description \u003d lineSplit[INDEX_DESCRIPTION_ASSIGNMENT];"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String startDate \u003d lineSplit[INDEX_DATE_START_ASSIGNMENT];"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String startTime \u003d lineSplit[INDEX_TIME_START_ASSIGNMENT];"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String startDateTime \u003d startDate + \" \" + startTime;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Assignment assignment \u003d new Assignment(moduleCode, description, startDateTime);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        arr.add(assignment);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (checkDone(lineSplit[INDEX_STATUS])) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            arr.get(counter - 1).setStatus();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Adds Semester from persistent storage to semesterList."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param lineSplit Semester object split in string array format."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private void addSemester(String[] lineSplit) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String academicYear \u003d lineSplit[INDEX_YEAR];"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String semesterName \u003d lineSplit[INDEX_DESCRIPTION];"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Semester semester \u003d new Semester(academicYear, semesterName);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        semesterList.add(semester);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Adds Module from persistent storage to Semester."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param lineSplit Module object split in string array format."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private void addModule(String[] lineSplit) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String moduleCode \u003d lineSplit[INDEX_CODE];"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String moduleName \u003d lineSplit[INDEX_DESCRIPTION];"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Module module \u003d new Module(moduleCode, moduleName);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        modules.add(module);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Adds Lesson from persistent storage to Module."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param lineSplit Lesson object split in string array format."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private void addLesson(String[] lineSplit) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String lessonName \u003d lineSplit[INDEX_NAME];"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String startTime \u003d lineSplit[INDEX_DATE_START_LESSON];"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String endTime \u003d lineSplit[INDEX_DATE_END_LESSON];"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Lesson lesson \u003d new Lesson(lessonName, startTime, endTime);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        lessons.add(lesson);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Adds Assessment from persistent storage to Module."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param lineSplit Assessment object split in string array format."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private void addAssessment(String[] lineSplit) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String moduleCode \u003d lineSplit[INDEX_CODE];"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String name \u003d lineSplit[INDEX_DESCRIPTION];"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String startTime \u003d lineSplit[INDEX_DATE_START_ASSESSMENT];"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String endTime \u003d lineSplit[INDEX_DATE_END_ASSESSMENT];"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Assessment assessment \u003d new Assessment(moduleCode, name, startTime, endTime);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        assessments.add(assessment);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 211,
      "KahLokKee": 31,
      "jasperosy": 146,
      "debbiextan": 22
    }
  },
  {
    "path": "src/main/java/oof/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "package oof;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.module.Assessment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.module.Lesson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.module.Semester;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Assignment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Ui class that is responsible for Input/Output operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private Scanner scan \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int DATE_SPACES \u003d 3;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int SPLIT_EVEN \u003d 2;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int DAY_FIRST \u003d 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int DAYS_IN_WEEK \u003d 7;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int WEEKS_IN_MONTH \u003d 4;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_SPACE \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_START_OF_ARRAY \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int TEXT_SIZE_SHORT \u003d 13;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int TEXT_SIZE_LONG \u003d 19;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int TEXT_WIDTH \u003d 35;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int HEADER_WIDTH \u003d 49;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int DESCRIPTION_SHORT_START \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int DESCRIPTION_SHORT_END \u003d 11;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int DESCRIPTION_LONG_START \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int DESCRIPTION_LONG_END \u003d 17;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int LEAST_COL_SIZE \u003d 19;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int TIME \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int DESCRIPTION \u003d 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String ANSI_RESET \u003d \"\\u001B[0m\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String ANSI_BRIGHT_RED \u003d \"\\u001B[91m\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String ANSI_BRIGHT_GREEN \u003d \"\\u001B[92m\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String ANSI_BRIGHT_YELLOW \u003d \"\\u001B[93m\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String ANSI_BRIGHT_BLUE \u003d \"\\u001B[94m\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String ANSI_BRIGHT_PURPLE \u003d \"\\u001B[95m\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String ANSI_BRIGHT_CYAN \u003d \"\\u001B[96m\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String ANSI_BRIGHT_WHITE \u003d \"\\u001B[97m\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String ANSI_BG_BLUE \u003d \"\\u001B[44m\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String ANSI_BG_BLACK \u003d \"\\u001B[40m\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final String[] colouredText \u003d {ANSI_BRIGHT_RED, ANSI_BRIGHT_GREEN, ANSI_BRIGHT_YELLOW,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            ANSI_BRIGHT_BLUE, ANSI_BRIGHT_PURPLE, ANSI_BRIGHT_CYAN, ANSI_BRIGHT_WHITE};"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Scans for an integer of user input."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return Scanner to scan for an integer of user input."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public int scanInt() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return scan.nextInt();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Scans for a line of user input."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return Scanner to scan for next line of user input."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public String scanLine() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        scan.skip(\"(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])?\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return scan.nextLine();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints 3D ascii logo OOF."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printOofLogo() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String logo \u003d \"                ________  ________  ________ \\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + \"               |\\\\   __  \\\\|\\\\   __  \\\\|\\\\  _____\\\\\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + \"               \\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\__/ \\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + \"                \\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\   __\\\\\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + \"                 \\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\  \\\\_|\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + \"                  \\\\ \\\\_______\\\\ \\\\_______\\\\ \\\\__\\\\ \\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + \"                   \\\\|_______|\\\\|_______|\\\\|__|\\n\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints welcome message for OOF."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void hello() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printOofLogo();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" Hello! I\u0027m OOF\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" What can I do for you?\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints command prompt."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printCommandPrompt() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" Enter a command: \");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Shows termination message before OOF exits."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printByeMessage() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Prints lines."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printLine() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints the Task object that was added and its relevant messages."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param task Task object that was added."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param size Number of Task objects in the TaskList."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void addTaskMessage(Task task, int size) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" \\t\" + task);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (size \u003e 1) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.println(\" Now you have \" + size + \" tasks in your list.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.println(\" Now you have \" + size + \" task in the list.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Shows the Task object that has been marked as done and its relevant messages."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param task Task object that was marked as done."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void completeMessage(Task task) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" \\t\" + task);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Shows the Task object that has been deleted and its relevant messages."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param task Task object that was deleted."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param size Number of Task objects in the TaskList."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void deleteMessage(Task task, int size) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" \\t\" + task);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (size \u003e 1) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.println(\" Now you have \" + size + \" tasks in your list.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.println(\" Now you have \" + size + \" task in the list.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Shows the error message."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param exception Exception encountered."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printOofException(OofException exception) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" \" + exception.getMessage());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Displays the Task to be snoozed."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param task Task to be snoozed."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printSnoozeMessage(Task task) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" I have changed the date of this task!\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" \\t\" + task);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Retrieves a new Timestamp from the user for the Task to be snoozed."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return Timestamp input by user."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public String getTimeStamp() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" Please enter the new date: \");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return scanLine();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints a continue prompt and waits for user input."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return User input if it is equals to \"Y\" or \"N\""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String printContinuePrompt() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String input \u003d \"\";"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.println(\" Continue anyway? (Y/N)\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            input \u003d scanLine();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            if (input.equals(\"Y\") || input.equals(\"N\")) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                return input;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints a warning regarding event clashes."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printClashWarning(ArrayList\u003cEvent\u003e eventClashes) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" Warning! Event being added clashes with the following events:\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (Event e : eventClashes) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.println(\" \\t\" + e.toString());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints a reminder regarding upcoming deadlines."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printReminder() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" Reminder these tasks have upcoming deadlines:\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Prints a reminder that the user has no deadlines."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void printNoDeadlines() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" You have no upcoming deadlines :)\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints the details of an upcoming deadline."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param count Position of upcoming deadline in reminder list."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param task  Task object of upcoming deadline."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printUpcomingDeadline(int count, Task task) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" \\t\" + count + \".\" + task);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints all tasks scheduled on the provided date."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param scheduledTasks List of all Tasks scheduled on the date provided."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param date           Date parameter provided by user."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void printTasksByDate(TaskList scheduledTasks, String date) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" Here are your tasks for \" + date + \": \");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (int i \u003d 0; i \u003c scheduledTasks.getSize(); i++) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.println(\" \\t\" + (i + 1) + \". \" + scheduledTasks.getTask(i));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints list of matching tasks."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param matchedTasks ArrayList containing matching tasks."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printMatchingTasks(ArrayList\u003cTask\u003e matchedTasks) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (matchedTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.println(\" There are no matching tasks in your list!\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            printLine();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.println(\" Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            for (int i \u003d 0; i \u003c matchedTasks.size(); i++) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                System.out.println(\" \\t\" + (i + 1) + \". \" + matchedTasks.get(i));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Prints list of options for the recurring frequency of a task."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void printRecurringOptions() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String options \u003d \" Here are the available options for recurring tasks:\\n\""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                + \" \\t1. Daily\\n\""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                + \" \\t2. Weekly\\n\""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                + \" \\t3. Monthly\\n\""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                + \" \\t4. Yearly\\n\""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + \" \\tPlease choose one of the four options for your recurring frequency.\\n\";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        System.out.println(options);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Displays the newly added recurring tasks."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param arr TaskList containing saved tasks."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printRecurringMessage(TaskList arr) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" I have added recurring tasks:\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printTaskList(arr);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints all tasks in TaskList."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param arr TaskList containing saved tasks."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printTaskList(TaskList arr) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (int i \u003d 0; i \u003c arr.getSize(); i++) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.println(\" \\t\" + (i + 1) + \". \" + arr.getTask(i));"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Prints and applies format for command list available to user."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @throws OofException if readManual method fails."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void printHelpCommands() throws OofException {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        ArrayList\u003cString\u003e commands \u003d storage.readManual();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        for (String command : commands) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            System.out.println(\" \\t\" + command);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Prints instruction related to individual command available to user."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param command instruction of command given by user."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void printHelpCommand(String command) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        System.out.println(\" \\t\" + command);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Prints the tasks for a particular week."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param tasks           Tasks for the particular week to be printed."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param startDate       Starting date of the week."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param largestTaskSize Size of the day with the largest number of tasks."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param largestColSize  Size of the largest column in the View Week output."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void printViewWeek(ArrayList\u003cArrayList\u003cString[]\u003e\u003e tasks, Date startDate, int largestTaskSize,"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                              int largestColSize) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printViewWeekHeader(largestColSize);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printViewWeekBody(startDate, largestColSize);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printViewWeekDetails(tasks, largestTaskSize, largestColSize);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Prints header for ViewWeek command."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param largestColSize Size of the largest column in the View Week output."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void printViewWeekHeader(int largestColSize) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String[] days \u003d {\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"};"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (!isEven(largestColSize)) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            largestColSize++;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        int numberOfHyphens \u003d ((largestColSize + DATE_SPACES) * DAYS_IN_WEEK) + DAYS_IN_WEEK + DAY_FIRST;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        System.out.print(ANSI_BRIGHT_WHITE + ANSI_BG_BLUE);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printHyphens(numberOfHyphens);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        System.out.print(ANSI_BRIGHT_WHITE + ANSI_BG_BLUE + \"|\");"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        System.out.print(ANSI_RESET);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        for (int i \u003d 0; i \u003c DAYS_IN_WEEK; i++) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            printHeaderSpaces(largestColSize);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            System.out.print(days[i]);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            printHeaderSpaces(largestColSize);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            if (i !\u003d DAYS_IN_WEEK - 1) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                System.out.print(\"|\");"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                printViewWeekBorder();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                System.out.println();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printHyphens(numberOfHyphens);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Prints hyphens when the ViewWeek output needs to be resized."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param numberOfHyphens Number of hyphens to be printed."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void printHyphens(int numberOfHyphens) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        for (int i \u003d 0; i \u003c numberOfHyphens; i++) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            System.out.print(ANSI_BRIGHT_WHITE + ANSI_BG_BLUE + \"-\");"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        System.out.println(ANSI_RESET);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Prints only spaces for empty rows in View Week output."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param largestColSize Size of the largest column in the View Week output."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void printBodySpaces(int largestColSize) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        for (int i \u003d 0; i \u003c largestColSize; i++) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            System.out.print(\" \");"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Print spaces when the ViewWeek output needs to be resized."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param largestColSize Size of the largest column in the View Week output."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void printHeaderSpaces(int largestColSize) {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        for (int i \u003d 0; i \u003c largestColSize / SPLIT_EVEN; i++) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            System.out.print(ANSI_BRIGHT_WHITE + ANSI_BG_BLUE + \" \");"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Checks if number is even."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param number Number to be checked."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return True if the number is even, false otherwise."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private boolean isEven(int number) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return number % SPLIT_EVEN \u003d\u003d 0;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Prints the body for ViewWeek command."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param startDate      Starting date of the week."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param largestColSize Size of the largest column in the View Week output."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void printViewWeekBody(Date startDate, int largestColSize) {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        ArrayList\u003cString\u003e calendarDates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        calendar.setTime(startDate);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        for (int i \u003d 0; i \u003c DAYS_IN_WEEK; i++) {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            if (i \u003e\u003d DAY_FIRST) {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                calendar.add(Calendar.DATE, DAY_FIRST);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            Date currentDate \u003d calendar.getTime();"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            String date \u003d formatter.format(currentDate);"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            calendarDates.add(date);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printViewWeekDates(calendarDates, largestColSize);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Prints the dates for the ViewWeek command."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param calendarDates  List of dates for the week to be printed."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param largestColSize Size of the largest column in the View Week output."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void printViewWeekDates(ArrayList\u003cString\u003e calendarDates, int largestColSize) {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printViewWeekBorder();"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String spaces \u003d \"\";"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (!isEven(largestColSize)) {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            largestColSize++;"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        for (int i \u003d 0; i \u003c largestColSize + DATE_SPACES - DESCRIPTION_SHORT_END; i++) {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            spaces +\u003d \" \";"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        for (int i \u003d 0; i \u003c DAYS_IN_WEEK; i++) {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            if (i !\u003d DAYS_IN_WEEK - 1) {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                System.out.print(\" \" + colouredText[i] + ANSI_BG_BLACK"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                        + calendarDates.get(i) + ANSI_RESET + spaces + \"|\");"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        System.out.print(\" \" + colouredText[DAYS_IN_WEEK - 1] + ANSI_BG_BLACK"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                + calendarDates.get(DAYS_IN_WEEK - 1) + ANSI_RESET + spaces);"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printViewWeekBorder();"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Prints the details of tasks in the ViewWeek command."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param tasks          Tasks to be printed for the particular week."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param largestTaskNo  Size of the day with the largest number of tasks."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param largestColSize Size of the largest column in the View Week output."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void printViewWeekDetails(ArrayList\u003cArrayList\u003cString[]\u003e\u003e tasks, int largestTaskNo, int largestColSize) {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printEntryBodySpace(largestColSize);"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        for (int taskNo \u003d 0; taskNo \u003c largestTaskNo; taskNo++) {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            printDetailsByLine(tasks, taskNo, largestColSize);"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printEntryBodySpace(largestColSize);"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (!isEven(largestColSize)) {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            largestColSize++;"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        int numberOfHyphens \u003d ((largestColSize + DATE_SPACES) * DAYS_IN_WEEK) + DAYS_IN_WEEK + DAY_FIRST;"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printHyphens(numberOfHyphens);"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Prints the tasks for ViewWeek command line by line."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param tasks          Tasks for the particular week to be printed."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param taskNo         Current index of the task that is being printed."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param largestColSize Size of the largest column in the View Week output."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void printDetailsByLine(ArrayList\u003cArrayList\u003cString[]\u003e\u003e tasks, int taskNo, int largestColSize) {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printViewWeekBorder();"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        for (int dayInWeek \u003d 0; dayInWeek \u003c DAYS_IN_WEEK; dayInWeek++) {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            int colSize \u003d tasks.get(dayInWeek).size();"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            if (taskNo \u003c colSize) {"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                String task \u003d getTaskDetails(tasks.get(dayInWeek).get(taskNo));"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                task \u003d padTaskDetails(task, largestColSize);"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                System.out.print(task);"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                if (dayInWeek !\u003d DAYS_IN_WEEK - 1) {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                    System.out.print(\"|\");"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                    printViewWeekBorder();"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                    System.out.println();"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                if (!isEven(largestColSize)) {"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                    largestColSize++;"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                printBodySpaces(largestColSize + DATE_SPACES);"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                if (dayInWeek !\u003d DAYS_IN_WEEK - 1) {"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                    System.out.print(\"|\");"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                    printViewWeekBorder();"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                    System.out.println();"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Prints the side borders of the View Week output."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void printViewWeekBorder() {"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        System.out.print(ANSI_BRIGHT_WHITE + ANSI_BG_BLUE + \"|\");"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        System.out.print(ANSI_RESET);"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Pads the details of a task to fit into a day of the ViewWeek command output."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param details        Details of a task."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param largestColSize Size of the largest column in the ViewWeek command output."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return Padded details of a task."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private String padTaskDetails(String details, int largestColSize) {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (!isEven(largestColSize)) {"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            largestColSize++;"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String newDetails \u003d \" \" + details;"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        while (newDetails.length() \u003c largestColSize + DATE_SPACES) {"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            newDetails +\u003d \" \";"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return newDetails;"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Outputs the details of a task in a string."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param details Array of the details containing time and description."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return String containing the details of a task."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private String getTaskDetails(String[] details) {"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return details[DESCRIPTION] + \" \" + details[TIME];"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Prints the empty columns in the View Week body."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param largestColSize Longest possible description for task."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void printEntryBodySpace(int largestColSize) {"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printViewWeekBorder();"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (!isEven(largestColSize)) {"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            largestColSize++;"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        for (int day \u003d 0; day \u003c DAYS_IN_WEEK; day++) {"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            for (int emptySpaceNo \u003d 0; emptySpaceNo \u003c largestColSize + DATE_SPACES; emptySpaceNo++) {"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                System.out.print(\" \");"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            if (day !\u003d DAYS_IN_WEEK - 1) {"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                System.out.print(\"|\");"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                printViewWeekBorder();"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                System.out.println();"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints calendar."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param yearMonth Object containing month and year information."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printCalendar(YearMonth yearMonth, ArrayList\u003cArrayList\u003cString[]\u003e\u003e calendar) {"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printCalendarLabel(yearMonth);"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        printCalendarHeader();"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printCalendarBody(yearMonth, calendar);"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Prints calendar label."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param yearMonth Object containing month and year information."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void printCalendarLabel(YearMonth yearMonth) {"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String[] months \u003d {\"\", \"JANUARY\", \"FEBRUARY\", \"MARCH\", \"APRIL\", \"MAY\", \"JUNE\", \"JULY\", \"AUGUST\","
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                \"SEPTEMBER\", \"OCTOBER\", \"NOVEMBER\", \"DECEMBER\"};"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String month \u003d months[yearMonth.getMonthValue()];"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String year \u003d Integer.toString(yearMonth.getYear());"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(month + \" \" + year);"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Prints calendar header."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void printCalendarHeader() {"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\"-----------------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + \"------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\"|         SUN         |         MON         |         TUE         |         WED         |\""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + \"         THU         |         FRI         |         SAT         |\");"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\"-----------------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + \"------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints calendar body."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param yearMonth Object containing month and year information."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printCalendarBody(YearMonth yearMonth, ArrayList\u003cArrayList\u003cString[]\u003e\u003e calendar) {"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String[] date \u003d {\"  \", \" 1\", \" 2\", \" 3\", \" 4\", \" 5\", \" 6\", \" 7\","
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                \" 8\", \" 9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\","
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\","
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ArrayList\u003cString\u003e calendarDates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d yearMonth.lengthOfMonth(); i++) {"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            calendarDates.add(date[i]);"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        DayOfWeek firstDayOfMonth \u003d yearMonth.atDay(DAY_FIRST).getDayOfWeek();"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (firstDayOfMonth !\u003d DayOfWeek.SUNDAY) {"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            for (int dayCount \u003d 0; dayCount \u003c firstDayOfMonth.getValue(); dayCount++) {"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                calendarDates.add(INDEX_START_OF_ARRAY, date[INDEX_SPACE]);"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        while (calendarDates.size() % DAYS_IN_WEEK !\u003d 0) {"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            calendarDates.add(date[INDEX_SPACE]);"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        int numberOfWeeks \u003d (int) Math.ceil((double) calendarDates.size() / DAYS_IN_WEEK);"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (int week \u003d 0; week \u003c numberOfWeeks; week++) {"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            int dayIndex \u003d week * DAYS_IN_WEEK;"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.print(\"|\");"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            int calendarRows \u003d WEEKS_IN_MONTH;"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            for (int day \u003d 0; day \u003c DAYS_IN_WEEK; day++) {"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                if (!calendarDates.get(dayIndex + day).equals(\"  \")) {"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    int currentDay \u003d Integer.parseInt(calendarDates.get(dayIndex + day).trim());"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    if (calendar.get(currentDay).size() \u003e calendarRows) {"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                        calendarRows \u003d calendar.get(currentDay).size();"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                System.out.print(\" \" + calendarDates.get(dayIndex + day) + \"                  |\");"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            printCalendarDetails(calendar, calendarDates, dayIndex, calendarRows);"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.println(\"-------------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    + \"----------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints calendar details."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param calendar      ArrayList containing task information for current month."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param calendarDates ArrayList containing dates for current month."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param dayIndex      Offset for current day."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param calendarRows  Number of rows to be printed for current week."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printCalendarDetails(ArrayList\u003cArrayList\u003cString[]\u003e\u003e calendar, ArrayList\u003cString\u003e calendarDates,"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                                     int dayIndex, int calendarRows) {"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (int row \u003d 0; row \u003c calendarRows; row++) {"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.print(\"|\");"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            for (int day \u003d 0; day \u003c DAYS_IN_WEEK; day++) {"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                String dayString \u003d calendarDates.get(dayIndex + day).trim();"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                if (dayString.equals(\"\") || calendar.get(Integer.parseInt(dayString)).size() \u003c\u003d row) {"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    System.out.print(\"                     |\");"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    int currentDay \u003d Integer.parseInt(dayString);"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    String taskTime \u003d calendar.get(currentDay).get(row)[0];"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    String taskName \u003d calendar.get(currentDay).get(row)[1];"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    if (taskTime.equals(\"\")) {"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                        printTodo(taskName);"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                        printDeadlineAndEvent(taskTime, taskName);"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints deadline and event details."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskTime Time of deadline or event."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskName Name of deadline or event."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printDeadlineAndEvent(String taskTime, String taskName) {"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (taskName.length() \u003e TEXT_SIZE_SHORT) {"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            taskName \u003d taskName.substring(DESCRIPTION_SHORT_START, DESCRIPTION_SHORT_END);"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.print(\" \" + taskTime + \" \" + taskName + \".. |\");"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            taskName \u003d String.format(\"%-\" + TEXT_SIZE_SHORT + \"s\", taskName);"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.print(\" \" + taskTime + \" \" + taskName + \" |\");"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints todo details."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskName Name of todo."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printTodo(String taskName) {"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (taskName.length() \u003e TEXT_SIZE_LONG) {"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            taskName \u003d taskName.substring(DESCRIPTION_LONG_START, DESCRIPTION_LONG_END);"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.print(\" \" + taskName + \".. |\");"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            taskName \u003d String.format(\"%-\" + TEXT_SIZE_LONG + \"s\", taskName);"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.print(\" \" + taskName + \" |\");"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Prints the header for the user specified date to search for free time in."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param freeDate  The user specified date to search for free time."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param dayOfWeek The day of the week for the user specified date."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void printFreeTimeHeader(String freeDate, String dayOfWeek) {"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        System.out.println(\"-----------------------------------------------------\");"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String dayWithDate \u003d dayOfWeek + \" \" + freeDate;"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        int padSize \u003d HEADER_WIDTH - dayWithDate.length();"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        int padStart \u003d dayWithDate.length() + padSize / 2;"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        dayWithDate \u003d String.format(\"%\" + padStart + \"s\", dayWithDate);"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        dayWithDate \u003d String.format(\"%-\" + HEADER_WIDTH + \"s\", dayWithDate);"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        System.out.println(\"| \" + dayWithDate + \" |\");"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        System.out.println(\"-----------------------------------------------------\");"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Prints the free time slots in that day."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param timeSlotStart The start time of the time slot."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param timeSlotEnd   The end time of the time slot."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void printFreeSlots(String timeSlotStart, String timeSlotEnd) {"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        System.out.println(\"| \" + timeSlotStart + \" - \" + timeSlotEnd + \" |               free                |\");"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        System.out.println(\"-----------------------------------------------------\");"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Prints the event details."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param eventName     The name of the event to be printed."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param timeSlotStart The start time of the time slot."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param timeSlotEnd   The end time of the time slot."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void printEventDetails(String eventName, String timeSlotStart, String timeSlotEnd) {"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        System.out.print(\"| \" + timeSlotStart + \" - \" + timeSlotEnd + \" |\");"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        int padSize \u003d TEXT_WIDTH - eventName.length();"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        int padStart \u003d eventName.length() + padSize / 2;"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        eventName \u003d String.format(\"%\" + padStart + \"s\", eventName);"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        eventName \u003d String.format(\"%-\" + TEXT_WIDTH + \"s\", eventName);"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        System.out.println(eventName + \"|\");"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        System.out.println(\"-----------------------------------------------------\");"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Print when Start Tracker Command is completed."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param task description of Task object."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param date current date."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void printStartAtCurrent(Task task, String date) {"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" Begin \" + task.getDescription());"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        System.out.println(\" It is currently \" + date);"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Print when Stop Tracker Command is completed."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param task       description of Task object."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param date       current date."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param difference calculated time taken."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void printEndAtCurrent(Task task, String date, long difference) {"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" Ending \" + task.getDescription());"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        System.out.println(\" It is currently \" + date);"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" Time spent on \" + task.getDescription() + \": \" + difference + \" minutes\");"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Prints the new threshold that the user wants."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param threshold The threshold for upcoming deadlines requested by the user."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void printUpdatedThreshold(String threshold) {"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" Threshold has been updated to \" + threshold);"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints list of Semesters and returns selected Semester."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList Instance of SemesterList object."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return Semester selected by user."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public int scanSemesterOption(SemesterList semesterList) {"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        int response \u003d 0;"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        while (response \u003c 1 || response \u003e semesterList.getSize() + 1) {"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            printLine();"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.println(\" Choose one of the following options:\");"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            printSemesterList(semesterList);"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            response \u003d scanInt();"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return response - 1;"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Prints list of Modules in a selected Semester."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semester Instance of Semester object."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void printModuleList(Semester semester) {"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        System.out.println(semester.toString());"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        for (index \u003d 1; index \u003c\u003d semester.getModules().size(); index++) {"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            System.out.println(\" \\t\" + index + \". \" + semester.getModules().get(index - 1).toString());"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints list of Modules and returns selected Module."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semester Instance of Semester object."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return Module selected by user."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public int scanModuleOption(Semester semester) {"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        int response \u003d 0;"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        while (response \u003c 1 || response \u003e semester.getModules().size() + 1) {"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            printLine();"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.println(\" Choose one of the following options:\");"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            printModuleList(semester);"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            response \u003d scanInt();"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return response - 1;"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Prints list of Lessons in a selected Module."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param module Instance of Module object."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void printLessonList(Module module) {"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(module.toString());"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (index \u003d 1; index \u003c\u003d module.getLessons().size(); index++) {"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            System.out.println(\" \\t\" + index + \". \" + module.getLessons().get(index - 1).getLessonName() + \" \""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    + module.getLessons().get(index - 1).getLessonTimeString());"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Prints list of Assignments in a selected Module."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param module Instance of Module object."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void printAssignmentList(Module module) {"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(module.toString());"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (index \u003d 1; index \u003c\u003d module.getAssignments().size(); index++) {"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.println(\" \\t\" + index + \". \" + module.getAssignments().get(index - 1).getDescription());"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Prints list of Assessments in a selected Module."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param module Instance of Module object."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void printAssessmentList(Module module) {"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" \" + module.toString());"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (index \u003d 1; index \u003c\u003d module.getAssessments().size(); index++) {"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            System.out.println(\" \\t\" + index + \". \" + module.getAssessments().get(index - 1).getName() + \" \""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    + module.getAssessments().get(index - 1).getStartTime() + \" to \""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    + module.getAssessments().get(index - 1).getEndTime());"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints list of semesters."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList Instance containing List of all Semester objects."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void printSemesterList(SemesterList semesterList) {"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (Semester semester : semesterList.getSemesterList()) {"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            System.out.println(\" \\t\" + index++ + \". \" + semester.getAcademicYear() + \" \""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    + semester.getSemesterName());"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints notification for added Semester."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semester Semester object being added."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printSemesterAddedMessage(Semester semester) {"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" \\\"\" + semester.getAcademicYear() + \" \" + semester.getSemesterName()"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + \"\\\" has been added!\");"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints notification for removed Semester."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semester Semester object being removed."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printSemesterRemovalMessage(Semester semester) {"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" \" + semester.getAcademicYear() + \" \" + semester.getSemesterName() + \" has been removed.\");"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints notification for added Module."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param module Module object being added."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printModuleAddedMessage(Module module) {"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" \\\"\" + module.getModuleCode() + \" \" + module.getModuleName() + \"\\\" has been added!\");"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints notification for removed Module."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param module Module object being removed."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printModuleRemovalMessage(Module module) {"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" \" + module.getModuleCode() + \" \" + module.getModuleName() + \" has been removed.\");"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints notification for added Lesson."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param moduleCode Module code of Lesson being added."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param lesson     Lesson object being added."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printLessonAddedMessage(String moduleCode, Lesson lesson) {"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" \\\"\" + moduleCode + \" \" + lesson.getLessonName() + \"\\\" has been added!\");"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints notification for removed Lesson."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param moduleCode Module code of Lesson being removed."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param lesson     Lesson object being removed."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printLessonRemovalMessage(String moduleCode, Lesson lesson) {"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" \" + moduleCode + \" \" + lesson.getLessonName() + \" has been removed.\");"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints notification for added Assignment."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param assignment Assignment object being added."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printAssignmentAddedMessage(Assignment assignment) {"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" \\\"\" + assignment.getModuleCode() + \" \" + assignment.getDescription()"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                + \"\\\" has been added!\");"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints notification for removed Assignment."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param assignment Assignment object being removed."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printAssignmentRemovalMessage(Assignment assignment) {"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" \" + assignment.getModuleCode() + \" \" + assignment.getDescription() + \" has been removed.\");"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints notification for added Assessment."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param assessment Assessment object being added."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printAssessmentAddedMessage(Assessment assessment) {"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" \\\"\" + assessment.getModuleCode() + \" \" + assessment.getName() + \"\\\" has been added!\");"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints notification for removed Assessment."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param assessment Assessment object being removed."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void printAssessmentRemovalMessage(Assessment assessment) {"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        System.out.println(\" \" + assessment.getModuleCode() + \" \" + assessment.getName() + \" has been removed.\");"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 78,
      "KahLokKee": 521,
      "jasperosy": 391,
      "debbiextan": 48
    }
  },
  {
    "path": "src/main/java/oof/command/AddAssessmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Assessment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Semester;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class AddAssessmentCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private String line;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private Module module;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private Semester semester;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int INDEX_NAME \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int INDEX_TIMES \u003d 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int INDEX_START_TIME \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int INDEX_END_TIME \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Constructor for AddAssessmentCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param line Command inputted by user for processing."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public AddAssessmentCommand(String line) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        this.line \u003d line;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, Storage storage) throws OofException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String[] nameAndDates \u003d line.split(\" /from \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (!hasName(nameAndDates)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new OofException(\"OOPS!!! The assessment needs a name.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else if (!hasStartTime(nameAndDates)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new OofException(\"OOPS!!! The assessment needs a start time.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else if (!hasEndTime(nameAndDates)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new OofException(\"OOPS!!! The assessment needs an end time.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String name \u003d nameAndDates[INDEX_NAME].trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String[] dateSplit \u003d nameAndDates[INDEX_TIMES].split(\" /to \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String startDate \u003d parseTimeStamp(dateSplit[INDEX_START_TIME]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String endDate \u003d parseTimeStamp(dateSplit[INDEX_END_TIME]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (isDateValid(startDate) \u0026\u0026 isDateValid(endDate)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            SimpleDateFormat format \u003d new java.text.SimpleDateFormat(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                Date newStartTime \u003d format.parse(dateSplit[INDEX_START_TIME]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                Date newEndTime \u003d format.parse(dateSplit[INDEX_END_TIME]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                if (!isStartDateBeforeEndDate(newStartTime, newEndTime)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    throw new OofException(\"OOPS!!! The start time of an assessment cannot be after the end time.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                throw new OofException(\"Timestamp given is invalid! Please try again.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            Assessment assessment \u003d new Assessment(Module.getModuleCode(), name, startDate, endDate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            Module.addAssessment(assessment);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            ui.printAssessmentAddedMessage(assessment);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            storage.writeSemesterList(semesterList, semester, module);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else if (isDateValid(startDate)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new OofException(\"OOPS!!! The end date is invalid.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else if (isDateValid(endDate)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new OofException(\"OOPS!!! The start date is invalid.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new OofException(\"OOPS!!! The start and end dates are invalid.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if input has a name."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param lineSplit processed user input."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if name is more than length 0 and is not whitespace."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean hasName(String[] lineSplit) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return lineSplit[0].trim().length() \u003e 0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if input has a start time (argument given before \"/to\")."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param lineSplit processed user input."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if there is a start time and start time is not whitespace."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean hasStartTime(String[] lineSplit) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return lineSplit.length \u003e 1 \u0026\u0026 lineSplit[1].split(\" /to \")[0].trim().length() \u003e 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if input has an end time (argument given after \"/to\")."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param lineSplit processed user input."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if there is an end time and end time is not whitespace."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean hasEndTime(String[] lineSplit) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String[] timeSplit \u003d lineSplit[1].split(\" /to \");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return timeSplit.length \u003e 1 \u0026\u0026 timeSplit[1].trim().length() \u003e 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if start and end date are chronologically accurate."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param startTime Start time of assessment being added."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param endTime   End time of assessment being added."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if start date occurs before end date, false otherwise."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean isStartDateBeforeEndDate(Date startTime, Date endTime) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return startTime.compareTo(endTime) \u003c\u003d 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 120
    }
  },
  {
    "path": "src/main/java/oof/command/AddAssignmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.task.Assignment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class AddAssignmentCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private String line;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int INDEX_NAME \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int INDEX_DATE_BY \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Constructor for AddAssignmentCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param line Command inputted by user for processing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public AddAssignmentCommand(String line) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        this.line \u003d line;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, Storage storage) throws OofException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String[] nameAndDueDate \u003d line.split(\" /by \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (!hasName(nameAndDueDate)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new OofException(\"OOPS!!! The assignment needs a name.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else if (!hasDueDate(nameAndDueDate)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new OofException(\"OOPS!!! The assignment needs a due date.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String name \u003d nameAndDueDate[INDEX_NAME].trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String date \u003d parseTimeStamp(nameAndDueDate[INDEX_DATE_BY].trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (isDateValid(date)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            Assignment task \u003d new Assignment(Module.getModuleName(),name, date);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            tasks.addTask(task);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            ui.printAssignmentAddedMessage(task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            storage.writeTaskList(tasks);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new OofException(\"OOPS!!! The due date is invalid.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if assignment has a name."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param lineSplit processed user input."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if name is more than length 0 and is not whitespace"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean hasName(String[] lineSplit) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return lineSplit[INDEX_NAME].trim().length() \u003e 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if assignment has a due date."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param lineSplit processed user input."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if there is a due date and due date is not whitespace."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean hasDueDate(String[] lineSplit) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return lineSplit.length !\u003d 1 \u0026\u0026 lineSplit[INDEX_DATE_BY].trim().length() \u003e 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 71
    }
  },
  {
    "path": "src/main/java/oof/command/AddDeadlineCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Command that appends a new Deadline"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * object to the TaskList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "public class AddDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String line;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_DESCRIPTION \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_DATE_BY \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for AddDeadlineCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param line Command inputted by user for processing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public AddDeadlineCommand(String line) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        this.line \u003d line;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Performs a series of three main tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Processes the Command inputted by user into description and date."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks for the validity of the format of date."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Adds a Deadline object to the TaskList"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * and prints the object added before calling methods in Storage to"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * store the object added in the hard disk."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param tasks        Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui           Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storage      Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *                     objects to hard disk."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws OofException if user input invalid commands."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, Storage storage) throws OofException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String[] lineSplit \u003d line.split(\"/by\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (!hasDescription(lineSplit)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new OofException(\"OOPS!!! The deadline needs a description.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (!hasDueDate(lineSplit)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new OofException(\"OOPS!!! The deadline needs a due date.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String description \u003d lineSplit[INDEX_DESCRIPTION].trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String date \u003d parseTimeStamp(lineSplit[INDEX_DATE_BY].trim());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (isDateValid(date)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            Task task \u003d new Deadline(description, date);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            tasks.addTask(task);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ui.addTaskMessage(task, tasks.getSize());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            storage.writeTaskList(tasks);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new OofException(\"OOPS!!! The due date is invalid.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks if input has a description."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param lineSplit processed user input."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return true if description is more than length 0 and is not whitespace"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private boolean hasDescription(String[] lineSplit) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return lineSplit[INDEX_DESCRIPTION].trim().length() \u003e 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks if input has a due date."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param lineSplit processed user input."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return true if there is a due date and due date is not whitespace."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private boolean hasDueDate(String[] lineSplit) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return lineSplit.length !\u003d 1 \u0026\u0026 lineSplit[INDEX_DATE_BY].trim().length() \u003e 0;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Checks if ExitCommand is called for OofException to terminate."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 55,
      "jasperosy": 38
    }
  },
  {
    "path": "src/main/java/oof/command/AddEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Command to add Event objects"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * to the TaskList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String line;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for AddEventCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param line Command inputted by user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public AddEventCommand(String line) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        this.line \u003d line;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Performs a series of three main tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Processes the Command inputted by user into description and date."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks for the validity of the format of date."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Adds an Event object to the TaskList"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * and prints the object added before calling methods in Storage to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * store the object added in the hard disk."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param tasks        Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui           Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storage      Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *                     objects to hard disk."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws OofException if user input invalid commands."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, Storage storage) throws OofException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String[] lineSplit \u003d line.split(\" /from \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (!hasDescription(lineSplit)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new OofException(\"OOPS!!! The event needs a description.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (!hasStartDate(lineSplit)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new OofException(\"OOPS!!! The event needs a start date.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (!hasEndDate(lineSplit)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new OofException(\"OOPS!!! The event needs an end date.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String description \u003d lineSplit[0].trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String[] dateSplit \u003d lineSplit[1].split(\" /to \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String startDate \u003d parseTimeStamp(dateSplit[0]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String endDate \u003d parseTimeStamp(dateSplit[1]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (isDateValid(startDate) \u0026\u0026 isDateValid(endDate)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            SimpleDateFormat format \u003d new java.text.SimpleDateFormat(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                Date newStartTime \u003d format.parse(dateSplit[0]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                Date newEndTime \u003d format.parse(dateSplit[1]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                if (!isStartDateBeforeEndDate(newStartTime, newEndTime)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                    throw new OofException(\"OOPS!!! The start date of an event cannot be after the end date.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                ArrayList\u003cEvent\u003e eventClashes \u003d checkClashes(tasks, newStartTime, newEndTime);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                boolean hasClashes \u003d !eventClashes.isEmpty();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                if (hasClashes) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    ui.printClashWarning(eventClashes);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    if (!isContinue(ui)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                        return;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                throw new OofException(\"Timestamp given is invalid! Please try again.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            Task task \u003d new Event(description, dateSplit[0], dateSplit[1]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            tasks.addTask(task);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ui.addTaskMessage(task, tasks.getSize());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            storage.writeTaskList(tasks);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (isDateValid(startDate)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new OofException(\"OOPS!!! The end date is invalid.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (isDateValid(endDate)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new OofException(\"OOPS!!! The start date is invalid.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new OofException(\"OOPS!!! The start and end dates are invalid.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Iterates through current task and checks if any events clashes with new event being added."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param arr          Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param newStartTime Start time of event."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param newEndTime   End time of event."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws ParseException if time entry is invalid."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public ArrayList\u003cEvent\u003e checkClashes(TaskList arr, Date newStartTime, Date newEndTime) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ArrayList\u003cEvent\u003e clashes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        SimpleDateFormat format \u003d new java.text.SimpleDateFormat(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (Task t : arr.getTasks()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            if (t instanceof Event) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                Event event \u003d (Event) t;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                Date currStartTime \u003d format.parse(event.getStartDateTime());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                Date currEndTime \u003d format.parse(event.getEndDateTime());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                if (isClash(newStartTime, newEndTime, currStartTime, currEndTime)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    clashes.add(event);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return clashes;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks if input has a description."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param lineSplit processed user input."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return true if description is more than length 0 and is not whitespace."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private boolean hasDescription(String[] lineSplit) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return lineSplit[0].trim().length() \u003e 0;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks if input has a start date (argument given before \"/to\")."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param lineSplit processed user input."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return true if there is a start date and start date is not whitespace."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private boolean hasStartDate(String[] lineSplit) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return lineSplit.length \u003e 1 \u0026\u0026 lineSplit[1].split(\" /to \")[0].trim().length() \u003e 0;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks if input has an end date (argument given after \"/to\")."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param lineSplit processed user input."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return true if there is an end date and end date is not whitespace."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private boolean hasEndDate(String[] lineSplit) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String[] dateSplit \u003d lineSplit[1].split(\" /to \");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return dateSplit.length \u003e 1 \u0026\u0026 dateSplit[1].trim().length() \u003e 0;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks if start and end date are chronologically accurate."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param startTime Start time of event being added."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param endTime   End time of event being added."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return true if start date occurs before end date, false otherwise."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private boolean isStartDateBeforeEndDate(Date startTime, Date endTime) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return startTime.compareTo(endTime) \u003c\u003d 0;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks if there is an overlap of event timing."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param newStartTime  Start time of event being added."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param newEndTime    End time of event being added."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param currStartTime Start time of event being compared."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param currEndTime   End time of event being added."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return true if there is an overlap of event timing."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private boolean isClash(Date newStartTime, Date newEndTime, Date currStartTime, Date currEndTime) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return (newStartTime.compareTo(currStartTime) \u003e\u003d 0 \u0026\u0026 newStartTime.compareTo(currEndTime) \u003c 0)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                || (newEndTime.compareTo(currStartTime) \u003e 0 \u0026\u0026 newEndTime.compareTo(currEndTime) \u003c\u003d 0);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks if user wants to continue adding an event when there is a clash in events."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return true if response equals \"Y\", false otherwise."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private boolean isContinue(Ui ui) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String response \u003d ui.printContinuePrompt();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return response.equals(\"Y\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Checks if ExitCommand is called for Oof to terminate."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 154,
      "jasperosy": 40
    }
  },
  {
    "path": "src/main/java/oof/command/AddLessonCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Lesson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Semester;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class AddLessonCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private String line;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int INDEX_NAME \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int INDEX_TIMES \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int INDEX_START_TIME \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int INDEX_END_TIME \u003d 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private Module module;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private Semester semester;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Constructor for AddLessonCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param line Command inputted by user for processing."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public AddLessonCommand(String line) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        this.line \u003d line;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, Storage storage) throws OofException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String[] nameAndDates \u003d line.split(\" /from \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (!hasName(nameAndDates)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new OofException(\"OOPS!!! The lesson needs a name.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else if (!hasStartTime(nameAndDates)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new OofException(\"OOPS!!! The lesson needs a start time.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else if (!hasEndTime(nameAndDates)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new OofException(\"OOPS!!! The lesson needs an end time.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String name \u003d nameAndDates[INDEX_NAME].trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String[] dateSplit \u003d nameAndDates[INDEX_TIMES].split(\" /to \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String startDate \u003d parseTimeStamp(dateSplit[INDEX_START_TIME]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String endDate \u003d parseTimeStamp(dateSplit[INDEX_END_TIME]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (isDateValid(startDate) \u0026\u0026 isDateValid(endDate)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            SimpleDateFormat format \u003d new java.text.SimpleDateFormat(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                Date newStartTime \u003d format.parse(dateSplit[INDEX_START_TIME]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                Date newEndTime \u003d format.parse(dateSplit[INDEX_END_TIME]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                if (!isStartDateBeforeEndDate(newStartTime, newEndTime)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    throw new OofException(\"OOPS!!! The start time of a lesson cannot be after the end time.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                throw new OofException(\"Timestamp given is invalid! Please try again.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            Lesson lesson \u003d new Lesson(name, startDate, endDate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            Module.addLesson(lesson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            ui.printLessonAddedMessage(Module.getModuleCode(), lesson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            storage.writeSemesterList(semesterList, semester, module);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else if (isDateValid(startDate)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new OofException(\"OOPS!!! The end date is invalid.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else if (isDateValid(endDate)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new OofException(\"OOPS!!! The start date is invalid.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new OofException(\"OOPS!!! The start and end dates are invalid.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if input has a name."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param lineSplit processed user input."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if name is more than length 0 and is not whitespace."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean hasName(String[] lineSplit) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return lineSplit[0].trim().length() \u003e 0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if input has a start time (argument given before \"/to\")."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param lineSplit processed user input."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if there is a start time and start time is not whitespace."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean hasStartTime(String[] lineSplit) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return lineSplit.length \u003e 1 \u0026\u0026 lineSplit[1].split(\" /to \")[0].trim().length() \u003e 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if input has an end time (argument given after \"/to\")."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param lineSplit processed user input."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if there is an end time and end time is not whitespace."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean hasEndTime(String[] lineSplit) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String[] timeSplit \u003d lineSplit[1].split(\" /to \");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return timeSplit.length \u003e 1 \u0026\u0026 timeSplit[1].trim().length() \u003e 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if start and end date are chronologically accurate."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param startTime Start time of lesson being added."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param endTime   End time of lesson being added."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if start date occurs before end date, false otherwise."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean isStartDateBeforeEndDate(Date startTime, Date endTime) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return startTime.compareTo(endTime) \u003c\u003d 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 120
    }
  },
  {
    "path": "src/main/java/oof/command/AddModuleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Semester;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class AddModuleCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private String line;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int INDEX_CODE \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int INDEX_NAME \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private Semester semester;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Constructor for AddModuleCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param line Command inputted by user for processing."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public AddModuleCommand(String line) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        this.line \u003d line;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, Storage storage) throws OofException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String codeAndName \u003d line.replaceFirst(\"/code\", \"\").trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (!hasCode(codeAndName)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new OofException(\"OOPS!! The module needs a code.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            String[] codeAndNameSplit \u003d codeAndName.split(\"/name\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            if (!hasName(codeAndNameSplit)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                throw new OofException(\"OOPS!! The module needs a name\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String[] codeAndNameSplit \u003d codeAndName.split(\"/name\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String code \u003d codeAndNameSplit[INDEX_CODE].trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String name \u003d codeAndNameSplit[INDEX_NAME].trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Module module \u003d new Module(code, name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Semester.addModule(module);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        ui.printModuleAddedMessage(module);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        storage.writeSemesterList(semesterList, semester, module);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if module has a code."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param code processed user input."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if code is more than length 0 and is not whitespace"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean hasCode(String code) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return code.trim().length() \u003e 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if module has a name."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param lineSplit processed user input."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if name is more than length 0 and is not whitespace"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean hasName(String[] lineSplit) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return lineSplit[INDEX_NAME].trim().length() \u003e 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 72
    }
  },
  {
    "path": "src/main/java/oof/command/AddSemesterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Semester;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class AddSemesterCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private String line;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int INDEX_YEAR \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int INDEX_NAME \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private Module module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Constructor for AddSemesterCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param line Command inputted by user for processing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public AddSemesterCommand(String line) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        this.line \u003d line;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, Storage storage) throws OofException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String yearAndName \u003d line.replaceFirst(\"/year\", \"\").trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (!hasYear(yearAndName)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new OofException(\"OOPS!! The semester needs a year.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            String[] yearAndNameSplit \u003d yearAndName.split(\"/name\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            if (!hasName(yearAndNameSplit)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                throw new OofException(\"OOPS!! The semester needs a name\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String[] yearAndNameSplit \u003d yearAndName.split(\"/name\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String year \u003d yearAndNameSplit[INDEX_YEAR].trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String name \u003d yearAndNameSplit[INDEX_NAME].trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Semester semester \u003d new Semester(year, name);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        semesterList.addSemester(semester);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        ui.printSemesterAddedMessage(semester);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        storage.writeSemesterList(semesterList, semester, module);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if semester has a year."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param year processed user input."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if year is more than length 0 and is not whitespace"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean hasYear(String year) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return year.trim().length() \u003e 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if semester has a name."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param lineSplit processed user input."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if name is more than length 0 and is not whitespace"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean hasName(String[] lineSplit) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return lineSplit[INDEX_NAME].trim().length() \u003e 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 71
    }
  },
  {
    "path": "src/main/java/oof/command/AddToDoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Command to add Todo objects to TaskList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "public class AddToDoCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String line;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_DESCRIPTION \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_DATE_ON \u003d 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for AddTodoCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param line Command inputted by user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public AddToDoCommand(String line) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        this.line \u003d line;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Performs a series of three main tasks."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Processes the Command inputted by user."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Adds the Todo object to TaskList"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Stores the object in hard disk by calling Storage before printing the object added."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param tasks     Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui      Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storage Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                objects to hard disk."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws OofException if user input invalid commands."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, Storage storage) throws OofException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String[] lineSplit \u003d line.split(\"/on\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (!hasDescription(lineSplit)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new OofException(\"OOPS!!! The todo needs a description.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (!hasOnDate(lineSplit)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new OofException(\"OOPS!!! The todo needs a date.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String description \u003d lineSplit[INDEX_DESCRIPTION].trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String onDate \u003d parseTimeStamp(lineSplit[INDEX_DATE_ON].trim());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (isDateValid(onDate)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            Task task \u003d new Todo(description, onDate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            tasks.addTask(task);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            storage.writeTaskList(tasks);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ui.addTaskMessage(task, tasks.getSize());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new OofException(\"OOPS!!! The date is invalid.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public String parseTimeStamp(String date) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            SimpleDateFormat format \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            Date parsed \u003d format.parse(date);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            return format.format(parsed);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } catch (ParseException | DateTimeException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            return \"failed\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks if input has a description."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return true if description is more than length 0 and is not whitespace."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private boolean hasDescription(String[] lineSplit) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return lineSplit[0].trim().length() \u003e 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks if input has a date."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param lineSplit processed user input."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return true if there is a date and date is not whitespace."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private boolean hasOnDate(String[] lineSplit) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return lineSplit.length !\u003d 1 \u0026\u0026 lineSplit[INDEX_DATE_ON].trim().length() \u003e 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Checks if ExitCommand is called for Oof to terminate."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 16,
      "KahLokKee": 55,
      "jasperosy": 35
    }
  },
  {
    "path": "src/main/java/oof/command/CalendarCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Todo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " * Represents a Command to print calendar."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class CalendarCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_DATE \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_TIME \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_DAY \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_MONTH \u003d 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int INDEX_YEAR \u003d 2;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int MONTH_JANUARY \u003d 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int MONTH_DECEMBER \u003d 12;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int SIZE_CALENDAR \u003d 32;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private ArrayList\u003cArrayList\u003cString[]\u003e\u003e calendarTasks \u003d new ArrayList\u003c\u003e(SIZE_CALENDAR);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for CalendarCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param argumentArray Array of command arguments input by user."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public CalendarCommand(String[] argumentArray) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        while (calendarTasks.size() !\u003d SIZE_CALENDAR) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            calendarTasks.add(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            this.month \u003d Integer.parseInt(argumentArray[INDEX_MONTH]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            this.year \u003d Integer.parseInt(argumentArray[INDEX_YEAR]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            if (month \u003c MONTH_JANUARY || month \u003e MONTH_DECEMBER) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                throw new OofException(\"Invalid month\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException | OofException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            // 0-based indexing to 1-based indexing"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            this.month \u003d calendar.get(Calendar.MONTH) + 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            this.year \u003d calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints the calendar for the queried month and year."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param tasks        Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui           Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storage      Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                     objects to hard disk."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        YearMonth yearMonth \u003d YearMonth.of(year, month);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (Task task : tasks.getTasks()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            if (task instanceof Todo) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                Todo todo \u003d (Todo) task;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                String[] dateSplit \u003d todo.getTodoDate().split(\"-\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                if (verifyTask(dateSplit)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    String description \u003d todo.getDescription();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    String time \u003d \"\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    int day \u003d Integer.parseInt(dateSplit[INDEX_DAY]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    addEntry(time, description, day);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                Deadline deadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                String[] dateTimeSplit \u003d deadline.getDeadlineDateTime().split(\" \");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                String[] dateSplit \u003d dateTimeSplit[INDEX_DATE].split(\"-\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                if (verifyTask(dateSplit)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    String description \u003d deadline.getDescription();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    String time \u003d dateTimeSplit[INDEX_TIME];"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    int day \u003d Integer.parseInt(dateSplit[INDEX_DAY]);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    addEntry(time, description, day);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                String[] dateTimeSplit \u003d event.getStartDateTime().split(\" \");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                String[] dateSplit \u003d dateTimeSplit[INDEX_DATE].split(\"-\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                if (verifyTask(dateSplit)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    String description \u003d event.getDescription();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    String time \u003d dateTimeSplit[INDEX_TIME];"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    int day \u003d Integer.parseInt(dateSplit[INDEX_DAY]);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    addEntry(time, description, day);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (ArrayList\u003cString[]\u003e day : calendarTasks) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            day.sort(new SortByTime());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ui.printCalendar(yearMonth, calendarTasks);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks if task occurs in the month and year queried by user."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param dateSplit Array containing day, month and year."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return true if task month and year is equal to month and year queried by user."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public boolean verifyTask(String[] dateSplit) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        int month \u003d Integer.parseInt(dateSplit[INDEX_MONTH]);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        int year \u003d Integer.parseInt(dateSplit[INDEX_YEAR]);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return this.month \u003d\u003d month \u0026\u0026 this.year \u003d\u003d year;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Adds an entry to the calendarTask ArrayList."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param time        Time of task."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param day         Day of task."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void addEntry(String time, String description, int day) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String[] entry \u003d {time, description};"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.calendarTasks.get(day).add(entry);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 129,
      "jasperosy": 6
    }
  },
  {
    "path": "src/main/java/oof/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Command object that corresponds to specific commands"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " * defined by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Abstract parent of all other Command subclasses."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Invokes other Command subclasses based on the input given by the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param tasks        Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui           Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storage      Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                     objects to hard disk."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws OofException Catches invalid commands given by user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public abstract void execute(SemesterList semesterList, TaskList tasks, Ui ui, Storage storage) throws OofException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Parses the Timestamp given by the user and returns the parsed"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * date as a string if the date is valid."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param date Timestamp supplied by user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return Parsed Timestamp if the Timestamp is valid, else returns \"failed\"."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public String parseTimeStamp(String date) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            SimpleDateFormat format \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            Date parsed \u003d format.parse(date);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return format.format(parsed);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (ParseException | DateTimeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return \"failed\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks if date is valid."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param date String processed by ParseTimeStamp method."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return true if date is not equals to \"failed\", false otherwise."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    protected boolean isDateValid(String date) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return !date.equals(\"failed\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Converts a date into a string."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param date The date to be converted."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return A string in the date format specified."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public String convertDateToString(Date date) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"HH:mm\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return format.format(date);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Converts a string into a date."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param date The string to be converted."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return A date in the date format specified."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws ParseException Throws an exception if datetime cannot be parsed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public Date convertStringToDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return new SimpleDateFormat(\"HH:mm\").parse(date);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Get Date from Task object."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param task Task object."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return String containing date from Task object."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    protected String getDate(Task task) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (task instanceof Todo) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            return ((Todo) task).getTodoDate().substring(0, 10);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            return ((Deadline) task).getDeadlineDateTime().substring(0, 10);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            return ((Event) task).getStartDateTime().substring(0, 10);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Comparator to sort tasks by their time in ascending order."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    class SortByTime implements Comparator\u003cString[]\u003e {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        public int compare(String[] a, String[] b) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            if (a[0].equals(\"\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            } else if (b[0].equals(\"\")) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            int hour1 \u003d Integer.parseInt(a[0].substring(0, 2));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            int hour2 \u003d Integer.parseInt(b[0].substring(0, 2));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            if (hour1 !\u003d hour2) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                return hour1 - hour2;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                int minute1 \u003d Integer.parseInt(a[0].substring(3, 5));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                int minute2 \u003d Integer.parseInt(b[0].substring(3, 5));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                return minute1 - minute2;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        public boolean equals(Object object) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return this \u003d\u003d object;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Checks if ExitCommand is called for Oof to terminate."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return true if ExitCommand is called, false otherwise."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 22,
      "KahLokKee": 82,
      "jasperosy": 35
    }
  },
  {
    "path": "src/main/java/oof/command/CompleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Command to mark Task as done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "public class CompleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for CompleteCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param index Represents the index of the Task to be marked as done."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public CompleteCommand(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Marks the specific Task defined by the user as done"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * after confirming the validity of the Command inputted by the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param tasks        Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui           Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storage      Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            if (!tasks.isIndexValid(this.index)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                throw new OofException(\"OOPS!!! The index is invalid.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            } else if (tasks.getTask(this.index).getStatus()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                throw new OofException(\"OOPS!!! The task is already marked as done.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                Task task \u003d tasks.getTask(this.index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                task.setStatus();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                ui.completeMessage(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                storage.writeTaskList(tasks);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                storage.checkDone(task.getStatusIcon());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (OofException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ui.printOofException(e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Checks if ExitCommand is called for Oof to terminate."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 25,
      "jasperosy": 37
    }
  },
  {
    "path": "src/main/java/oof/command/DeleteAssessmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Assessment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Semester;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * Represents a Command to delete a specific Assessment."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class DeleteAssessmentCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int EMPTY \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private Module module;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private Semester semester;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Constructor for DeleteAssessmentCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param index Represents the index of the Assessment to be deleted."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public DeleteAssessmentCommand(int index) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, Storage storage) throws OofException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (Module.getAssessments().size() \u003d\u003d EMPTY) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new OofException(\"OOPS!!! Invalid number!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Assessment assessment \u003d Module.getAssessment(this.index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Module.removeAssessment(this.index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        ui.printAssessmentRemovalMessage(assessment);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        storage.writeSemesterList(semesterList, semester, module);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 47
    }
  },
  {
    "path": "src/main/java/oof/command/DeleteAssignmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.task.Assignment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * Represents a Command to delete a specific Assignment."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class DeleteAssignmentCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int EMPTY \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Constructor for DeleteAssignmentCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param index Represents the index of the Assignment to be deleted."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public DeleteAssignmentCommand(int index) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, Storage storage) throws OofException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (Module.getAssignments().size() \u003d\u003d EMPTY) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new OofException(\"OOPS!!! Invalid number!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Assignment assignment \u003d Module.getAssignment(this.index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        tasks.deleteTask(this.index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        ui.printAssignmentRemovalMessage(assignment);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        storage.writeTaskList(tasks);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 43
    }
  },
  {
    "path": "src/main/java/oof/command/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Command to delete a specific Task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for DeleteCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param index Represents the index of the Task to be deleted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Deletes the specific Task defined by the user after confirming the validity of the Command inputted by the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param tasks        Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui           Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storage      Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                     objects to hard disk."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws OofException if user input invalid commands."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, Storage storage) throws OofException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (!tasks.isIndexValid(this.index)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            throw new OofException(\"OOPS!!! Invalid number!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Task task \u003d tasks.getTask(this.index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        tasks.deleteTask(this.index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ui.deleteMessage(task, tasks.getSize());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        storage.writeTaskList(tasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks if ExitCommand is called for OOF to terminate."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 25,
      "jasperosy": 30
    }
  },
  {
    "path": "src/main/java/oof/command/DeleteLessonCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Lesson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Semester;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * Represents a Command to delete a specific Lesson."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class DeleteLessonCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int EMPTY \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private Module module;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private Semester semester;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Constructor for DeleteLessonCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param index Represents the index of the Lesson to be deleted."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public DeleteLessonCommand(int index) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, Storage storage) throws OofException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (Module.getLessons().size() \u003d\u003d EMPTY) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new OofException(\"OOPS!!! Invalid number!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Lesson lesson \u003d Module.getLesson(this.index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Module.removeLesson(this.index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        ui.printLessonRemovalMessage(Module.getModuleCode(), lesson);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        storage.writeSemesterList(semesterList, semester, module);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 47
    }
  },
  {
    "path": "src/main/java/oof/command/DeleteModuleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Semester;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * Represents a Command to delete a specific Module."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class DeleteModuleCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int EMPTY \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private Semester semester;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Constructor for DeleteModuleCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param index Represents the index of the Module to be deleted."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public DeleteModuleCommand(int index) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, Storage storage) throws OofException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (Semester.getModules().size() \u003d\u003d EMPTY) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new OofException(\"OOPS!!! Invalid number!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Module module \u003d Semester.getModule(this.index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Semester.removeModule(this.index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        ui.printModuleRemovalMessage(module);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        storage.writeSemesterList(semesterList, semester, module);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 45
    }
  },
  {
    "path": "src/main/java/oof/command/DeleteSemesterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Semester;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * Represents a Command to delete a specific Semester."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class DeleteSemesterCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int EMPTY \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private Module module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Constructor for DeleteSemesterCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param index Represents the index of the Semester to be deleted."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public DeleteSemesterCommand(int index) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, Storage storage) throws OofException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (semesterList.getSize() \u003d\u003d EMPTY) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new OofException(\"OOPS!!! Invalid number!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Semester semester \u003d semesterList.getSemester(this.index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        semesterList.removeSemester(this.index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        ui.printSemesterRemovalMessage(semester);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        storage.writeSemesterList(semesterList, semester, module);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 45
    }
  },
  {
    "path": "src/main/java/oof/command/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " * Represents a Command to terminate Oof."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for ExitCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Exits the Oof program."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param tasks        Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui           Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storage      Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ui.printByeMessage();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Checks if ExitCommand is called for Oof to terminate."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return true."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 11,
      "jasperosy": 30
    }
  },
  {
    "path": "src/main/java/oof/command/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Command that finds and displays specific tasks in the TaskList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String line;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for FindCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param line Command inputted by user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public FindCommand(String line) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        this.line \u003d line;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Finds the Tasks that contain the keyword(s) specified"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * by the user after processing the Command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Displays the Tasks found after collating them."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param tasks        Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui           Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storage      Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                     objects to hard disk."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws OofException if user input invalid commands."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, Storage storage) throws OofException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String[] lineSplit \u003d line.split(\" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (!hasDescription(lineSplit)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new OofException(\"OOPS!!! The find command needs a description.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        String item \u003d lineSplit[1].trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ArrayList\u003cTask\u003e matchedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            if (tasks.getTask(i).getDescription().contains(item)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                matchedTasks.add(tasks.getTask(i));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ui.printMatchingTasks(matchedTasks);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks if input has a description."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param lineSplit processed user input."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return true if description is more than length 0 and is not whitespace."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private boolean hasDescription(String[] lineSplit) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return lineSplit.length !\u003d 1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Checks if ExitCommand is called for Oof to terminate."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 37,
      "jasperosy": 37
    }
  },
  {
    "path": "src/main/java/oof/command/FreeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * Represents a Command to search for free time slots."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class FreeCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private String dateWanted;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private ArrayList\u003cString\u003e eventsOnSameDay \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private ArrayList\u003cDate\u003e eventStartTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private ArrayList\u003cDate\u003e eventEndTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private ArrayList\u003cString\u003e eventNamesSorted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int EMPTY \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int INDEX_DATE \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int INDEX_TIME \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int INDEX_NAME \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int INDEX_TIME_START \u003d 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int INDEX_TIME_END \u003d 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int TOTAL_TIME_SLOTS \u003d 17;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private String[] startingTimeSlots \u003d {\"07:00\", \"08:00\", \"09:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            \"14:00\", \"15:00\", \"16:00\", \"17:00\", \"18:00\", \"19:00\", \"20:00\", \"21:00\", \"22:00\", \"23:00\"};"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private String[] endingTimeSlots \u003d {\"08:00\", \"09:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\", \"14:00\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            \"15:00\", \"16:00\", \"17:00\", \"18:00\", \"19:00\", \"20:00\", \"21:00\", \"22:00\", \"23:00\", \"00:00\"};"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Constructor for FreeCommand."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param dateWanted The date to search for free time slots given by user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public FreeCommand(String dateWanted) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        this.dateWanted \u003d dateWanted;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Finds free time during the queried time period."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param tasks        Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui           Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storage      Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                     objects to hard disk."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws OofException if user input invalid commands."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, Storage storage) throws OofException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Date current \u003d new Date();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            if (isDateAfterCurrentDate(current, dateWanted) || isDateSame(current, dateWanted)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                findFreeTime(ui, tasks, this.dateWanted);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                throw new OofException(\"OOPS!!! Please enter a valid date!\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new OofException(\"OOPS!!! Date is in the wrong format!\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Search for free time slots based on the current events recorded."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param ui            Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param tasks         Instance of TaskList that stores Task Objects."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param freeSlotsDate The user specified date."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws ParseException Exception may be thrown when parsing datetime."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws OofException Print customised error message."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void findFreeTime(Ui ui, TaskList tasks, String freeSlotsDate) throws ParseException, OofException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            Task task \u003d tasks.getTask(i);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            if (task instanceof Event) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                Event event \u003d (Event) tasks.getTask(i);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                String date \u003d event.getStartDateTime().split(\" \")[INDEX_DATE];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                String startTime \u003d event.getStartDateTime().split(\" \")[INDEX_TIME_START];"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                String endTime \u003d event.getEndDateTime().split(\" \")[INDEX_TIME_END];"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                populateList(date, freeSlotsDate, startTime, endTime, event);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (eventStartTimes.size() \u003d\u003d EMPTY) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            ui.printFreeTimeHeader(freeSlotsDate, getDayOfTheWeek(freeSlotsDate));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            for (int i \u003d 0; i \u003c TOTAL_TIME_SLOTS; i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                ui.printFreeSlots(startingTimeSlots[i], endingTimeSlots[i]);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            eventStartTimes.sort(new SortByTime());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            eventEndTimes.sort(new SortByTime());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            sortEventNames(eventsOnSameDay, eventStartTimes, eventNamesSorted);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            ui.printFreeTimeHeader(freeSlotsDate, getDayOfTheWeek(freeSlotsDate));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            parseOutput(ui);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Parses the output for finding free time slots if there are occupied slots."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param ui Prints relevant output."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws OofException Prints customised error message."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void parseOutput(Ui ui) throws OofException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            for (int i \u003d 0; i \u003c TOTAL_TIME_SLOTS; i++) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                Date startTimeSlot \u003d convertStringToDate(startingTimeSlots[i]);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                Date endTimeSlot \u003d convertStringToDate(endingTimeSlots[i]);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                if (eventStartTimes.size() \u003d\u003d EMPTY) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    ui.printFreeSlots(startingTimeSlots[i], endingTimeSlots[i]);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                } else if (isClash(startTimeSlot, endTimeSlot, eventStartTimes.get(INDEX_TIME),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                        eventEndTimes.get(INDEX_TIME))) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    ui.printEventDetails(eventNamesSorted.get(INDEX_NAME), startingTimeSlots[i], endingTimeSlots[i]);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    if (isEventEndTimeWithinSlot(endTimeSlot, eventEndTimes.get(INDEX_TIME))) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                        eventStartTimes.remove(INDEX_TIME);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                        eventEndTimes.remove(INDEX_TIME);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                        eventNamesSorted.remove(INDEX_NAME);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    ui.printFreeSlots(startingTimeSlots[i], endingTimeSlots[i]);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (DateTimeException | ParseException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            throw new OofException(\"Timestamp given is invalid! Please try again.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Populates the lists for tracking time and events."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param date Date of task."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param freeSlotsDate Date inputted by user."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param startTime Starting time of task."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param endTime Ending time of task."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param event Event task object."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws ParseException Exception may be thrown when parsing datetime."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws OofException Prints customised exception message."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void populateList(String date, String freeSlotsDate, String startTime, String endTime, Event event)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            throws OofException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            if (isSameDate(date, freeSlotsDate)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                String eventNameAndStartTime \u003d event.getDescription() + \"-\" + startTime;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                eventsOnSameDay.add(eventNameAndStartTime);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                eventStartTimes.add(convertStringToDate(startTime));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                eventEndTimes.add(convertStringToDate(endTime));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (DateTimeException | ParseException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            throw new OofException(\"Timestamp given is invalid! Please try again.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if there is an overlap of event timing with hourly time slots."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param slotStartTime Start time of the time slot being compared."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param slotEndTime   End time of the time slot being compared."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param eventStart    Start time of event being compared."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param eventEnd      End time of event being compared."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if there is an overlap of event timing."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean isClash(Date slotStartTime, Date slotEndTime, Date eventStart, Date eventEnd) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return (slotStartTime.compareTo(eventStart) \u003c\u003d EMPTY \u0026\u0026 slotEndTime.compareTo(eventStart) \u003e EMPTY)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                || (slotStartTime.compareTo(eventStart) \u003e\u003d EMPTY \u0026\u0026 eventEnd.compareTo(slotEndTime) \u003c\u003d EMPTY);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if event end time falls within the time slot."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param slotEndTime End time of the time slot being compared."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param eventEnd    End time of event being compared."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if the event end time lies within the time slot."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean isEventEndTimeWithinSlot(Date slotEndTime, Date eventEnd) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return eventEnd.compareTo(slotEndTime) \u003c\u003d 0;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if the event date is the same as the user specified date."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param eventDate     Date of event being compared."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param freeSlotsDate Date of free time to search for."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if event date and user specified date is the same."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean isSameDate(String eventDate, String freeSlotsDate) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return eventDate.equals(freeSlotsDate);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if user specified date is after the current date."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param currDate Current date."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param freeDate User specified date to search for free time."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if user specified date is after the current date, false otherwise."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws ParseException Throws an exception if date cannot be parsed."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean isDateAfterCurrentDate(Date currDate, String freeDate) throws ParseException {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Date freeSlotsDate \u003d format.parse(freeDate);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return freeSlotsDate.compareTo(currDate) \u003e\u003d 0;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if user specified date is current date."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param currDate Current Date."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param freeDate User specified date to search for free time."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if user specified date is current date."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private boolean isDateSame(Date currDate, String freeDate) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String currentDate \u003d format.format(currDate);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return currentDate.contains(freeDate);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Comparator to sort events by their time in ascending order."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    class SortByTime implements Comparator\u003cDate\u003e {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        public int compare(Date firstStartTime, Date secondStartTime) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            return firstStartTime.compareTo(secondStartTime);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Sorts all event names according to their event start time."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param eventsOnSameDay  ArrayList containing the unsorted event name and start time."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param eventStartTimes  ArrayList containing the start times sorted according in ascending order."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param eventNamesSorted ArrayList containing the sorted event names according to start time."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private void sortEventNames(ArrayList\u003cString\u003e eventsOnSameDay, ArrayList\u003cDate\u003e eventStartTimes,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                                ArrayList\u003cString\u003e eventNamesSorted) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        eventNamesSorted.addAll(eventsOnSameDay);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        for (int i \u003d 0; i \u003c eventsOnSameDay.size(); i++) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            String[] lineSplit \u003d eventsOnSameDay.get(i).split(\"-\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            String time \u003d lineSplit[INDEX_TIME_START];"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            String eventName \u003d lineSplit[INDEX_NAME];"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            for (int j \u003d 0; j \u003c eventsOnSameDay.size(); j++) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                if (time.equals(convertDateToString(eventStartTimes.get(j)))) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    eventNamesSorted.set(j, eventName);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Gets the day of the week from the user specified date."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param freeDate The user specified date to search for free time."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return The day of the week spelt in full."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws ParseException Throws an exception if datetime cannot be parsed."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private String getDayOfTheWeek(String freeDate) throws ParseException {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"EEEE\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Date dayOfWeek \u003d (new SimpleDateFormat(\"dd-MM-yyyy\")).parse(freeDate);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return format.format(dayOfWeek);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 198,
      "KahLokKee": 21,
      "jasperosy": 57
    }
  },
  {
    "path": "src/main/java/oof/command/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Command to print a help manual."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private static final int COMMANDS_BEGIN \u003d 8;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Constructor for individual Help Command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param keyword to indicate keyword that help is needed for."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public HelpCommand(String keyword) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints a help manual."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param tasks        Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui           Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storage      Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                     objects to hard disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws OofException if user input invalid commands."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, Storage storage) throws OofException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ArrayList\u003cString\u003e commands \u003d storage.readManual();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (keyword.isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ui.printHelpCommands();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            String description \u003d individualQuery(keyword, commands);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ui.printHelpCommand(description);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Get instruction for individual Help Command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param keyword keyword where individual instruction is needed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @return description      use of individual instruction."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @throws OofException if keyword is invalid."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private String individualQuery(String keyword, ArrayList\u003cString\u003e commands) throws OofException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        String description \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        for (int i \u003d COMMANDS_BEGIN; i \u003c commands.size(); i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            if (isMatchCommand(keyword, commands.get(i))) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                description \u003d commands.get(i);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            throw new OofException(\"Invalid keyword!\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Check if keyword and command String values match."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param keyword given by user."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param command stored in manual.txt."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @return boolean True if String values match."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private boolean isMatchCommand(String keyword, String command) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        int keywordEnd \u003d command.indexOf(\"  \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        String instruction \u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        if (isKeyword(keywordEnd)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            instruction \u003d command.substring(0, keywordEnd).toUpperCase();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            keyword \u003d keyword.toUpperCase();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return keyword.equals(instruction);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Check if keyword exists."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param index supposed end of keyword"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @return boolean True if end of keyword is more than zero (ie exists)."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private boolean isKeyword(int index) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return index \u003e 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 30,
      "debbiextan": 71
    }
  },
  {
    "path": "src/main/java/oof/command/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Command to list all Tasks in the TaskList."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for ListCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * List all the Tasks present in the TaskList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param tasks        Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui           Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storage      Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                     objects to hard disk."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ui.printTaskList(tasks);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Checks if ExitCommand is called for Oof to terminate."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 13,
      "jasperosy": 27
    }
  },
  {
    "path": "src/main/java/oof/command/RecurringCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import java.util.InputMismatchException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " * Represents a command to select and recur a task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "public class RecurringCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private int count;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private int frequency;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int COUNT_MIN \u003d 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private static final int COUNT_MAX \u003d 10;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int DAILY \u003d 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int WEEKLY \u003d 2;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int MONTHLY \u003d 3;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int YEARLY \u003d 4;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int DAYS_IN_WEEK \u003d 7;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Constructor for RecurringCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param index Index of the task to be selected as a recurring task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param count Number of recurrences for the selected task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param frequency Frequency of recurrences for the selected task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public RecurringCommand(int index, int count, int frequency) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        this.count \u003d count;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        this.frequency \u003d frequency;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Recurs a task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param tasks        Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui           Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storage      Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                     objects to hard disk."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws OofException if user input is invalid."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, Storage storage) throws OofException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (!tasks.isIndexValid(this.index)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            throw new OofException(\"OOPS!!! Please select a valid task!\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } else if (!isCountValid(this.count)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            throw new OofException(\"OOPS!!! The valid number of recurrences is from 1-10!\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                if (!isFrequencyValid(this.frequency)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                    throw new OofException(\"OOPS!!! Please enter a valid number!\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    setRecurringTask(ui, tasks, this.index, this.count, this.frequency);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    ui.printRecurringMessage(tasks);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    storage.writeTaskList(tasks);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            } catch (InputMismatchException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                throw new OofException(\"OOPS!!! Please enter a valid number!\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Sets the recurring task based on the number of recurrences and frequency."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param ui Instance of Ui to display relevant messages for recurring tasks."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param taskList Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param index Index of the task."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param count Number of recurrences for the recurring task."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param frequency Frequency of recurrence for the recurring task."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void setRecurringTask(Ui ui, TaskList taskList,int index, int count, int frequency) throws OofException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Task task \u003d taskList.getTask(index);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        task.setFrequency(frequency);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        taskList.deleteTask(index);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        taskList.addTaskToIndex(index, task);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        recurInstances(ui, taskList, task, count, frequency);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Increments the datetime of a task based on recurring frequency and adds the task to TaskList."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param ui Instance of Ui to display relevant messages for recurring tasks."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param taskList Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param task Recurring task."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param count Number of recurrences for the recurring task."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param frequency Frequency of recurrence for the recurring task."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void recurInstances(Ui ui, TaskList taskList, Task task, int count, int frequency) throws OofException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (task instanceof Todo) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d count; i++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                addToDoTask(taskList, task, i, frequency);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d count; i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                addDeadlineTask(taskList, task, i, frequency);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d count; i++) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                addEventTask(taskList, task, i, frequency);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Adds recurring todo task to the current list of task."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param taskList Current list of tasks stored in program."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param task Task to be set as a recurring instance."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param index Represents the nth time to which the recurring instance has been generated."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param frequency Represents the frequency of recurrence."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws OofException dateTimeIncrement method throws OofException."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void addToDoTask(TaskList taskList, Task task, int index, int frequency) throws OofException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String date \u003d ((Todo) task).getTodoDate();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        date \u003d dateTimeIncrement(date, frequency, index);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Todo todo \u003d new Todo(task.getDescription(), date);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        todo.setFrequency(frequency);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        taskList.addTask(todo);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Adds recurring deadline task to the current list of task."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param taskList Current list of tasks stored in program."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param task Task to be set as a recurring instance."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param index Represents the nth time to which the recurring instance has been generated."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param frequency Represents the frequency of recurrence."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws OofException dateTimeIncrement method throws OofException."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void addDeadlineTask(TaskList taskList, Task task, int index, int frequency) throws OofException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String date \u003d ((Deadline) task).getDeadlineDateTime();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        date \u003d dateTimeIncrement(date, frequency, index);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Deadline deadline \u003d new Deadline(task.getDescription(), date);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        deadline.setFrequency(frequency);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        taskList.addTask(deadline);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Adds recurring event task to the current list of task."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param taskList Current list of tasks stored in program."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param task Task to be set as a recurring instance."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param index Represents the nth time to which the recurring instance has been generated."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param frequency Represents the frequency of recurrence."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws OofException dateTimeIncrement method throws OofException."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void addEventTask(TaskList taskList, Task task, int index, int frequency) throws OofException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String startTiming \u003d ((Event) task).getStartDateTime();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        startTiming \u003d dateTimeIncrement(startTiming, frequency, index);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String endTiming \u003d ((Event) task).getEndDateTime();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        endTiming \u003d dateTimeIncrement(endTiming, frequency, index);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Event event \u003d new Event(task.getDescription(), startTiming, endTiming);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        event.setFrequency(frequency);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        taskList.addTask(event);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Increments the datetime based on the frequency of recurrence."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param dateTime Date and time."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param frequency Frequency of recurrence of task."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param increment Number of hops from the first recurrence."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return New datetime after incrementation."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws OofException Throws an exception if datetime cannot be parsed."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String dateTimeIncrement(String dateTime, int frequency, int increment) throws OofException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        SimpleDateFormat format;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (dateTime.split(\" \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            format \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            format \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            calendar.setTime(format.parse(dateTime));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            if (frequency \u003d\u003d DAILY) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                calendar.add(Calendar.DATE, DAILY * increment);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            } else if (frequency \u003d\u003d WEEKLY) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                calendar.add(Calendar.DATE, DAYS_IN_WEEK * increment);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            } else if (frequency \u003d\u003d MONTHLY) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                calendar.add(Calendar.MONTH, COUNT_MIN * increment);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            } else if (frequency \u003d\u003d YEARLY) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                calendar.add(Calendar.YEAR, COUNT_MIN * increment);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            dateTime \u003d format.format(calendar.getTime());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            throw new OofException(\"OOPS!!! Datetime is in the wrong format!\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Checks if the number of recurrences for the task selected is valid."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param count Number of recurrences in user input."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return True if count is valid, false otherwise."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private boolean isCountValid(int count) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return ((count \u003e\u003d COUNT_MIN) \u0026\u0026 (count \u003c\u003d COUNT_MAX));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Checks if the frequency of the recurrence is valid."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param frequency Frequency of the recurrence."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return True if the frequency is valid, false otherwise."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private boolean isFrequencyValid(int frequency) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return ((frequency \u003e\u003d DAILY) \u0026\u0026 (frequency \u003c\u003d YEARLY));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 46,
      "jasperosy": 178
    }
  },
  {
    "path": "src/main/java/oof/command/ScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Command to query schedule on a specified date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "public class ScheduleCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Constructor for ScheduleCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param date String containing date."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public ScheduleCommand(String date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Queries schedule on specified date."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param tasks        Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui           Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storage      Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                     objects to hard disk."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws OofException if user inputs invalid command or date has no tasks scheduled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, Storage storage) throws OofException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (this.date.isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new OofException(\"OOPS! Please enter a date!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        TaskList scheduledTasks \u003d scheduleByDate(tasks);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (scheduledTasks.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new OofException(\"There are no Tasks scheduled on \" + this.date + \".\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        ui.printTasksByDate(scheduledTasks, this.date);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks if input date and date of Task are equal."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param input date from user input."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param date  date from existing Task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return true if they are equal, false otherwise."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private boolean compareDate(String input, String date) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return input.equals(date);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Checks TaskList for Tasks associated to indicated date."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param arr ArrayList of Task objects."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @return ArrayList of Task objects associated to given date."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private TaskList scheduleByDate(TaskList arr) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        TaskList scheduledTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        for (int i \u003d 0; i \u003c arr.getSize(); i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            Task t \u003d arr.getTask(i);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            if (isValid(t)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                String date \u003d getDate(t);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                if (compareDate(this.date, date)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                    scheduledTasks.addTask(t);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return scheduledTasks;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Check Task type."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param task Task object."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @return boolean if Task object is of a valid Task type or not."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private boolean isValid(Task task) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return task instanceof Todo || task instanceof Deadline || task instanceof Event;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 46,
      "jasperosy": 3,
      "debbiextan": 46
    }
  },
  {
    "path": "src/main/java/oof/command/SnoozeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Command to snooze a Task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "public class SnoozeCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for SnoozeCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param index Index of Task to be snoozed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public SnoozeCommand(int index) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Replaces the timestamp of a Task after checking the validity of the task selected as well as the new"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * timestamp before performing the replacement."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param arr          Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui           Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storage      Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList arr, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            if (!isIndexValid(arr, this.index)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                throw new OofException(\"\\u2639 OOPS!!! Invalid number!\"); //u2639 is a sad face emoticon"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            Task task \u003d arr.getTask(this.index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                String description \u003d task.getDescription();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                String date \u003d ui.getTimeStamp();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                date \u003d parseTimeStamp(date);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                if (isDateValid(date)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    Deadline deadline \u003d new Deadline(description, date);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    arr.deleteTask(this.index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    arr.addTaskToIndex(this.index, deadline);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    ui.printSnoozeMessage(deadline);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    storage.writeTaskList(arr);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    throw new OofException(\"Timestamp given is invalid! Please try again.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                String description \u003d task.getDescription();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                String startDate \u003d ui.getTimeStamp();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                String endDate \u003d ui.getTimeStamp();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                startDate \u003d parseTimeStamp(startDate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                endDate \u003d parseTimeStamp(endDate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                if (isDateValid(startDate) \u0026\u0026 isDateValid(endDate)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    Event event \u003d new Event(description, startDate, endDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    arr.deleteTask(this.index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    arr.addTaskToIndex(this.index, event);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    ui.printSnoozeMessage(event);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    storage.writeTaskList(arr);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    throw new OofException(\"Timestamp given is invalid! Please try again.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                String description \u003d task.getDescription();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                String date \u003d ui.getTimeStamp();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                if (isDateValid(date)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    Todo todo \u003d new Todo(description, date);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    arr.deleteTask(this.index);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    arr.addTaskToIndex(this.index, todo);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    ui.printSnoozeMessage(todo);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    storage.writeTaskList(arr);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                    throw new OofException(\"Timestamp given is invalid! Please try again.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } catch (OofException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ui.printOofException(e);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks if index is within bounds of TaskList."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param arr   TaskList containing tasks."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param index Index of TaskList."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return True if index is within bounds of TaskList, false otherwise."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private boolean isIndexValid(TaskList arr, int index) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return index \u003c arr.getSize() \u0026\u0026 index \u003e\u003d 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 71,
      "jasperosy": 35
    }
  },
  {
    "path": "src/main/java/oof/command/StartTrackerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Command to start a task tracker."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "public class StartTrackerCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Constructor for StartTrackerCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param description of Task to start tracking."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public StartTrackerCommand(String description) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Starts tracker to track time taken for a task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param tasks        Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui           Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storage      Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                     objects to hard disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws OofException if description is empty or task if completed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, Storage storage) throws OofException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new OofException(\"Please enter a Task!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        Task task \u003d findTask(tasks, description);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (task.getStatus()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            throw new OofException(\"Task has already been completed.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            Date now \u003d new Date();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            String date \u003d convertDateToString(now);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            task.setStartDate(date);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            ui.printStartAtCurrent(task, date);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Parse String to get Task Description."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param task Task object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @return Description of task Task object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private String getTaskDescription(Task task) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        String[] byDate \u003d task.toString().split(\"/\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        String[] byDesc \u003d byDate[0].split(\" \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return byDesc[1];"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Find Task object in TaskList where descriptions match."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param list TaskList object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @return Task object that matches user given description."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @throws OofException if no matches are found."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    Task findTask(TaskList list, String desc) throws OofException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        for (int i \u003d 0; i \u003c list.getSize(); i++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            String currentDesc \u003d getTaskDescription(list.getTask(i));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            if (desc.equals(currentDesc)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                task \u003d list.getTask(i);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        if (task \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            throw new OofException(\"Invalid Task Description!\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 32,
      "debbiextan": 61
    }
  },
  {
    "path": "src/main/java/oof/command/StopTrackerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Command to stop a task tracker."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "public class StopTrackerCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private StartTrackerCommand stc;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Default Constructor for StopTrackerCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param description arguments entered by user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public StopTrackerCommand(String description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.stc \u003d new StartTrackerCommand(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks if a Start Time for Task object exists."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param task Task object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @return boolean True if Start Time for Task object is not null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private boolean isStarted(Task task) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return task.getStartDate() !\u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Gets the time difference between the start and end of a tracked task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param task Instance of Task object being tracked."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return number of minutes between start and end of a task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws OofException if start and end date is invalid."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private long getDateDiff(Task task) throws OofException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            Date start \u003d convertStringToDate(task.getStartDate());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            Date end \u003d convertStringToDate(task.getEndDate());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            long diffInMilliSeconds \u003d end.getTime() - start.getTime();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            return TimeUnit.MINUTES.convert(diffInMilliSeconds, TimeUnit.MILLISECONDS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            throw new OofException(\"Unable to retrieve time taken. Please retry!\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, Storage storage) throws OofException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            throw new OofException(\"Please enter a Task!\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        Task task \u003d stc.findTask(tasks, description);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        if (task.getStatus()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            throw new OofException(\"Task has already been completed.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        } else if (!isStarted(task)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            throw new OofException(\"Task has no Start time.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            Date now \u003d new Date();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            String date \u003d convertDateToString(now);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            task.setEndDate(date);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            long diff \u003d getDateDiff(task);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            ui.printEndAtCurrent(task, date, diff);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 27,
      "debbiextan": 55
    }
  },
  {
    "path": "src/main/java/oof/command/SummaryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "public class SummaryCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final int EMPTY \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private TaskList summary \u003d new TaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Constructor for SummaryCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public SummaryCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Get a summary of tomorrow\u0027s tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param input  LocalDateTime of a day after today."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param arr       TaskList of all tasks"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @return          a TaskList of tomorrow\u0027s tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private TaskList getSummary(String input, TaskList arr) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        for (int i \u003d 0; i \u003c arr.getSize(); i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            Task t \u003d arr.getTask(i);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            if (isValid(t)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                String date \u003d getDate(t);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                if (input.equals(date)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                    summary.addTask(t);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return summary;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Check Task type."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @param task      Task object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @return          boolean if Task object is of a valid Task type or not."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private boolean isValid(Task task) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return task instanceof Todo || task instanceof Deadline || task instanceof Event;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * Get the date of tomorrow in format DD-MM-YYYY."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     * @return date     String containing formatted date of tomorrow."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private String getTomorrowDate() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        LocalDateTime ldt \u003d LocalDateTime.now().plusDays(1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return format.format(ldt);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, Storage storage) throws OofException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        String tomorrow \u003d getTomorrowDate();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        TaskList summary \u003d getSummary(tomorrow, tasks);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (summary.getSize() \u003d\u003d EMPTY) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "            throw new OofException(\"There are no Tasks scheduled on \" + tomorrow + \".\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        ui.printTasksByDate(summary, tomorrow);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 3,
      "KahLokKee": 7,
      "debbiextan": 71
    }
  },
  {
    "path": "src/main/java/oof/command/ThresholdCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a command to choose the threshold for upcoming deadline reminders."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class ThresholdCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private String newThreshold;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Constructor for ThresholdCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param newThreshold New threshold input by user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public ThresholdCommand(String newThreshold) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        this.newThreshold \u003d newThreshold;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Sets the threshold for upcoming deadline reminders."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param tasks        Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui           Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storage      Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                     objects to hard disk."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @throws OofException if threshold given is invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, Storage storage) throws OofException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (!isThresholdNegative(newThreshold)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            updateThreshold(newThreshold, storage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            ui.printUpdatedThreshold(newThreshold);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new OofException(\"Threshold given invalid! Please input positive numbers.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Updates the threshold to the new threshold input by user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param newThreshold New threshold input by user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void updateThreshold(String newThreshold, Storage storage) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        storage.writeThreshold(newThreshold);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Checks if the new threshold given by user is negative."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param newThreshold New threshold input by user."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return  true if threshold given is negative, false otherwise."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public boolean isThresholdNegative(String newThreshold) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        int threshold \u003d Integer.parseInt(newThreshold);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return threshold \u003c 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 56,
      "KahLokKee": 13
    }
  },
  {
    "path": "src/main/java/oof/command/ViewAssessmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Semester;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * Represents a Command to view the list of Assessments."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class ViewAssessmentCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Default Constructor for ViewAssessmentCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public ViewAssessmentCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, Storage storage) throws OofException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        viewAssessmentList(semesterList, ui);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Prints the list of Assessments in a selected Module."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param semesterList Instance of SemesterList Object containing list of Semesters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param ui           Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws OofException if assessments list is empty."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private void viewAssessmentList(SemesterList semesterList, Ui ui) throws OofException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (Module.getAssessments().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new OofException(\"Assessments List is empty!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            int semesterWanted \u003d ui.scanSemesterOption(semesterList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            int moduleWanted \u003d ui.scanModuleOption(semesterList.getSemester(semesterWanted));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            ui.printAssessmentList(Semester.getModule(moduleWanted));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 49
    }
  },
  {
    "path": "src/main/java/oof/command/ViewAssignmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Semester;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * Represents a Command to view the list of Assignments."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class ViewAssignmentCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Default Constructor for ViewAssignmentCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public ViewAssignmentCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, Storage storage) throws OofException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        viewAssignmentList(semesterList, ui);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Prints the list of Assignments in a selected Module."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param semesterList Instance of SemesterList Object containing list of Semesters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param ui           Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws OofException if assignments list is empty."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private void viewAssignmentList(SemesterList semesterList, Ui ui) throws OofException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (Module.getAssignments().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new OofException(\"Assignments List is empty!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            int semesterWanted \u003d ui.scanSemesterOption(semesterList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            int moduleWanted \u003d ui.scanModuleOption(semesterList.getSemester(semesterWanted));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            ui.printAssignmentList(Semester.getModule(moduleWanted));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 49
    }
  },
  {
    "path": "src/main/java/oof/command/ViewLessonCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Semester;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * Represents a Command to view the list of Lessons."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class ViewLessonCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Default Constructor for ViewLessonCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public ViewLessonCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, Storage storage) throws OofException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        viewLessonList(semesterList, ui);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Prints the list of Lessons in a selected Module."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param semesterList Instance of SemesterList Object containing list of Semesters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param ui           Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws OofException if lessons list is empty."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private void viewLessonList(SemesterList semesterList, Ui ui) throws OofException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (Module.getLessons().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new OofException(\"Lessons List is empty!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            int semesterWanted \u003d ui.scanSemesterOption(semesterList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            int moduleWanted \u003d ui.scanModuleOption(semesterList.getSemester(semesterWanted));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            ui.printLessonList(Semester.getModule(moduleWanted));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 49
    }
  },
  {
    "path": "src/main/java/oof/command/ViewModuleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.Semester;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * Represents a Command to view the list of Modules."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class ViewModuleCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Default Constructor for SemesterCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public ViewModuleCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, Storage storage) throws OofException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        viewModuleList(semesterList, ui);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Prints the list of Modules in a selected Semester."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param semesterList Instance of SemesterList Object containing list of Semesters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param ui           Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws OofException if modules list is empty."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private void viewModuleList(SemesterList semesterList, Ui ui) throws OofException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (Semester.getModules().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new OofException(\"Module List is empty!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            int semesterWanted \u003d ui.scanSemesterOption(semesterList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            ui.printModuleList(semesterList.getSemester(semesterWanted));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 47
    }
  },
  {
    "path": "src/main/java/oof/command/ViewSemesterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * Represents a Command to view the list of Semesters."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class ViewSemesterCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Default Constructor for ViewSemesterCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public ViewSemesterCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Opens menu to view, add, edit or remove Semesters."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param semesterList Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param tasks        Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param ui           Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param storage      Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *                     objects to hard disk."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws OofException if semesterList or moduleList is empty."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, Storage storage) throws OofException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        viewSemesterList(semesterList, ui);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Prints the list of Semesters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param semesterList Instance of SemesterList Object containing list of Semesters."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param ui           Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws OofException if semesterList is empty."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private void viewSemesterList(SemesterList semesterList, Ui ui) throws OofException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (semesterList.getSemesterList().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new OofException(\"Semester List is empty!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            ui.printSemesterList(semesterList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 55
    }
  },
  {
    "path": "src/main/java/oof/command/ViewWeekCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.module.SemesterList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " * Represents a Command to view tasks for a particular week."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "public class ViewWeekCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private int day;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private int week;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private int lastDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int TIME \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int DESCRIPTION \u003d 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int DATE_FIRST \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int INDEX_DATE \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int INDEX_TIME \u003d 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int INDEX_DAY \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int INDEX_MONTH \u003d 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int INDEX_YEAR \u003d 2;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int MONTH_JANUARY \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int MONTH_DECEMBER \u003d 11;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int OFFSET \u003d 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int DAYS_IN_WEEK \u003d 7;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int LEAST_POSSIBLE_TASK_SIZE \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int LEAST_POSSIBLE_COL_SIZE \u003d 19;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private ArrayList\u003cArrayList\u003cString[]\u003e\u003e calendarTasks \u003d new ArrayList\u003c\u003e(DAYS_IN_WEEK);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Constructor for ViewWeekCommand."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param argumentArray Array of command arguments input by user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public ViewWeekCommand(String[] argumentArray) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        while (calendarTasks.size() !\u003d DAYS_IN_WEEK) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            calendarTasks.add(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            this.day \u003d Integer.parseInt(argumentArray[INDEX_DAY + OFFSET]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            this.month \u003d Integer.parseInt(argumentArray[INDEX_MONTH + OFFSET]) - 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            this.year \u003d Integer.parseInt(argumentArray[INDEX_YEAR + OFFSET]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            this.lastDate \u003d calendar.getActualMaximum(Calendar.DATE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            if ((this.day \u003c DATE_FIRST || this.day \u003e lastDate)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                    || (this.month \u003c MONTH_JANUARY || this.month \u003e MONTH_DECEMBER)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                this.day \u003d calendar.get(Calendar.DATE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                this.month \u003d calendar.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                this.year \u003d calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                this.lastDate \u003d calendar.getActualMaximum(Calendar.DATE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            this.day \u003d calendar.get(Calendar.DATE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            this.month \u003d calendar.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            this.year \u003d calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            this.lastDate \u003d calendar.getActualMaximum(Calendar.DATE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Prints calendar for the current week."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList Instance of SemesterList that stores Semester objects."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param tasks        Instance of TaskList that stores Task objects."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param ui           Instance of Ui that is responsible for visual feedback."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param storage      Instance of Storage that enables the reading and writing of Task"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *                     objects to hard disk."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void execute(SemesterList semesterList, TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Date date \u003d getStartDate(this.day, this.month, this.year);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        calendar.setTime(date);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        for (Task task : tasks.getTasks()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            if (task instanceof Todo) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                addToDoTask(task, calendar);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                addDeadlineTask(task, calendar);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                addEventTask(task, calendar);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        for (ArrayList\u003cString[]\u003e day : calendarTasks) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            day.sort(new SortByTime());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        int largestTaskSize \u003d getLargestTaskNo(calendarTasks);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        int largestColSize \u003d getLargestColSize(calendarTasks);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        ui.printViewWeek(calendarTasks, date, largestTaskSize, largestColSize);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Adds todo task to the list of task for the week if the task falls into the week of interest."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param task Task to be added to the list of task."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param calendar Instance of calendar index generation."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void addToDoTask(Task task, Calendar calendar) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Todo todo \u003d (Todo) task;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String[] dateSplit \u003d todo.getTodoDate().split(\"-\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (dateMatches(dateSplit)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            String description \u003d todo.getDescription();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            String time \u003d \"\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            int day \u003d ((Integer.parseInt(dateSplit[INDEX_DAY]) - calendar.get(Calendar.DATE)) + lastDate)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                    % lastDate;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            addEntry(time, description, day);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Adds deadline task to the list of task for the week if the task falls into the week of interest."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param task Task to be added to the list of task."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param calendar Instance of calendar index generation."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void addDeadlineTask(Task task, Calendar calendar) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Deadline deadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String[] dateTimeSplit \u003d deadline.getDeadlineDateTime().split(\" \");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String[] dateSplit \u003d dateTimeSplit[INDEX_DATE].split(\"-\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (dateMatches(dateSplit)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            String description \u003d deadline.getDescription();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            String time \u003d dateTimeSplit[INDEX_TIME];"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            int day \u003d ((Integer.parseInt(dateSplit[INDEX_DAY]) - calendar.get(Calendar.DATE)) + lastDate)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                    % lastDate;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            addEntry(time, description, day);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Adds event task to the list of task for the week if the task falls into the week of interest."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param task Task to be added to the list of task."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param calendar Instance of calendar index generation."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void addEventTask(Task task, Calendar calendar) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String[] dateTimeSplit \u003d event.getStartDateTime().split(\" \");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String[] dateSplit \u003d dateTimeSplit[INDEX_DATE].split(\"-\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (dateMatches(dateSplit)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            String description \u003d event.getDescription();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            String time \u003d dateTimeSplit[INDEX_TIME];"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            int day \u003d ((Integer.parseInt(dateSplit[INDEX_DAY]) - calendar.get(Calendar.DATE)) + lastDate)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                    % lastDate;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            addEntry(time, description, day);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Finds the largest number of tasks in the week to be printed."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param calendarTasks Tasks to be printed for the week."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return Largest number of tasks in the week to be printed."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private int getLargestTaskNo(ArrayList\u003cArrayList\u003cString[]\u003e\u003e calendarTasks) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        int maximum \u003d LEAST_POSSIBLE_TASK_SIZE;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        for (int i \u003d 0; i \u003c DAYS_IN_WEEK; i++) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            int currentSize \u003d calendarTasks.get(i).size();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            if (currentSize \u003e maximum) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                maximum \u003d currentSize;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return maximum;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Finds the task with the longest description and time."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param calendarTasks Tasks to be printed for the week."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return Return the size of the task with the longest description and time."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private int getLargestColSize(ArrayList\u003cArrayList\u003cString[]\u003e\u003e calendarTasks) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        int maximum \u003d LEAST_POSSIBLE_COL_SIZE;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        for (int i \u003d 0; i \u003c DAYS_IN_WEEK; i++) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            for (int j \u003d 0; j \u003c calendarTasks.get(i).size(); j++) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                String[] entry \u003d calendarTasks.get(i).get(j);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                String task \u003d entry[TIME] + \" \" + entry[DESCRIPTION];"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                if (task.length() \u003e maximum) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                    maximum \u003d task.length();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return maximum;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Gets Date object from day, month and year."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param day   Day of the month."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param month Month of the year."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param year  Year."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return Date object based on the day, month and year."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private Date getStartDate(int day, int month, int year) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        calendar.set(year, month, day);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        this.week \u003d calendar.get(Calendar.WEEK_OF_YEAR);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        int dayOfWeek \u003d calendar.get(Calendar.DAY_OF_WEEK) - 1;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        calendar.add(Calendar.DATE, -dayOfWeek);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return calendar.getTime();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Checks if task occurs in the month and year queried by user."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param dateSplit Array containing day, month and year."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return true if task month and year is equal to month and year queried by user."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private boolean dateMatches(String[] dateSplit) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        int day \u003d Integer.parseInt(dateSplit[INDEX_DATE]);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        int month \u003d Integer.parseInt(dateSplit[INDEX_MONTH]) - 1;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        int year \u003d Integer.parseInt(dateSplit[INDEX_YEAR]);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        calendar.set(year, month, day);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        int week \u003d calendar.get(Calendar.WEEK_OF_YEAR);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return this.week \u003d\u003d week \u0026\u0026 this.month \u003d\u003d month \u0026\u0026 this.year \u003d\u003d year;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Adds an entry to the calendarTask ArrayList."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param time        Time of task."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param day         Day of task."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private void addEntry(String time, String description, int day) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String[] entry \u003d {time, description};"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        this.calendarTasks.get(day).add(entry);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 19,
      "jasperosy": 222
    }
  },
  {
    "path": "src/main/java/oof/exception/OofException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "package oof.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " * Represents a newly specified Exception."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "public class OofException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Constructor for OofException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param error Error message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public OofException(String error) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        super(error);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasperosy": 16
    }
  },
  {
    "path": "src/main/java/oof/model/module/Assessment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Assessment class for module assessments."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class Assessment {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final String DELIMITER \u003d \"||\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String startTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String endTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for Assessment."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param moduleCode String containing module code."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param name       String containing assessment name."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param startTime  String containing start time of assessment."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param endTime    String containing end time of assessment."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public Assessment(String moduleCode, String name, String startTime, String endTime) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void setDate(String date) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getStartTime() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void setStartTime(String startTime) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getEndTime() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void setEndTime(String endTime) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Converts a Lesson object to string format for storage."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return Lesson object in string format for storage."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public String toStorageString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return \"A\" + DELIMITER + moduleCode + DELIMITER + name + DELIMITER + startTime + DELIMITER + endTime;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 10,
      "KahLokKee": 68
    }
  },
  {
    "path": "src/main/java/oof/model/module/Lesson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Lesson class for module lessons."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class Lesson {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final String DELIMITER \u003d \"||\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String lessonName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String location;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private DayOfWeek day;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String startTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String endTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for Lesson object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param lessonName String containing Lesson name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param startTime  String containing start time of Lesson."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param endTime    String containing end time of Lesson."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public Lesson(String lessonName, String startTime, String endTime) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.lessonName \u003d lessonName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getLessonTimeString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return startTime + \" to \" + endTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void setStartTime(String startTime) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void setEndTime(String endTime) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void setLessonName(String lessonName) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.lessonName \u003d lessonName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getStartTime() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getEndTime() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getLessonName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return lessonName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Converts a Lesson object to string format for storage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return Lesson object in string format for storage."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public String toStorageString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return \"L\" + DELIMITER + lessonName + DELIMITER + startTime + DELIMITER + endTime;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 12,
      "KahLokKee": 54
    }
  },
  {
    "path": "src/main/java/oof/model/module/Module.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Assignment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Module class for university modules."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final String DELIMITER \u003d \"||\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static String moduleCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static String moduleName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static ArrayList\u003cLesson\u003e lessons;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static ArrayList\u003cAssessment\u003e assessments;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static ArrayList\u003cAssignment\u003e assignments;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for Module object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param moduleCode String containing module code."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param moduleName String containing module name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public Module(String moduleCode, String moduleName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Module.moduleCode \u003d moduleCode.toUpperCase();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Module.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        assessments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        assignments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public Module(ArrayList\u003cLesson\u003e lessons, ArrayList\u003cAssessment\u003e assessments) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        this.lessons \u003d lessons;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        this.assessments \u003d assessments;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public Module() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.assessments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public static String getModuleCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Module.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public static String getModuleName() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return moduleName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void setModuleName(String moduleName) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Module.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public static ArrayList\u003cLesson\u003e getLessons() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return lessons;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public static Lesson getLesson(int index) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return lessons.get(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void setLessons(ArrayList\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Module.lessons \u003d lessons;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public static ArrayList\u003cAssessment\u003e getAssessments() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return assessments;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public static Assessment getAssessment(int index) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return assessments.get(index);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void setAssessments(ArrayList\u003cAssessment\u003e assessments) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Module.assessments \u003d assessments;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public static ArrayList\u003cAssignment\u003e getAssignments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return assignments;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public static Assignment getAssignment(int index) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return assignments.get(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void setAssignments(ArrayList\u003cAssignment\u003e assignments) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Module.assignments \u003d assignments;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public static void addAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        assignments.add(assignment);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public static void removeAssignment(int index) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        assignments.remove(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public static void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        lessons.add(lesson);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public static void removeLesson(int index) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        lessons.remove(index);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public static void addAssessment(Assessment assessment) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        assessments.add(assessment);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public static void removeAssessment(int index) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        assessments.remove(index);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Converts a Module object to string format for storage."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return Module object in string format for storage."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public String toStorageString() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return \"M\" + DELIMITER + moduleCode + DELIMITER + moduleName;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return moduleCode + \" \" + moduleName;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 61,
      "KahLokKee": 72
    }
  },
  {
    "path": "src/main/java/oof/model/module/Semester.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Semester class for an university semester."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class Semester {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static final String DELIMITER \u003d \"||\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String academicYear;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String semesterName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String startDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String endDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static ArrayList\u003cModule\u003e modules;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for Semester object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param academicYear String containing academic year of Semester."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterName String containing name of Semester."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public Semester(String academicYear, String semesterName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.academicYear \u003d academicYear;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.semesterName \u003d semesterName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public Semester(ArrayList\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        this.modules \u003d modules;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public Semester() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public static void addModule(Module module) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        modules.add(module);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public static void removeModule(int index) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        modules.remove(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getAcademicYear() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return academicYear;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void setAcademicYear(String academicYear) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.academicYear \u003d academicYear;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getSemesterName() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return semesterName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void setSemesterName(String semesterName) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.semesterName \u003d semesterName;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getStartDate() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void setStartDate(String startDate) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getEndDate() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void setEndDate(String endDate) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public static ArrayList\u003cModule\u003e getModules() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void setModules(ArrayList\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.modules \u003d modules;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public static Module getModule(int index) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return modules.get(index);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Converts a semester object to string format for storage."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return Semester object in string format for storage."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public String toStorageString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return \"S\" + DELIMITER + academicYear + DELIMITER + semesterName;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return \"Academic Year \" + academicYear + \", \" + semesterName;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 26,
      "KahLokKee": 75
    }
  },
  {
    "path": "src/main/java/oof/model/module/SemesterList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a list of Semester objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class SemesterList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private ArrayList\u003cSemester\u003e semesterList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for SemesterList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param semesterList ArrayList of Semesters."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public SemesterList(ArrayList\u003cSemester\u003e semesterList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.semesterList \u003d semesterList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public SemesterList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.semesterList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public ArrayList\u003cSemester\u003e getSemesterList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return semesterList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return semesterList.size();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public Semester getSemester(int index) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return semesterList.get(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void addSemester(Semester semester) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        semesterList.add(semester);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void removeSemester(int index) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        semesterList.remove(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 44
    }
  },
  {
    "path": "src/main/java/oof/model/task/Assignment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class Assignment extends Deadline {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for Assignment."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param moduleCode       Assignment Module"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param description      Details of the Assignment."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param deadlineDateTime Due date and time of the Assignment."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public Assignment(String moduleCode, String description, String deadlineDateTime) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        super(description, deadlineDateTime);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Converts a task object to string format for storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return Task object in string format for storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public String toStorageString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String date \u003d deadlineDateTime.split(\" \")[DATE];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String time \u003d deadlineDateTime.split(\" \")[TIME];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return \"A\" + DELIMITER + getStatusIcon() + DELIMITER + moduleCode + DELIMITER + description"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                + DELIMITER + date + DELIMITER + time + DELIMITER;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return \"[A][\" + getStatusIcon() + \"] \" + moduleCode + \" \" + super.getDescription() + \" (by: \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                + deadlineDateTime + \")\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 27,
      "jasperosy": 18
    }
  },
  {
    "path": "src/main/java/oof/model/task/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a Task object. A Deadline object is a type of Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    protected String deadlineDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for Deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param description Details of the Task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param deadlineDateTime Due date and time of the Deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public Deadline(String description, String deadlineDateTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        this.deadlineDateTime \u003d deadlineDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public String getDeadlineDateTime() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return deadlineDateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Converts a task object to string format for storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return Task object in string format for storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public String toStorageString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String date \u003d deadlineDateTime.split(\" \")[DATE];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String time \u003d deadlineDateTime.split(\" \")[TIME];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return \"D\" + DELIMITER + getStatusIcon() + DELIMITER + description + DELIMITER + date"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                + DELIMITER + time + DELIMITER + DELIMITER;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + deadlineDateTime + \")\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 5,
      "jasperosy": 34,
      "debbiextan": 2
    }
  },
  {
    "path": "src/main/java/oof/model/task/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * An Event object is a type of Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    protected String startDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    protected String endDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for Event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param description Details of the Task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param startDateTime Starting date and time of the Event."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param endDateTime   Ending date and time of the Event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public Event(String description, String startDateTime, String endDateTime) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public String getStartDateTime() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return startDateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public String getEndDateTime() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return endDateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Converts a task object to string format for storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return Task object in string format for storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public String toStorageString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String startDate \u003d startDateTime.split(\" \")[DATE];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String startTime \u003d startDateTime.split(\" \")[TIME];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String endDate \u003d endDateTime.split(\" \")[DATE];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        String endTime \u003d endDateTime.split(\" \")[TIME];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return \"E\" + DELIMITER + getStatusIcon() + DELIMITER + description + DELIMITER + startDate"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                + DELIMITER + startTime + DELIMITER + endDate + DELIMITER + endTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return \"[E]\" + super.toString() + \" (from: \" + startDateTime + \" to: \" + endDateTime + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 24,
      "jasperosy": 26
    }
  },
  {
    "path": "src/main/java/oof/model/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Abstract parent class of all subclasses of Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    enum Frequency {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        ONCE,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        DAILY,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        WEEKLY,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        MONTHLY,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        YEARLY"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    static final String DELIMITER \u003d \"||\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    static final int DATE \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    static final int TIME \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    boolean status;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    private Frequency frequency;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int DAILY \u003d 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int WEEKLY \u003d 2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int MONTHLY \u003d 3;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private static final int YEARLY \u003d 4;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private String startDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private String endDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    private long timeTaken;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for Task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        this.status \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        this.frequency \u003d Frequency.ONCE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void setStatus() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        this.status \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Sets the frequency of the recurrence of a task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param frequency Frequency of a recurrence in the form of integer from user input."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void setFrequency(int frequency) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        if (frequency \u003d\u003d DAILY) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            this.frequency \u003d Frequency.DAILY;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } else if (frequency \u003d\u003d WEEKLY) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            this.frequency \u003d Frequency.WEEKLY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } else if (frequency \u003d\u003d MONTHLY) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            this.frequency \u003d Frequency.MONTHLY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } else if (frequency \u003d\u003d YEARLY) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            this.frequency \u003d Frequency.YEARLY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public String getStartDate() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void setStartDate(String startDate) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public String getEndDate() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void setEndDate(String endDate) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public long getTimeTaken() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        return timeTaken;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    public void setTimeTaken(long timeTaken) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "        this.timeTaken \u003d timeTaken;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Retrieves the status icon of the Task."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return Status icon of the Task."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return (status ? \"Y\" : \"N\"); //return tick or X symbols"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Converts a task object to string format for storage."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return Task object in string format for storage."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public abstract String toStorageString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Customises the toString() method to print the Task object."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return Customised String for Task object."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 22,
      "debbiextan": 28,
      "jasperosy": 67
    }
  },
  {
    "path": "src/main/java/oof/model/task/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * Represents a list of Task objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    protected ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for TaskList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param taskList TaskList that contains Task objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for TaskList."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Retrieves all the Task objects in TaskList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return TaskList containing all its Task objects."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Retrieves the number of Task objects in the TaskList."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return Number of Task objects in the TaskList."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Retrieves the Task object at a particular index."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param index Index of Task object, specified by the user."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return Task object at a particular index."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Adds a Task object to the TaskList."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param task Task object to be added to TaskList."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Adds a Task object to a specific index in the TaskList."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @param index Index to be inserted."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param task  Task to be added."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void addTaskToIndex(int index, Task task) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        taskList.add(index, task);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Deletes a Task object from the TaskList."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param index Index of Task object, specified by the user."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        taskList.remove(index);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Checks if index is within bounds of TaskList."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param index Index of TaskList."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @return True if index is within bounds of TaskList, false otherwise."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    public boolean isIndexValid(int index) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        return index \u003c this.getSize() \u0026\u0026 index \u003e\u003d 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 46,
      "jasperosy": 49
    }
  },
  {
    "path": "src/main/java/oof/model/task/Todo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "package oof.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": " * A Todo object is a type of Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasperosy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    private String todoDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * Constructor for Todo."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "     * @param description Description of the Todo object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public Todo(String description, String todoDate) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        this.todoDate \u003d todoDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public String getTodoDate() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return todoDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Converts a task object to string format for storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @return Task object in string format for storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public String toStorageString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return \"T\" + DELIMITER + getStatusIcon() + DELIMITER + description + DELIMITER + todoDate"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "                + DELIMITER + DELIMITER + DELIMITER;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        return \"[T]\" + super.toString() + \" (on: \" + todoDate + \")\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 8,
      "jasperosy": 30
    }
  },
  {
    "path": "src/test/java/oof/CommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "package oof;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.command.AddDeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.command.AddEventCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.command.AddToDoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.command.CalendarCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.command.CompleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.command.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.command.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.command.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.command.FreeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.command.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.command.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.command.RecurringCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.command.ScheduleCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.command.SnoozeCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "public class CommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for exiting Oof."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws OofException Parse method throws OofException."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void parse_ByeEntered_ExitOof() throws OofException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        assertTrue(CommandParser.parse(\"bye\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for listing tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws OofException Parse method throws OofException."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void parse_ListEntered_ListTasks() throws OofException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        assertTrue(CommandParser.parse(\"list\") instanceof ListCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for printing command usage."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws OofException Parse method throws OofException."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void parse_HelpEntered_PrintCommandUsage() throws OofException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertTrue(CommandParser.parse(\"help\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for marking a task as done."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws OofException Parse method throws OofException."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void parse_DoneEnteredWithValidIndex_MarksTaskAsCompleted() throws OofException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        assertTrue(CommandParser.parse(\"done 2\") instanceof CompleteCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for marking a task as done."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void parse_DoneEnteredWithoutIndex_ThrowOofException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            CommandParser.parse(\"done\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (OofException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter a number!\", e.getMessage());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for marking a task as done."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void parse_DoneEnteredWithNonInteger_ThrowOofException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            CommandParser.parse(\"done a\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (OofException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter a valid number!\", e.getMessage());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for adding a todo task."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws OofException Parse method throws OofException."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void parse_TodoEnteredWithCorrectFields_AddsTodoTask() throws OofException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        assertTrue(CommandParser.parse(\"todo borrow book\") instanceof AddToDoCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for adding a deadline."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws OofException Parse method throws OofException."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void parse_DeadlineEnteredWithCorrectFields_AddsDeadlineTask() throws OofException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        assertTrue(CommandParser.parse(\"deadline homework /by 11-11-2019 11:11\") instanceof AddDeadlineCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for adding an event."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws OofException Parse method throws OofException."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void parse_EventEnteredWithCorrectFields_AddsEventTask() throws OofException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        assertTrue(CommandParser.parse(\"event testing /at 11-11-2019 11:11\") instanceof AddEventCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for deleting a task."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws OofException Parse method throws OofException."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void parse_DeleteEnteredWithValidIndex_DeletesTask() throws OofException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertTrue(CommandParser.parse(\"delete 1\") instanceof DeleteCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for deleting a task."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void parse_DeleteEnteredWithoutIndex_ThrowsOofException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            CommandParser.parse(\"delete\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (OofException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter a number!\", e.getMessage());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for deleting a task."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void parse_DeleteEnteredWithNonInteger_ThrowsOofException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            CommandParser.parse(\"delete a\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (OofException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter a valid number!\", e.getMessage());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for finding a task."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws OofException Parse method throws OofException."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void parse_FindEntered_FindTasks() throws OofException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertTrue(CommandParser.parse(\"find\") instanceof FindCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for snoozing a task."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws OofException Parse method throws OofException."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void parse_SnoozeEnteredWithValidIndex_SnoozesTask() throws OofException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertTrue(CommandParser.parse(\"snooze 1\") instanceof SnoozeCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for snoozing a task."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void parse_SnoozeEnteredWithoutIndex_ThrowsOofException() throws OofException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            CommandParser.parse(\"snooze\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (OofException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter a number!\", e.getMessage());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for snoozing a task."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void parse_SnoozeEnteredWithNonInteger_ThrowsOofException() throws OofException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            CommandParser.parse(\"snooze a\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (OofException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter a valid number!\", e.getMessage());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for scheduling a task."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws OofException Parse method throws OofException."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void parse_ScheduleEntered_SchedulesTask() throws OofException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        assertTrue(CommandParser.parse(\"schedule 11-11-2019\") instanceof ScheduleCommand);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "debbiextan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "debbiextan"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for recurring a task."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws OofException Parse method throws OofException."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void parse_RecurringEnteredWithValidParameters() throws OofException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertTrue(CommandParser.parse(\"recurring 1 1\") instanceof RecurringCommand);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for recurring a task."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void parse_RecurringEnteredWithoutOtherParameters_RecursTask() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            CommandParser.parse(\"recurring\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (OofException e) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter the task number and number of recurrences!\", e.getMessage());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for recurring a task."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void parse_RecurringEnteredWithoutNumberOfRecurrences_RecursTask() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            CommandParser.parse(\"recurring 1\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (OofException e) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter the number of recurrences!\", e.getMessage());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for recurring a task."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void parse_RecurringEnteredWithNonIntegers_RecursTask() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            CommandParser.parse(\"recurring a a\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (OofException e) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter valid numbers!\", e.getMessage());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for recurring a task."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void parse_RecurringEnteredWithInvalidFrequency_ThrowsOofException() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            ByteArrayInputStream in \u003d new ByteArrayInputStream(\"a\".getBytes());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            CommandParser.parse(\"recurring 1 1\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (OofException e) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter a valid number!\", e.getMessage());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command for showing the calendar."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws OofException Parse method throws OofException."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void parse_CalendarEntered_ShowCalendar() throws OofException {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertTrue(CommandParser.parse(\"calendar\") instanceof CalendarCommand);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the command to show free time slots."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws OofException Parse method throws OofException."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void parse_FreeEnteredWithCorrectFields_ShowFreeTimeSlots() throws OofException {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        assertTrue(CommandParser.parse(\"free 30-10-2019 23:59\") instanceof FreeCommand);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests invalid command."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void testInvalid() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            CommandParser.parse(\"abcd\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (OofException e) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\", e.getMessage());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 2,
      "KahLokKee": 9,
      "jasperosy": 285,
      "debbiextan": 3
    }
  },
  {
    "path": "src/test/java/oof/command/RecurringCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "package oof.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.Oof;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import oof.exception.OofException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "import oof.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "public class RecurringCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the behaviour when an invalid Task index is entered."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void execute_InvalidIndexEntered_ThrowsOofException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            new Oof().executeCommand(\"recurring -1 1\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (OofException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please select a valid task!\", e.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the behaviour when an invalid number of recurrences is entered."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void execute_InvalidNumberOfRecurrenceEntered_ThrowsOofException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            new Oof().executeCommand(\"recurring 1 11\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (OofException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! The valid number of recurrences is from 1-10!\", e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the behaviour when an invalid frequency is entered."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void execute_InvalidFrequencyEntered_ThrowsOofException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            ByteArrayInputStream in \u003d new ByteArrayInputStream(\"0\".getBytes());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            new Oof().executeCommand(\"recurring 1 1\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (OofException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter a valid number!\", e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the behaviour when an invalid frequency is entered."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void execute_NonIntegerFrequencyEntered_ThrowsOofException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            ByteArrayInputStream in \u003d new ByteArrayInputStream(\"a\".getBytes());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "            new Oof().executeCommand(\"recurring 1 1\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        } catch (OofException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "            assertEquals(\"OOPS!!! Please enter a valid number!\", e.getMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the behaviour for adding Todo Task."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws OofException Execute method throws OofException."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void execute_CorrectCommandEntered_AddTodo() throws OofException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"1\".getBytes());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        new Oof().executeCommand(\"recurring 1 1\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        TaskList taskList \u003d new Oof().getArr();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Task task \u003d taskList.getTask(taskList.getSize() - 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertEquals(\"[T][N] borrow another book (on: 14-10-2019)\", task.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the behaviour for adding Deadline."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws OofException Execute method throws OofException."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void execute_CorrectCommandEntered_AddDeadline() throws OofException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"2\".getBytes());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        new Oof().executeCommand(\"recurring 2 1\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        TaskList taskList \u003d new Oof().getArr();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Task task \u003d taskList.getTask(taskList.getSize() - 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertEquals(\"[D][N] homework (by: 20-10-2019 23:59)\", task.toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * Tests the behaviour for adding Deadline."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     * @throws OofException Execute method throws OofException."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    public void execute_CorrectCommandEntered_AddEvent() throws OofException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"3\".getBytes());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KahLokKee"
        },
        "content": "        new Oof().executeCommand(\"recurring 3 1\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        TaskList taskList \u003d new Oof().getArr();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        Task task \u003d taskList.getTask(taskList.getSize() - 1);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "        assertEquals(\"[E][N] lecture (from: 08-11-2019 10:00 to: 08-11-2019 12:00)\", task.toString());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jasperosy"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jasperosy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KahLokKee": 9,
      "jasperosy": 109
    }
  }
]
