[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "group \u0027dukemasters\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "version \u00271.0\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "task fatJar(type: Jar) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        attributes \u0027Implementation-Title\u0027: \u0027Duke JAR\u0027,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                \u0027Implementation-Version\u0027: version,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                \u0027Main-Class\u0027: \u0027Duke\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    baseName \u003d project.name + \u0027-all\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    with jar"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    compile \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    compile \u0027com.google.code.gson:gson:2.8.5\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "application {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "test {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "run {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasnovakovic": 44
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "rootProject.name \u003d \u0027duke\u0027"
      }
    ],
    "authorContributionMap": {
      "nicholasnovakovic": 1
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.parser.DuqueParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.storage.UndoStack;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * Main class which is responsible for the running of the task manager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private UndoStack undoStack;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public Duke(String filepath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        undoStack \u003d new UndoStack();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        storage \u003d new Storage(filepath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        new Duke(\"data/duke.json\").run();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * function that starts the program"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * maintains the program while the exit command is not given"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * exits program once exit command is given"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                Command c \u003d DuqueParser.parseCommand(fullCommand, undoStack);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                c.savePrevState(tasks, undoStack);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                ui.showParsingError();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        ui.exit();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 9,
      "nicholasnovakovic": 50,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.extensions.AbnormalityChecker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.extensions.Recurrence;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.storage.UndoStack;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * duke.command.AddCommand that deals with the adding of new duke.task.Task objects to the duke.tasklist.TaskList"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private String taskType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private int duration;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private Optional\u003cString\u003e filter;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private Optional\u003cLocalDateTime\u003e dateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private Recurrence recurrence;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Constructor for AddCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Creates a new task or event based on the inputs given"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param filter filter for each task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param dateTime datetime for each task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param recurrence recurrence period for each task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param description description for each task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param taskType type of each task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param duration time taken to complete each task"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws DukeException if event has no starting time"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public AddCommand(Optional\u003cString\u003e filter, Optional\u003cLocalDateTime\u003e dateTime, Optional\u003cString\u003e recurrence,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                      String description, String taskType, int duration) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.filter \u003d filter;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.recurrence \u003d new Recurrence(recurrence);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Executes the adding of a task to the TaskList"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param tasks TaskList of all of user\u0027s tasks"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param ui Ui handling user interaction"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param storage Storage handling saving and loading of TaskList"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException, DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            if (!dateTime.isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                throw new DukeException(\"Your event needs to have a starting time.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            Event newEvent \u003d new Event(filter, dateTime, recurrence, description, duration);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            AbnormalityChecker abnormalityChecker \u003d new AbnormalityChecker(tasks);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            if (abnormalityChecker.checkEventClash(newEvent)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                System.out.println(\"There is a clash with another event at the same time\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                tasks.add(newEvent);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            Task newTask \u003d new Task(filter, dateTime, recurrence, description, duration);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            tasks.add(newTask);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Adds mirror command to savePrevState"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Mirror command is a delete command at the same location as where the add was done."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param tasks TaskList of all of user\u0027s tasks"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param undoStack UndoStack of all mirror commands"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void savePrevState(TaskList tasks, UndoStack undoStack) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        int idx \u003d tasks.size();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        undoStack.addAction(new DeleteCommand(Optional.empty(), Integer.toString(idx + 1)));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 25,
      "nicholasnovakovic": 42,
      "nimiew": 5,
      "-": 23
    }
  },
  {
    "path": "src/main/java/duke/command/AutoAssignCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nimiew"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import duke.extensions.TaskAssigner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import duke.storage.UndoStack;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nimiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nimiew"
        },
        "content": " * Class that handles the auto assigning task to some existing filter"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nimiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nimiew"
        },
        "content": "public class AutoAssignCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * Constructor for AutoAssignCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    public AutoAssignCommand(String index) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        this.index \u003d Integer.parseInt(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * Executes auto assignment of a task to some existing filter"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @param tasks TaskList of all of user\u0027s tasks"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @param ui Ui handling user interaction"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @param storage Storage handling saving and loading of TaskList"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        TaskAssigner.assign(tasks, tasks.get(index-1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @param tasks"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @param undoStack"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    public void savePrevState(TaskList tasks, UndoStack undoStack) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nimiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nimiew": 52
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.storage.UndoStack;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * Abstract class duke.command.Command which dictates"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * three necessary methods in all duke.command.Command subclasses"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * method execute which will execute whatever the user input requests"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * method savePrevState which will store mirror commands for commands that can be undone"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * method isExit which checks whether the user input"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * will result in the program shutting down"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws IOException, ParseException,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            DukeException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public abstract void savePrevState(TaskList tasks, UndoStack undoStack) throws DukeException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 11,
      "nicholasnovakovic": 7,
      "-": 11
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.storage.UndoStack;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * duke.command.DeleteCommand which executes the procedure for"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * deleting duke.task.Task objects from the duke.tasklist.TaskList"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private Optional\u003cString\u003e filter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Constructor for DeleteCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Filter and index enable the locating of the actual location of the task in TaskList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param filter filter for each task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param index given index of the task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public DeleteCommand(Optional\u003cString\u003e filter, String index) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.filter \u003d filter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.index \u003d Integer.parseInt(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Executes teh deletion of the Task at the given location from the TaskList"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param tasks TaskList of all of user\u0027s tasks"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param ui Ui handling user interaction"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param storage Storage handing saving and loading of TaskList"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws DukeException if invalid index is given"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws IOException NA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        ui.showLine(\"You have removed this task:\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        Task t \u003d tasks.get(filter, index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        ui.showLine(t.getDescription());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        tasks.remove(filter, index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        if (tasks.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            ui.showLine(\"Now you have 1 task in the list.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            ui.showLine(\"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Adds a mirror command to the UndoStack"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Can undo the DeleteCommand by creating a new InsertCommand at the same index containing the original task"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param tasks TaskList of all of user\u0027s tasks"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param undoStack UndoStack containing all the mirror commands"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws DukeException if invalid index is given"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void savePrevState(TaskList tasks, UndoStack undoStack) throws DukeException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        Task t \u003d tasks.get(filter, index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        undoStack.addAction(new InsertCommand(filter, index, t));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 10,
      "nicholasnovakovic": 44,
      "-": 14
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.storage.UndoStack;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * duke.command.DoneCommand that deals with marking Tasks in the duke.tasklist.TaskList as done"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private Optional\u003cString\u003e filter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Constructor of DoneCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Includes filter and index to find the location of the task in the actual TaskList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param filter filter for each task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param index given index of the task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public DoneCommand(Optional\u003cString\u003e filter, String index) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.filter \u003d filter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.index \u003d Integer.parseInt(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Executes the marking of a Task as done"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param tasks TaskList of all of user\u0027s tasks"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param ui Ui handling user interaction"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param storage Storage handling saving and loading of TaskList"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws DukeException if invalid index is given"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws IOException NA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        Task t \u003d tasks.get(filter, index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        t.markAsDone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        ui.showLine(\"Congratulations on completing the following task:\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        ui.showLine(t.getDescription());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Saves a mirror command in the UndoStack"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * In the event that the user marked the wrong task as done, he can just call undo to undo the task"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param tasks TaskList of all of user\u0027s tasks"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param undoStack Storage handling saving and loading of TaskList"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void savePrevState(TaskList tasks, UndoStack undoStack) throws DukeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        Task t \u003d tasks.get(filter, index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        undoStack.addAction(new SetCommand(filter, index, new Task(t)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        System.out.println(t);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 9,
      "nicholasnovakovic": 38,
      "-": 16
    }
  },
  {
    "path": "src/main/java/duke/command/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.parser.DateTimeParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.parser.KeywordAndField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.storage.UndoStack;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * Class that handles the editing of a given task and updating given values of the task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private Optional\u003cString\u003e filter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private int taskListIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private ArrayList\u003cKeywordAndField\u003e keywordAndFields;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Constructor of EditCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Finds the actual location of the task in the user TaskList using a given filter and index"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * keyword and fields include all new fields to be updated"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param filter filter for each task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param taskListIndex index of the task"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param keywordAndFields keywords and corresponding fields to be updated"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public EditCommand(Optional\u003cString\u003e filter, int taskListIndex, ArrayList\u003cKeywordAndField\u003e keywordAndFields) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.filter \u003d filter;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.taskListIndex \u003d taskListIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.keywordAndFields \u003d keywordAndFields;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Executes the editing process to change a task\u0027s attributes"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Multiple attributes can be updated at once."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param tasks TaskList of all of user\u0027s tasks"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param ui Ui handling user interaction"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param storage Storage handling saving and loading of TaskList"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws IOException NA"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws DukeException if invalid user inputs are given"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException, DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        for (int i \u003d 0; i \u003c keywordAndFields.size(); i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            String keyword \u003d keywordAndFields.get(i).getKeyword();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            String edit \u003d keywordAndFields.get(i).getField();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            Task t \u003d tasks.get(filter, taskListIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            switch (keyword) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            case \"description\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                t.setDescription(edit);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            case \"priority\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    int priorityLevel \u003d Integer.parseInt(edit);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    t.setPriority(priorityLevel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    throw new DukeException(\"Please enter a numerical field for the duration!\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            case \"t\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                Optional\u003cLocalDateTime\u003e dateTime \u003d Optional.of(DateTimeParser.parseDateTime(edit));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                t.setDateTime(dateTime);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            case \"d\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    int duration \u003d Integer.parseInt(edit);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    t.setDuration(duration);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    throw new DukeException(\"Please enter a numerical field for the duration!\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            case \"r\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                t.setRecurrence(edit);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what field you are trying to edit!\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Adds a mirror command to top of the the UndoStack"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Allows the user to undo this EditCommand call in the event of a mistake"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param tasks TaskList of all of user\u0027s tasks"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param undoStack UndoStack containing all mirror commands"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws DukeException if invalid index is given"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void savePrevState(TaskList tasks, UndoStack undoStack) throws DukeException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        Task t \u003d tasks.get(filter, taskListIndex);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        undoStack.addAction(new SetCommand(filter, taskListIndex, new Task(t)));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 54,
      "nicholasnovakovic": 49
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.storage.UndoStack;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * duke.command.ExitCommand class which will save all the duke.task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * Task data into the JSON file and initiate the exit procedure"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Saves TaskList of user tasks to the JSON data file"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param tasks TaskList of all of user\u0027s tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param ui Ui handling user interaction"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param storage Storage handling saving and loading of TaskList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws IOException NA"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Not applicable for this Command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param tasks NA"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param undoStack NA"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws DukeException NA"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void savePrevState(TaskList tasks, UndoStack undoStack) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Method to initialise the process of closing the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @return boolean true to initialise closing the application"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 6,
      "nicholasnovakovic": 35,
      "-": 11
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.storage.UndoStack;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * duke.command.FindCommand which executes the procedure for searching for duke.task.Task objects in the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * duke.tasklist.TaskList which match the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * keyword given by the user and shows the user a list of matching Tasks or else informs the user that no"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * matching duke.task.Task objects were found"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    private Command listCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Constructor for FindCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Prints all the tasks which match the given keyword and filter"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param keyword keyword used to search for matching tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param filter filter for each task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    public FindCommand(String keyword, Optional\u003cString\u003e filter) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        this.listCommand \u003d new ListCommand(filter);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * executes the finding of all matching tasks and prints the corresponding tasks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param tasks TaskList of all of user\u0027s tasks"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param ui Ui handling user interaction"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param storage Storage handling saving and loading of TaskList"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws ParseException NA"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws IOException NA"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws DukeException NA"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws ParseException, IOException, DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            ui.showLine(\"You have no tasks in your list! :-)\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            ArrayList\u003cTask\u003e foundTasksTemp \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                Task currentTask \u003d tasks.get(i);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                if (currentTask.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                    foundTasksTemp.add(currentTask);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            TaskList foundTasks \u003d new TaskList(foundTasksTemp);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            listCommand.execute(foundTasks, ui, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Not applicable for this Command."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param tasks NA"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param undoStack NA"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws DukeException NA"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void savePrevState(TaskList tasks, UndoStack undoStack) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 8,
      "nicholasnovakovic": 36,
      "nimiew": 15,
      "-": 15
    }
  },
  {
    "path": "src/main/java/duke/command/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nimiew"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.storage.UndoStack;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nimiew"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException, ParseException, DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        System.out.println(\"The format of the commands are as followed:\\n\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        System.out.println(\"Words in UPPER_CASE are the parameters to be supplied by the user e.g. in \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                + \"todo DESCRIPTION, DESCRIPTION is a parameter which can be used as todo read book.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        System.out.println(\"Items in square brackets are optional e.g DESCRIPTION [-FLAG] can be used as read book \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                + \"-r or as read book.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        System.out.println(\"Items with ... after them can be used multiple times including zero times e.g. [-FLAG]... \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                + \"can be used as   (i.e. 0 times), -r, -f, etc.\\n\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        System.out.println(\"Here are some commands you can use:\\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        System.out.println(\"Adding a todo task: todo DESCRIPTION\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        System.out.println(\"Adding a event task:  event DESCRIPTION /at DATE\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        System.out.println(\"Adding a deadline task: deadline DESCRIPTION /by DATE\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        System.out.println(\"You may use a recurring flag -r weekly or -r daily when creating a task: e.g. todo spanish \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                + \"homework -r weekly\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        System.out.println(\"Listing all tasks: list\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        System.out.println(\"Editing a task: edit INDEX DESCRIPTION [/at DATE]\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        System.out.println(\"Locating task by name: find KEYWORD [MORE_KEYWORDS]\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        System.out.println(\"Deleting a task: delete INDEX\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        System.out.println(\"CLearing all entries: clear\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Not applicable for this Command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param tasks NA"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param undoStack NA"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws DukeException NA"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void savePrevState(TaskList tasks, UndoStack undoStack) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nimiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 15,
      "nicholasnovakovic": 11,
      "nimiew": 23
    }
  },
  {
    "path": "src/main/java/duke/command/InsertCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.storage.UndoStack;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * Class that handles inserting a Task at a certain index of the TaskList"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "public class InsertCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private Optional\u003cString\u003e filter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private Task t;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Constructor of InsertCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Initialised with a filter and index to confirm the location in the TaskList where the Task t should be inserted"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param filter filter for each task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param index index of the given task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param t task to be inserted"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public InsertCommand(Optional\u003cString\u003e filter, int index, Task t) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.filter \u003d filter;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.t \u003d t;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Executes the insertion of the task into the specified index"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param tasks TaskList of all of user\u0027s tasks"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param ui Ui handling user interaction"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param storage Storage handling saving and loading of TaskList"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws DukeException if given index is valid"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        tasks.insert(filter, index, t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Not applicable for this Command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param tasks NA"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param undoStack NA"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void savePrevState(TaskList tasks, UndoStack undoStack) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 6,
      "nicholasnovakovic": 51
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.storage.UndoStack;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.ui.TaskListPrinter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * duke.command.ListCommand class which executes the command of displaying the duke.tasklist.TaskList to the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private String mode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private Optional\u003cString\u003e filter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Constructor for ListCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Creates a ListCommand with no special sorted order to be printed in"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * If there is a filter present, only tasks fulfilling the filter predicate will be printed"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param filter filter for each task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public ListCommand(Optional\u003cString\u003e filter) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        mode \u003d \"DEFAULT\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.filter \u003d filter;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Constructor for ListCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Creates a ListCommand with a special sorted order to be printed in"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * If there is a filter present, only tasks fulfilling the filter predicate will be printed"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param modeInformation information of the sorted order"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param filter filter for each task"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public ListCommand(String modeInformation, Optional\u003cString\u003e filter) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        mode \u003d modeInformation;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.filter \u003d filter;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Executes the printing of the TaskList based on the user specifications"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * If there is a specified sort order of printing, the sequence will be printed in the specified order"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param list TaskList containing all of user\u0027s tasks"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param ui Ui handling user interactions"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param storage Storage handling saving and loading of TaskList"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws DukeException if specified sort order given is invalid"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws IOException NA"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws ParseException NA"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    public void execute(TaskList list, Ui ui, Storage storage) throws DukeException, IOException, ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        TaskList tasks;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        if (!filter.isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            tasks \u003d list;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            tasks \u003d new TaskList(list, filter);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        switch (mode) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        case \"DEFAULT\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            if (tasks.size() \u003e 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                TaskListPrinter.print(ui, tasks);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                ui.showLine(\"There are no tasks in your list.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        case \"priority\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            tasks \u003d tasks.priorityView();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            if (tasks.size() \u003e 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                TaskListPrinter.print(ui, tasks);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                ui.showLine(\"There are no tasks in your list.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        case \"day\": {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            tasks \u003d tasks.dayView();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                ui.showLine(\"Congratulations, you have no tasks for the day! Take a break, have a kit kat\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                TaskListPrinter.print(ui, tasks);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        case \"week\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            tasks \u003d tasks.weekView();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                ui.showLine(\"Congratulations, you have no tasks for the week! Take a break, have a kit kat\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                TaskListPrinter.print(ui, tasks);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        case \"undone\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            tasks \u003d tasks.undoneView();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                ui.showLine(\"Congratulations, you have no undone tasks! Take a break, have a kit kat\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                TaskListPrinter.print(ui, tasks);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            throw new DukeException(\"The description of list is invalid\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Not applicable for this Command."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param tasks NA"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param undoStack NA"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws DukeException NA"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void savePrevState(TaskList tasks, UndoStack undoStack) throws DukeException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 9,
      "nicholasnovakovic": 101,
      "nimiew": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/duke/command/PomodoroCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.extensions.Pomodoro;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.storage.UndoStack;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public class PomodoroCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public PomodoroCommand(String command) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        Pomodoro pomodoro \u003d Pomodoro.getInstance();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        case \"start\":"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            pomodoro.startTimer();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        case \"status\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            pomodoro.getStatus();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        case \"reset\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            pomodoro.resetState();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        case \"restart\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            pomodoro.restartPomodoro();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        case \"stop\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            pomodoro.stopTimer();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what pomodoro you are referring to\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Not applicable for this Command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param tasks NA"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param undoStack NA"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws DukeException NA"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void savePrevState(TaskList tasks, UndoStack undoStack) throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 39,
      "nicholasnovakovic": 12
    }
  },
  {
    "path": "src/main/java/duke/command/RandomCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nimiew"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import duke.ui.TaskListPrinter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nimiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nimiew"
        },
        "content": " * Class which executes the command of displaying a random Task to user"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nimiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nimiew"
        },
        "content": "public class RandomCommand extends ListCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * Constructor for RandomCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @param filter filter for each task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    public RandomCommand(Optional\u003cString\u003e filter) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        super(filter);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * Constructor for RandomCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @param modeInformation information of the sorted order"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @param filter filter for each task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    public RandomCommand(String modeInformation, Optional\u003cString\u003e filter) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        super(modeInformation, filter);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * Shows random task to user"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @param tasks"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @param ui Ui handling user interactions"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @param storage Storage handling saving and loading of TaskList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @throws DukeException if specified sort order given is invalid"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @throws IOException NA"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @throws ParseException NA"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException, ParseException, DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        Random randomGenerator \u003d new Random();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        int randomIndex \u003d randomGenerator.nextInt(tasks.size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        ArrayList\u003cTask\u003e randomTaskTemp \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        randomTaskTemp.add(tasks.get(randomIndex));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        TaskList randomTask \u003d new TaskList(randomTaskTemp);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        TaskListPrinter.print(ui, randomTask);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nimiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nimiew": 58
    }
  },
  {
    "path": "src/main/java/duke/command/SetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.storage.UndoStack;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * Mirror command class for both EditCommand and DoneCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * Initialised with a copy of the Task before it is edited or marked done"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * When this is executed, it will replace the new copy of the Task with the original."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "public class SetCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private Optional\u003cString\u003e filter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private Task t;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Constructor for SetCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Stores the filter and index of the original Task in the TaskList and also the original copy of the Task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * before it was edited or marked as done"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param filter filter for each task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param index index of the task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param t original version of the task before editing or marking done"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public SetCommand(Optional\u003cString\u003e filter, int index, Task t) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.filter \u003d filter;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.t \u003d t;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Replaces the new task with its original version."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param tasks TaskList containing all of the user\u0027s tasks"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param ui Ui handling user interactions"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param storage Storage handling the saving and loading of the TaskList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws IOException NA"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws ParseException NA"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws DukeException if the given index is invalid"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException, ParseException, DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        tasks.set(filter, index, t);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Not applicable for this class"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param tasks NA"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param undoStack NA"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws DukeException NA"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void savePrevState(TaskList tasks, UndoStack undoStack) throws DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 6,
      "nicholasnovakovic": 57
    }
  },
  {
    "path": "src/main/java/duke/command/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.storage.UndoStack;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * Class that handles the execution of undoing the most recent task that can be undone"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private UndoStack undoStack;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Constructor for UndoCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Initialised with the current UndoStack in this user session"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param undoStack the current UndoStack in this user session"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public UndoCommand(UndoStack undoStack) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.undoStack \u003d undoStack;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * If UndoStack is empty, tells user that there are no actions to undo."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Else, executes the process of undoing the most recent command that can be undone"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param tasks TaskList of all the user tasks"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param ui Ui handling user interactions"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param storage Storage handling saving and loading of the TaskList"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws IOException NA"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws ParseException NA"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws DukeException if there are no actions to undo"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException, ParseException, DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        if (undoStack.isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            throw new DukeException(\"There are no actions to undo!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        Command mostRecent \u003d undoStack.retrieveRecent();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        mostRecent.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Not applicable for this Command."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param tasks NA"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param undoStack NA"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws DukeException NA"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void savePrevState(TaskList tasks, UndoStack undoStack) throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 3,
      "nicholasnovakovic": 55
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents all exceptions unique to the execution of the duke.task.Task Manager program - Duke"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasnovakovic": 4,
      "-": 6
    }
  },
  {
    "path": "src/main/java/duke/extensions/AbnormalityChecker.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.extensions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nimiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nimiew"
        },
        "content": " * Class that checks if there is event clash in timing"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nimiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AbnormalityChecker {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * Constructor for AbnormalityChecker"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @param taskList TaskList containing all of user\u0027s tasks"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public AbnormalityChecker(TaskList taskList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * Method that checks if there is another event with the same timing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @param event Event task to be checked"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @return a boolean whether the event classes with current Events"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean checkEventClash(Event event) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            task \u003d taskList.get(i);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            if (task instanceof Event) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                if (((Event) task).getDateTime().equals(event.getDateTime())) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 1,
      "nicholasnovakovic": 1,
      "nimiew": 15,
      "-": 23
    }
  },
  {
    "path": "src/main/java/duke/extensions/Pomodoro.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "package duke.extensions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public class Pomodoro {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private static final int ONE_MINUTE \u003d 1000; // multiply by 60"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private static final int START_LONGBREAK_MINUTES \u003d 15;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private static final int START_SHORTBREAK_MINUTES \u003d 5;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private static final int START_WORK_MINUTES \u003d 25;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private static final Pomodoro instance \u003d new Pomodoro();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private State currState;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private int currCycle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private Task pomodoroTask;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private PomodoroTimerTask pomodoroTimerTask;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private Timer timer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private Pomodoro() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        currCycle \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        currState \u003d State.WORK;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public static Pomodoro getInstance() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void startTimer() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        timer \u003d new Timer();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        switch (currState) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        case SHORT_BREAK:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            System.out.println(\"Short break started\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            pomodoroTimerTask \u003d new PomodoroTimerTask(timer, START_SHORTBREAK_MINUTES);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            timer.schedule(pomodoroTimerTask, ONE_MINUTE, ONE_MINUTE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            currState \u003d State.WORK;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        case LONG_BREAK:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            System.out.println(\"Long break started\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            pomodoroTimerTask \u003d new PomodoroTimerTask(timer, START_LONGBREAK_MINUTES);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            timer.schedule(pomodoroTimerTask, ONE_MINUTE, ONE_MINUTE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            currState \u003d State.WORK;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            System.out.println(\"Work Started\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            pomodoroTimerTask \u003d new PomodoroTimerTask(timer, START_WORK_MINUTES);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            timer.schedule(pomodoroTimerTask, ONE_MINUTE, ONE_MINUTE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            currCycle++;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            if (currCycle \u003d\u003d 4) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                currState \u003d State.LONG_BREAK;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                currCycle \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                currState \u003d State.SHORT_BREAK;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void resetState() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        switch (currState) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        case WORK:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            if (currCycle \u003d\u003d 1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                System.out.println(\"Back to long break cycle\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                currState \u003d State.LONG_BREAK;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                System.out.println(\"Back to short break cycle\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                currState \u003d State.SHORT_BREAK;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            currState \u003d State.WORK;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            System.out.println(\"Back to work cycle\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void stopTimer() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String cState;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        switch (currState) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        case LONG_BREAK:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        case SHORT_BREAK:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            cState \u003d \"Work\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        case WORK:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            cState \u003d \"Break\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            cState \u003d \"pomodorodododod\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        System.out.println(cState + \" has finished!\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        timer.cancel();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void restartPomodoro() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        System.out.println(\"Pomodoro restarted!\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        currCycle \u003d 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        currState \u003d State.WORK;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public Task getPomodoroTask() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return pomodoroTask;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void setPomodoroTask(Task t) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.pomodoroTask \u003d t;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void getStatus() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        int minutesRemaining \u003d pomodoroTimerTask.getMinutesRemaining();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String cState;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        switch (currState) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        case LONG_BREAK:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        case SHORT_BREAK:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            cState \u003d \"Work\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        case WORK:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            cState \u003d \"Break\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            cState \u003d \"pomodorodododod\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        System.out.println(\"Current state: \" + cState);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        System.out.println(\"Number of Pomodoro cycles: \" + currCycle);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        System.out.println(minutesRemaining + \" minutes left for your current pomodoro\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    enum State {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        LONG_BREAK,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        SHORT_BREAK,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        WORK"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 134
    }
  },
  {
    "path": "src/main/java/duke/extensions/PomodoroTimerTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "package duke.extensions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public class PomodoroTimerTask extends TimerTask {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private Timer t;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private int minutesRemaining;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public PomodoroTimerTask(Timer t, int minutesRemaining) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.minutesRemaining \u003d minutesRemaining;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.t \u003d t;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public int getMinutesRemaining() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return minutesRemaining;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        minutesRemaining -\u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        if (minutesRemaining % 5 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            System.out.println(minutesRemaining + \" minutes left\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        if (minutesRemaining \u003d\u003d 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            System.out.println(\"Pomodoro completed\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            t.cancel();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 31
    }
  },
  {
    "path": "src/main/java/duke/extensions/Priority.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "package duke.extensions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * Enum priority that allows labelling of tasks by priority levels"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "public enum Priority {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    LOW, MEDIUM, HIGH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Method to get priority level of a task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @return integer value representing the priority level of the task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public int priorityLevel() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        switch (this) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        case LOW:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        case MEDIUM:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            return 2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Method to get String version of each priority"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @return String corresponding to each priority"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public String priorityCode() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        switch (this) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        case LOW:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            return \"Low\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        case MEDIUM:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            return \"Medium\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            return \"High\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 1,
      "nicholasnovakovic": 39
    }
  },
  {
    "path": "src/main/java/duke/extensions/Recurrence.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "package duke.extensions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public class Recurrence {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private LocalDateTime lastUpdatedDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private RecurrencePeriod recurrencePeriod;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public Recurrence(Optional\u003cString\u003e recurrencePeriod) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.lastUpdatedDate \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        if (recurrencePeriod.isPresent()) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            if (\"daily\".equals(recurrencePeriod.get())) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                this.recurrencePeriod \u003d RecurrencePeriod.DAILY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            } else if (\"weekly\".equals(recurrencePeriod.get())) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                this.recurrencePeriod \u003d RecurrencePeriod.WEEKLY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                throw new DukeException(\"Please enter a valid recurrence period!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            this.recurrencePeriod \u003d RecurrencePeriod.NONE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public String recurrenceDescription() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return recurrencePeriod.recurrenceDescription();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public String recurrenceCode() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return recurrencePeriod.recurrenceCode();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public String recurrenceIcon() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return recurrencePeriod.recurrenceIcon();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This function marks tasks as undone every week/day based on the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * recurrence period of the task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public boolean isTimeToReset() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        LocalDateTime dateNow \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        switch (recurrencePeriod) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        case DAILY:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            if (ChronoUnit.DAYS.between(lastUpdatedDate, dateNow) \u003e 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                lastUpdatedDate \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        case WEEKLY:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            if (ChronoUnit.DAYS.between(lastUpdatedDate, dateNow) \u003e 7) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                lastUpdatedDate \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "shaun97": 67
    }
  },
  {
    "path": "src/main/java/duke/extensions/RecurrencePeriod.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "package duke.extensions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public enum RecurrencePeriod {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    NONE, DAILY, WEEKLY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public String recurrenceCode() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        switch (this) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        case DAILY:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            return \"Daily\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        case WEEKLY:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            return \"Weekly\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            return \"NA\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public String recurrenceDescription() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        switch (this) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        case DAILY:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            return \" every day\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        case WEEKLY:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            return \" every week\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            return \"N\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public String recurrenceIcon() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        switch (this) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        case DAILY:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        case WEEKLY:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            return \"[R]\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 34,
      "nicholasnovakovic": 3
    }
  },
  {
    "path": "src/main/java/duke/extensions/TaskAssigner.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nimiew"
        },
        "content": "package duke.extensions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nimiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nimiew"
        },
        "content": " * Class that contains logic for vectorizing task descriptions and proposing closest filter"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nimiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nimiew"
        },
        "content": "public class TaskAssigner {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * Finds a suitable filter and asks if user wants to assign to it"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @param tasks TaskList of all of user\u0027s tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @param task Task to be auto assigned"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    public static void assign(TaskList tasks, Task task) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        if (task.getFilter().isPresent()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            System.out.println(String.format(\"This task already has a filter \\\"%s\\\"!\", task.getFilter().get()));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        String toUpdate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        Set\u003cString\u003e filters \u003d getFilters(tasks);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        for (String s: filters) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            if (task.getDescription().contains(s)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                System.out.println(String.format(\"This task\u0027s description contains the filter \\\"%s\\\", would you like to\" +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                                                 \" assign to it? (Y/N)\", s));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                toUpdate \u003d scanner.nextLine().toUpperCase();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                while (!(toUpdate.equals(\"Y\") || toUpdate.equals(\"N\"))) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                    System.out.println(\"Invalid. Y or N only.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                    System.out.println(String.format(\"Would you like to assign task \\\"%s\\\" to filter \\\"%s\\\"? (Y/N)\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                            task.getDescription(), s));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                    toUpdate \u003d scanner.nextLine().toUpperCase();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                if (toUpdate.equals(\"Y\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                    task.setFilter(Optional.ofNullable(s));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                    System.out.println(String.format(\"Task \\\"%s\\\" has been assigned to filter \\\"%s\\\"\", task.getDescription(), s));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e tokens_per_task \u003d new ArrayList\u003cArrayList\u003cString\u003e\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        for (int i\u003d0; i\u003ctasks.size(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            tokens_per_task.add(tokenize(tasks.get(i)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        Map\u003cString, Integer\u003e uniqueTokens \u003d getUniqueTokens(tokens_per_task);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        ArrayList\u003cArrayList\u003cInteger\u003e\u003e vectorCounts \u003d new ArrayList\u003cArrayList\u003cInteger\u003e\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        for (int i\u003d0; i\u003ctokens_per_task.size(); i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            ArrayList\u003cInteger\u003e vector \u003d getVectorCount(tokens_per_task.get(i), uniqueTokens);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            vectorCounts.add(vector);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        Map\u003cString, ArrayList\u003cInteger\u003e\u003e filterVectorCounts \u003d getFilterVectors(filters, tasks, vectorCounts);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        ArrayList\u003cInteger\u003e taskVector \u003d getVectorCount(tokenize(task), uniqueTokens);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        String closestFilter \u003d findClosestFilter(taskVector, filterVectorCounts);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        if (closestFilter \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            System.out.println(\"There are no suitable filters to assign.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        System.out.println(String.format(\"The closest filter is \\\"%s\\\" with cosine similarity of %f.\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                                         closestFilter, cosine_similarity(taskVector, filterVectorCounts.get(closestFilter))));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        System.out.println(String.format(\"Would you like to assign task \\\"%s\\\" to filter \\\"%s\\\"? (Y/N)\", task.getDescription(), closestFilter));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        toUpdate \u003d scanner.nextLine().toUpperCase();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        while (!(toUpdate.equals(\"Y\") || toUpdate.equals(\"N\"))) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            System.out.println(\"Invalid. Y or N only.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            System.out.println(String.format(\"Would you like to assign task \\\"%s\\\" to filter \\\"%s\\\"? (Y/N)\", task.getDescription(), closestFilter));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            toUpdate \u003d scanner.nextLine().toUpperCase();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        if (toUpdate.equals(\"Y\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            task.setFilter(Optional.ofNullable(closestFilter));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            System.out.println(String.format(\"Task \\\"%s\\\" has been assigned to filter \\\"%s\\\"\", task.getDescription(), closestFilter));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * Cleans and tokenizes a task\u0027s description into arraylist of strings"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @param task Task whose description is to be tokenized"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @return ArrayList\u003cstring\u003e containing tokens of task description"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    private static ArrayList\u003cString\u003e tokenize(Task task) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        String description \u003d task.getDescription();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        description \u003d description.trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        description \u003d description.replaceAll(\"(?:--|[\\\\[\\\\]{}()+/\\\\\\\\])\", \"\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        String[] tokens_array \u003d description.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        return new ArrayList\u003cString\u003e(Arrays.asList(tokens_array));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * Generates a map for unique token to index in count vector"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @param tokens_per_task An arraylist that contains arraylist of tokens for each task description"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @return A map that maps unique tokens to their index in the count vector"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    private static Map\u003cString, Integer\u003e getUniqueTokens(ArrayList\u003cArrayList\u003cString\u003e\u003e tokens_per_task) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        Map\u003cString, Integer\u003e map \u003d new HashMap\u003cString, Integer\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        for (int i\u003d0; i\u003ctokens_per_task.size(); i++){"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            for (int j\u003d0; j\u003ctokens_per_task.get(i).size(); j++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                String token \u003d tokens_per_task.get(i).get(j);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                if (!map.containsKey(token)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                    map.put(token, map.size());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * Given the tokens for a task\u0027s description and mapping to tokens to index, generate the count vector"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @param tokens tokens for a particular task description"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @param uniqueTokens a map that maps unique tokens to their index in the count vector"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @return Arraylist of numbers which represent vector counts for description"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    private static ArrayList\u003cInteger\u003e getVectorCount(ArrayList\u003cString\u003e tokens, Map\u003cString, Integer\u003e uniqueTokens) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        ArrayList\u003cInteger\u003e vector \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        // Initialize the vector"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        for (int i\u003d0; i\u003cuniqueTokens.size(); i++) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            vector.add(0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        for (int i\u003d0; i\u003ctokens.size(); i++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            String token \u003d tokens.get(i);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            int index \u003d uniqueTokens.get(token);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            vector.set(index, vector.get(index) + 1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        return vector;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @param tasks TaskList of all of user\u0027s tasks"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @return Set of filters"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    private static HashSet\u003cString\u003e getFilters(TaskList tasks) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        ArrayList\u003cString\u003e filters \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        for (int i\u003d0; i\u003ctasks.size(); i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            Optional\u003cString\u003e filter \u003d tasks.get(i).getFilter();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            if (filter.isPresent()){"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                filters.add(filter.get());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        // Remove dups"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        HashSet\u003cString\u003e hashSet \u003d new HashSet\u003c\u003e(filters);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        return hashSet;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @param filters Set of filters"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @param tasks TaskList of all of user\u0027s tasks"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @param vectorCounts VectorCounts for each task"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @return Map of filter to average VectorCount of filter"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    private static Map\u003cString, ArrayList\u003cInteger\u003e\u003e getFilterVectors(Set\u003cString\u003e filters, TaskList tasks,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                                                                   ArrayList\u003cArrayList\u003cInteger\u003e\u003e vectorCounts) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        Map\u003cString, ArrayList\u003cInteger\u003e\u003e filterVectorCounts \u003d new HashMap\u003cString, ArrayList\u003cInteger\u003e\u003e();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        for (int i\u003d0; i\u003ctasks.size(); i++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            Optional\u003cString\u003e filter \u003d tasks.get(i).getFilter();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            if (filter.isPresent()){"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                if (! filterVectorCounts.containsKey(filter)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                    filterVectorCounts.put(filter.get(), vectorCounts.get(i));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                    ArrayList\u003cInteger\u003e currentVectorCount \u003d filterVectorCounts.get(filter.get());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                    ArrayList\u003cInteger\u003e toAddVectorCount \u003d vectorCounts.get(i);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                    for (int j\u003d0; j\u003ccurrentVectorCount.size(); j++) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                        currentVectorCount.set(j, currentVectorCount.get(j) + toAddVectorCount.get(j));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                    filterVectorCounts.put(filter.get(), currentVectorCount);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        return filterVectorCounts;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @param taskVector VectorCount of task we want to auto assign"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @param filterVectorCounts Average VectorCounts of all the filters"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @return The closest filter or null if best cosine similarity is 0"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    private static String findClosestFilter (ArrayList\u003cInteger\u003e taskVector, Map\u003cString, ArrayList\u003cInteger\u003e\u003e filterVectorCounts) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        String closestFilter \u003d null;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        double maxSimilarity \u003d 0;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        for (String filter : filterVectorCounts.keySet()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            double similarity \u003d cosine_similarity(filterVectorCounts.get(filter), taskVector);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            if (similarity \u003e maxSimilarity) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                maxSimilarity \u003d similarity;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                closestFilter \u003d filter;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        if (maxSimilarity \u003d\u003d 0.0) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        return closestFilter;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @param vectorA first vectorCount"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @param vectorB second vectorCount"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @return Cosine similarity between the 2 vectors"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    private static double cosine_similarity(ArrayList\u003cInteger\u003e vectorA, ArrayList\u003cInteger\u003e vectorB) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        // A and B must have same length"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        double dotProduct \u003d 0;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        double normA \u003d 0;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        double normB \u003d 0;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        for (int i\u003d0 ; i\u003cvectorA.size(); i++) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            dotProduct +\u003d (double)vectorA.get(i) * (double)vectorB.get(i);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        for (int i\u003d0 ; i\u003cvectorA.size(); i++) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            normA +\u003d (double)vectorA.get(i) * (double)vectorA.get(i);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        normA \u003d Math.sqrt(normA);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        for (int i\u003d0 ; i\u003cvectorB.size(); i++) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            normB +\u003d (double)vectorB.get(i) * (double)vectorB.get(i);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        normB \u003d Math.sqrt(normB);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        return dotProduct / (normA * normB);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nimiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nimiew": 224
    }
  },
  {
    "path": "src/main/java/duke/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private String taskType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private int duration \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private Optional\u003cLocalDateTime\u003e dateTime \u003d Optional.empty();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private Optional\u003cString\u003e recurrence \u003d Optional.empty();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private void getKeywordAndFields(String rawParameters) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String[] splitParameters \u003d rawParameters.split(\" -\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        for (int i \u003d 1; i \u003c splitParameters.length; i++) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            String[] s \u003d splitParameters[i].split(\" \", 2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            if (s.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                throw new DukeException(\"Please enter something for me to add!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            String keyword \u003d s[0];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            String field \u003d s[1];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            switch (keyword) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            case \"r\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                recurrence \u003d Optional.of(field);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            case \"d\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    duration \u003d Integer.parseInt(field);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    throw new DukeException(\"Please enter a numerical field for the duration!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            case \"t\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                this.dateTime \u003d Optional.of(DateTimeParser.parseDateTime(field));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                throw new DukeException(\"I don\u0027t know which field you are trying to edit!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private void getTypeAndDescription(String s) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String[] typeArray \u003d s.split(\" \", 2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.taskType \u003d typeArray[0];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String[] descriptionArray \u003d typeArray[1].split(\" -\", 2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.description \u003d descriptionArray[0];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public AddCommand parse(Optional\u003cString\u003e filter, String args) throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        getTypeAndDescription(args);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        getKeywordAndFields(args);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return new AddCommand(filter, dateTime, recurrence, description, taskType, duration);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 61
    }
  },
  {
    "path": "src/main/java/duke/parser/DateTimeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "public class DateTimeParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public static LocalDateTime parseDateTime(String info) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        LocalDateTime result;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        switch (info) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        case \"today\":"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            result \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        case \"tomorrow\":"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            result \u003d LocalDateTime.now().plusDays(1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            String[] details \u003d info.split(\" \", 2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            switch (details[0]) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            case \"today\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                    result \u003d LocalDateTime.of(LocalDate.now(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                            LocalTime.parse(details[1], DateTimeFormatter.ofPattern(\"HHmm\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    throw new DukeException(\"Please enter a time behind today in HHmm format!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            case \"tomorrow\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                    result \u003d LocalDateTime.of(LocalDate.now().plusDays(1),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                            LocalTime.parse(details[1], DateTimeFormatter.ofPattern(\"HHmm\")));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    throw new DukeException(\"Please enter a time behind tomorrow in HHmm format!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                if (details.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        DateTimeFormatter formatter \u003d new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                                .appendPattern(\"ddMMyy[HH:mm:ss]\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                                .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                                .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                                .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                                .toFormatter();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        result \u003d LocalDateTime.parse(info, formatter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        throw new DukeException(\"Please enter a date in ddMMyy format!\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                        result \u003d LocalDateTime.parse(info, DateTimeFormatter.ofPattern(\"ddMMyy HHmm\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        throw new DukeException(\"Please enter a date in ddMMyy HHmm format!\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 32,
      "nicholasnovakovic": 34
    }
  },
  {
    "path": "src/main/java/duke/parser/DuqueParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.storage.UndoStack;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * duke.parser.Parser class that deals with making sense of user commands"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public class DuqueParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * Returns a duke.command.Command object which will be specific to the keywords given in the user command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * Segregates the different categories of user commands"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * Allows them to be dealt with specifically like how the should be with less confusion"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @param fullCommand the entire user command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @return duke.command.Command the class duke.command.Command will execute the user command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @throws DukeException in case of user input errors which duke.parser.Parser cannot recognise,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *                       the parser will return"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *                       specific error messages depending on the reason of the error"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public static Command parseCommand(String fullCommand, UndoStack undoStack) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        Optional\u003cString\u003e filter \u003d Optional.empty();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        fullCommand \u003d fullCommand.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        if (fullCommand.charAt(0) \u003d\u003d \u0027-\u0027) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            if (fullCommand.length() \u003d\u003d 1 || !fullCommand.contains(\" \")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                throw new DukeException(\"Sorry I don\u0027t understand what you mean.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            filter \u003d Optional.of(fullCommand.substring(1, fullCommand.indexOf(\u0027 \u0027)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            fullCommand \u003d fullCommand.substring(fullCommand.indexOf(\u0027 \u0027) + 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String[] fcArray \u003d fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String keyword \u003d OffByOneChecker.offByOne(fcArray[0]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        keyword \u003d StartsWithChecker.checkStartsWithAnyCommand(keyword);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        switch (keyword) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            if (1 \u003d\u003d fcArray.length) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                return new ListCommand(filter);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            return new ListCommand(fcArray[1], filter);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            if (fcArray.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! The description of delete cannot be empty.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            return new DeleteCommand(filter, fcArray[1]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            if (fcArray.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! The description of find cannot be empty.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            return new FindCommand(fcArray[1], filter);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        case \"random\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            if (fcArray.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                return new RandomCommand(filter);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            return new RandomCommand(fcArray[1], filter);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            if (fcArray.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! The description of done cannot be empty.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            return new DoneCommand(filter, fcArray[1]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        case \"edit\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            if (fcArray.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! The description of edit cannot be empty.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            return new EditCommandParser().parse(filter, fcArray[1]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        case \"task\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            if (fcArray.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! The description of \" + keyword + \" cannot be empty.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            return new AddCommandParser().parse(filter, fullCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        case \"pomo\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            if (fcArray.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! Please specify which pomodoro timer you would like to start!\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            return new PomodoroCommand(fcArray[1]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        case \"autoassign\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            if (fcArray.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! Please specify which task to auto assign!\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            return new AutoAssignCommand(fcArray[1]);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        case \"undo\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            if (fcArray.length !\u003d 1) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! There should not be any description for undo!\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            return new UndoCommand(undoStack);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 82,
      "nicholasnovakovic": 8,
      "nimiew": 8
    }
  },
  {
    "path": "src/main/java/duke/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.command.EditCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private ArrayList\u003cKeywordAndField\u003e getKeywordAndFields(String rawParameters) throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String[] splitParameters \u003d rawParameters.split(\" -\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        ArrayList\u003cKeywordAndField\u003e keywordAndEdits \u003d new ArrayList\u003cKeywordAndField\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        if (splitParameters.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            throw new DukeException(\"Please enter something for me to edit!\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        for (int i \u003d 1; i \u003c splitParameters.length; i++) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            String[] s \u003d splitParameters[i].split(\" \", 2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            if (s.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                throw new DukeException(\"Please enter something for me to edit!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                keywordAndEdits.add(new KeywordAndField(s[0], s[1]));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return keywordAndEdits;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private int getIndexFromCommand(String fullEditArg) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String[] temp \u003d fullEditArg.split(\" \", 2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            int indexNo \u003d Integer.parseInt(temp[0]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            return indexNo;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            throw new DukeException(\"Please enter a valid index\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public EditCommand parse(Optional\u003cString\u003e filter, String args) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        ArrayList\u003cKeywordAndField\u003e keywordAndFields \u003d getKeywordAndFields(args);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        int index \u003d getIndexFromCommand(args);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return new EditCommand(filter, index, keywordAndFields);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 44
    }
  },
  {
    "path": "src/main/java/duke/parser/KeywordAndField.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public class KeywordAndField {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private String field;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public KeywordAndField(String keyword, String field) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.field \u003d field;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public String getKeyword() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public String getField() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return field;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 20
    }
  },
  {
    "path": "src/main/java/duke/parser/OffByOneChecker.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nimiew"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nimiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nimiew"
        },
        "content": " * duke.parser.OffByOneChecker class which checks if a keyword is off by one from any keyword in a list of keywords"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nimiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nimiew"
        },
        "content": "public class OffByOneChecker {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * If command keyword is off by one, verify with user to change command keyword"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @param keyword the parsed command keyword"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @return keyword (may not be changed)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    public static String offByOne(String keyword) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        ArrayList\u003cString\u003e commandList \u003d new ArrayList\u003c\u003e(Arrays.asList(\"bye\", \"help\", \"list\", \"delete\", \"find\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                \"done\", \"edit\", \"task\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        for (String command : commandList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            if (keyword.length() !\u003d command.length()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            int commonCharCount \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            for (int i \u003d 0; i \u003c keyword.length(); i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                if (command.charAt(i) \u003d\u003d keyword.charAt(i)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                    commonCharCount +\u003d 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            if (commonCharCount \u003d\u003d command.length()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                return command;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            } else if (commonCharCount \u003d\u003d command.length() - 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                System.out.println(String.format(\"Did you mean %s? (Y/N)\", command));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                String input \u003d scanner.nextLine().toUpperCase();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                while (!input.equals(\"Y\") \u0026\u0026 !input.equals(\"N\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                    System.out.println(String.format(\"Did you mean %s? Please enter anything (Y/N)\", command));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                    input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                if (input.equals(\"Y\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                    return command;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                } else if (input.equals(\"N\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                    return keyword;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        return keyword;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nimiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 2,
      "nimiew": 47
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    T parse(Optional\u003cString\u003e filter, String args) throws DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 5,
      "-": 5
    }
  },
  {
    "path": "src/main/java/duke/parser/StartsWithChecker.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nimiew"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nimiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nimiew"
        },
        "content": " * Class which checks if a keyword starts with any keyword from a list of keywords"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nimiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nimiew"
        },
        "content": "public class StartsWithChecker {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * Checks if any command keywords start with the input command keyword"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @param keyword the parsed command keyword"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     * @return keyword (may not be changed)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nimiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    public static String checkStartsWithAnyCommand(String keyword) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        ArrayList\u003cString\u003e commandList \u003d new ArrayList\u003c\u003e(Arrays.asList(\"bye\", \"help\", \"list\", \"delete\", \"find\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                \"done\", \"edit\", \"task\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        for (String command : commandList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            if (command.startsWith(keyword)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                if (command.equals(keyword)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                    return command;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                System.out.println(String.format(\"Did you mean %s? (Y/N)\", command));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                String input \u003d scanner.nextLine().toUpperCase();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                while (!input.equals(\"Y\") \u0026\u0026 !input.equals(\"N\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                    System.out.println(String.format(\"Did you mean %s? Please enter anything (Y/N)\", command));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                    input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                if (input.equals(\"Y\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                    return command;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                } else if (input.equals(\"N\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                    return keyword;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        return keyword;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nimiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 1,
      "nimiew": 40
    }
  },
  {
    "path": "src/main/java/duke/storage/RuntimeTypeAdapterFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author nicholasnovakovic-reused"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * Copyright (C) 2011 Google Inc."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * You may obtain a copy of the License at"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *      http://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * limitations under the License."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import com.google.gson.JsonElement;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import com.google.gson.JsonParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import com.google.gson.JsonPrimitive;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import com.google.gson.TypeAdapter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import com.google.gson.TypeAdapterFactory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import com.google.gson.internal.Streams;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import com.google.gson.stream.JsonReader;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import com.google.gson.stream.JsonWriter;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * Adapts values whose runtime type may differ from their declaration type. This"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * is necessary when a field\u0027s type is not the same type that GSON should create"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * when deserializing that field. For example, consider these types:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   abstract class Shape {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *     int x;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *     int y;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   class Circle extends Shape {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *     int radius;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   class Rectangle extends Shape {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *     int width;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *     int height;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   class Diamond extends Shape {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *     int width;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *     int height;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   class Drawing {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *     Shape bottomShape;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *     Shape topShape;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * \u003cp\u003eWithout additional type information, the serialized JSON is ambiguous. Is"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * the bottom shape in this drawing a rectangle or a diamond? \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *     \"bottomShape\": {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       \"width\": 10,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       \"height\": 5,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       \"x\": 0,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       \"y\": 0"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *     },"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *     \"topShape\": {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       \"radius\": 2,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       \"x\": 4,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       \"y\": 1"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *     }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   }}\u003c/pre\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * This class addresses this problem by adding type information to the"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * serialized JSON and honoring that type information when the JSON is"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * deserialized: \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *     \"bottomShape\": {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       \"type\": \"Diamond\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       \"width\": 10,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       \"height\": 5,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       \"x\": 0,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       \"y\": 0"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *     },"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *     \"topShape\": {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       \"type\": \"Circle\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       \"radius\": 2,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       \"x\": 4,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       \"y\": 1"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *     }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   }}\u003c/pre\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * Both the type field name ({@code \"type\"}) and the type labels ({@code"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * \"Rectangle\"}) are configurable."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * \u003ch3\u003eRegistering Types\u003c/h3\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * Create a {@code RuntimeTypeAdapterFactory} by passing the base type and type field"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * name to the {@link #of} factory method. If you don\u0027t supply an explicit type"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * field name, {@code \"type\"} will be used. \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   RuntimeTypeAdapterFactory\u003cShape\u003e shapeAdapterFactory"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       \u003d RuntimeTypeAdapterFactory.of(Shape.class, \"type\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * Next register all of your subtypes. Every subtype must be explicitly"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * registered. This protects your application from injection attacks. If you"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * don\u0027t supply an explicit type label, the type\u0027s simple name will be used."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   shapeAdapterFactory.registerSubtype(Rectangle.class, \"Rectangle\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   shapeAdapterFactory.registerSubtype(Circle.class, \"Circle\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   shapeAdapterFactory.registerSubtype(Diamond.class, \"Diamond\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * Finally, register the type adapter factory in your application\u0027s GSON builder:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   Gson gson \u003d new GsonBuilder()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       .registerTypeAdapterFactory(shapeAdapterFactory)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       .create();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * Like {@code GsonBuilder}, this API supports chaining: \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   RuntimeTypeAdapterFactory\u003cShape\u003e shapeAdapterFactory \u003d RuntimeTypeAdapterFactory.of(Shape.class)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       .registerSubtype(Rectangle.class)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       .registerSubtype(Circle.class)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       .registerSubtype(Diamond.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "public final class RuntimeTypeAdapterFactory\u003cT\u003e implements TypeAdapterFactory {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private final Class\u003c?\u003e baseType;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private final String typeFieldName;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private final Map\u003cString, Class\u003c?\u003e\u003e labelToSubtype \u003d new LinkedHashMap\u003cString, Class\u003c?\u003e\u003e();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private final Map\u003cClass\u003c?\u003e, String\u003e subtypeToLabel \u003d new LinkedHashMap\u003cClass\u003c?\u003e, String\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private final boolean maintainType;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private RuntimeTypeAdapterFactory(Class\u003c?\u003e baseType, String typeFieldName, boolean maintainType) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        if (typeFieldName \u003d\u003d null || baseType \u003d\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.baseType \u003d baseType;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.typeFieldName \u003d typeFieldName;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.maintainType \u003d maintainType;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Creates a new runtime type adapter using for {@code baseType} using {@code"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * typeFieldName} as the type field name. Type field names are case sensitive."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * {@code maintainType} flag decide if the type will be stored in pojo or not."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public static \u003cT\u003e RuntimeTypeAdapterFactory\u003cT\u003e of(Class\u003cT\u003e baseType, String typeFieldName, boolean maintainType) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return new RuntimeTypeAdapterFactory\u003cT\u003e(baseType, typeFieldName, maintainType);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Creates a new runtime type adapter using for {@code baseType} using {@code"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * typeFieldName} as the type field name. Type field names are case sensitive."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public static \u003cT\u003e RuntimeTypeAdapterFactory\u003cT\u003e of(Class\u003cT\u003e baseType, String typeFieldName) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return new RuntimeTypeAdapterFactory\u003cT\u003e(baseType, typeFieldName, false);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Creates a new runtime type adapter for {@code baseType} using {@code \"type\"} as"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * the type field name."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public static \u003cT\u003e RuntimeTypeAdapterFactory\u003cT\u003e of(Class\u003cT\u003e baseType) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return new RuntimeTypeAdapterFactory\u003cT\u003e(baseType, \"type\", false);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Registers {@code type} identified by {@code label}. Labels are case"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * sensitive."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws IllegalArgumentException if either {@code type} or {@code label}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *                                  have already been registered on this type adapter."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public RuntimeTypeAdapterFactory\u003cT\u003e registerSubtype(Class\u003c? extends T\u003e type, String label) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        if (type \u003d\u003d null || label \u003d\u003d null) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        if (subtypeToLabel.containsKey(type) || labelToSubtype.containsKey(label)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            throw new IllegalArgumentException(\"types and labels must be unique\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        labelToSubtype.put(label, type);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        subtypeToLabel.put(type, label);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Registers {@code type} identified by its {@link Class#getSimpleName simple"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * name}. Labels are case sensitive."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws IllegalArgumentException if either {@code type} or its simple name"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *                                  have already been registered on this type adapter."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public RuntimeTypeAdapterFactory\u003cT\u003e registerSubtype(Class\u003c? extends T\u003e type) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return registerSubtype(type, type.getSimpleName());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public \u003cR\u003e TypeAdapter\u003cR\u003e create(Gson gson, TypeToken\u003cR\u003e type) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        if (null \u003d\u003d type || !baseType.isAssignableFrom(type.getRawType())) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        final Map\u003cString, TypeAdapter\u003c?\u003e\u003e labelToDelegate \u003d new LinkedHashMap\u003cString, TypeAdapter\u003c?\u003e\u003e();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        final Map\u003cClass\u003c?\u003e, TypeAdapter\u003c?\u003e\u003e subtypeToDelegate \u003d new LinkedHashMap\u003cClass\u003c?\u003e, TypeAdapter\u003c?\u003e\u003e();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        for (Map.Entry\u003cString, Class\u003c?\u003e\u003e entry : labelToSubtype.entrySet()) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            TypeAdapter\u003c?\u003e delegate \u003d gson.getDelegateAdapter(this, TypeToken.get(entry.getValue()));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            labelToDelegate.put(entry.getKey(), delegate);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            subtypeToDelegate.put(entry.getValue(), delegate);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return new TypeAdapter\u003cR\u003e() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            public R read(JsonReader in) throws IOException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                JsonElement jsonElement \u003d Streams.parse(in);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                JsonElement labelJsonElement;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                if (maintainType) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                    labelJsonElement \u003d jsonElement.getAsJsonObject().get(typeFieldName);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                    labelJsonElement \u003d jsonElement.getAsJsonObject().remove(typeFieldName);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                if (labelJsonElement \u003d\u003d null) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                    throw new JsonParseException(\"cannot deserialize \" + baseType"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                            + \" because it does not define a field named \" + typeFieldName);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                String label \u003d labelJsonElement.getAsString();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                @SuppressWarnings(\"unchecked\") // registration requires that subtype extends T"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                        TypeAdapter\u003cR\u003e delegate \u003d (TypeAdapter\u003cR\u003e) labelToDelegate.get(label);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                if (delegate \u003d\u003d null) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                    throw new JsonParseException(\"cannot deserialize \" + baseType + \" subtype named \""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                            + label + \"; did you forget to register a subtype?\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                return delegate.fromJsonTree(jsonElement);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            public void write(JsonWriter out, R value) throws IOException {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                Class\u003c?\u003e srcType \u003d value.getClass();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                String label \u003d subtypeToLabel.get(srcType);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                @SuppressWarnings(\"unchecked\") // registration requires that subtype extends T"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                        TypeAdapter\u003cR\u003e delegate \u003d (TypeAdapter\u003cR\u003e) subtypeToDelegate.get(srcType);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                if (delegate \u003d\u003d null) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                    throw new JsonParseException(\"cannot serialize \" + srcType.getName()"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                            + \"; did you forget to register a subtype?\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                JsonObject jsonObject \u003d delegate.toJsonTree(value).getAsJsonObject();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                if (maintainType) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                    Streams.write(jsonObject, out);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                JsonObject clone \u003d new JsonObject();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                if (jsonObject.has(typeFieldName)) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                    throw new JsonParseException(\"cannot serialize \" + srcType.getName()"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                            + \" because it already defines a field named \" + typeFieldName);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                clone.add(typeFieldName, new JsonPrimitive(label));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                for (Map.Entry\u003cString, JsonElement\u003e e : jsonObject.entrySet()) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                    clone.add(e.getKey(), e.getValue());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                Streams.write(clone, out);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }.nullSafe();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 9,
      "nicholasnovakovic": 255,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import com.google.gson.stream.JsonReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Class that deals with the saving and loading of all duke.task.Task data the user has saved"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Uses JSON file as the file type which the duke.tasklist.TaskList is saved"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Loads the data stored in the JSON file into an ArrayList of Tasks that"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * can be used to construct a new instance of duke.tasklist.TaskList which has all the saved duke.task.Task data"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Constructor of the storage class"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Takes in the file path of where the JSON file with the saved data is stored on the computer"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Returns new Storage object which will save and load files from the filepath specified"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param filePath the location in the directory where the JSON file is"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Reads all the data saved in the JSON file specified in the filePath attribute"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Converts the data into an ArrayList of Tasks with all saved duke.task.Task data"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Returns this ArrayList for user to update progress or new tasks"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @return ArrayList of duke.task.Task the ArrayList with all the saved duke.task.Task data"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws FileNotFoundException in case of the file not beign found, a new instance will be created and all"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *                               previous data will be lost"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws FileNotFoundException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        Gson gson \u003d new GsonBuilder()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                .registerTypeAdapterFactory(RuntimeTypeAdapterFactory"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                        .of(Task.class)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                        .registerSubtype(Task.class)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                        .registerSubtype(Event.class))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                .create();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        JsonReader reader \u003d new JsonReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        Type type \u003d new TypeToken\u003cArrayList\u003cTask\u003e\u003e() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }.getType();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d gson.fromJson(reader, type);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Transfers all current duke.task.Task data saved in the duke.tasklist.TaskList into an ArrayList of Tasks"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Writes all data in this ArrayList onto the JSON file specified in the filePath attribute"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param tasks the duke.tasklist.TaskList with all the saved duke.task.Task data"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws IOException in case of IOException then the error in failure of saving should be shown to user"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void save(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        FileWriter writer \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d tasks.getList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        Gson gson \u003d new GsonBuilder()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                .registerTypeAdapterFactory(RuntimeTypeAdapterFactory"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                        .of(Task.class)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                        .registerSubtype(Task.class)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                        .registerSubtype(Event.class))"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                .create();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        gson.toJson(list, writer);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 17,
      "nicholasnovakovic": 44,
      "-": 20
    }
  },
  {
    "path": "src/main/java/duke/storage/UndoStack.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * Class UndoStack which contains all the mirror commands of commands which can be undone"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * UndoStack is instantiated to be new each time user opens the application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * UndoStack does not save the previous undone operations from the past sessions."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "public class UndoStack {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private Stack\u003cCommand\u003e memory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Creates a new empty UndoStack"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Underlying data structure is a java.util.Stack of Command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public UndoStack() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        memory \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Adds a mirror command to undo the command that user just executed if the command can be undone"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param action mirror command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void addAction(Command action) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        memory.push(action);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Retrieves the most recent mirror command to enable to undo procedure of the most recent command that can be"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * undone."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @return most recent mirror command"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public Command retrieveRecent() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return memory.pop();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Checks if there are any mirror commands in UndoStack. If there are none, then user calling undo should not do"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * anything. This facilitates that process."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @return boolean of true when UndoStack is empty else false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return memory.isEmpty();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 2,
      "nicholasnovakovic": 49
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.extensions.Recurrence;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Subclass of duke.task.Task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Describes specific type of task which can be classified as an event"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Constructor for duke.task.Event"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Takes in a String description like superclass duke.task.Task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Takes in another parameter Date to store when the duke.task.Event should be held at"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Allows reminding of user for when the duke.task.Event is going to be"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param description the description of the event"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @param the         date and time at which the event will be held"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public Event(Optional\u003cString\u003e filter, Optional\u003cLocalDateTime\u003e dateTime, Recurrence recurrence, String description,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                 int duration) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        super(filter, dateTime, recurrence, description, duration);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.key \u003d \"[E]\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 6,
      "nicholasnovakovic": 12,
      "-": 10
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.extensions.Priority;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.extensions.Recurrence;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Superclass for all Tasks that will be added to the duke.task.Task Manager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    protected Optional\u003cLocalDateTime\u003e dateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    protected String key;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    protected Priority priority;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    protected Recurrence recurrence;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private int duration;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private Optional\u003cString\u003e filter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Constructor function for duke.task.Task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Creates a new instance of duke.task.Task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * filter, datetime, recurrence, duration are all optional attributes of a task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * They will be instantiated to a default value by AddCommand if user does not provide the specifications"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Automatically flags the boolean isDone as False"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param filter filter for each task"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param dateTime datetime of the task, usually describes when it is due"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param recurrence describes whether the task recurs"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param duration how long the task would take to complete"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public Task(Optional\u003cString\u003e filter, Optional\u003cLocalDateTime\u003e dateTime, Recurrence recurrence,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                String description, int duration) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.key \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.priority \u003d Priority.LOW;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.filter \u003d filter;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Constructor function for duke.task.Task"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Creates a new instance of duke.task.Task by taking in another instance of Task"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * This facilitates creating a deep copy of an already existing Task efficiently."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * The new Task will be used in the mirror command to EditCommand/UndoCommand."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param other another instance of Task to be deep copied"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public Task(Task other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.description \u003d other.description;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.isDone \u003d other.isDone;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.key \u003d other.key;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.priority \u003d other.priority;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.recurrence \u003d other.recurrence;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.filter \u003d other.filter;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.duration \u003d other.duration;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.dateTime \u003d other.dateTime;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Returns a String object to show if a duke.task.Task has been marked done or not"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @return tick if done or X symbol if not done"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return (isDone ? \"Y\" : \"N\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Flags the boolean attribute isDone as true in a task"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Prints out the confirmation that the task is marked done"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void markAsUndone() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public Optional\u003cString\u003e getFilter() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return this.filter;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    public void setFilter(Optional\u003cString\u003e filter) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        this.filter \u003d filter;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public String getRecurrenceCode() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return recurrence.recurrenceCode();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Sets the recurrence of a Task"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param recurrence the new recurrence of the Task"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws DukeException if given string input is not a valid recurrence"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void setRecurrence(String recurrence) throws DukeException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.recurrence \u003d new Recurrence(Optional.of(recurrence));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        System.out.println(this + \" has a new recurrence period of \" + recurrence);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void updateDone() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        if (recurrence.isTimeToReset()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            markAsUndone();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public String getDuration() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        if (duration \u003d\u003d 0) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            return \"N\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return Integer.toString(duration);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void setDuration(int duration) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        System.out.println(this + \" has a new duration of \" + duration + ((duration \u003d\u003d 1) ? \"hour\" : \" hours\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public int getPriorityLevel() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return priority.priorityLevel();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public String getPriority() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return priority.priorityCode();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * sets the priority of a Task to a priority based on an integer input"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param i integer input corresponding to a priority level"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws DukeException if the input is not a valid priority integer value"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void setPriority(int i) throws DukeException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        switch (i) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            priority \u003d Priority.LOW;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            System.out.println(this + \" has a new priority of LOW\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            priority \u003d Priority.MEDIUM;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            System.out.println(this + \" has a new priority of MEDIUM\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            priority \u003d Priority.HIGH;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            System.out.println(this + \" has a new priority of HIGH\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            throw new DukeException(\"No such priority exists.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Returns a String which describes the task"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @return the description of the task"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return dateTime.map(localDateTime -\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                this.description + \" \""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        + localDateTime.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\")))"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                .orElseGet(() -\u003e this.description);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Updates the description of a Task"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param description the new description of the Task"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        System.out.println(this + \" description has been successfully updated\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public boolean hasDateTime() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return dateTime.isPresent();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return dateTime.get();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Updates the datetime of a Task"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param dateTime the new datetime of the task"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void setDateTime(Optional\u003cLocalDateTime\u003e dateTime) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        System.out.println(this + \" has a new deadline of \""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                + dateTime.get().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\")));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String recurringIcon \u003d recurrence.recurrenceIcon();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return recurringIcon + key + \"[\" + this.getStatusIcon() + \"] \" + description"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                + (dateTime.isPresent()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                ? \" (\" + dateTime.get().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\")) + \")\""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                : \"\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 68,
      "nicholasnovakovic": 130,
      "nimiew": 8,
      "-": 7
    }
  },
  {
    "path": "src/main/java/duke/tasklist/MyDayList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public class MyDayList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public MyDayList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        System.out.println(\"Congratulations! You have added a task to Your Day\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        int taskCount \u003d taskList.size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        if (taskCount \u003d\u003d 1) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            System.out.println(\"Now you have \" + taskCount + \" task in the list.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            System.out.println(\"Now you have \" + taskCount + \" tasks in the list.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void refreshMyDayList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            Task t \u003d taskList.get(i);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaun97"
        },
        "content": "//            if(ChronoUnit.DAYS.between(t.getCreatedDate(), LocalDateTime.now()) \u003e 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaun97"
        },
        "content": "//                taskList.remove(i);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaun97"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    //TODO discuss implementation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 34
    }
  },
  {
    "path": "src/main/java/duke/tasklist/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the data structure containing all tasks added to the task manager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Uses java.util.ArrayList as the main container"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Constructor for duke.tasklist.TaskList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * this is to initialise an EMPTY duke.tasklist.TaskList so it takes no inputs"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Constructor for duke.tasklist.TaskList"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * this is to initialise a duke.tasklist.TaskList with an ArrayList of Tasks"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * this facilitates the loading of saved duke.task.Task data"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param tasks an ArrayList of Tasks"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        taskList \u003d tasks;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            Task t \u003d taskList.get(i);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            t.updateDone();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Constructor for duke.tasklist.TaskList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * this is to initalise a duke.tasklist.TaskList with an ArrayList of Tasks which fulfil the filter predicate"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * tasks which do not fulfil the predicate will not be present in this TaskList"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param list the main TaskList containing all of the user\u0027s tasks"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param filter the filter predicate for each task"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public TaskList(TaskList list, Optional\u003cString\u003e filter) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            Task t \u003d list.get(i);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            if (t.getFilter().equals(filter)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                taskList.add(t);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * returns the number of tasks"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @return size the number of tasks in the duke.tasklist.TaskList now"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public Task get(Optional\u003cString\u003e filter, int index) throws DukeException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        int i \u003d reduceFilter(filter, index);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return taskList.get(i);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * adds a duke.task.Task to the back of the duke.tasklist.TaskList"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param task the duke.task.Task to be added"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        System.out.println(\"You have added this task:\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        System.out.println(task.getDescription());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        int taskCount \u003d taskList.size();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        if (taskCount \u003d\u003d 1) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            System.out.println(\"Now you have \" + taskCount + \" task in the list.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            System.out.println(\"Now you have \" + taskCount + \" tasks in the list.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Searches for any duke.task.Task objects that contain the keyword entered"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * if there are at least one duke.task.Task objects fulfilling the criteria"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * will print out a list of these duke.task.Task objects for the user to see"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * otherwise will notify the user that no duke.task.Task objects have the keyword inside"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param keyword the keyword which the user is searching for Tasks with"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param ui      the user interface class which deals with user interactions"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void find(String keyword, Ui ui) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        ArrayList\u003cTask\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            if (t.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                temp.add(t);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        if (temp.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            ui.showLine(\"There are no matching tasks in your list :-(\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            ui.showLine(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            for (int i \u003d 0; i \u003c temp.size(); i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                ui.showLine((i + 1) + \".\" + temp.get(i));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Removes a task at a certain index of the TaskList."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * If a filter is given, then the index will be based on the filtered list that was printed to the user"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param filter the filter predicate for each task"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param index the index of the task as seen by the user in the TaskList printed"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void remove(Optional\u003cString\u003e filter, int index) throws DukeException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        int counter \u003d -1;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        if (filter.isPresent()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                Task t \u003d taskList.get(i);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                if (t.getFilter().equals(filter)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    counter++;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                if (counter \u003d\u003d index - 1) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    taskList.remove(i);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            taskList.remove(index - 1);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        throw new DukeException(\"Index not found\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Creates a TaskList which has tasks sorted by priority level from high to low"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @return TaskList sorted by priority"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public TaskList priorityView() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        ArrayList\u003cTask\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            temp.add(t);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        temp.sort((a, b) -\u003e a.getPriorityLevel() \u003c b.getPriorityLevel() ? 1 : -1);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return new TaskList(temp);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Creates a TaskList which has tasks with datetime attributes equal to the current local day"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @return TaskList containing tasks of the current day"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public TaskList dayView() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        LocalDate currDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        ArrayList\u003cTask\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            if (t.hasDateTime()) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                LocalDateTime taskDate \u003d t.getDateTime();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                if (ChronoUnit.DAYS.between(currDate, taskDate) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    temp.add(t);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return new TaskList(temp);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Creates a TaskList which as tasks with datetime attributes within the next week."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @return TaskList containing tasks within the next week"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public TaskList weekView() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        LocalDate currDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        ArrayList\u003cTask\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            if (t.hasDateTime()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                LocalDateTime taskDate \u003d t.getDateTime();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                if (ChronoUnit.DAYS.between(currDate, taskDate) \u003c 7"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        \u0026\u0026 ChronoUnit.DAYS.between(currDate, taskDate) \u003e -1) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    temp.add(t);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return new TaskList(temp);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Creates a TaskList containing only undone tasks"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @return TaskList of undone tasks"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public TaskList undoneView() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            if (t.getStatusIcon().equals(\"N\")) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                list.add(t);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return new TaskList(list);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Inserts a task at the given index. If there is a filter given, the index of the insertion will be converted"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * to its corresponding index on the actual TaskList."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param filter filter for each task"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param index index of TaskList where task will be inserted"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param t new Task to be inserted at index"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws DukeException if an invalid index is given"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void insert(Optional\u003cString\u003e filter, int index, Task t) throws DukeException {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        int i \u003d reduceFilter(filter, index);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        taskList.add(i, t);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Replaces a task at the given index with a new given task. If there is a filter given, the index of the task"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * will be converted to its corresponding index on the actual TaskList."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param filter filter for each task"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param index index of TaskList which user saw corresponds to desired task"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param t new Task to replace original at index"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws DukeException if an invalid index is given"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void set(Optional\u003cString\u003e filter, int index, Task t) throws DukeException {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        int i \u003d reduceFilter(filter, index);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        taskList.remove(i);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        taskList.add(i, t);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * If the user defines a filter, it means the user input an index corresponding to a TaskList with the filter"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * applied to it. This method will then convert the given index to the actual corresponding index of the same"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * task in the TaskList. If there is no filter, then the actual index is given so nothing needs to be changed."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param filter filter predicate for each task"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param index index of TaskList which user saw corresponds to desired task"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @return integer value of the actual index of the task in the TaskList"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @throws DukeException if invalid index is given"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private int reduceFilter(Optional\u003cString\u003e filter, int index) throws DukeException {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        int counter \u003d -1;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        if (filter.isPresent()) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                Task t \u003d taskList.get(i);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                if (t.getFilter().equals(filter)) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                    counter++;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                if (counter \u003d\u003d index - 1) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                    return i;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            return index - 1;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        throw new DukeException(\"Index not found\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 60,
      "nicholasnovakovic": 209,
      "-": 10
    }
  },
  {
    "path": "src/main/java/duke/ui/TaskListPrinter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * Class that handles the printing of the TaskList for the user to view"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "public class TaskListPrinter {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Method that handles bulk of the logic of printing the TaskList for the user to view"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param ui the Ui object that handles user interactions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param list the TaskList to be printed for the user"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public static void print(Ui ui, TaskList list) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        int taskCount \u003d list.size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        ui.showLine(\"ID | Priority | Recurrence | Duration | Done? | Description\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        for (int i \u003d 0; i \u003c taskCount; i++) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            ui.showLine(\"-- | -------- | ---------- | -------- | ----- | -----------\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            String curr;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            if (i \u003c 9) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                curr \u003d \"0\" + (i + 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                curr \u003d Integer.toString(i + 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            Task t \u003d list.get(i);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            curr +\u003d \" | \" + padPriority(t.getPriority());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            curr +\u003d \" | \" + padRecurrence(t.getRecurrenceCode());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            curr +\u003d \" | \" + padDuration(t.getDuration());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            curr +\u003d \" |   \" + t.getStatusIcon();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            curr +\u003d \"   | \" + t.getDescription();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            ui.showLine(curr);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Method to modify each Task\u0027s priority level to fit within the print output in a visually pleasing manner"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param priority given priority level of the task"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @return padded string containing given priority level"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private static String padPriority(String priority) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        switch (priority.length()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        case 6:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            return \" \" + priority + \" \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            return \"  \" + priority + \"  \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            return \"  \" + priority + \"   \";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Method to modify each Task\u0027s recurrence period to fit within the print output in a visually pleasing manner"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param recurrence given recurrence period of the task"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @return padded string containing given recurrence period"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private static String padRecurrence(String recurrence) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        switch (recurrence.length()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        case 6:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            return \"  \" + recurrence + \"  \";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            return \"   \" + recurrence + \"  \";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            return \"    \" + recurrence + \"    \";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Method to modify each Task\u0027s duration needed to complete to fit within the print output in a visually"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * pleasing manner"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param duration given duration to complete the task"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @return padded string containing given duration"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private static String padDuration(String duration) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        int toPad \u003d 8 - duration.length();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        int front;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        int back;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        if (toPad % 2 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            front \u003d toPad / 2;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            back \u003d toPad / 2;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            front \u003d toPad / 2 + 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            back \u003d toPad / 2;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        for (int i \u003d 0; i \u003c front; i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            result +\u003d \" \";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        result +\u003d duration;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        for (int i \u003d 0; i \u003c back; i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            result +\u003d \" \";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 2,
      "nicholasnovakovic": 97
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Class duke.ui.Ui that deals with user interactions"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Constructor of class duke.ui.Ui"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * creates a new instance of duke.ui.Ui by initialising a new instance of a Scanner object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * enables the reading of user input and hence the actions that can be taken as responses to the user input"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Greets the user upon initialisation of the task manager"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Reads the user input and returns it in a String form to be parsed by the duke.parser.Parser class"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @return String the use input"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * shows the user an error message"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param message"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void showError(String message) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * shows the user the loading error when there is a FileNotFoundException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        System.out.println(\"No saved data was found. Generating new task list.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * shows the user a parsing error when the wrong input format for datetime is entered"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * shows the user how the format should be written"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void showParsingError() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        System.out.println(\"Please enter the date in the format: ddMMyyyy HHmm\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * shows the user a message"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param message the message which should be shown to the user"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void showLine(String message) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * shows the user each duke.task.Task object entry in the duke.tasklist.TaskList"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param i    the index of the duke.task.Task object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param task the duke.task.Task Object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void showEntry(int i, Task task) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        System.out.println(i + \".\" + task);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * bids the user farewell and shuts the program down"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        System.out.println(\"Bye! Hope to see you again soon.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 6,
      "nicholasnovakovic": 65,
      "-": 18
    }
  },
  {
    "path": "src/test/java/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void testCovertToLocalDate() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": "//        final AddCommand a \u003d new AddCommand(\"homework\", \"19102019 1000\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": "//        assertEquals(LocalDate.of(2019, 10, 19), a.convertToLocalDate(\"19102019 1000\"));"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": "//        final AddCommand b \u003d new AddCommand(\"homework\", \"19012019 1000\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": "//        assertEquals(LocalDate.of(2019, 01, 19), a.convertToLocalDate(\"19012019 1000\"));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 12
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * JUnit test class for Duke class"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\tprivate final Duke dukeTest \u003d new Duke(\"data/duketest.json\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t@Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\tpublic void dummyTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\tassertEquals(2, 2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasnovakovic": 14,
      "-": 1
    }
  },
  {
    "path": "src/test/java/DuqueParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.parser.DuqueParser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Class for JUnit testing for Parser class"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public class DuqueParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": "\tprivate final DuqueParser duqueParser \u003d new DuqueParser();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\t@Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\tpublic void magicTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 3,
      "-": 12
    }
  },
  {
    "path": "src/test/java/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": "  //  final ListCommand c \u003d new ListCommand(\"day\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 9
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     public void testIsTimeToReset() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": "//        final Task taskDaily \u003d new Task(\"homework\", \"daily\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": "//        assertEquals(true, taskDaily.isTimeToReset(LocalDate.now().minusDays(1), LocalDate.now()));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": "//        assertEquals(false, taskDaily.isTimeToReset(LocalDate.now(), LocalDate.now()));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": "//        final Task taskWeekly \u003d new Task(\"homework\", \"weekly\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaun97"
        },
        "content": "//        assertEquals(false, taskWeekly.isTimeToReset(LocalDate.now().minusDays(1), LocalDate.now()));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaun97"
        },
        "content": "//        assertEquals(false, taskWeekly.isTimeToReset(LocalDate.now(), LocalDate.now()));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaun97"
        },
        "content": "//        assertEquals(true, taskWeekly.isTimeToReset(LocalDate.now().minusDays(8), LocalDate.now()));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 24
    }
  },
  {
    "path": "src/test/java/duke/command/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.extensions.Recurrence;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.parser.EditCommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private static final String FILE_PATH \u003d \"data/editCommandTest.json\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private static final Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private static final Storage storage \u003d new Storage(FILE_PATH);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private TaskList createTaskList() throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        TaskList t \u003d new TaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        //Recurrence parameters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        Recurrence recurrenceWeekly \u003d new Recurrence(Optional.of(\"weekly\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        Recurrence recurrenceDaily \u003d new Recurrence(Optional.of(\"daily\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        Recurrence recurrenceNone \u003d new Recurrence(Optional.empty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        //Filter parameters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        Optional\u003cString\u003e cs \u003d Optional.of(\"cs\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        Optional\u003cString\u003e empty \u003d Optional.empty();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        //Date parameters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        Optional\u003cLocalDateTime\u003e dateTime1 \u003d Optional.of(LocalDateTime.of(2017, Month.OCTOBER, 29,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                0, 0));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        Optional\u003cLocalDateTime\u003e dateTime2 \u003d Optional.of(LocalDateTime.of(2018, Month.OCTOBER, 29,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                0, 0));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        Optional\u003cLocalDateTime\u003e dateTime3 \u003d Optional.of(LocalDateTime.of(2017, Month.FEBRUARY, 10,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                0, 0));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        //Description parameters"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String description1 \u003d \"cs2113 is the best :\u0027)\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String description2 \u003d \"cg2271 is the best :\u0027)\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String description3 \u003d \"st2334 is the best :\u0027)\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        t.add(new Task(empty, dateTime1, recurrenceDaily, description1, 4));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        t.add(new Task(cs, dateTime3, recurrenceDaily, description3, 4));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        t.add(new Task(empty, dateTime2, recurrenceNone, description2, 5));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        t.add(new Task(cs, dateTime1, recurrenceWeekly, description3, 4));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return t;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void execute_allFieldsFilteredList_success() throws DukeException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        TaskList tasks \u003d createTaskList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        EditCommand editCommand;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        editCommand \u003d new EditCommandParser().parse(Optional.of(\"cs\"), \"2 -description hello world\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        editCommand.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String expectedTaskDescription \u003d \"hello world 29/10/2017 00:00\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String actualTaskDescription \u003d tasks.get(3).getDescription();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        assertEquals(expectedTaskDescription, actualTaskDescription);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        editCommand \u003d new EditCommandParser().parse(Optional.of(\"cs\"), \"1 -priority 2\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        editCommand.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String expectedTaskPriority \u003d \"High\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String actualTaskPriority \u003d tasks.get(1).getPriority();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        assertEquals(expectedTaskPriority, actualTaskPriority);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        editCommand \u003d new EditCommandParser().parse(Optional.of(\"cs\"), \"1 -t 101019\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        editCommand.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        LocalDateTime expectedTaskDate \u003d LocalDateTime.of(2019, Month.OCTOBER, 10, 0, 0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        LocalDateTime actualTaskDate \u003d tasks.get(1).getDateTime();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        assertEquals(expectedTaskDate, actualTaskDate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        editCommand \u003d new EditCommandParser().parse(Optional.of(\"cs\"), \"1 -d 2\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        editCommand.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String expectedTaskDuration \u003d \"2\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String actualTaskDuration \u003d tasks.get(1).getDuration();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        assertEquals(expectedTaskDuration, actualTaskDuration);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        editCommand \u003d new EditCommandParser().parse(Optional.of(\"cs\"), \"1 -r weekly\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        editCommand.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String expectedTaskRecurrence \u003d \"Weekly\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String actualTaskRecurrence \u003d tasks.get(1).getRecurrenceCode();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        assertEquals(expectedTaskRecurrence, actualTaskRecurrence);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void execute_allFieldsUnfilteredList_success() throws DukeException, IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        TaskList tasks \u003d createTaskList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        EditCommand editCommand;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        editCommand \u003d new EditCommandParser().parse(Optional.empty(), \"1 -description hello world\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        editCommand.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String expectedTaskDescription \u003d \"hello world 29/10/2017 00:00\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String actualTaskDescription \u003d tasks.get(0).getDescription();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        assertEquals(expectedTaskDescription, actualTaskDescription);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        editCommand \u003d new EditCommandParser().parse(Optional.empty(), \"1 -priority 2\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        editCommand.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String expectedTaskPriority \u003d \"High\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String actualTaskPriority \u003d tasks.get(0).getPriority();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        assertEquals(expectedTaskPriority, actualTaskPriority);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        editCommand \u003d new EditCommandParser().parse(Optional.empty(), \"1 -t 101019\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        editCommand.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        LocalDateTime expectedTaskDate \u003d LocalDateTime.of(2019, Month.OCTOBER, 10, 0, 0);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        LocalDateTime actualTaskDate \u003d tasks.get(0).getDateTime();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        assertEquals(expectedTaskDate, actualTaskDate);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        editCommand \u003d new EditCommandParser().parse(Optional.empty(), \"4 -d 2\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        editCommand.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String expectedTaskDuration \u003d \"2\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String actualTaskDuration \u003d tasks.get(3).getDuration();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        assertEquals(expectedTaskDuration, actualTaskDuration);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        editCommand \u003d new EditCommandParser().parse(Optional.empty(), \"3 -r weekly\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        editCommand.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String expectedTaskRecurrence \u003d \"Weekly\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String actualTaskRecurrence \u003d tasks.get(2).getRecurrenceCode();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        assertEquals(expectedTaskRecurrence, actualTaskRecurrence);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    void execute_wrongKeywordInput_failure() throws DukeException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        TaskList tasks \u003d createTaskList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        EditCommand editCommand;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        editCommand \u003d new EditCommandParser().parse(Optional.empty(), \"1 -desc hello world\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        Exception exception \u003d assertThrows(DukeException.class, () -\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                editCommand.execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        assertEquals(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what field you are trying to edit!\","
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                exception.getMessage());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    void execute_wrongPriorityInput_failure() throws DukeException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        TaskList tasks \u003d createTaskList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        EditCommand editCommand;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        editCommand \u003d new EditCommandParser().parse(Optional.empty(), \"1 -priority hello world\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        Exception exception \u003d assertThrows(DukeException.class, () -\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                editCommand.execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        assertEquals(\"Please enter a numerical field for the duration!\", exception.getMessage());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    void execute_wrongTimeInput_failure() throws DukeException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        TaskList tasks \u003d createTaskList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        EditCommand editCommand;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        editCommand \u003d new EditCommandParser().parse(Optional.empty(), \"1 -t hello world\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        Exception exception \u003d assertThrows(DukeException.class, () -\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                editCommand.execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        assertEquals(\"Please enter a date in ddMMyy HHmm format!\", exception.getMessage());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    void execute_wrongDurationInput_failure() throws DukeException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        TaskList tasks \u003d createTaskList();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        EditCommand editCommand;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        editCommand \u003d new EditCommandParser().parse(Optional.empty(), \"1 -d hello world\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        Exception exception \u003d assertThrows(DukeException.class, () -\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                editCommand.execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        assertEquals(\"Please enter a numerical field for the duration!\", exception.getMessage());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    void execute_wrongRecurrenceInput_failure() throws DukeException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        TaskList tasks \u003d createTaskList();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        EditCommand editCommand;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        editCommand \u003d new EditCommandParser().parse(Optional.empty(), \"1 -r hello world\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        Exception exception \u003d assertThrows(DukeException.class, () -\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                editCommand.execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        assertEquals(\"Please enter a valid recurrence period!\", exception.getMessage());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 181
    }
  },
  {
    "path": "src/test/java/duke/command/PomodoroCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": "class PomodoroCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private static final String FILE_PATH \u003d \"data/editCommandTest.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private static final Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private static final Storage storage \u003d new Storage(FILE_PATH);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private static final TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    void execute_wrongPomodoroCommand_failure() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        PomodoroCommand pomodoroCommand \u003d new PomodoroCommand(\"starts\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        Exception exception \u003d assertThrows(DukeException.class, () -\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                pomodoroCommand.execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        assertEquals(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what pomodoro you are referring to\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                exception.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 28
    }
  },
  {
    "path": "src/test/java/duke/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": "class EditCommandParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 7
    }
  }
]
