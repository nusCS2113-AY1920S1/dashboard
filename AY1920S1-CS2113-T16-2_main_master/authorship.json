[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "group \u0027dukemasters\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "version \u00271.0\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "task fatJar(type: Jar) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        attributes \u0027Implementation-Title\u0027: \u0027Duke JAR\u0027,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                \u0027Implementation-Version\u0027: version,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                \u0027Main-Class\u0027: \u0027Duke\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    baseName \u003d project.name + \u0027-all\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    with jar"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    compile \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    compile \u0027com.google.code.gson:gson:2.8.5\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "application {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "test {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "run {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasnovakovic": 43,
      "-": 1
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "rootProject.name \u003d \u0027duke\u0027"
      }
    ],
    "authorContributionMap": {
      "nicholasnovakovic": 1
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * Main class which is responsible for the running of the task manager"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public Duke(String filepath) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        storage \u003d new Storage(filepath);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * function that starts the program"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * maintains the program while the exit command is not given"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * exits program once exit command is given"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                ui.showParsingError();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        ui.exit();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        new Duke(\"data/duke.json\").run();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasnovakovic": 53,
      "-": 4
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.extensions.AbnormalityChecker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.parser.DateTimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * duke.command.AddCommand that deals with the adding of new duke.task.Task objects to the duke.tasklist.TaskList"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    String taskType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    String recurrencePeriod;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    int duration;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    Optional\u003cString\u003e filter;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    Optional\u003cLocalDateTime\u003e dateTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public AddCommand(String description, String taskType, Optional\u003cString\u003e filter) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.filter \u003d filter;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.recurrencePeriod \u003d \"none\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.duration \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.dateTime \u003d Optional.empty();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        checkForFlag();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private void checkForFlag() throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        String[] flagArray \u003d description.split(\" -\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (flagArray.length !\u003d 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            for (int i \u003d 1; i \u003c flagArray.length; i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                String temp \u003d flagArray[i];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                char c \u003d temp.charAt(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                String info \u003d temp.substring(2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                switch (c) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                    case \u0027r\u0027:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                        if (info.endsWith(\"ly\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                            this.recurrencePeriod \u003d info;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                            throw new DukeException(\"Please enter an acceptable recurrence period.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                    case \u0027d\u0027:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                        this.duration \u003d Integer.parseInt(info);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                    case \u0027t\u0027:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                        this.dateTime \u003d Optional.of(DateTimeParser.parseDateTime(info));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            this.description \u003d flagArray[0];"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException, DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            case \"task\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                Task newTask \u003d new Task(description, filter, recurrencePeriod, duration, dateTime);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                tasks.add(newTask);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                if (dateTime.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                    throw new DukeException(\"Your event needs to have a starting time.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                Event newEvent \u003d new Event(description, filter, recurrencePeriod, duration, dateTime);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                AbnormalityChecker abnormalityChecker \u003d new AbnormalityChecker(tasks);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                if (abnormalityChecker.checkEventClash(newEvent)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                    System.out.println(\"There is a clash with another event at the same time\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                    tasks.add(newEvent);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 3,
      "nicholasnovakovic": 47,
      "-": 45
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * duke.command.DeleteCommand which executes the procedure for deleting duke.task.Task objects from the duke.tasklist.TaskList"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\tprivate int index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\tpublic DeleteCommand(String index) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\t\tthis.index \u003d Integer.parseInt(index);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\tpublic void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\t\tif (index \u003e tasks.size()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\tthrow new DukeException(\"There is no such task.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\tui.showLine(\"You have removed this task:\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\t\tTask t \u003d tasks.get(index - 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\tui.showLine(t.getDescription());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\t\ttasks.remove(index - 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\t\tif (tasks.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\tui.showLine(\"Now you have 1 task in the list.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\tui.showLine(\"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\tstorage.save(tasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\tpublic boolean isExit() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\t\treturn false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasnovakovic": 6,
      "-": 36
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * duke.command.DoneCommand that deals with marking Tasks in the duke.tasklist.TaskList as done"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\tprivate int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\tpublic DoneCommand(String index) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\t\tthis.index \u003d Integer.parseInt(index) - 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\tpublic void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\t\tif (index + 1 \u003e tasks.size()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\tthrow new DukeException(\"There is no such task.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\t\tTask t \u003d tasks.get(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\t\tt.markAsDone();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\t\ttasks.set(index, t);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\tui.showLine(\"Congratulations on completing the following task:\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\tui.showLine(t.getDescription());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\tpublic boolean isExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\t\treturn false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasnovakovic": 2,
      "-": 34
    }
  },
  {
    "path": "src/main/java/duke/command/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.parser.DateTimeParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    Optional\u003cString\u003e filter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    String command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public EditCommand(Optional\u003cString\u003e filter, String command) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.filter \u003d filter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    //Takes in a string of all the parameters after the edit command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public String[] getParameters(String rawParameters) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String[] splitParameters \u003d rawParameters.split(\" -\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        if (splitParameters.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            throw new DukeException(\"Please enter something for me to edit!\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return splitParameters;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    //Get the index number"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public int getIndexFromCommand(String editCommand) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String[] temp \u003d editCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            int indexNo \u003d Integer.parseInt(temp[0]) - 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            return indexNo;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            throw new DukeException(\"Please enter a valid index\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public int getIndexFromTaskList(Optional\u003cString\u003e filter, int filteredListIndex, TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        int actualIndex \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        boolean isIndexFound \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        ArrayList\u003cTask\u003e tempTaskList \u003d tasks.getList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        if (filteredListIndex \u003e tempTaskList.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            isIndexFound \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        } else if (filter.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            int filteredListCounter \u003d -1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            for (int i \u003d 0; i \u003c tempTaskList.size(); i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                if (filter.equals(tempTaskList.get(i).getFilter())) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    filteredListCounter++;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                if (filteredListCounter \u003d\u003d filteredListIndex) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    isIndexFound \u003d true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    actualIndex \u003d i;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            isIndexFound \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            actualIndex \u003d filteredListIndex;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        if (isIndexFound) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            return actualIndex;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            throw new DukeException(\"Please enter a valid index\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public String[] getKeywordAndEditField(String param) throws DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String[] keywordAndEditArray \u003d param.split(\" \", 2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        if (keywordAndEditArray.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            throw new DukeException(\"Please enter the edit you wish to make\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            return keywordAndEditArray;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            String[] parameters \u003d getParameters(command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            int commandIndex \u003d getIndexFromCommand(command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            int taskListIndex \u003d getIndexFromTaskList(filter, commandIndex, tasks);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            for (int i \u003d 1; i \u003c parameters.length; i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                String[] p \u003d getKeywordAndEditField(parameters[i]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                String keyword \u003d p[0];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                String editField \u003d p[1];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                Task t \u003d tasks.get(taskListIndex);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                switch (keyword) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    case \"description\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        t.setDescription(editField);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    case \"priority\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        int priorityLevel \u003d Integer.parseInt(editField);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        t.setPriority(priorityLevel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                            throw new DukeException(\"Please enter a numerical field for the priority!\"); //Wah i not sure if this is the right way TODO fix exceptions"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        } catch (DukeException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                            throw e;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    case \"t\":"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        Optional\u003cLocalDateTime\u003e dateTime \u003d Optional.of(DateTimeParser.parseDateTime(editField));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        t.setDateTime(dateTime);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                            throw e; //Are you supposed to include it like this? //TODO"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    case \"d\":"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                            int duration \u003d Integer.parseInt(editField);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                            t.setDuration(duration);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                            throw new DukeException(\"Please enter a numerical field for the duration!\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what field you are trying to edit!\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 113,
      "nicholasnovakovic": 21
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import duke.ui.TaskListPrinter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * duke.command.FindCommand which executes the procedure for searching for duke.task.Task objects in the duke.tasklist.TaskList which match the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * keyword given by the user and shows the user a list of matching Tasks or else informs the user that no"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * matching duke.task.Task objects were found"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\tprivate String keyword;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nimiew"
        },
        "content": "\tprivate Command listCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nimiew"
        },
        "content": "\tpublic FindCommand(String keyword, Optional\u003cString\u003e filter) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\t\tthis.keyword \u003d keyword;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nimiew"
        },
        "content": "\t\tthis.listCommand \u003d new ListCommand(filter);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nimiew"
        },
        "content": "\tpublic void execute(TaskList tasks, Ui ui, Storage storage) throws ParseException, IOException, DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\t\tif (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t\tui.showLine(\"You have no tasks in your list! :-)\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nimiew"
        },
        "content": "\t\t\tArrayList\u003cTask\u003e foundTasksTemp \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nimiew"
        },
        "content": "\t\t\tfor (int i\u003d0; i\u003ctasks.size(); i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nimiew"
        },
        "content": "\t\t\t\tTask currentTask \u003d tasks.get(i);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nimiew"
        },
        "content": "\t\t\t\tif (currentTask.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nimiew"
        },
        "content": "\t\t\t\t\tfoundTasksTemp.add(currentTask);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nimiew"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nimiew"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nimiew"
        },
        "content": "\t\t\tTaskList foundTasks \u003d new TaskList(foundTasksTemp);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nimiew"
        },
        "content": "\t\t\tlistCommand.execute(foundTasks, ui, storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\tpublic boolean isExit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\t\treturn false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nimiew": 21,
      "-": 29
    }
  },
  {
    "path": "src/main/java/duke/command/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nimiew"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nimiew"
        },
        "content": "public class HelpCommand extends Command{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    public HelpCommand() {}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException, ParseException, DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        System.out.println(\"The format of the commands are as followed:\\n\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        System.out.println(\"Words in UPPER_CASE are the parameters to be supplied by the user e.g. in todo DESCRIPTION, DESCRIPTION is a parameter which can be used as todo read book.\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        System.out.println(\"Items in square brackets are optional e.g DESCRIPTION [-FLAG] can be used as read book -r or as read book.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        System.out.println(\"Items with ... after them can be used multiple times including zero times e.g. [-FLAG]... can be used as   (i.e. 0 times), -r, -f, etc.\\n\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        System.out.println(\"Here are some commands you can use:\\n\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        System.out.println(\"Adding a todo task: todo DESCRIPTION\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        System.out.println(\"Adding a event task:  event DESCRIPTION /at DATE\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        System.out.println(\"Adding a deadline task: deadline DESCRIPTION /by DATE\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        System.out.println(\"You may use a recurring flag -r weekly or -r daily when creating a task: e.g. todo spanish homework -r weekly\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        System.out.println(\"Listing all tasks: list\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        System.out.println(\"Editing a task: edit INDEX DESCRIPTION [/at DATE]\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        System.out.println(\"Locating task by name: find KEYWORD [MORE_KEYWORDS]\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        System.out.println(\"Deleting a task: delete INDEX\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        System.out.println(\"CLearing all entries: clear\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nimiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nimiew": 35
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.ui.TaskListPrinter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * duke.command.ListCommand class which executes the command of displaying the duke.tasklist.TaskList to the user"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private String mode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private Optional\u003cString\u003e filter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public ListCommand(Optional\u003cString\u003e filter) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        mode \u003d \"DEFAULT\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.filter \u003d filter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public ListCommand(String modeInformation, Optional\u003cString\u003e filter) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        mode \u003d modeInformation;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.filter \u003d filter;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public String getMode() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return mode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    public void execute(TaskList list, Ui ui, Storage storage) throws DukeException, IOException, ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        TaskList tasks;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        if (filter.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            tasks \u003d list;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            tasks \u003d new TaskList(list, filter);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        switch (mode) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            case \"DEFAULT\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                if (tasks.size() \u003e 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                    TaskListPrinter.print(ui, tasks);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                    ui.showLine(\"There are no tasks in your list.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            case \"priority\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                tasks \u003d tasks.priorityView();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                if (tasks.size() \u003e 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                    TaskListPrinter.print(ui, tasks);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                    ui.showLine(\"There are no tasks in your list.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            case \"day\": {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                tasks \u003d tasks.dayView();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                    ui.showLine(\"Congratulations, you have no tasks for the day! Take a break, have a kit kat\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                    TaskListPrinter.print(ui, tasks);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            case \"week\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                tasks \u003d tasks.weekView();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                    ui.showLine(\"Congratulations, you have no tasks for the week! Take a break, have a kit kat\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                    TaskListPrinter.print(ui, tasks);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            case \"undone\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                tasks \u003d tasks.undoneView();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                    ui.showLine(\"Congratulations, you have no undone tasks! Take a break, have a kit kat\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                    TaskListPrinter.print(ui, tasks);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                throw new DukeException(\"The description of list is invalid\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 8,
      "nicholasnovakovic": 73,
      "nimiew": 3,
      "-": 11
    }
  },
  {
    "path": "src/main/java/duke/command/RandomCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nimiew"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import duke.ui.TaskListPrinter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nimiew"
        },
        "content": "public class RandomCommand extends ListCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    public RandomCommand(Optional\u003cString\u003e filter) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        super(filter);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    public RandomCommand(String modeInformation, Optional\u003cString\u003e filter) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        super(modeInformation, filter);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException, ParseException, DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        Random randomGenerator \u003d new Random();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        int randomIndex \u003d randomGenerator.nextInt(tasks.size());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        ArrayList\u003cTask\u003e randomTaskTemp \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        randomTaskTemp.add(tasks.get(randomIndex));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        TaskList randomTask \u003d new TaskList(randomTaskTemp);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        TaskListPrinter.print(ui, randomTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nimiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nimiew": 40
    }
  },
  {
    "path": "src/main/java/duke/extensions/AbnormalityChecker.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.extensions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class AbnormalityChecker {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public AbnormalityChecker(TaskList taskList) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean checkEventClash(Event event) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i\u003d0; i\u003ctaskList.size(); i++) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            task \u003d taskList.get(i);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            if (task instanceof Event) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                if (((Event) task).getDateTime().equals(event.getDateTime())) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasnovakovic": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/duke/extensions/Pomodoro.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "package duke.extensions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public class Pomodoro {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    enum Cycle {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        LONG_BREAK,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        SHORT_BREAK,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        WORK"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private int LONGBREAK \u003d 15;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private int SHORTBREAK \u003d 5;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private int WORK \u003d 25;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void pomodoroTimer() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        Timer timer \u003d new Timer();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 21
    }
  },
  {
    "path": "src/main/java/duke/extensions/Priority.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "package duke.extensions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * Enum priority that allows labelling of tasks by priority levels"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "public enum Priority {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\tLOW, MEDIUM, HIGH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t * Method to get priority level of a task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t * @return integer value representing the priority level of the task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t * @throws DukeException"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\tpublic int priorityLevel() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\tswitch(this) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\tcase LOW:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\treturn 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\tcase MEDIUM:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\treturn 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\tdefault:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\treturn 2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\tpublic String priorityCode() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\tswitch(this) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\tcase LOW:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\treturn \"L\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\tcase MEDIUM:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\treturn \"M\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\tdefault:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\treturn \"H\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasnovakovic": 37
    }
  },
  {
    "path": "src/main/java/duke/parser/DateTimeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "public class DateTimeParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public static LocalDateTime parseDateTime(String info) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        LocalDateTime result;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        switch (info) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            case \"today\":"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                result \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            case \"tomorrow\":"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                result \u003d LocalDateTime.now().plusDays(1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                String[] details \u003d info.split(\" \", 2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                switch (details[0]) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                    case \"today\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                            result \u003d LocalDateTime.of(LocalDate.now(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                                    LocalTime.parse(details[1], DateTimeFormatter.ofPattern(\"HHmm\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                            throw new DukeException(\"Please enter a time behind today in HHmm format!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                    case \"tomorrow\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                            result \u003d LocalDateTime.of(LocalDate.now().plusDays(1),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                                    LocalTime.parse(details[1], DateTimeFormatter.ofPattern(\"HHmm\")));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                            throw new DukeException(\"Please enter a time behind tomorrow in HHmm format!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        if (details.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                                DateTimeFormatter formatter \u003d new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                                        .appendPattern(\"ddMMyy[HH:mm:ss]\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                                        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                                        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                                        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                                        .toFormatter();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                                result \u003d LocalDateTime.parse(info, formatter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                                throw new DukeException(\"Please enter a date in ddMMyy format!\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                            try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                                result \u003d LocalDateTime.parse(info, DateTimeFormatter.ofPattern(\"ddMMyy HHmm\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                                throw new DukeException(\"Please enter a date in ddMMyy HHmm format!\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 32,
      "nicholasnovakovic": 34
    }
  },
  {
    "path": "src/main/java/duke/parser/OffByOneChecker.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nimiew"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nimiew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nimiew"
        },
        "content": "public class OffByOneChecker {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    public static String offByOne(String keyword) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        ArrayList\u003cString\u003e commandList \u003d new ArrayList\u003c\u003e(Arrays.asList(\"bye\", \"help\", \"list\", \"delete\", \"find\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                                                                      \"done\", \"edit\", \"task\"));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        for (String command : commandList) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            if (keyword.length() !\u003d command.length()) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            int commonCharCount \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            for (int i\u003d0; i\u003ckeyword.length(); i++) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                if (command.charAt(i) \u003d\u003d keyword.charAt(i)) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                    commonCharCount +\u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            if (commonCharCount \u003d\u003d command.length()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                return command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            else if (commonCharCount \u003d\u003d command.length()-1) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                Scanner scanner \u003d new Scanner(System. in);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                System.out.println(String.format(\"Did you mean %s? (Y/N)\", command));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                String input \u003d scanner.nextLine().toUpperCase();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                while (!input.equals(\"Y\") \u0026\u0026 !input.equals(\"N\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                    System.out.println(String.format(\"Did you mean %s? Please enter anything (Y/N)\", command));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                    input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                if (input.equals(\"Y\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                    return command;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                else if (input.equals(\"N\")){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                    return keyword;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        return keyword;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nimiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nimiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nimiew": 42
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.lang.reflect.Array;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nimiew"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * duke.parser.Parser class that deals with making sense of user commands"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a duke.command.Command object which will be specific to the keywords given in the user command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Segregates the different categories of user commands"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Allows them to be dealt with specifically like how the should be with less confusion"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param fullCommand the entire user command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return duke.command.Command the class duke.command.Command will execute the user command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException in case of user input errors which duke.parser.Parser cannot recognise, the parser will return"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *                       specific error messages depending on the reason of the error"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        Optional\u003cString\u003e filter \u003d Optional.empty();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        fullCommand \u003d fullCommand.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        if (fullCommand.charAt(0) \u003d\u003d \u0027-\u0027) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            if (fullCommand.length() \u003d\u003d 1 || !fullCommand.contains(\" \")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                throw new DukeException(\"Sorry I don\u0027t understand what you mean.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            filter \u003d Optional.of(fullCommand.substring(1, fullCommand.indexOf(\u0027 \u0027)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            fullCommand \u003d fullCommand.substring(fullCommand.indexOf(\u0027 \u0027) + 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] fcArray \u003d fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String keyword \u003d fcArray[0];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nimiew"
        },
        "content": "        keyword \u003d OffByOneChecker.offByOne(keyword);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyword) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            case \"help\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                if (fcArray.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                    return new ListCommand(filter);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                return new ListCommand(fcArray[1], filter);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                if (fcArray.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\"☹ OOPS!!! The description of delete cannot be empty.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                return new DeleteCommand(fcArray[1]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                if (fcArray.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\"☹ OOPS!!! The description of find cannot be empty.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                return new FindCommand(fcArray[1], filter);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nimiew"
        },
        "content": "            case \"random\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                if (fcArray.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                    return new RandomCommand(filter);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nimiew"
        },
        "content": "                return new RandomCommand(fcArray[1], filter);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                if (fcArray.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\"☹ OOPS!!! The description of done cannot be empty.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                return new DoneCommand(fcArray[1]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            case \"edit\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                if (fcArray.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    throw new DukeException(\"☹ OOPS!!! The description of edit cannot be empty.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                return new EditCommand(filter, fcArray[1]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            case \"task\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                if (fcArray.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\"☹ OOPS!!! The description of \" + keyword + \" cannot be empty.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                return new AddCommand(fcArray[1], keyword, filter);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 3,
      "nicholasnovakovic": 19,
      "nimiew": 14,
      "-": 50
    }
  },
  {
    "path": "src/main/java/duke/storage/RuntimeTypeAdapterFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "package duke.storage;/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * Copyright (C) 2011 Google Inc."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *      http://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import com.google.gson.JsonElement;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import com.google.gson.JsonParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import com.google.gson.JsonPrimitive;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import com.google.gson.TypeAdapter;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import com.google.gson.TypeAdapterFactory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import com.google.gson.internal.Streams;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import com.google.gson.stream.JsonReader;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import com.google.gson.stream.JsonWriter;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * Adapts values whose runtime type may differ from their declaration type. This"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * is necessary when a field\u0027s type is not the same type that GSON should create"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * when deserializing that field. For example, consider these types:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   abstract class Shape {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *     int x;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *     int y;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   class Circle extends Shape {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *     int radius;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   class Rectangle extends Shape {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *     int width;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *     int height;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   class Diamond extends Shape {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *     int width;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *     int height;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   class Drawing {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *     Shape bottomShape;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *     Shape topShape;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * \u003cp\u003eWithout additional type information, the serialized JSON is ambiguous. Is"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * the bottom shape in this drawing a rectangle or a diamond? \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *     \"bottomShape\": {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       \"width\": 10,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       \"height\": 5,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       \"x\": 0,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       \"y\": 0"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *     },"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *     \"topShape\": {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       \"radius\": 2,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       \"x\": 4,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       \"y\": 1"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *     }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   }}\u003c/pre\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * This class addresses this problem by adding type information to the"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * serialized JSON and honoring that type information when the JSON is"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * deserialized: \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *     \"bottomShape\": {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       \"type\": \"Diamond\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       \"width\": 10,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       \"height\": 5,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       \"x\": 0,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       \"y\": 0"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *     },"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *     \"topShape\": {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       \"type\": \"Circle\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       \"radius\": 2,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       \"x\": 4,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       \"y\": 1"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *     }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   }}\u003c/pre\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * Both the type field name ({@code \"type\"}) and the type labels ({@code"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * \"Rectangle\"}) are configurable."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * \u003ch3\u003eRegistering Types\u003c/h3\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * Create a {@code RuntimeTypeAdapterFactory} by passing the base type and type field"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * name to the {@link #of} factory method. If you don\u0027t supply an explicit type"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * field name, {@code \"type\"} will be used. \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   RuntimeTypeAdapterFactory\u003cShape\u003e shapeAdapterFactory"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       \u003d RuntimeTypeAdapterFactory.of(Shape.class, \"type\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * Next register all of your subtypes. Every subtype must be explicitly"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * registered. This protects your application from injection attacks. If you"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * don\u0027t supply an explicit type label, the type\u0027s simple name will be used."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   shapeAdapterFactory.registerSubtype(Rectangle.class, \"Rectangle\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   shapeAdapterFactory.registerSubtype(Circle.class, \"Circle\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   shapeAdapterFactory.registerSubtype(Diamond.class, \"Diamond\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * Finally, register the type adapter factory in your application\u0027s GSON builder:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   Gson gson \u003d new GsonBuilder()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       .registerTypeAdapterFactory(shapeAdapterFactory)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       .create();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * Like {@code GsonBuilder}, this API supports chaining: \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *   RuntimeTypeAdapterFactory\u003cShape\u003e shapeAdapterFactory \u003d RuntimeTypeAdapterFactory.of(Shape.class)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       .registerSubtype(Rectangle.class)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       .registerSubtype(Circle.class)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " *       .registerSubtype(Diamond.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "public final class RuntimeTypeAdapterFactory\u003cT\u003e implements TypeAdapterFactory {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\tprivate final Class\u003c?\u003e baseType;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\tprivate final String typeFieldName;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\tprivate final Map\u003cString, Class\u003c?\u003e\u003e labelToSubtype \u003d new LinkedHashMap\u003cString, Class\u003c?\u003e\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\tprivate final Map\u003cClass\u003c?\u003e, String\u003e subtypeToLabel \u003d new LinkedHashMap\u003cClass\u003c?\u003e, String\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\tprivate final boolean maintainType;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\tprivate RuntimeTypeAdapterFactory(Class\u003c?\u003e baseType, String typeFieldName, boolean maintainType) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\tif (typeFieldName \u003d\u003d null || baseType \u003d\u003d null) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\tthrow new NullPointerException();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\tthis.baseType \u003d baseType;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\tthis.typeFieldName \u003d typeFieldName;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\tthis.maintainType \u003d maintainType;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t * Creates a new runtime type adapter using for {@code baseType} using {@code"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t * typeFieldName} as the type field name. Type field names are case sensitive."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t * {@code maintainType} flag decide if the type will be stored in pojo or not."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\tpublic static \u003cT\u003e RuntimeTypeAdapterFactory\u003cT\u003e of(Class\u003cT\u003e baseType, String typeFieldName, boolean maintainType) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\treturn new RuntimeTypeAdapterFactory\u003cT\u003e(baseType, typeFieldName, maintainType);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t * Creates a new runtime type adapter using for {@code baseType} using {@code"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t * typeFieldName} as the type field name. Type field names are case sensitive."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\tpublic static \u003cT\u003e RuntimeTypeAdapterFactory\u003cT\u003e of(Class\u003cT\u003e baseType, String typeFieldName) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\treturn new RuntimeTypeAdapterFactory\u003cT\u003e(baseType, typeFieldName, false);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t * Creates a new runtime type adapter for {@code baseType} using {@code \"type\"} as"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t * the type field name."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\tpublic static \u003cT\u003e RuntimeTypeAdapterFactory\u003cT\u003e of(Class\u003cT\u003e baseType) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\treturn new RuntimeTypeAdapterFactory\u003cT\u003e(baseType, \"type\", false);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t * Registers {@code type} identified by {@code label}. Labels are case"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t * sensitive."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t * @throws IllegalArgumentException if either {@code type} or {@code label}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t *     have already been registered on this type adapter."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\tpublic RuntimeTypeAdapterFactory\u003cT\u003e registerSubtype(Class\u003c? extends T\u003e type, String label) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\tif (type \u003d\u003d null || label \u003d\u003d null) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\tthrow new NullPointerException();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\tif (subtypeToLabel.containsKey(type) || labelToSubtype.containsKey(label)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\tthrow new IllegalArgumentException(\"types and labels must be unique\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\tlabelToSubtype.put(label, type);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\tsubtypeToLabel.put(type, label);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\treturn this;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t * Registers {@code type} identified by its {@link Class#getSimpleName simple"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t * name}. Labels are case sensitive."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t * @throws IllegalArgumentException if either {@code type} or its simple name"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t *     have already been registered on this type adapter."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\tpublic RuntimeTypeAdapterFactory\u003cT\u003e registerSubtype(Class\u003c? extends T\u003e type) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\treturn registerSubtype(type, type.getSimpleName());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\tpublic \u003cR\u003e TypeAdapter\u003cR\u003e create(Gson gson, TypeToken\u003cR\u003e type) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\tif (null \u003d\u003d type || !baseType.isAssignableFrom(type.getRawType())) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\treturn null;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\tfinal Map\u003cString, TypeAdapter\u003c?\u003e\u003e labelToDelegate"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t\u003d new LinkedHashMap\u003cString, TypeAdapter\u003c?\u003e\u003e();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\tfinal Map\u003cClass\u003c?\u003e, TypeAdapter\u003c?\u003e\u003e subtypeToDelegate"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t\u003d new LinkedHashMap\u003cClass\u003c?\u003e, TypeAdapter\u003c?\u003e\u003e();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\tfor (Map.Entry\u003cString, Class\u003c?\u003e\u003e entry : labelToSubtype.entrySet()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\tTypeAdapter\u003c?\u003e delegate \u003d gson.getDelegateAdapter(this, TypeToken.get(entry.getValue()));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\tlabelToDelegate.put(entry.getKey(), delegate);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\tsubtypeToDelegate.put(entry.getValue(), delegate);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\treturn new TypeAdapter\u003cR\u003e() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t@Override public R read(JsonReader in) throws IOException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\tJsonElement jsonElement \u003d Streams.parse(in);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\tJsonElement labelJsonElement;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\tif (maintainType) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t\tlabelJsonElement \u003d jsonElement.getAsJsonObject().get(typeFieldName);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t} else {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t\tlabelJsonElement \u003d jsonElement.getAsJsonObject().remove(typeFieldName);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\tif (labelJsonElement \u003d\u003d null) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t\tthrow new JsonParseException(\"cannot deserialize \" + baseType"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t\t\t\t+ \" because it does not define a field named \" + typeFieldName);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\tString label \u003d labelJsonElement.getAsString();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t@SuppressWarnings(\"unchecked\") // registration requires that subtype extends T"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t\t\tTypeAdapter\u003cR\u003e delegate \u003d (TypeAdapter\u003cR\u003e) labelToDelegate.get(label);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\tif (delegate \u003d\u003d null) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t\tthrow new JsonParseException(\"cannot deserialize \" + baseType + \" subtype named \""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t\t\t\t+ label + \"; did you forget to register a subtype?\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\treturn delegate.fromJsonTree(jsonElement);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t@Override public void write(JsonWriter out, R value) throws IOException {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\tClass\u003c?\u003e srcType \u003d value.getClass();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\tString label \u003d subtypeToLabel.get(srcType);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t@SuppressWarnings(\"unchecked\") // registration requires that subtype extends T"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t\t\tTypeAdapter\u003cR\u003e delegate \u003d (TypeAdapter\u003cR\u003e) subtypeToDelegate.get(srcType);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\tif (delegate \u003d\u003d null) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t\tthrow new JsonParseException(\"cannot serialize \" + srcType.getName()"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t\t\t\t+ \"; did you forget to register a subtype?\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\tJsonObject jsonObject \u003d delegate.toJsonTree(value).getAsJsonObject();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\tif (maintainType) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t\tStreams.write(jsonObject, out);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t\treturn;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\tJsonObject clone \u003d new JsonObject();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\tif (jsonObject.has(typeFieldName)) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t\tthrow new JsonParseException(\"cannot serialize \" + srcType.getName()"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t\t\t\t+ \" because it already defines a field named \" + typeFieldName);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\tclone.add(typeFieldName, new JsonPrimitive(label));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\tfor (Map.Entry\u003cString, JsonElement\u003e e : jsonObject.entrySet()) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t\tclone.add(e.getKey(), e.getValue());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\tStreams.write(clone, out);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t}.nullSafe();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasnovakovic": 262
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.gson.stream.JsonReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Class that deals with the saving and loading of all duke.task.Task data the user has saved"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Uses JSON file as the file type which the duke.tasklist.TaskList is saved"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Loads the data stored in the JSON file into an ArrayList of Tasks that"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * can be used to construct a new instance of duke.tasklist.TaskList which has all the saved duke.task.Task data"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\tString filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\t * Constructor of the storage class"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\t * Takes in the file path of where the JSON file with the saved data is stored on the computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\t * @param filePath the location in the directory where the JSON file is"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\tpublic Storage(String filePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\t\tthis.filePath \u003d filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\t * Reads all the data saved in the JSON file specified in the filePath attribute"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\t * Converts the data into an ArrayList of Tasks with all saved duke.task.Task data"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\t * Returns this ArrayList for user to update progress or new tasks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\t * @return ArrayList of duke.task.Task the ArrayList with all the saved duke.task.Task data"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\t * @throws FileNotFoundException in case of the file not beign found, a new instance will be created and all"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\t * previous data will be lost"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\tpublic ArrayList\u003cTask\u003e load() throws FileNotFoundException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\tGson gson \u003d new GsonBuilder()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t.registerTypeAdapterFactory(RuntimeTypeAdapterFactory"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t\t\t.of(Task.class)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t\t\t.registerSubtype(Task.class)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t\t\t.registerSubtype(Event.class))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t.create();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\t\tJsonReader reader \u003d new JsonReader(new FileReader(\"data/duke.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\t\tType type \u003d new TypeToken\u003cArrayList\u003cTask\u003e\u003e() {}.getType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\t\tArrayList\u003cTask\u003e tasks \u003d gson.fromJson(reader, type);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\t\treturn tasks;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\t * Transfers all current duke.task.Task data saved in the duke.tasklist.TaskList into an ArrayList of Tasks"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\t * Writes all data in this ArrayList onto the JSON file specified in the filePath attribute"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\t * @param tasks the duke.tasklist.TaskList with all the saved duke.task.Task data"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\t * @throws IOException in case of IOException then the error in failure of saving should be shown to user"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\tpublic void save(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\t\tFileWriter writer \u003d new FileWriter(\"data/duke.json\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\t\tArrayList\u003cTask\u003e list\u003d tasks.getList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\tGson gson \u003d new GsonBuilder()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t.registerTypeAdapterFactory(RuntimeTypeAdapterFactory"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t\t\t.of(Task.class)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t\t\t.registerSubtype(Task.class)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t\t\t.registerSubtype(Event.class))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\t.create();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\t\tgson.toJson(list, writer);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\t\twriter.close();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasnovakovic": 13,
      "-": 61
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Subclass of duke.task.Task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Describes specific type of task which can be classified as an event"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\t * Constructor for duke.task.Event"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\t * Takes in a String description like superclass duke.task.Task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\t * Takes in another parameter Date to store when the duke.task.Event should be held at"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\t * Allows reminding of user for when the duke.task.Event is going to be"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\t * @param description the description of the event"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\t * @param at the date and time at which the event will be held"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\tpublic Event(String description, Optional\u003cString\u003e filter, String recurrencePeriod, int duration, Optional\u003cLocalDateTime\u003e dateTime) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\tsuper(description, filter, recurrencePeriod, duration, dateTime);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\tthis.key \u003d \"[E]\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 1,
      "nicholasnovakovic": 6,
      "-": 19
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.extensions.Priority;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Superclass for all Tasks that will be added to the duke.task.Task Manager"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    enum RecurrencePeriod {NONE, DAILY, WEEKLY}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    protected String key;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    protected LocalDateTime createdDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    protected RecurrencePeriod recurrencePeriod;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    protected Priority priority;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    protected Optional\u003cString\u003e filter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    protected int duration;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    protected Optional\u003cLocalDateTime\u003e dateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Constructor function for duke.task.Task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Creates a new instance of duke.task.Task by taking in a String description"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Automatically flags the boolean isDone as False"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Default Tasks have no type"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public Task(String description, Optional\u003cString\u003e filter, String recurrencePeriod,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                int duration, Optional\u003cLocalDateTime\u003e dateTime) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.key \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.createdDate \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.priority \u003d Priority.LOW;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        switch (recurrencePeriod) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            case \"none\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                this.recurrencePeriod \u003d RecurrencePeriod.NONE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            case \"daily\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                this.recurrencePeriod \u003d RecurrencePeriod.DAILY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            case \"weekly\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                this.recurrencePeriod \u003d RecurrencePeriod.WEEKLY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.filter \u003d filter;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Returns a String object to show if a duke.task.Task has been marked done or not"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @return tick if done or X symbol if not done"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return (isDone ? \"Y\" : \"N\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Flags the boolean attribute isDone as true in a task"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Prints out the confirmation that the task is marked done"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void markAsUndone() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public String getRecurring() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        switch (recurrencePeriod) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            case DAILY:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                return \"D\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            case WEEKLY:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                return \"W\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                return \"N\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public Optional\u003cString\u003e getFilter() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return this.filter;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This function marks tasks as undone every week/day based on the"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * recurrence period of the task."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public boolean isTimeToReset(LocalDate dateCreated, LocalDate dateNow) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        switch (recurrencePeriod) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            case DAILY:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                if (ChronoUnit.DAYS.between(dateCreated, dateNow) \u003e 0) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            case WEEKLY:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                if (ChronoUnit.DAYS.between(dateCreated, dateNow) \u003e 7) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public LocalDateTime getCreatedDate() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return createdDate;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        System.out.println(this + \" description has been successfully updated\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void setDateTime(Optional\u003cLocalDateTime\u003e dateTime) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        System.out.println(this + \" has a new deadline of \" + dateTime.get().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\")));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void setDuration (int duration) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        System.out.println(this + \" has a new duration of \" + duration + ((duration \u003d\u003d 1) ? \"hour\" : \" hours\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void setPriority(int i) throws DukeException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        switch(i) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            case 0:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                priority \u003d Priority.LOW;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                System.out.println(this + \" has a new priority of LOW\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                priority \u003d Priority.MEDIUM;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                System.out.println(this + \" has a new priority of MEDIUM\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                priority \u003d Priority.HIGH;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                System.out.println(this + \" has a new priority of HIGH\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                throw new DukeException(\"No such priority exists.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public String getDuration() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        if (duration \u003d\u003d 0) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            return \"N\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return Integer.toString(duration);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public int getPriorityLevel() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return priority.priorityLevel();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public String getPriority() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return priority.priorityCode();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Returns a String which describes the task"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @return the description of the task"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return dateTime.map(localDateTime -\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            this.description + \" \" +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            localDateTime.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\")))"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            .orElseGet(() -\u003e this.description);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public boolean hasDateTime() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return dateTime.isPresent();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return dateTime.get();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String recurringDescription \u003d \"\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String recurringIcon \u003d \"\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        if (recurrencePeriod \u003d\u003d RecurrencePeriod.DAILY) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            recurringDescription \u003d \"every day\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            recurringIcon \u003d \"[R]\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        } else if (recurrencePeriod \u003d\u003d RecurrencePeriod.WEEKLY) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            recurringDescription \u003d \"every week\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            recurringIcon \u003d \"[R]\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return recurringIcon + key + \"[\" + this.getStatusIcon() + \"] \" + description + recurringDescription"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                + (dateTime.isPresent()"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                ? \" (\" + dateTime.get().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\")) + \")\""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                : \"\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 78,
      "nicholasnovakovic": 122,
      "-": 7
    }
  },
  {
    "path": "src/main/java/duke/tasklist/MyDayList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public class MyDayList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public MyDayList() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        System.out.println(\"Congratulations! You have added a task to Your Day\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        int taskCount \u003d taskList.size();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        if (taskCount \u003d\u003d 1) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            System.out.println(\"Now you have \" + taskCount + \" task in the list.\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            System.out.println(\"Now you have \" + taskCount + \" tasks in the list.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void refreshMyDayList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            Task t \u003d taskList.get(i);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            if(ChronoUnit.DAYS.between(t.getCreatedDate(), LocalDateTime.now()) \u003e 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                taskList.remove(i);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    //TODO discuss implementation"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 33
    }
  },
  {
    "path": "src/main/java/duke/tasklist/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the data structure containing all tasks added to the task manager"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Uses java.util.ArrayList as the main container"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Constructor for duke.tasklist.TaskList"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * this is to initialise an EMPTY duke.tasklist.TaskList so it takes no inputs"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Constructor for duke.tasklist.TaskList"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * this is to initialise a duke.tasklist.TaskList with an ArrayList of Tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * this facilitates the loading of saved duke.task.Task data"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param tasks an ArrayList of Tasks"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        taskList \u003d tasks;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public TaskList(TaskList list, Optional\u003cString\u003e filter) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            Task t \u003d list.get(i);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            if (t.getFilter().equals(filter)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                taskList.add(t);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * returns the ArrayList of Tasks which duke.tasklist.TaskList maintains"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @return ArrayList the ArrayList of Tasks maintained by the duke.tasklist.TaskList class"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * returns the number of tasks"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @return size the number of tasks in the duke.tasklist.TaskList now"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * returns the duke.task.Task at index i"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param i the index of the duke.task.Task"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @return duke.task.Task the duke.task.Task object at index i"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public Task get(int i) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return taskList.get(i);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * sets a duke.task.Task at index i"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * if there is already a duke.task.Task there then it will be overwritten"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param i    the index of the duke.task.Task"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param task the new duke.task.Task to be set at index i"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void set(int i, Task task) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        taskList.set(i, task);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * adds a duke.task.Task to the back of the duke.tasklist.TaskList"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param task the duke.task.Task to be added"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        System.out.println(\"You have added this task:\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        System.out.println(task.getDescription());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        int taskCount \u003d taskList.size();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        if (taskCount \u003d\u003d 1) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            System.out.println(\"Now you have \" + taskCount + \" task in the list.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            System.out.println(\"Now you have \" + taskCount + \" tasks in the list.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * Searches for any duke.task.Task objects that contain the keyword entered"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * if there are at least one duke.task.Task objects fulfilling the criteria"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * will print out a list of these duke.task.Task objects for the user to see"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * otherwise will notify the user that no duke.task.Task objects have the keyword inside"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param keyword the keyword which the user is searching for Tasks with"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param ui      the user interface class which deals with user interactions"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void find(String keyword, Ui ui) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        ArrayList\u003cTask\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            if (t.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                temp.add(t);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        if (temp.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            ui.showLine(\"There are no matching tasks in your list :-(\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            ui.showLine(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            for (int i \u003d 0; i \u003c temp.size(); i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                ui.showLine((i + 1) + \".\" + temp.get(i));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * removes the duke.task.Task at index i"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     * @param i the index at which the duke.task.Task should be removed"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public void remove(int i) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        taskList.remove(i);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public TaskList priorityView() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        ArrayList\u003cTask\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            temp.add(t);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        temp.sort((a, b) -\u003e a.getPriorityLevel() \u003c b.getPriorityLevel() ? 1 : -1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return new TaskList(temp);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public TaskList dayView() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        LocalDate currDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        ArrayList\u003cTask\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            if (t.hasDateTime()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                LocalDateTime taskDate \u003d t.getDateTime();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                if (ChronoUnit.DAYS.between(currDate, taskDate) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    temp.add(t);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return new TaskList(temp);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public TaskList weekView() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        LocalDate currDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        ArrayList\u003cTask\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            if (t.hasDateTime()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                LocalDateTime taskDate \u003d t.getDateTime();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                if (ChronoUnit.DAYS.between(currDate, taskDate) \u003c 7 \u0026\u0026"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                    ChronoUnit.DAYS.between(currDate, taskDate) \u003e -1) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    temp.add(t);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return new TaskList(temp);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    public TaskList undoneView() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            if (t.getStatusIcon().equals(\"N\")) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "                list.add(t);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "        return new TaskList(list);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 27,
      "nicholasnovakovic": 146,
      "-": 13
    }
  },
  {
    "path": "src/main/java/duke/ui/TaskListPrinter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "public class TaskListPrinter {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\tpublic static void print(Ui ui, TaskList list) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\tint taskCount \u003d list.size();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\tui.showLine(\"ID | P | R | D | Done? | Description\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\tfor (int i \u003d 0; i \u003c taskCount; i++) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\tString curr;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\tif (i \u003c 9) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\tcurr \u003d \"0\" + Integer.toString(i + 1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t} else {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t\tcurr \u003d Integer.toString(i + 1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\tTask t \u003d list.get(i);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\tcurr +\u003d \" | \" + t.getPriority();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\tcurr +\u003d \" | \" + t.getRecurring();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\tcurr +\u003d \" | \" + t.getDuration();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\tcurr +\u003d \" |   \" + t.getStatusIcon();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\tcurr +\u003d \"   | \" + t.getDescription();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t\tui.showLine(curr);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasnovakovic": 26
    }
  },
  {
    "path": "src/test/java/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void testCovertToLocalDate() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": "//        final AddCommand a \u003d new AddCommand(\"homework\", \"19102019 1000\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": "//        assertEquals(LocalDate.of(2019, 10, 19), a.convertToLocalDate(\"19102019 1000\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": "//        final AddCommand b \u003d new AddCommand(\"homework\", \"19012019 1000\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": "//        assertEquals(LocalDate.of(2019, 01, 19), a.convertToLocalDate(\"19012019 1000\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 17
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " * JUnit test class for Duke class"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\tprivate final Duke dukeTest \u003d new Duke(\"data/duketest.json\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t@Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\tpublic void dummyTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t\tassertEquals(2, 2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasnovakovic"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasnovakovic": 14,
      "-": 1
    }
  },
  {
    "path": "src/test/java/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.command.EditCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": "   // @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 8
    }
  },
  {
    "path": "src/test/java/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    final ListCommand c \u003d new ListCommand(\"day\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 9
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     public void testIsTimeToReset() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        final Task taskDaily \u003d new Task(\"homework\", \"daily\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        assertEquals(true, taskDaily.isTimeToReset(LocalDate.now().minusDays(1), LocalDate.now()));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        assertEquals(false, taskDaily.isTimeToReset(LocalDate.now(), LocalDate.now()));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        final Task taskWeekly \u003d new Task(\"homework\", \"weekly\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        assertEquals(false, taskWeekly.isTimeToReset(LocalDate.now().minusDays(1), LocalDate.now()));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        assertEquals(false, taskWeekly.isTimeToReset(LocalDate.now(), LocalDate.now()));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        assertEquals(true, taskWeekly.isTimeToReset(LocalDate.now().minusDays(8), LocalDate.now()));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 24
    }
  }
]
