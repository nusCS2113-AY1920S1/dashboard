[
  {
    "path": "src/main/java/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static Storage storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static Ui ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static TaskList taskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * The Main method by which Duke will be launched."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        initialise();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private static void initialise() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        ui \u003d new Ui(\"savedData.txt\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        ui.initialise();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 6,
      "-": 15
    }
  },
  {
    "path": "src/main/java/executor/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Boolean exitRequest \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    protected String userInput \u003d null;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    protected CommandType commandType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    protected String description \u003d \"NO DESCRIPTION\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns True if the command requests for the Ui to exit."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Boolean"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Boolean getExitRequest() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return exitRequest;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a particular Command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract void execute(TaskList taskList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public abstract void execute(Wallet wallet);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public CommandType getCommandType() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AjeyAshok": 5,
      "Mudaafi": 10,
      "-": 24
    }
  },
  {
    "path": "src/main/java/executor/command/CommandAddIncomeReceipt.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "import ui.IncomeReceipt;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class CommandAddIncomeReceipt extends CommandAddReceipt {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "     * Constructor for CommandAddIncomeReceipt subCommand Class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "     * @param userInput The user input from the CLI"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    public CommandAddIncomeReceipt(String userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        this.commandType \u003d CommandType.IN;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.cash \u003d extractIncome(this.commandType, this.userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.date \u003d extractDate(this.userInput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.tags \u003d extractTags(this.userInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        this.description \u003d \"You can add a new income receipt in format of \u0027In $5.00 /date 2019-01-01 /tags tag\u0027.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    public void execute(TaskList taskList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    public void execute(Wallet wallet) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        IncomeReceipt r \u003d new IncomeReceipt(this.cash, this.date, this.tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        wallet.addReceipt(r);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 6,
      "sallysohyun": 28
    }
  },
  {
    "path": "src/main/java/executor/command/CommandAddReceipt.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public abstract class CommandAddReceipt extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    Double cash;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    LocalDate date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    ArrayList\u003cString\u003e tags;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    Double extractIncome(CommandType commandType, String userInput) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String incomeStr \u003d Parser.parseForPrimaryInput(commandType, userInput);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        incomeStr \u003d removeDollarSign(incomeStr);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return Double.parseDouble(incomeStr);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    LocalDate extractDate(String userInput) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String dateStr \u003d Parser.parseForFlag(\"date\", userInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (dateStr !\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return LocalDate.parse(dateStr);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return LocalDate.now();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    ArrayList\u003cString\u003e extractTags(String userInput) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String tagsStr \u003d Parser.parseForFlag(\"tags\", userInput);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (tagsStr !\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return new ArrayList\u003cString\u003e(Arrays.asList(tagsStr.split(\" \")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    String removeDollarSign(String input) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return input.trim().replace(\"$\", \"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    // -- Setters \u0026 Getters"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setCash(double cash) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.cash \u003d cash;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Double getCash() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.cash;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setTags(ArrayList\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public ArrayList\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.tags;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 67
    }
  },
  {
    "path": "src/main/java/executor/command/CommandAddSpendingReceipt.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "import ui.Receipt;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class CommandAddSpendingReceipt extends CommandAddReceipt {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "     * Constructor for CommandAddSpendingReceipt subCommand Class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "     * @param userInput The user input from the CLI"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    public CommandAddSpendingReceipt(String userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        this.commandType \u003d CommandType.OUT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.cash \u003d extractIncome(this.commandType, this.userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.date \u003d extractDate(this.userInput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.tags \u003d extractTags(this.userInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        this.description \u003d \"You can add a new spendings receipt in format of \u0027Out $5.00 /date 2019-02-01 /tags tag\u0027.\";;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    public void execute(TaskList taskList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    public void execute(Wallet wallet) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Receipt r \u003d new Receipt(this.cash, this.date, this.tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        wallet.addReceipt(r);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 6,
      "sallysohyun": 29
    }
  },
  {
    "path": "src/main/java/executor/command/CommandBlank.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class CommandBlank extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public CommandBlank(String userInput) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Executes a particular Command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(TaskList taskList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Ui.printSeparator();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(Wallet wallet) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 26
    }
  },
  {
    "path": "src/main/java/executor/command/CommandBye.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class CommandBye extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public CommandBye(String userInput) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(TaskList taskList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.exitRequest \u003d true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Ui.dukeSays(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(Wallet wallet) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 24
    }
  },
  {
    "path": "src/main/java/executor/command/CommandDelete.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandDelete extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String userInput;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandDelete(String userInput) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        this.description \u003d \"Deletes the specific entry that the user wants to remove. FORMAT: delete \u003cIndex_of_Entry\u003e\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList taskList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            int index \u003d Integer.valueOf(userInput.replace(\"delete\", \"\").trim()) - 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.dukeSays(\"Task \u0027\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                    + String.valueOf(index + 1)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \") \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    + taskList.getList().get(index).getTaskName()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"\u0027 deleted\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            taskList.deleteTaskByIndex(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.dukeSays(\"Invalid \u0027delete\u0027 statement. Please indicate the index of the task you wish to mark delete.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(Wallet wallet) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AjeyAshok": 1,
      "Mudaafi": 11,
      "-": 24
    }
  },
  {
    "path": "src/main/java/executor/command/CommandDisplayBalance.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class CommandDisplayBalance extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public CommandDisplayBalance(String userInput) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(TaskList taskList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(Wallet wallet) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        DecimalFormat decimalFormat \u003d new DecimalFormat(\"#0.00\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        System.out.println(\"Your Balance: $\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + decimalFormat.format(wallet.getBalance())"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 28
    }
  },
  {
    "path": "src/main/java/executor/command/CommandDisplayExpenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class CommandDisplayExpenditure extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public CommandDisplayExpenditure(String userInput) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(TaskList taskList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(Wallet wallet) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        double totalExpenses \u003d wallet.getTotalExpenses();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        DecimalFormat decimalFormat \u003d new DecimalFormat(\"#0.00\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        System.out.println(\"Total Expenditure: $\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + decimalFormat.format(totalExpenses)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 27
    }
  },
  {
    "path": "src/main/java/executor/command/CommandError.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandError extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public CommandError(String userInpt) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a particular Command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList taskList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.dukeSays(\"Duke has encountered an error\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printSeparator();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(Wallet wallet) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 11,
      "-": 15
    }
  },
  {
    "path": "src/main/java/executor/command/CommandFind.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandFind extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String userInput;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for CommandFind subCommand Class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput The User Input to be translated into a Command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandFind(String userInput) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(Wallet wallet) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList taskList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            String queryInput \u003d Parser.removeStr(\"find\", this.userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            queryInput \u003d queryInput.toLowerCase();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.dukeSays(\"Here are the Tasks matching your query \u0027\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    + queryInput"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"\u0027.\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            findTasks(queryInput, taskList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.dukeSays(\"No such task found.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printSeparator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds and prints each task that contains the string."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name     The substring to be found"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList The TaskList containing the Tasks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void findTasks(String name, TaskList taskList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int index \u003d 0; index \u003c taskList.getSize(); ++index) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                if (taskList.getList().get(index).getTaskName().toLowerCase().contains(name)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    taskList.printTaskByIndex(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"Read invalid taskName\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 11,
      "-": 46
    }
  },
  {
    "path": "src/main/java/executor/command/CommandHelp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "public class CommandHelp extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     * Constructor to provide the user with the details about the commands available."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public CommandHelp(String userInput) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        this.description \u003d \"Provides the user with all the available commands and descriptions.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.commandType \u003d CommandType.HELP;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    public void execute(TaskList taskList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        for (String s : CommandType.getNames()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            CommandType commandType \u003d CommandType.valueOf(s);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            Command c \u003d Executor.createCommand(commandType, \"null\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            String commandDesc \u003d c.getDescription();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            System.out.println(s.toUpperCase() + \" - \" + commandDesc);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    public void execute(Wallet wallet) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AjeyAshok": 28,
      "Mudaafi": 3
    }
  },
  {
    "path": "src/main/java/executor/command/CommandList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class CommandList extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public CommandList(String userInput) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(TaskList taskList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Ui.dukeSays(\"You have (\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + String.valueOf(taskList.getSize())"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + \") Tasks in your list!\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        taskList.printTasks();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Ui.printSeparator();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(Wallet wallet) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        Ui.dukeSays(\"You have (\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                + wallet.getReceipts().size()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                + \") receipts!\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        );"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        wallet.getReceipts().printReceipts();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 27,
      "Araavinds": 5
    }
  },
  {
    "path": "src/main/java/executor/command/CommandMarkDone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandMarkDone extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandMarkDone(String userInput) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(Wallet wallet) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList taskList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            int index \u003d Integer.parseInt(Parser.removeStr(\"done\", this.userInput)) - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            Task mainTask \u003d taskList.getList().get(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            mainTask.markDone();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            loadQueuedTasks(taskList, mainTask);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.dukeSays(genMarkDoneReply(index, taskList));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.dukeSays(\"Invalid \u0027done\u0027 statement. Please indicate the index of the task you wish to mark done.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates the standard duke reply to inform user that the Task is marked done."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index The index of the Task in the TaskList"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList The TaskList containing all tasks"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Standard duke reply for user"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private String genMarkDoneReply(int index, TaskList taskList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"Alrighty, I\u0027ve marked task \u0027\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                + String.valueOf(index + 1)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                + \") \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + taskList.getList().get(index).getTaskName()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"\u0027 as done!\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads all queued Tasks from the now-done Task to the main TaskList."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList The Main TaskList for Tasks to be added to"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param mainTask The Task that has been marked done"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadQueuedTasks(TaskList taskList, Task mainTask) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList queuedTasks \u003d mainTask.getQueuedTasks();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (queuedTasks \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task newTask : queuedTasks.getList()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            taskList.addTask(newTask);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        mainTask.setQueuedTasks(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 12,
      "-": 54
    }
  },
  {
    "path": "src/main/java/executor/command/CommandNewTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandNewTask extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String userInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    protected TaskType taskType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for the CommandNewTask subCommand Class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput The user input from the CLI."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandNewTask(String userInput) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandType \u003d CommandType.TASK;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.taskType \u003d TaskType.valueOf(Parser.parseForCommandType(userInput).toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(Wallet wallet) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList taskList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            checkForwardSlash(this.userInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Task newTask \u003d TaskList.createTask(this.taskType, this.userInput);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.addTask(newTask);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.dukeSays(\"I\u0027ve added \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                + newTask.genTaskDesc()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" to your private list(\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                + String.valueOf(taskList.getSize())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                + \").\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws an exception when there is no \u0027/\u0027 in the user input."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input this is the user\u0027s input"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException this shows the error message and gives the format to follow"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void checkForwardSlash(String input) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.taskType.equals(TaskType.FDURATION)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            if (!Parser.containsForwardSlash(input)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"Check your format!!! Correct format is: fduration \u003cdescription\u003e / \u003ctime\u003e\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 16,
      "-": 44
    }
  },
  {
    "path": "src/main/java/executor/command/CommandQueue.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandQueue extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String userInput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for CommandQueue subCommand Class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput The user input from the CLI"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandQueue(String userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandType \u003d CommandType.QUEUE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(Wallet wallet) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList taskList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList throwaway \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] parsedInput \u003d Parser.removeStr(this.commandType.toString(), this.userInput)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                .split(\" \", 2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        int mainTaskIndex \u003d Integer.parseInt(parsedInput[0]) - 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Task mainTask \u003d taskList.getList().get(mainTaskIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String taskString \u003d parsedInput[1].trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        CommandType commandType \u003d Parser.parseForCommandType(taskString);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Command createNewTaskCommand \u003d Executor.createCommand(commandType, taskString);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (createNewTaskCommand.commandType !\u003d CommandType.TASK) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.dukeSays(\"No Task detected after \u0027Queue\u0027.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        initializeQueue(mainTask);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        createNewTaskCommand.execute(mainTask.getQueuedTasks());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the Queue if it hasn\u0027t been initialized."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task The task to initialize the Queue in."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initializeQueue(Task task) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (task.isQueuedTasks()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        task.setQueuedTasks(new TaskList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 12,
      "-": 41
    }
  },
  {
    "path": "src/main/java/executor/command/CommandReminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandReminder extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    //private String[] reminders;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Date currentDate \u003d Calendar.getInstance().getTime();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public CommandReminder(String userInput) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.currentDate.setTime(0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(Wallet wallet) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList taskList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Task task : taskList.getList()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                Date dateCopy \u003d task.getDatetime();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                if (dateCopy !\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    dateCopy.setTime(0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (dateCopy.equals(this.currentDate)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        Ui.dukeSays(task.genTaskDesc());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                        Ui.printSeparator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"sorry\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 13,
      "-": 29
    }
  },
  {
    "path": "src/main/java/executor/command/CommandSchedule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandSchedule extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String userInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    //constructor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandSchedule(String userInput) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandType \u003d CommandType.VIEWSCHEDULE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(Wallet wallet) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList taskList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String dateInput \u003d Parser.removeStr(this.commandType.toString(), this.userInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.dukeSays(\"Here is your schedule for the following date \u0027\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                + dateInput"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"\u0027.\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            printSchedule(dateInput, taskList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Read invalid input\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private void printSchedule(String dateInput, TaskList taskList) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        //insert code to convert string to date type"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Date userDate \u003d format.parse(dateInput);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userDate.setTime(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int index \u003d 0; index \u003c taskList.getSize(); ++index) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                Date taskDate \u003d taskList.getList().get(index).getDatetime();//creates of copy of datetime in the task"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                if (taskDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                taskDate.setTime(0);//this sets the time to zero"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                if (taskDate.equals(userDate)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                    taskList.printTaskByIndex(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"invalid\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 9,
      "-": 54
    }
  },
  {
    "path": "src/main/java/executor/command/CommandType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    TASK(CommandNewTask.class),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    BYE(CommandBye.class),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    LIST(CommandList.class),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    BLANK(CommandBlank.class),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    FIND(CommandFind.class),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    DELETE(CommandDelete.class),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    DONE(CommandMarkDone.class),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    QUEUE(CommandQueue.class),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    VIEWSCHEDULE(CommandSchedule.class),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    REMINDER(CommandReminder.class),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    BALANCE(CommandDisplayBalance.class),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    IN(CommandAddIncomeReceipt.class),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    OUT(CommandAddSpendingReceipt.class),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    SETBALANCE(CommandUpdateBalance.class),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    EXPENSES(CommandDisplayExpenditure.class),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    HELP(CommandHelp.class),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    DEADLINE(CommandNewTask.class),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    EVENT(CommandNewTask.class),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    TODO(CommandNewTask.class),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    RECUR(CommandNewTask.class),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    FDURATION(CommandNewTask.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private final Class commandClass;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Constructor for \u0027CommandType\u0027 enum."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private CommandType(Class commandClass) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.commandClass \u003d commandClass;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Class getCommandClass() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.commandClass;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Method to get all the types of this enum."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return A String Array that contains all the types of this enum"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public static String[] getNames() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        CommandType[] holder \u003d CommandType.values();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String[] returnArray \u003d new String[holder.length];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        for (int index \u003d 0; index \u003c holder.length; ++index) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            returnArray[index] \u003d String.valueOf(holder[index]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return returnArray;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 51,
      "sallysohyun": 1
    }
  },
  {
    "path": "src/main/java/executor/command/CommandUpdateBalance.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "public class CommandUpdateBalance extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private Double newBalance;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * Constructor for the CommandUpdateBalance class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param userInput The user Input from the CLI"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    public CommandUpdateBalance(String userInput) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.commandType \u003d Parser.parseForCommandType(this.userInput);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.newBalance \u003d Double.parseDouble(Parser.parseForPrimaryInput(this.commandType, this.userInput));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    public void execute(TaskList taskList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    public void execute(Wallet wallet) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        wallet.setBalance(this.newBalance);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 4,
      "priyan-coder": 27
    }
  },
  {
    "path": "src/main/java/executor/command/Executor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class Executor {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Constructor for \u0027Executor\u0027 Class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Executor() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Parses the user input and executes the Command specified."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param userInput User input from the CLI"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return True if the Command executed calls for an ExitRequest, false otherwise"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public static boolean runCommand(TaskList taskList, Wallet wallet, CommandType commandType, String userInput) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Command c \u003d createCommand(commandType, userInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        c.execute(taskList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        c.execute(wallet);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return c.getExitRequest();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Creates a specific Command sub-Object given the CommandType."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param commandType The type of command to be created"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param userInput The input to be initialized with the command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return The generated Command"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public static Command createCommand(CommandType commandType, String userInput) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Command c;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            c \u003d (Command) commandType.getCommandClass().getDeclaredConstructor(String.class).newInstance("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    userInput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            c \u003d new CommandError(userInput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return c;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 44
    }
  },
  {
    "path": "src/main/java/executor/task/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    // Initialization"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    Deadline(String name) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskType \u003d TaskType.DEADLINE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.recordTaskDetails(name);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            this.parseDateTime();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            // New stuff"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            // getDate time is his inbuilt method"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch  (DukeException invalidInput) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            invalidInput.printStackTrace();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private void parseDateTime() throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat formatx \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.detailDesc \u003d\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.detailDesc.equals(\"by\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                this.setDatetime(formatx.parse(this.taskDetails));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"Date Interpreted: \" + formatx.format(this.getDatetime()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                this.setDatetime(new Date());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"Invalid Input. Unable to interpret Datetime (use: dd/mm/yyyy HHmm)\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // -- Setters \u0026 Getters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Getter for datetime."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Datetime stored in this Deadline Object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 1,
      "-": 45
    }
  },
  {
    "path": "src/main/java/executor/task/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    // Initialization"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    Event(String name) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskType \u003d TaskType.EVENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        this.recordTaskDetails(name);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 1,
      "-": 9
    }
  },
  {
    "path": "src/main/java/executor/task/FixedDuration.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class FixedDuration extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for the \u0027Task\u0027 Class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name Name of the task as inputted by the user"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public FixedDuration(String name) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskType \u003d TaskType.FDURATION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.recordTaskDetails(name);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.detailDesc \u003d \"needs\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/executor/task/Recurring.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "package executor.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "public class Recurring extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    private final TaskType taskType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    // Initialization"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    Recurring(String name) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.taskType \u003d TaskType.RECUR;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        this.detailDesc \u003d \"for\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        this.recordTaskDetails(name);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 1,
      "sallysohyun": 17
    }
  },
  {
    "path": "src/main/java/executor/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    protected String taskName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    protected String taskDetails;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    protected String detailDesc;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    protected TaskType taskType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    protected Boolean isDone \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList queuedTasks \u003d null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Date datetime \u003d null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for the \u0027Task\u0027 Class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name Name of the task as inputted by the user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String name) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.taskType \u003d TaskType.BLANK;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskName \u003d name.replace(this.taskType.name(), \"\").trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.datetime \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Get a \u0027tick\u0027 or \u0027cross\u0027 depending on .isDone"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A special string that represents a tick for true or a cross for false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"\\u2713\"; // / u2713"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"\\u2718\"; // / u2718"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets a Task object\u0027s .isDone property to true."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets a Task object\u0027s .isDone property to false."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markNotDone() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a String Describing the Task Object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Optimized for user\u0027s reading."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String detailing the Task Object, including type, isDone, taskName and taskDetails"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String genTaskDesc() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String generatedStr \u003d \"\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!this.taskName.isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            generatedStr +\u003d \"[\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                    + this.getStatusIcon()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"]\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"[\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                    + this.genTypeAcronym()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"] \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                    + this.taskName;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.detailDesc !\u003d null || this.taskDetails !\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            generatedStr +\u003d \" (\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            if (this.detailDesc !\u003d null \u0026\u0026 !this.detailDesc.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                generatedStr +\u003d this.detailDesc + \": \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            if (this.taskDetails !\u003d null \u0026\u0026 !this.taskDetails.isEmpty()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                generatedStr +\u003d this.taskDetails;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            generatedStr +\u003d \")\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return generatedStr;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public String genTypeAcronym() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.taskType.name().substring(0, 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Records the details from the user input into this Task object."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput The input taken from the user in CLI"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void recordTaskDetails(String userInput) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d Parser.removeStr(this.taskType.name(), userInput);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskName \u003d userInput;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        int indexBackslash \u003d userInput.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        //Check if \u0027/\u0027 exists"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (indexBackslash \u003e\u003d 0) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            int indexMsg \u003d userInput.indexOf(\u0027 \u0027, indexBackslash);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            if (indexMsg \u003e\u003d 0) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                this.detailDesc \u003d userInput.substring(indexBackslash + 1, indexMsg);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            String[] splitDetails \u003d userInput.split(\u0027/\u0027 + this.detailDesc, 2);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            this.taskName \u003d splitDetails[0].trim();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            if (splitDetails.length \u003e 1) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                this.taskDetails \u003d splitDetails[1].trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    // -- Boolean Checkers"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if the current task has any queued tasks."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return false if queuedTask property is null, true otherwise"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isQueuedTasks() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.queuedTasks \u003d\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    // -- Setters \u0026 Getters"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Getter for taskName Property."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return String containing the taskName of the Task"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.taskName;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Setter for taskName Property."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param taskName taskName to be set"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setTaskName(String taskName) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Getter for detailDesc Property."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return String containing the detailDesc of the Task"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public String getDetailDesc() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return detailDesc;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Setter for the detailDesc Property."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param detailDesc detailDesc to be set"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setDetailDesc(String detailDesc) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.detailDesc \u003d detailDesc;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Getter for the taskDetails Property."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return String containing the taskDetails of the Task"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public String getTaskDetails() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return taskDetails;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Setter for the taskDetails Property."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param taskDetails taskDetails to be set"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setTaskDetails(String taskDetails) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.taskDetails \u003d taskDetails;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Getter for the taskType Property."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return TaskType of the taskType Property."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public TaskType getTaskType() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Setter for the taskType Property."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param taskType TaskType Enum to be set"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setTaskType(TaskType taskType) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Getter for the isDone Property."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return Boolean representing the isDone Property"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Boolean getIsDone() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Getter for queuedTask Property."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArrayList containing Task Objects"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList getQueuedTasks() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        return queuedTasks;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * Setter for queued Task Property."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param queuedTasks ArrayList to be set"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setQueuedTasks(TaskList queuedTasks) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        this.queuedTasks \u003d queuedTasks;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Setter for datetime property."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param datetime The Date to set"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDatetime(Date datetime) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        this.datetime \u003d datetime;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * Getter for datetime property."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Date represented by the datetime property"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getDatetime() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.datetime;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 84,
      "-": 151
    }
  },
  {
    "path": "src/main/java/executor/task/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    protected List\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for \u0027TaskList\u0027 Class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes a task via its index."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index Index of the task to be deleted"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteTaskByIndex(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskList.remove(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new task to the List."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param newTask The Task Object to be added"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addTask(Task newTask) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskList.add(newTask);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds and prints each task that contains the string."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name The substring to be found."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void findTasks(String name) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int index \u003d 0; index \u003c this.taskList.size(); ++index) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                if (this.taskList.get(index).taskName.contains(name)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    printTaskByIndex(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"Read invalid taskName\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints tasks from Duke.taskList based on the index provided."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param indexes Varargs The indexes of tasks from taskList to be printed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void printTaskByIndex(int... indexes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int index : indexes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(String.valueOf(index + 1) + \". \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                    + this.taskList.get(index).genTaskDesc());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a \u0027Task\u0027 subclass based on TaskType."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: Think about how this can be neater."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskDesc The task description from the user input"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskType TaskType enum that specifies the subclass to create"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Task createTask(TaskType taskType, String taskDesc) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            newTask \u003d new Deadline(taskDesc);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            newTask \u003d new Event(taskDesc);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            newTask \u003d new ToDo(taskDesc);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case FDURATION:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            newTask \u003d new FixedDuration(taskDesc);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        case RECUR:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "            newTask \u003d new Recurring(taskDesc);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            newTask \u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Task Object from a saved (Storage) String."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput The saved string"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Created Task Object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Task createTaskFromString(String userInput) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] parsedInput \u003d Parser.parseStoredTaskDetails(userInput);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskType taskType \u003d TaskType.valueOf(parsedInput[0]);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Task newTask \u003d TaskList.createTask(taskType, parsedInput[1]);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Boolean.valueOf(parsedInput[2])) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            newTask.markDone();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    // ---- Get Methods"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a List(ArrayList) of Task Objects."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return List(ArrayList) of Task Objects"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Size of the list as an int"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints each task in the taskList."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void printTasks() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int index \u003d 0; index \u003c this.taskList.size(); ++index) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println((index + 1)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                                 + \". \""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                                 + this.taskList.get(index).genTaskDesc()"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                );"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"Unable to print Task \""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                         + String.valueOf(index + 1));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 6,
      "sallysohyun": 2,
      "-": 138,
      "Araavinds": 1
    }
  },
  {
    "path": "src/main/java/executor/task/TaskType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    BLANK, DEADLINE, TODO, EVENT, FDURATION, RECUR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for \u0027TaskType\u0027 enum."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskType() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to get all the types of this enum."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A String Array that contains all the types of this enum"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String[] getNames() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskType[] holder \u003d TaskType.values();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] returnArray \u003d new String[holder.length];"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int index \u003d 0; index \u003c holder.length; ++index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            returnArray[index] \u003d String.valueOf(holder[index]);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return returnArray;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 2,
      "-": 23
    }
  },
  {
    "path": "src/main/java/executor/task/ToDo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date dateFrom;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date dateTo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for Class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name The user input from CLI"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public ToDo(String name) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskType \u003d TaskType.TODO;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.recordTaskDetails(name);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            this.parseForTaskPeriod();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch  (DukeException invalidInput) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            invalidInput.printStackTrace();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private void parseForTaskPeriod() throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd/mm/yyyy\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.detailDesc \u003d\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.detailDesc.equals(\"between\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                String[] dates \u003d taskDetails.trim().split(\" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                this.dateFrom \u003d dateFormat.parse(dates[0]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                this.dateTo \u003d dateFormat.parse(dates[1]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"Date Interpreted as: From \" + dateFormat.format(this.dateFrom)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \" to \" + dateFormat.format(this.dateTo));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                //System.out.println(\"Invalid Input. Unable to interpret Datetime (use: dd/mm/yyyy HHmm)\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                this.dateFrom \u003d new Date();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                this.dateTo \u003d new Date();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"Invalid Input. Unable to interpret Datetime (use: dd/mm/yyyy)\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // -- Setters \u0026 Getters"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the dateFrom variable."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dateFrom date to do the task from"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDateFrom(Date dateFrom) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dateFrom \u003d dateFrom;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the dateFrom variable."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dateTo date to do the task from"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDateTo(Date dateTo) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dateTo \u003d dateTo;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getDateFrom() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return dateFrom;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getDateTo() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return dateTo;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/interpreter/Interpreter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package interpreter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.CommandType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.Executor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class Interpreter {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Interprets the userInput relative to the TaskList provided and executes the Command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param taskList The caller\u0027s TaskList"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param userInput The userInput taken from the User Interface"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return True if the Command executed calls for an ExitRequest, false otherwise"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public static boolean interpret(TaskList taskList, Wallet wallet, String userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        CommandType commandType \u003d Parser.parseForCommandType(userInput);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        boolean exitRequest \u003d Executor.runCommand(taskList, wallet, commandType, userInput);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return exitRequest;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 21
    }
  },
  {
    "path": "src/main/java/interpreter/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package interpreter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.CommandType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": " * Parser will parse through user inputs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": " * User inputs will follow the following Structure:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": " * \"CommandType PrimaryInput /flag1 flag1Details /flag2 flag2Details ...\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": " * Parser will NOT return a changed user input."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PARSE_MARKER_IS_DONE \u003d \"####\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PARSE_MARKER_TASK \u003d \"--\u003e\u003e\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for \u0027Parser\u0027 Class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Parses the input to classify the Command requested."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param userInput The input that the user types from the CLI"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return CommandType enum that identifies the Command requested"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public static CommandType parseForCommandType(String userInput) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        // User enters an empty command (like a blank)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (userInput.trim() \u003d\u003d \"\") {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return CommandType.BLANK;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String commandStr \u003d parseForEnum(userInput, CommandType.getNames());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        // Type of command not as specified inside the enum types"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (commandStr \u003d\u003d \"\") {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return CommandType.valueOf(commandStr);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Parses the input to extract the primary input of the user-command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param commandType CommandType of the user-command being parsed"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param userInput String representing the user-command"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return String representing the PrimaryInput of the user-command"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public static String parseForPrimaryInput(CommandType commandType, String userInput) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String primaryInput \u003d Parser.removeStr(commandType.toString(), userInput);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (primaryInput.contains(\"/\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            primaryInput \u003d primaryInput.substring(0, primaryInput.indexOf(\"/\")).trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return primaryInput;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Parses the input to extract a particular flag from the user-command."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param flag String denoting the flag to be found"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param userInput String representing the user-command"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return String representing the flagDetails if flag is found, null otherwise"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public static String parseForFlag(String flag, String userInput) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        flag \u003d \"/\" + flag;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (!userInput.contains(flag)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        int indexFlag \u003d userInput.indexOf(flag) + flag.length();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        int indexEndFlag \u003d userInput.indexOf(\"/\", indexFlag);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (indexEndFlag \u003d\u003d -1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            indexEndFlag \u003d userInput.length();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return userInput.substring(indexFlag, indexEndFlag).trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Abstract Function that searches for a specific Enum type given an Enum."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput The String to search"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param enumTypes String Array containing the Enum Types"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String value of the Enum Type"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String parseForEnum(String userInput, String[] enumTypes) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        int minIndex \u003d 999;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        int testIndex;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String enumType \u003d \"\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String typeIter : enumTypes) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            testIndex \u003d userInput.toUpperCase().indexOf(typeIter);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (minIndex \u003e testIndex \u0026\u0026 testIndex \u003e\u003d 0) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                enumType \u003d typeIter;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                minIndex \u003d testIndex;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return enumType;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the Command Literal from the user input string.*"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandStr Command Literal to remove"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput  User Input to be parsed"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String with command literal removed"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String removeStr(String commandStr, String userInput) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        //(?i) is regex which tells Java to be case-Insensitive"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInput.replaceFirst(\"(?i)\" + commandStr, \"\").trim();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Work in progress."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public String[] parseTask(TaskType taskType, String userInput) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    // TODO: Currently in \u0027Task\u0027 RecordTaskDetails"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    // -- Storage-Parsing"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String[] parseStoredTask(String encodedTask) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return encodedTask.split(PARSE_MARKER_TASK);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses through the Stored task to return the Task type, Task Description and Task isDone as a String Array."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * ONLY FOR FORMATTED INPUT"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskString User Input to be parsed"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String Array containing task type, task description and task isDone"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String[] parseStoredTaskDetails(String taskString) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] returnArray \u003d new String[3];"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] holder \u003d taskString.split(PARSE_MARKER_IS_DONE, 2);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        returnArray[0] \u003d String.valueOf(parseForCommandType(holder[0]));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        returnArray[1] \u003d holder[0].replace(returnArray[0], \"\").trim();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        returnArray[2] \u003d holder[1].replace(PARSE_MARKER_IS_DONE.substring(1), \"\").trim();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return returnArray;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encodes the Task for Storage."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * FORMAT: (taskType) (taskName)/(detailDesc) (taskDetails)(PARSE_MARKER_TASK)(isDone)(PARSE_MARKER_TASK)(...)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task Task Object"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String to be stored/saved"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public static String encodeTask(Task task) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder strSave \u003d new StringBuilder();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        strSave.append(encodeMainTask(task));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        strSave.append(encodeQueuedTasks(task));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        strSave.append(\"\\n\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return strSave.toString();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String encodeMainTask(Task task) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        String strSave \u003d \"\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        strSave +\u003d task.getTaskType().name()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + task.getTaskName();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (task.getDetailDesc() !\u003d null \u0026\u0026 task.getTaskDetails() !\u003d null) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            strSave +\u003d \u0027/\u0027;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (task.getDetailDesc() !\u003d null) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            strSave +\u003d task.getDetailDesc();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        strSave +\u003d \" \";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (task.getTaskDetails() !\u003d null) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            strSave +\u003d task.getTaskDetails();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        strSave +\u003d PARSE_MARKER_IS_DONE + task.getIsDone().toString();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return strSave;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String encodeQueuedTasks(Task task) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!task.isQueuedTasks()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder queuedTaskString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task queuedTask : task.getQueuedTasks().getList()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            queuedTaskString.append(PARSE_MARKER_TASK);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            queuedTaskString.append(encodeTask(queuedTask));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return queuedTaskString.toString();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Boolean to check if the user input has a slash."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput this is the user input"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if there is a slash in the user input"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public static Boolean containsForwardSlash(String userInput) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        if (userInput.contains(\"/\")) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 67,
      "-": 123
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String filePath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * * Constrctor for the \u0027Storage\u0027 Class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath The file path to be used to store and load data"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to save the current list of tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList TaskList class"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveData(TaskList taskList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            FileWriter writer \u003d new FileWriter(this.filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Task task : taskList.getList()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                String strSave \u003d Parser.encodeTask(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                writer.write(strSave);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to load previously saved list of tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return TaskList class"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList loadData() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            File file \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Task newTask;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                    String loadedInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                    newTask \u003d loadTaskFromStorageString(loadedInput);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                    taskList.addTask(newTask);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                    System.out.println(e);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"No Previously saved Data.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts saved String in Storage to actual Task Object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param loadedInput The saved String to be converted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Task Object from String"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Task loadTaskFromStorageString(String loadedInput) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList queuedTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Task newTask \u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Task queuedTask \u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] taskStrings \u003d Parser.parseStoredTask(loadedInput);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String taskString : taskStrings) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newTask \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                newTask \u003d TaskList.createTaskFromString(taskString);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                queuedTask \u003d TaskList.createTaskFromString(taskString);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                queuedTasks.getList().add(queuedTask);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (queuedTask !\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            newTask.setQueuedTasks(queuedTasks);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 4,
      "-": 86
    }
  },
  {
    "path": "src/main/java/ui/IncomeReceipt.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class IncomeReceipt extends Receipt {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    // Constructors"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public IncomeReceipt(Double cashGained, LocalDate date, ArrayList\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super(-cashGained, date, tags);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public IncomeReceipt(Double cashGained, LocalDate date) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super(-cashGained, date);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public IncomeReceipt(Double cashGained) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super(-cashGained);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    // -- Setters \u0026 Getters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Sets the cashGained by setting the negative as the cashSpent property of this Receipt Object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param cashGained Double to be set"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setCashGained(Double cashGained) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setCashSpent(-cashGained);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Get the cashGained by negating the cashSpent property of this Receipt Object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return Double representing the cashGained."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Double getCashGained() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return -this.getCashSpent();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 37,
      "sallysohyun": 1
    }
  },
  {
    "path": "src/main/java/ui/Receipt.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class Receipt {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private Double cashSpent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private ArrayList\u003cString\u003e tags;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Complete Constructor for Receipt Object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param cashSpent Double to be set as cashSpent property of Receipt Object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param date Data Object to be set as the date property of Receipt Object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param tags ArrayList to be set as the tags property of Receipt Object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Receipt(Double cashSpent, LocalDate date, ArrayList\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setCashSpent(cashSpent);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setDate(date);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setTags(tags);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Partial Constructor for Receipt Object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param cashSpent Double to be set as cashSpent property of Receipt Object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param date Data Object to be set as the date property of Receipt Object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Receipt(Double cashSpent, LocalDate date) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setCashSpent(cashSpent);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setDate(date);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setTags(new ArrayList\u003cString\u003e());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Partial Constructor for Receipt Object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param cashSpent Double to be set as cashSpent property of Receipt Object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Receipt(Double cashSpent) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setCashSpent(cashSpent);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setDate(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setTags(new ArrayList\u003cString\u003e());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Adds a tag to the tags property of Receipt Object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param tag String to be stored as a tag"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void addTag(String tag) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.tags.add(tag);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    // -- Boolean Functions"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Checks if the tags property is empty."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return true if tags property is empty, false otherwise."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public boolean areTagsEmpty() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.getTags().isEmpty();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Checks if a tag is in the tags property of Receipt Object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param tag String to be checked"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return true if tag exists in the Receipt Object, false otherwise."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public boolean containsTag(String tag) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.getTags().contains(tag);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    // -- Setters \u0026 Getters"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Setter for cashSpent property of Receipt Object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param cashSpent Double to be set as cashSpent property of Receipt Object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setCashSpent(Double cashSpent) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.cashSpent \u003d cashSpent;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Getter for cashSpent property of Receipt Object."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return Double corresponding to cashSpent property of Receipt Object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Double getCashSpent() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return cashSpent;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Setter for tags property."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param tags ArrayList to be set as the tags property of Receipt Object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setTags(ArrayList\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Getter for the tags property of Receipt Object."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return ArrayList of the tags property of Receipt Object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public ArrayList\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Setter for date property."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param date Data Object to be set as the date property of Receipt Object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Getter for date property."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return Date Object of the date property of Receipt Object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 120
    }
  },
  {
    "path": "src/main/java/ui/ReceiptTracker.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class ReceiptTracker extends ArrayList\u003cReceipt\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private HashMap\u003cString, ReceiptTracker\u003e folders;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private Double totalCashSpent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Overloaded Constructor for ReceiptTracker."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param receiptList List of receipts to be loaded into the ReceiptTracker."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public ReceiptTracker(ArrayList\u003cReceipt\u003e receiptList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.addAll(receiptList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.updateTotalCashSpent();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setFolders(new HashMap\u003c\u003e());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Default Constructor for ReceiptTracker."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public ReceiptTracker() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setFolders(new HashMap\u003c\u003e());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.updateTotalCashSpent();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setFolders(new HashMap\u003c\u003e());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Wrapper to add a new Receipt Object to the Receipt Tracker."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param receipt Receipt Object to be added."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void addReceipt(Receipt receipt) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.add(receipt);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        for (String tag : receipt.getTags()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            if (isRegisteredTag(tag)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                Double currTotalCashSpent \u003d folders.get(tag).getTotalCashSpent();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                folders.get(tag).addReceipt(receipt);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                folders.get(tag).setTotalCashSpent(currTotalCashSpent + receipt.getCashSpent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.updateTotalCashSpent();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Updates totalCashSpent property of this ReceiptTracker Object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void updateTotalCashSpent() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setTotalCashSpent(this.sumReceipts());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Sums the cashSpent of all the Receipts, subtracting any cashGained from IncomeReceipts."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return Double representing the totalCashSpent"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Double sumReceipts() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Double sum \u003d 0.0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        for (Receipt receipt : this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            sum +\u003d receipt.getCashSpent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return sum;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Registers a tag to be tracked."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param tag String to be registered into the folders property of ReceiptTracker Object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void addFolder(String tag) throws DukeException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (this.getFolders().containsKey(tag)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(\"Category already exists!\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        ArrayList\u003cReceipt\u003e taggedReceipts \u003d findReceiptsByTag(tag);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.getFolders().put(tag, new ReceiptTracker(taggedReceipts));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Find all receipts that are tagged with a specific String."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param tag Specific String to be filtered with."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return ArrayList containing all the Receipts with the specific tag"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public ArrayList\u003cReceipt\u003e findReceiptsByTag(String tag) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        ArrayList\u003cReceipt\u003e taggedReceipts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        for (Receipt receipt : this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            if (receipt.containsTag(tag)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                taggedReceipts.add(receipt);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return taggedReceipts;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    // -- Boolean Functions"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Checks if a tag has been registered previously."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param tag String representing folder to be checked"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return true if a folder in the folders property has the name tag, false otherwise"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public boolean isRegisteredTag(String tag) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.getFolders().containsKey(tag);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    // -- Setters \u0026 Getters"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Retrieves the totalCashSpent by a specific tag."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param tag String representing the tag to filter by"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return Double, the total amount spent on a given tag"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public double getCashSpentByTag(String tag) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (isRegisteredTag(tag)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return this.getFolders().get(tag).getTotalCashSpent();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            ReceiptTracker temp \u003d new ReceiptTracker(this.findReceiptsByTag(tag));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return temp.getTotalCashSpent();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Setter for the folders property of the ReceiptTracker Object."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param folders HashMap to be set as the folders property of ReceiptTracker Object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setFolders(HashMap\u003cString, ReceiptTracker\u003e folders) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.folders \u003d folders;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Getter for the folders property of the ReceiptTracker Object."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return HashMap representing the folders property of ReceiptTracker Object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public HashMap\u003cString, ReceiptTracker\u003e getFolders() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return folders;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Setter for the totalCashSpent property of the ReceiptTracker Object."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param totalCashSpent Double amount to be set as the totalCashSpent property of ReceiptTracker Object"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setTotalCashSpent(Double totalCashSpent) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.totalCashSpent \u003d totalCashSpent;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Getter for totalCashSpent property of ReceiptTracker Object."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return Double representing the totalCashSpent property of ReceiptTracker Object"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Double getTotalCashSpent() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return totalCashSpent;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Prints all the receipts stored in the ReceiptTracker Object."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    public void printReceipts() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        for (int index \u003d 0; index \u003c this.size(); ++index) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                System.out.println((index + 1)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                        + \". \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                        + this.get(index).getTags()"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                        + \" \""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                        + this.get(index).getCashSpent()"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                        + \" \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                        + this.get(index).getDate()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                );"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                System.out.println(\"Unable to print Receipt \""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                        + String.valueOf(index + 1)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                );"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 152,
      "Araavinds": 20
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import interpreter.Interpreter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.CommandType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private Wallet wallet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private Boolean exitRequest;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private List\u003cString\u003e userInputHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String LOGO \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            \" ____        _        \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String LINE \u003d \"________________________________________________\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for the \u0027Ui\u0027 Class."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Ui(String dataPath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.storage \u003d new Storage(dataPath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.taskList \u003d storage.loadData();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.wallet \u003d new Wallet();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exitRequest \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userInputHistory \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to start the Ui."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void initialise() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        printWelcomeMsg();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!this.exitRequest) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.interact(this.taskList, this.wallet);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exitUi();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Obtains user input and executes commands."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void interact(TaskList taskList, Wallet wallet)  {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String userInput \u003d this.scanInput();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.exitRequest \u003d Interpreter.interpret(taskList, wallet, userInput);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Scans the CLI for User Input."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String representing the User Input"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String scanInput() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(\"User : \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d this.scanner.nextLine();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Exits the Ui."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void exitUi() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.scanner.close();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.storage.saveData(this.taskList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exitRequest \u003d true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints Exit Msg."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void printGoodbyeMsg() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        dukeSays(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Helper method to indicate duke is saying something."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param stringX The message duke wants to say"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void dukeSays(String stringX) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Duke: \" + stringX + \"\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Helper method to print Line Separator."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void printSeparator() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints Welcome Message."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void printWelcomeMsg() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(LOGO); // Logo"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        dukeSays(\"Hello! I\u0027m Duke.\\nDuke: What can I do for you?\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        printUserBalance();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        printUserExpenses();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Prints the User\u0027s Current Balance."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void printUserBalance() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Interpreter.interpret(this.taskList, this.wallet, \"balance\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Prints the User\u0027s Current Expenses."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void printUserExpenses() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Interpreter.interpret(this.taskList, this.wallet, \"expenses\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 41,
      "-": 91
    }
  },
  {
    "path": "src/main/java/ui/Wallet.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class Wallet {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private Double balance;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private ReceiptTracker receipts;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Complete Constructor for Wallet Object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param balance Double to be set for balance property of Wallet Object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param receipts ArrayList to be set for receipts property of Wallet Object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Wallet(Double balance, ReceiptTracker receipts) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setBalance(balance);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setReceipts(receipts);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Partial Constructor for Wallet Object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param balance Double to be set for balance property of Wallet Object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Wallet(Double balance) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setBalance(balance);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setReceipts(new ReceiptTracker());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Default Constructor for Wallet Object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Wallet() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setBalance(0.00);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setReceipts(new ReceiptTracker());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Adds a new Receipt Object into the receipts property of Wallet Object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param receipt Receipt Object to be stored"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void addReceipt(Receipt receipt) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.receipts.addReceipt(receipt);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    // -- Boolean Functions"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Checks if the Wallet contains any receipts."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return true if receipts property is an empty list, false otherwise"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Boolean isReceiptsEmpty() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.getReceipts().isEmpty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    // -- Setters \u0026 Getters"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Setter for balance property of Wallet Object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param input The value to be set as balance"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setBalance(Double input) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.balance \u003d input;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Getter for balance property of Wallet Object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return Double value corresponding to balance property in Wallet Object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Double getBalance() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return balance;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Setter for receipts property of Wallet Object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param receipts ArrayList of receipts property of Wallet Object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setReceipts(ReceiptTracker receipts) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.receipts \u003d receipts;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Getter for receipts property of Wallet Object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return ArrayList of receipts property in Wallet Object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public ReceiptTracker getReceipts() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.receipts;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Getter for the totalCashSpent property of the ReceiptTracker Object housed in the Wallet Object."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return Double representing the total cash spent as recorded by the ReceiptTracker"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public double getTotalExpenses() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.receipts.getTotalCashSpent();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 94
    }
  },
  {
    "path": "src/test/java/CommandAddReceiptTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.CommandAddIncomeReceipt;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.CommandAddSpendingReceipt;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.CommandType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "public class CommandAddReceiptTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        Wallet wallet \u003d new Wallet();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        String incomeInput \u003d \"In $3.00 /date 1990-01-24 /tags bank robbed crime\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        String spendingInput \u003d \"Out $15 /date 2019-12-31 /tags fine bank robbed\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        CommandAddIncomeReceipt testIncome \u003d new CommandAddIncomeReceipt(incomeInput);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        CommandAddSpendingReceipt testSpending \u003d new CommandAddSpendingReceipt(spendingInput);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        testIncome.execute(wallet);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        testSpending.execute(wallet);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        assertEquals(CommandType.IN, testIncome.getCommandType());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(3.00, testIncome.getCash());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        assertEquals(\"1990-01-24\", testIncome.getDate().toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"bank\", testIncome.getTags().get(0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"robbed\", testIncome.getTags().get(1));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"crime\", testIncome.getTags().get(2));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(CommandType.OUT, testSpending.getCommandType());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(15, testSpending.getCash());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        assertEquals(\"2019-12-31\", testSpending.getDate().toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"fine\", testSpending.getTags().get(0));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"bank\", testSpending.getTags().get(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"robbed\", testSpending.getTags().get(2));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 14,
      "sallysohyun": 21
    }
  },
  {
    "path": "src/test/java/CommandDisplayBalanceTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.CommandDisplayBalance;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class CommandDisplayBalanceTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private ByteArrayOutputStream outContent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private ByteArrayOutputStream errContent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private PrintStream originalOut;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private PrintStream originalErr;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void resetTextTracker() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        errContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        originalOut \u003d System.out;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        originalErr \u003d System.err;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        System.setErr(new PrintStream(errContent));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void endTextTracker() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        System.setErr(originalErr);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void executeTest() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        resetTextTracker();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"\", outContent.toString().trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        resetTextTracker();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Wallet wallet \u003d new Wallet();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Command c \u003d new CommandDisplayBalance(\"\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        c.execute(wallet);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"Your Balance: $0.00\", outContent.toString().trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        resetTextTracker();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        wallet.setBalance(500.0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        c.execute(wallet);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"Your Balance: $500.00\", outContent.toString().trim());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        endTextTracker();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 51
    }
  },
  {
    "path": "src/test/java/CommandDisplayExpenditureTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.CommandDisplayExpenditure;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Receipt;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class CommandDisplayExpenditureTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private ByteArrayOutputStream outContent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private ByteArrayOutputStream errContent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private PrintStream originalOut;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private PrintStream originalErr;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void resetTextTracker() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        errContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        originalOut \u003d System.out;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        originalErr \u003d System.err;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        System.setErr(new PrintStream(errContent));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void endTextTracker() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        System.setErr(originalErr);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        resetTextTracker();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"\", outContent.toString().trim());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        resetTextTracker();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Command c \u003d new CommandDisplayExpenditure(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Wallet wallet \u003d new Wallet();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        c.execute(wallet);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"Total Expenditure: $0.00\", outContent.toString().trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        resetTextTracker();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        for (double x \u003d 0.00; x \u003c 11.0; ++x) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            Receipt receipt \u003d new Receipt(x);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            wallet.addReceipt(receipt);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        c.execute(wallet);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"Total Expenditure: $55.00\", outContent.toString().trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        endTextTracker();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 53
    }
  },
  {
    "path": "src/test/java/CommandMarkDoneTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.CommandMarkDone;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.Task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "class CommandMarkDoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    void loadQueuedTasks() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList queuedTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        Task mainTask \u003d TaskList.createTask(TaskType.EVENT,\"something/by somewhen\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        Task queuedTask \u003d TaskList.createTask(TaskType.DEADLINE, \"Something Else / rly\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        queuedTaskList.addTask(queuedTask);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        mainTask.setQueuedTasks(queuedTaskList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.addTask(mainTask);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandMarkDone c \u003d new CommandMarkDone(\"Done1\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        c.execute(taskList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Task loadedTask \u003d taskList.getList().get(1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(true, mainTask.getIsDone());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(false, mainTask.isQueuedTasks());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(TaskType.DEADLINE, loadedTask.getTaskType());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"Something Else\", loadedTask.getTaskName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"\", loadedTask.getDetailDesc());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"rly\", loadedTask.getTaskDetails());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 9,
      "-": 22
    }
  },
  {
    "path": "src/test/java/CommandQueueTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.CommandQueue;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.Task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "class CommandQueueTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Task testTask \u003d TaskList.createTask(TaskType.EVENT,\"something/by somewhen\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.addTask(testTask);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandQueue testCommand \u003d new CommandQueue(\"Queue 1 EventIce Cream Party / Tomorrow\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        testCommand.execute(taskList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Task mainTask \u003d taskList.getList().get(0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, mainTask.isQueuedTasks());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Task queuedTask \u003d mainTask.getQueuedTasks().getList().get(0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(TaskType.EVENT, queuedTask.getTaskType());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"Ice Cream Party\", queuedTask.getTaskName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"\", queuedTask.getDetailDesc());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"Tomorrow\", queuedTask.getTaskDetails());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 8,
      "-": 19
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.CommandType;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void removeStr() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"Something\", Parser.removeStr(\"TODO\", \"TodoSomething\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Should remove \u0027Todo\u0027\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"event /by tmrw\", Parser.removeStr(\"DEADLINE\", \"deadline event /by tmrw\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Should remove \u0027deadline\u0027\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"something whitespace\", Parser.removeStr(\"EVENT\", \" Event something whitespace \"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Should remove \u0027Event\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void parseStoredTask() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] expectedResult \u003d {\"TODO\", \"yoda things/ tmrw at last\", \"false\"};"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResult[0], Parser.parseStoredTaskDetails(\"TODO yoda things/ tmrw at last####false\\n\")[0],"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                \"First Object\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResult[1], Parser.parseStoredTaskDetails(\"TODO yoda things/ tmrw at last####false\\n\")[1],"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Second Object\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResult[2], Parser.parseStoredTaskDetails(\"TODO yoda things/ tmrw at last####false\\n\")[2],"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Third Object\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void parseForPrimaryInputTest() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"5\", Parser.parseForPrimaryInput(CommandType.TODO,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \"todo5\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"holiday\", Parser.parseForPrimaryInput(CommandType.RECUR,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \"Recur holiday /repeat always\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"Death as a respite from CS2113T\", Parser.parseForPrimaryInput(CommandType.EVENT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \"EventDeath as a respite from CS2113T /when anytime /where anywhere\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void parseForFlagsTest() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertNull(Parser.parseForFlag(\"when\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \"Delete2\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"23\", Parser.parseForFlag(\"times\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \"Recur this /times 23\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"somewhere somewhen\", Parser.parseForFlag(\"details\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \"Event there /details somewhere somewhen\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"Over the moon\", Parser.parseForFlag(\"feeling\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \"Deadline cry /feeling Over the moon /due 2359, tonight\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"bring presents\", Parser.parseForFlag(\"todo\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \"Event Birthday Party /when 23-09-2019 /at Mark Zuckerberg\u0027s /todo bring presents /dress-code blue\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 27,
      "-": 27
    }
  },
  {
    "path": "src/test/java/StorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    void loadData() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new Storage(\"testDataLoad.txt\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList taskListResult \u003d storage.loadData();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        final SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        //TODO yoda things/ tmrw at last@|@false"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Task taskResult \u003d taskListResult.getList().get(0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(TaskType.TODO, taskResult.getTaskType(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Loaded wrong taskType\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"yoda things\", taskResult.getTaskName(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Loaded wrong taskName\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"\", taskResult.getDetailDesc(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Loaded wrong detailDesc\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"tmrw at last\", taskResult.getTaskDetails(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Loaded wrong taskDetails\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(false, taskResult.getIsDone(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Loaded wrong isDone\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        //EVENT something/by somewhen@|@true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        taskResult \u003d taskListResult.getList().get(1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(TaskType.EVENT, taskResult.getTaskType(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Loaded wrong taskType\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"something\", taskResult.getTaskName(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Loaded wrong taskName\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"by\", taskResult.getDetailDesc(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Loaded wrong detailDesc\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"somewhen\", taskResult.getTaskDetails(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Loaded wrong taskDetails\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(true, taskResult.getIsDone(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Loaded wrong isDone\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        //DEADLINE this/by 19/09/2019 1015@|@false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        taskResult \u003d taskListResult.getList().get(2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(TaskType.DEADLINE, taskResult.getTaskType(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Loaded wrong taskType\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"this\", taskResult.getTaskName(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Loaded wrong taskName\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"by\", taskResult.getDetailDesc(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Loaded wrong detailDesc\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"19/09/2019 1015\", taskResult.getTaskDetails(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Loaded wrong taskDetails\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(false, taskResult.getIsDone(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Loaded wrong isDone\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"19/09/2019 1015\", dateFormat.format(taskResult.getDatetime()),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \"Loaded wrong taskDetails\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveData() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // testDataLoad is the test Data"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Follow the Storage Format when inputting new test cases"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storageExpected \u003d new Storage(\"testDataLoad.txt\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storageSaved \u003d new Storage(\"testDataSave.txt\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList taskList \u003d storageExpected.loadData();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        storageSaved.saveData(taskList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        File fileExpected \u003d new File(\"testDataLoad.txt\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        File fileSaved \u003d new File(\"testDataSave.txt\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            Scanner scannerExpected \u003d new Scanner(fileExpected);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            Scanner scannerSaved \u003d new Scanner(fileSaved);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            while (scannerExpected.hasNextLine()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                assertEquals(scannerExpected.nextLine(), scannerSaved.nextLine());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 22,
      "sallysohyun": 1,
      "-": 61
    }
  },
  {
    "path": "src/test/java/ToDoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.ToDo;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "class ToDoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    void initialize() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        final SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd/mm/yyyy\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        ToDo test \u003d new ToDo(\"TodoSomething\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"Something\", test.getTaskName(), \"taskName interpretation error\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        test \u003d new ToDo(\"TODO SomethingElse / yolo\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"SomethingElse\", test.getTaskName(), \"taskName interpretation error\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"yolo\", test.getTaskDetails(), \"taskDetails interpretation error\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        test \u003d new ToDo(\"todo fire in my pants /by   yolo  \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"fire in my pants\", test.getTaskName(), \"taskName interpretation error\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"yolo\", test.getTaskDetails(), \"taskDetails interpretation error\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"by\", test.getDetailDesc(), \"detailDesc interpretation error\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        test \u003d new ToDo(\"todosurvive /between 19/09/1997 19/09/2019\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"survive\", test.getTaskName(), \"taskName interpretation error\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"19/09/1997 19/09/2019\", test.getTaskDetails(), \"taskDetails interpretation error\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"between\", test.getDetailDesc(), \"detailDesc interpretation error\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"19/09/1997\", dateFormat.format(test.getDateFrom()), \"dateFrom interpretation error\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"19/09/2019\",  dateFormat.format(test.getDateTo()), \"dateTo interpretation error\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        test \u003d new ToDo(\"todo SU /for weekly\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        assertEquals(\"SU\", test.getTaskName(), \"taskName interpretation error\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        assertEquals(\"for\", test.getDetailDesc(), \"detailDesc interpretation error\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        assertEquals(\"weekly\", test.getTaskDetails(), \"taskDetails interpretation error\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 10,
      "sallysohyun": 5,
      "-": 23
    }
  },
  {
    "path": "src/test/java/ui/IncomeReceiptTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class IncomeReceiptTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void generalTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        IncomeReceipt receipt \u003d new IncomeReceipt(5.00);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(-5.00, receipt.getCashSpent());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(5.00, receipt.getCashGained());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        receipt.setCashSpent(27.00);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(27.00, receipt.getCashSpent());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(-27.00, receipt.getCashGained());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        receipt.setCashGained(19.00);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(-19.00, receipt.getCashSpent());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(19.00, receipt.getCashGained());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Receipt receipt1 \u003d new IncomeReceipt(7.00);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(-7.00, receipt1.getCashSpent());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        receipt1.setCashSpent(-9.00);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(-9.00, receipt1.getCashSpent());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 25
    }
  },
  {
    "path": "src/test/java/ui/ReceiptTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class ReceiptTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void addTagTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Receipt receipt \u003d new Receipt(5.00);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(true, receipt.areTagsEmpty());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        receipt.addTag(\"Fire\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(false, receipt.areTagsEmpty());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"Fire\", receipt.getTags().get(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        receipt.addTag(\"abc\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"Fire\", receipt.getTags().get(0));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"abc\", receipt.getTags().get(1));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 21
    }
  },
  {
    "path": "src/test/java/ui/ReceiptTrackerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class ReceiptTrackerTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private ReceiptTracker initializeTracker() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        ReceiptTracker tracker \u003d new ReceiptTracker();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Receipt receiptA \u003d new Receipt(5.00);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        receiptA.addTag(\"loans\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        tracker.addReceipt(receiptA);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Receipt receiptB \u003d new Receipt(4.00);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        receiptB.addTag(\"loans\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        receiptB.addTag(\"ice\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        tracker.addReceipt(receiptB);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Receipt receiptC \u003d new IncomeReceipt(9.00);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        receiptC.addTag(\"ice\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        tracker.addReceipt(receiptC);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Receipt receiptD \u003d new Receipt(1.00);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        tracker.addReceipt(receiptD);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return tracker;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void constructorTest() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        ReceiptTracker trackerA \u003d new ReceiptTracker();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(0.0, trackerA.getTotalCashSpent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertTrue(trackerA.isEmpty());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertTrue(trackerA.getFolders().isEmpty());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        ArrayList\u003cReceipt\u003e receiptList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        ReceiptTracker trackerB \u003d new ReceiptTracker(receiptList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(0.0, trackerB.getTotalCashSpent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertTrue(trackerB.isEmpty());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertTrue(trackerB.getFolders().isEmpty());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Receipt receipt \u003d new Receipt(5.0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        receiptList.add(receipt);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        ReceiptTracker trackerC \u003d new ReceiptTracker(receiptList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertFalse(trackerC.isEmpty());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(5.00, trackerC.getTotalCashSpent());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(5.00, trackerC.get(0).getCashSpent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void sumReceiptsTest() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        ReceiptTracker tracker \u003d new ReceiptTracker();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        for (double x \u003d 1.0; x \u003c 11.0; ++x) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            Receipt receipt \u003d new Receipt(x);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            tracker.add(receipt);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(0.0, tracker.getTotalCashSpent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(55.0, tracker.sumReceipts());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        tracker.updateTotalCashSpent();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(55.0, tracker.getTotalCashSpent());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void addReceiptTest() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        ReceiptTracker tracker \u003d new ReceiptTracker();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Receipt receiptA \u003d new Receipt(5.00);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        tracker.addReceipt(receiptA);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(5.00, tracker.getTotalCashSpent());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        tracker.getFolders().put(\"tagged\", new ReceiptTracker());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Receipt receiptB \u003d new Receipt(10.00);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        receiptB.getTags().add(\"tagged\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        tracker.addReceipt(receiptB);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(15.00, tracker.getTotalCashSpent());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(10.00, tracker.getFolders().get(\"tagged\").getTotalCashSpent());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertTrue(tracker.getFolders().get(\"tagged\").getFolders().isEmpty());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void findReceiptsByTagTest() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        ReceiptTracker tracker \u003d initializeTracker();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(1.00, tracker.getTotalCashSpent());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(5.00, tracker.findReceiptsByTag(\"loans\").get(0).getCashSpent());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(4.00, tracker.findReceiptsByTag(\"loans\").get(1).getCashSpent());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(4.00, tracker.findReceiptsByTag(\"ice\").get(0).getCashSpent());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(-9.00, tracker.findReceiptsByTag(\"ice\").get(1).getCashSpent());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void addFolderTest() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        ReceiptTracker tracker \u003d new ReceiptTracker();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        for (double x \u003d 1.0; x \u003c 6.0; ++x) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            Receipt receipt \u003d new Receipt(x);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            tracker.addReceipt(receipt);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        tags.add(\"tagged\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        tags.add(\"Fire\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        for (double x \u003d 6.0; x \u003c 11.0; ++x) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            Receipt taggedReceipt \u003d new Receipt(x, null, tags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            tracker.addReceipt(taggedReceipt);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertTrue(tracker.getFolders().isEmpty());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertFalse(tracker.isRegisteredTag(\"tagged\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertFalse(tracker.isRegisteredTag(\"Fire\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            tracker.addFolder(\"tagged\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            assertFalse(tracker.getFolders().isEmpty());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            assertTrue(tracker.isRegisteredTag(\"tagged\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            assertEquals(40.0, tracker.getFolders().get(\"tagged\").getTotalCashSpent());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            assertFalse(tracker.isRegisteredTag(\"Fire\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            Ui.dukeSays(e.toString());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            tracker.addFolder(\"fire\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            assertFalse(tracker.getFolders().isEmpty());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            assertTrue(tracker.isRegisteredTag(\"fire\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            assertFalse(tracker.isRegisteredTag(\"Fire\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            assertEquals(0.0, tracker.getFolders().get(\"fire\").getTotalCashSpent());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            Ui.dukeSays(e.toString());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            tracker.addFolder(\"fire\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            Ui.dukeSays(e.toString());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void getCashSpentByTagTest() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        ReceiptTracker tracker \u003d initializeTracker();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertTrue(tracker.getFolders().isEmpty());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(9.00, tracker.getCashSpentByTag(\"loans\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            tracker.addFolder(\"ice\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            Ui.dukeSays(e.toString());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(-5.00, tracker.getCashSpentByTag(\"ice\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertFalse(tracker.isRegisteredTag(\"loans\"));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertTrue(tracker.isRegisteredTag(\"ice\"));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(-5.00, tracker.getCashSpentByTag(\"ice\"));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 157
    }
  },
  {
    "path": "src/test/java/ui/WalletTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class WalletTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void addReceiptTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Wallet wallet \u003d new Wallet();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(true, wallet.isReceiptsEmpty());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Receipt receiptA \u003d new Receipt(5.00);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        wallet.addReceipt(receiptA);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(false, wallet.isReceiptsEmpty());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(receiptA, wallet.getReceipts().get(0));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(5.00, wallet.getTotalExpenses());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        LocalDate date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Receipt receiptB \u003d new Receipt(12.00, date);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        wallet.addReceipt(receiptB);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(receiptA, wallet.getReceipts().get(0));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(receiptB, wallet.getReceipts().get(1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(17.00, wallet.getTotalExpenses());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 30
    }
  }
]
