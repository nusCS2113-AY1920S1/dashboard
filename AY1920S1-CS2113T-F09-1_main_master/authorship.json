[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies  {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    compile group: \u0027com.opencsv\u0027, name: \u0027opencsv\u0027, version: \u00274.1\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    mainClassName \u003d \"main.Duke\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 4,
      "-": 39,
      "priyan-coder": 7
    }
  },
  {
    "path": "src/main/java/executor/Executor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.accessors.AccessDeny;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.accessors.Accessor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.CommandError;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.CommandType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import utils.AccessType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import utils.InfoCapsule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class Executor {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private StorageManager storageLayer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Constructor for \u0027Executor\u0027 Class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Executor(String taskPath, String walletPath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.storageLayer \u003d new StorageManager(taskPath, walletPath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Parses the user input and executes the Command specified."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param userInput User input from the CLI"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return True if the Command executed calls for an ExitRequest, false otherwise"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public InfoCapsule runCommand(CommandType commandType, String userInput) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Command c \u003d createCommand(commandType, userInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        c.execute(this.storageLayer);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return c.getInfoCapsule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Creates a specific Command sub-Object given the CommandType."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param commandType The type of command to be created"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param userInput The input to be initialized with the command"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return The generated Command"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public static Command createCommand(CommandType commandType, String userInput) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Command c;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            c \u003d (Command) commandType.getCommandClass().getDeclaredConstructor(String.class).newInstance("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    userInput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            c \u003d new CommandError(userInput);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return c;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Accesses the requested data from the Storage Layer."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param accessType AccessType representing the data to be accessed"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param argsStr String any other String arguments"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return InfoCapsule containing the result of the request"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public InfoCapsule access(AccessType accessType, String argsStr) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Accessor accessor \u003d Executor.createAccessor(accessType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        accessor.execute(this.storageLayer);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return accessor.getInfoCapsule();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Creates the Accessor Class given the AccessType."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param accessType AccessType of the Accessor to be created"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return Accessor Object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public static Accessor createAccessor(AccessType accessType) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Accessor accessor;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            accessor \u003d (Accessor) accessType.getAccessClass().getDeclaredConstructor().newInstance();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            accessor \u003d new AccessDeny();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return accessor;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Saves all Data."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return InfoCapsule detailing any error messages that could occur."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public InfoCapsule saveAllData() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        InfoCapsule infoCapsule \u003d new InfoCapsule();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.storageLayer.saveAllData();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            infoCapsule.setOutputStr(e.getMessage());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return infoCapsule;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        infoCapsule.setCodeToast();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        infoCapsule.setOutputStr(\"Saved All Data Succesfully.\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return infoCapsule;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 94,
      "sallysohyun": 1
    }
  },
  {
    "path": "src/main/java/executor/accessors/AccessDeny.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.accessors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.UiCode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import utils.AccessType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class AccessDeny extends Accessor {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Constructor for AccessDeny Class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public AccessDeny() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.accessType \u003d AccessType.DENY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setOutputStr(\"Access Denied\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 22
    }
  },
  {
    "path": "src/main/java/executor/accessors/AccessPieChartData.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.accessors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.UiCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import utils.AccessType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class AccessPieChartData extends Accessor {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Constructor for AccessPieChartData."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public AccessPieChartData() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.accessType \u003d AccessType.PIE_CHART_DATA;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setUiCode(UiCode.UPDATE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Double walletBalance;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Double walletExpenses;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            walletBalance \u003d storageManager.getWalletBalance();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            walletExpenses \u003d storageManager.getWalletExpenses();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            walletBalance \u003d 0.0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            walletExpenses \u003d 0.0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setUiCode(UiCode.ERROR);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setPieChartData(FXCollections.observableArrayList("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                new PieChart.Data(\"Expenses\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                        walletExpenses),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                new PieChart.Data(\"Balance\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                        walletBalance - walletExpenses)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 41
    }
  },
  {
    "path": "src/main/java/executor/accessors/AccessTaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.accessors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.UiCode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import utils.AccessType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class AccessTaskList extends Accessor {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Constructor for AccessTaskList Class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public AccessTaskList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.accessType \u003d AccessType.TASKLIST;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        infoCapsule.setUiCode(UiCode.UPDATE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        infoCapsule.setTaskList(storageManager.getTaskList());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 22
    }
  },
  {
    "path": "src/main/java/executor/accessors/AccessWallet.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.accessors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.UiCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import utils.AccessType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class AccessWallet extends Accessor {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Constructor for AccessWallet Class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public AccessWallet() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.accessType \u003d AccessType.WALLET;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setUiCode(UiCode.UPDATE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setWallet(storageManager.getWallet());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 23
    }
  },
  {
    "path": "src/main/java/executor/accessors/AccessWalletBalance.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.accessors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.UiCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class AccessWalletBalance extends Accessor {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Constructor for AccessWalletBalance Class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public AccessWalletBalance() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            Double walletBalance \u003d storageManager.getWalletBalance();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setUiCode(UiCode.UPDATE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputDouble(walletBalance);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setUiCode(UiCode.ERROR);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(e.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 27
    }
  },
  {
    "path": "src/main/java/executor/accessors/AccessWalletExpenses.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.accessors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.UiCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import utils.AccessType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class AccessWalletExpenses extends Accessor {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Constructor for AccessExpenses."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public AccessWalletExpenses() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.accessType \u003d AccessType.EXPENSES;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setUiCode(UiCode.UPDATE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Double expenses;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            expenses \u003d storageManager.getWalletExpenses();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setUiCode(UiCode.ERROR);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setOutputDouble(expenses);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 31
    }
  },
  {
    "path": "src/main/java/executor/accessors/Accessor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.accessors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.UiCode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import utils.AccessType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import utils.InfoCapsule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public abstract class Accessor {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    protected AccessType accessType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    protected InfoCapsule infoCapsule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Constructor for Accessor Class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Accessor() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.accessType \u003d AccessType.DENY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule \u003d new InfoCapsule();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        infoCapsule.setUiCode(UiCode.ERROR);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        infoCapsule.setOutputStr(\"Command was not executed.\\n\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Executes the Accessor Method to Obtain Information for the UI."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public abstract void execute(StorageManager storageManager);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    // Setters \u0026 Getters"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public InfoCapsule getInfoCapsule() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.infoCapsule;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public AccessType getAccessType() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.accessType;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 36
    }
  },
  {
    "path": "src/main/java/executor/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.UiCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import utils.InfoCapsule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    protected InfoCapsule infoCapsule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private static List\u003cString\u003e executedCommands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    protected Boolean exitRequest \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    protected String userInput \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    protected CommandType commandType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    protected String description \u003d \"NO DESCRIPTION\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    protected TaskList taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Base Constructor for all sub-classes to call super()."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule \u003d new InfoCapsule();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        infoCapsule.setUiCode(UiCode.ERROR);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        infoCapsule.setOutputStr(\"Command was not executed.\\n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Returns an InfoCapsule that details the Execution Info/Status of this Command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return Boolean"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public InfoCapsule getInfoCapsule() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.infoCapsule;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Executes a particular Command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param storageManager StorageManager Object that holds all the Models of Duke"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public abstract void execute(StorageManager storageManager);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public CommandType getCommandType() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    public static List\u003cString\u003e getExecutedCommands() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        return executedCommands;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AjeyAshok": 5,
      "Mudaafi": 40,
      "Araavinds": 1,
      "priyan-coder": 8
    }
  },
  {
    "path": "src/main/java/executor/command/CommandAdd.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "public class CommandAdd extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    private double entryOne;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    private double entryTwo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * Constructor for CommandAdd subCommand Class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * @param userInput String is the user input from the CLI"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    public CommandAdd(String userInput) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.description \u003d \"Adds two double values. Format: add \u003cnum1\u003e / \u003cnum2\u003e\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.commandType \u003d CommandType.ADD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String stringOne \u003d Parser.parseForPrimaryInput(this.commandType, userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String stringTwo \u003d Parser.parseForFlag(\"\", userInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            this.entryOne \u003d Double.parseDouble(stringOne);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(\"Invalid input please enter in this format: add \u003cnum1\u003e / \u003cnum2\u003e\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            this.entryTwo \u003d Double.parseDouble(stringTwo);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(\"Invalid input please enter the second number. Format: add \u003cnum1\u003e / \u003cnum2\u003e\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(\"Enter forward slash and second number. Format: add \u003cnum1\u003e / \u003cnum2\u003e\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        double sum \u003d entryOne + entryTwo;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setCodeToast();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        this.infoCapsule.setOutputStr(stringOne"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + \" + \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                + stringTwo"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                + \"\u003d\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + sum"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + \"\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 15,
      "Araavinds": 43,
      "priyan-coder": 3
    }
  },
  {
    "path": "src/main/java/executor/command/CommandAddIncomeReceipt.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "import ui.IncomeReceipt;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class CommandAddIncomeReceipt extends CommandAddReceipt {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "     * Constructor for CommandAddIncomeReceipt subCommand Class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "     * @param userInput The user input from the CLI"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    public CommandAddIncomeReceipt(String userInput) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        this.commandType \u003d CommandType.IN;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.cash \u003d extractIncome(this.commandType, this.userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.date \u003d extractDate(this.userInput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.tags \u003d extractTags(this.userInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.tags.add(0, \"Income\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        this.description \u003d \"You can add a new income receipt. \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                + \"FORMAT : in \u003cvalue\u003e /date \u003cYYYY-MM-DD\u003e /tags \u003ctag\u003e\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        IncomeReceipt r \u003d new IncomeReceipt(this.cash, this.date, this.tags);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        DecimalFormat decimalFormat \u003d new DecimalFormat(\"#0.00\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            storageManager.addReceipt(r);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeToast();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(\"Added Receipt: $\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    + decimalFormat.format(r.getCashGained())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    + \" with tags: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    + r.getTags().toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(e.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AjeyAshok": 2,
      "Mudaafi": 24,
      "sallysohyun": 17
    }
  },
  {
    "path": "src/main/java/executor/command/CommandAddReceipt.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public abstract class CommandAddReceipt extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    Double cash;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    LocalDate date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    ArrayList\u003cString\u003e tags;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    Double extractIncome(CommandType commandType, String userInput) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String incomeStr \u003d Parser.parseForPrimaryInput(commandType, userInput);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        incomeStr \u003d removeDollarSign(incomeStr);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return Double.parseDouble(incomeStr);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return 0.0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    LocalDate extractDate(String userInput) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String dateStr \u003d Parser.parseForFlag(\"date\", userInput);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (dateStr !\u003d null) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return LocalDate.parse(dateStr);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return LocalDate.now();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    ArrayList\u003cString\u003e extractTags(String userInput) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String tagsStr \u003d Parser.parseForFlag(\"tags\", userInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (tagsStr !\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return new ArrayList\u003cString\u003e(Arrays.asList(tagsStr.split(\" \")));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private String removeDollarSign(String input) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return input.trim().replace(\"$\", \"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    // -- Setters \u0026 Getters"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setCash(double cash) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.cash \u003d cash;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Double getCash() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.cash;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setTags(ArrayList\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public ArrayList\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.tags;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 70
    }
  },
  {
    "path": "src/main/java/executor/command/CommandAddSpendingReceipt.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "import ui.Receipt;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class CommandAddSpendingReceipt extends CommandAddReceipt {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "     * Constructor for CommandAddSpendingReceipt subCommand Class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "     * @param userInput The user input from the CLI"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    public CommandAddSpendingReceipt(String userInput) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        this.commandType \u003d CommandType.OUT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.cash \u003d extractIncome(this.commandType, this.userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.date \u003d extractDate(this.userInput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.tags \u003d extractTags(this.userInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.tags.add(0, \"Expenses\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        this.description \u003d \"You can add a new spendings receipt.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                + \"FORMAT :  out \u003cvalue\u003e /date \u003cYYYY-MM-DD\u003e /tags \u003ctag\u003e\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Receipt r \u003d new Receipt(this.cash, this.date, this.tags);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            storageManager.addReceipt(r);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            DecimalFormat decimalFormat \u003d new DecimalFormat(\"#0.00\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeToast();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(\"Added Receipt: $\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    + decimalFormat.format(r.getCashSpent())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    + \" with tags: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    + r.getTags().toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AjeyAshok": 2,
      "Mudaafi": 24,
      "sallysohyun": 18
    }
  },
  {
    "path": "src/main/java/executor/command/CommandBlank.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class CommandBlank extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * Constructor for CommandBlank subCommand Class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * @param userInput The user input from the CLI"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public CommandBlank(String userInput) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.description \u003d \"Does Nothing\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.commandType \u003d CommandType.BLANK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Executes a particular Command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setCodeToast();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setOutputStr(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 21,
      "Araavinds": 5
    }
  },
  {
    "path": "src/main/java/executor/command/CommandBudget.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "public class CommandBudget extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private Double budgetAmount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * CommandBudget helps user to set the budget."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param userInput String is the user entered input"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    public CommandBudget(String userInput) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        this.description \u003d \" Sets user budget \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                + \"FORMAT : budget $\u003camount\u003e\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        this.commandType \u003d  CommandType.BUDGET;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            this.budgetAmount \u003d extractAmount();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            DecimalFormat decimalFormat \u003d new DecimalFormat(\"#0.00\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            storageManager.getWallet().getReceipts().setBudget(this.budgetAmount);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            String percentageExceeded \u003d percentageOfBudgetExceeded(storageManager.getWalletExpenses());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            String percentageUsedUp \u003d percentageOfBudgetUsedUp(storageManager.getWalletExpenses());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            this.infoCapsule.setCodeToast();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            this.infoCapsule.setOutputStr(\"Budget updated to: $\" + decimalFormat.format(this.budgetAmount) + \"\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                    + percentageExceeded + \"\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                    + percentageUsedUp + \"\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                    + \"\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            this.infoCapsule.setOutputStr(e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * extractAmount helps to parse the userInput and gets the budget to be set."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @return Double value of the amount of budget is returned"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @throws DukeException Exception thrown if format is not followed"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private Double extractAmount() throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        String userBudget \u003d Parser.parseForPrimaryInput(this.commandType, this.userInput);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            userBudget \u003d userBudget.trim().replace(\"$\", \"\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            Double amount \u003d Double.parseDouble(userBudget);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            if (amount \u003c\u003d 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                throw new Exception();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            return roundByDecimalPlace(amount,2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            throw new DukeException(\"Please kindly follow the format : budget $\u003camount\u003e \\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                    + \"Please enter an amount greater than zero!\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * percentageOfBudgetExceeded helps to calculate percentage overspent above budget."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param amountSpent Double is the total wallet expenses"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @return String of the percentage calculated is returned"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @throws DukeException thrown if unable to calculate percentage overspent"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private String percentageOfBudgetExceeded(Double amountSpent) throws DukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            if (amountSpent \u003c\u003d getBudgetAmount()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                return \"You are still good and safe as you did not overspend your budget ;) \\n\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            Double percent \u003d ((amountSpent - getBudgetAmount()) / getBudgetAmount()) * 100;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            Double percentage \u003d roundByDecimalPlace(percent, 2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            return \"Percentage of Budget Exceeded :\" + percentage.toString() + \"%\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            throw new DukeException(\"Unable to calculate percentage overspent!\\n\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * percentageOfBudgetUsedUp helps to calculate how much of the budget has been reached."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param amountSpent Double is the total wallet expenses"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @return String of the percentage used up is returned"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @throws DukeException thrown if unable to calculate percentage used up"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private String percentageOfBudgetUsedUp(Double amountSpent) throws DukeException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            if (amountSpent \u003c\u003d getBudgetAmount()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                Double percent \u003d (amountSpent / getBudgetAmount()) * 100;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                Double percentage \u003d roundByDecimalPlace(percent, 2);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                return \"Percentage of Budget Used Up : \" + percentage.toString() + \"%\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            return \"You have already exceeded your budget !! \\n\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            throw new DukeException(\"Unable to calculate percentage of budget used up!\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * roundByDecimalPlace is a helper function to round up to a specific dp."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param value double is the value ro be rounded off"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param places number of decimal places to round it off"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @return double val of the value is returned"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private double roundByDecimalPlace(double value, int places) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        if (places \u003c 0) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        BigDecimal bd \u003d BigDecimal.valueOf(value);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        bd \u003d bd.setScale(places, RoundingMode.HALF_UP);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        return bd.doubleValue();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private Double getBudgetAmount() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        return budgetAmount;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "priyan-coder": 126
    }
  },
  {
    "path": "src/main/java/executor/command/CommandBye.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class CommandBye extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * Constructor for CommandBye subCommand Class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * @param userInput The user input from the CLI"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public CommandBye(String userInput) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        this.description \u003d \"Exits the program \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                + \"FORMAT : bye\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.commandType \u003d  CommandType.BYE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setCodeExit();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AjeyAshok": 2,
      "Mudaafi": 15,
      "Araavinds": 5
    }
  },
  {
    "path": "src/main/java/executor/command/CommandCliDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.UiCode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class CommandCliDisplay extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Constructor for CommandCliDisplay subCommand Class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param userInput The user input from the CLI"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public CommandCliDisplay(String userInput) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.description \u003d \"Displays the Command Line Display\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.commandType \u003d CommandType.CLI;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setUiCode(UiCode.DISPLAY_CLI);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 22
    }
  },
  {
    "path": "src/main/java/executor/command/CommandConvert.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import com.google.gson.JsonParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": " * This command helps to convert user entered currency amount into another country\u0027s currency amount using api call."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "public class CommandConvert extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private String from;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private String to;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private Double amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private String use;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private Double exchangeRate \u003d 0.00;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * Constructor for the CommandConvert class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param userInput this is the userInput from the CLI"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    public CommandConvert(String userInput) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        this.commandType \u003d CommandType.CONVERT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        this.description \u003d \"Command that converts the user input cash amount from\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                + \"one currency to another and prints it on the User Interface.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                + \"FORMAT : convert \u003camount\u003e /from \u003cBase currency ISO e.g USD \u003e /to \u003cRequired Currency ISO e.g SGD\u003e\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Double convertedAmount;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String outputStr;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.amount \u003d extractAmount(this.commandType, userInput);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.from \u003d getCurrencyCovertFrom(userInput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.use \u003d \"\"; // whether to use \"from code\" or \"to code\" for fetching exchange rate from json"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.to \u003d getCurrencyConvertTo(userInput);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            convertedAmount \u003d this.convertCurrency(this.getFrom(), this.getTo(), this.getAmount());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            outputStr \u003d this.getPrintableResult(convertedAmount);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setCodeCli();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setOutputStr(outputStr);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * extractAmount parses the user input from CLI to get the amount which the user wishes to convert."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param commandType this is the type of command"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param userInput takes the user entered input from CLI"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @return the amount which user wishes to convert is returned"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private Double extractAmount(CommandType commandType, String userInput) throws DukeException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        String amountStr \u003d Parser.parseForPrimaryInput(commandType, userInput);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            return Double.parseDouble(amountStr);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(\"Please enter a valid amount\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * getCurrencyConvertFrom parses user input for the flag \"from\"."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param userInput this is the user entered input from CLI"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @return this function returns the 3 character unique string representing the currency to convert from"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private String getCurrencyCovertFrom(String userInput) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        String fromStr \u003d Parser.parseForFlag(\"from\", userInput);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        if (fromStr !\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            return fromStr.toUpperCase();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * getCurrencyConvertTo parses the user input for the flag \"to\"."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param userInput this is the user entered input from CLI"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @return this function return the 3 character unique string representing the currency to covert to"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private String getCurrencyConvertTo(String userInput) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        String toStr \u003d Parser.parseForFlag(\"to\", userInput);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        if (toStr !\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            return toStr.toUpperCase();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * consultCurrencyApi is a function which gets the JSON object from the api."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param from String is the country code from which we are converting currency"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param to String is the country code to which we are converting the currency"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @return this function returns a string version of the json object or else it will return null"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private String consultCurrencyApi(String from, String to) throws DukeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            String link \u003d generateApiUrl(from, to);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            URL url \u003d new URL(link);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(new InputStreamReader(url.openStream()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            String completeJson \u003d \"\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            while (null !\u003d (line \u003d reader.readLine())) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                completeJson +\u003d line;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            return completeJson;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(\"Exchange rate data is unavailable \\n\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                    + \"1. Please ensure you have active internet access. \\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                    + \"2. Also please follow the correct format for currency conversion\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                    + \" available under CONVERT if you type help on the CLI. \\n\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                    + \"3. Please ensure that you enter proper ISO 4217 Country codes. \\n\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * deriveExchangeRateFromJson helps to get the required exchange rate based on country code from json."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param json String"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param countryCode String the 3 character unique string"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @return the exchange rate in Double, is obtained from the string json and returned"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private Double deriveExchangeRateFromJson(String json, String countryCode) throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        JsonObject jsonObject \u003d new JsonParser().parse(json).getAsJsonObject();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        String rate \u003d jsonObject.getAsJsonObject(\"rates\").get(countryCode).getAsString();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        BigDecimal exchangeRate \u003d new BigDecimal(rate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return exchangeRate.doubleValue();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * isConvertFromOrToEur helps to check if either of the from or to is EUR."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param from String is the country code from which we are converting currency"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param to String is the country code to which we are converting the currency"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @return function returns true if either of to or from is EUR"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private boolean isConvertFromOrToEur(String from, String to) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        return from.equals(\"EUR\") || to.equals(\"EUR\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * generateApiURL helps to create the correct url link for json fetch."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param from String is the country code from which we are converting currency"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param to String is the country code to which we are converting the currency"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @return function returns the correct URL link string based on from and to strings"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private String generateApiUrl(String from, String to) throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        boolean isEur \u003d isConvertFromOrToEur(from,to);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        String url;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        if (isEur) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            if (this.from.equals(\"EUR\")) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                url \u003d \"https://api.exchangeratesapi.io/latest?symbols\u003d\" + this.to;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                setUse(this.to);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                url \u003d \"https://api.exchangeratesapi.io/latest?symbols\u003d\" + this.from;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                setUse(this.from);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            url \u003d \"https://api.exchangeratesapi.io/latest?symbols\u003d\" + this.from + \",\" + this.to;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        return url;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     *  convertCurrencyToOrFromEUR helps to convert currencies from base to EUR or vice versa."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param rate Double is the exchange rate derived from json"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param from String is the country code from which we are converting currency"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param amount Double is the amount of money user wishes to convert"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @return function returns the converted currency in double"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private Double convertCurrencyToOrFromEur(Double rate, String from, Double amount) throws Exception {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        if (from.equals(\"EUR\")) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            Double convertedAmount \u003d amount * rate;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            Double originalToOutputRate \u003d convertedAmount / amount;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            setExchangeRate(originalToOutputRate);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            return convertedAmount;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            Double convertedAmount \u003d amount / rate;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            Double originalToOutputRate \u003d convertedAmount / amount;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            setExchangeRate(originalToOutputRate);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            return convertedAmount;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * convertNonEURCurrencies helps to convert non EUR currencies where from and to are not EUR."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param json String is the derived from the api"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param from String is the country code from which we are converting currency"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param to String is the country code to which we are converting the currency"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param amount Double is the amount of money user wishes to convert"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @return function returns the converted currency for non EUR conversions in Double"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private Double convertNonEurCurrencies(String json, String from, String to, Double amount) throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        Double fromRate \u003d deriveExchangeRateFromJson(json, from); // exRate for country to convert from"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        Double toRate \u003d deriveExchangeRateFromJson(json, to); // exRate for country to convert to"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        Double amountInEur \u003d amount / fromRate; // changes the given amount in base currency to EUR"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        Double convertedAmount \u003d amountInEur * toRate; // changes from EUR to required currency"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        Double originalToOutputExRate \u003d convertedAmount / amount;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        // exchange rate for the conversion from base to required currency"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        setExchangeRate(originalToOutputExRate);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        return convertedAmount;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * convertCurrency is a function used to loop through the string version of the json."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param from String is the country code from which we are converting currency"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param to String is the country code to which we are converting the currency"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param amount this is amount of currency which the user wants to convert"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @return this function returns the converted amount of the currency or else returns null"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private Double convertCurrency(String from, String to, Double amount) throws DukeException {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            String json \u003d consultCurrencyApi(from, to);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            if (json !\u003d null) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                if (this.use.equals(\"\")) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                    return convertNonEurCurrencies(json, from, to, amount);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                    Double rate \u003d deriveExchangeRateFromJson(json, this.use);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                    return convertCurrencyToOrFromEur(rate, from, amount);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            String errorMessage \u003d \"DUKE$$$ could not understand the input. \\n\""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                    + \"Please follow the following formatting to convert : \\n\""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                    + \"For example : convert \u003camount\u003e /from USD /to SGD \\n\""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                    + \"\\n\";"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(errorMessage);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Returns the a printable version of the output to be printed to the User."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param convertedAmount this is amount which was converted into"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @return string of output is returned"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private String getPrintableResult(Double convertedAmount) throws DukeException {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (convertedAmount \u003d\u003d null) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(\"Unable to convert \""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    + this.amount"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    + \" from \""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    + this.from"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    + \" to \""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    + this.to"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    + \". Please try again :) \\n\""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            );"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        convertedAmount \u003d roundByDecimalPlace(convertedAmount, 2);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        return \"DUKE$$$ has converted \" + this.from"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                + \" \" + roundByDecimalPlace(this.amount, 2) + \" \""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                + \"to\" + \" \""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                + this.to + \" \" + convertedAmount + \"\\n\""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                + rateUsed();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * roundByDecimalPlace is basically a function to round the values to a specific number of decimal places."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param value this is the value which we want to round"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param places number of decimal places"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @return the rounded double value is returned as the output"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private double roundByDecimalPlace(double value, int places) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        if (places \u003c 0) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        BigDecimal bd \u003d BigDecimal.valueOf(value);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        bd \u003d bd.setScale(places, RoundingMode.HALF_UP);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        return bd.doubleValue();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * rateUsed is a function that helps to display the exchange rate which was used for the conversion."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @return string version of the exchange rate is displayed"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private String rateUsed() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        return \"Exchange rate used \u003d \" + this.getExchangeRate().toString() + \"\\n\";"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private String getFrom() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        return from;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private String getTo() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        return to;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private Double getAmount() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private Double getExchangeRate() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        return exchangeRate;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private void setExchangeRate(Double exchangeRate) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        exchangeRate \u003d roundByDecimalPlace(exchangeRate, 3);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        this.exchangeRate \u003d exchangeRate;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private void setUse(String use) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        this.use \u003d use;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 52,
      "priyan-coder": 265
    }
  },
  {
    "path": "src/main/java/executor/command/CommandDateList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "public class CommandDateList extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * Constructor for CommandDateList subCommand Class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * @param userInput String is the user input from the CLI"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    public CommandDateList(String userInput) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        this.description \u003d \"Lists based on date. \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                + \"Format: datelist \u003cdate\u003e\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.commandType \u003d CommandType.DATELIST;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.date \u003d Parser.parseForPrimaryInput(this.commandType, userInput);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String outputStr \u003d \"You have the following receipts for\" + \" \" + date + \"\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        if (!isDateFormat(this.date)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            this.infoCapsule.setOutputStr(\"Invalid date input. FORMAT : datelist yyyy-mm-dd\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            outputStr +\u003d storageManager.getReceiptsByDate(this.date).getPrintableReceipts();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(\"Invalid input. FORMAT : datelist yyyy-mm-dd\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setCodeCli();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setOutputStr(outputStr);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * Boolean function for checking date format of input."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * @param dateString String is date input from the CLI"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    public boolean isDateFormat(String dateString) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            SimpleDateFormat format \u003d new SimpleDateFormat(\"yyyy-mm-dd\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            return format.parse(dateString) !\u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AjeyAshok": 1,
      "Mudaafi": 13,
      "Araavinds": 47
    }
  },
  {
    "path": "src/main/java/executor/command/CommandDelete.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class CommandDelete extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    protected String userInput;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * Constructor for CommandDelete subCommand Class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * @param userInput The user input from the CLI"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public CommandDelete(String userInput) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        this.description \u003d \"Deletes the specific entry that the user wants to remove. \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                + \"FORMAT: delete \u003cIndex_of_Entry\u003e\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.commandType \u003d CommandType.DELETE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String outputStr;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            int index \u003d Integer.parseInt(userInput.replace(\"delete\", \"\").trim()) - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            outputStr \u003d (\"Task\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                    + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    + (index + 1)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    + \")\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    + storageManager.getTaskNameByIndex(index)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                    + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                    + \"has been deleted.\\n\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            storageManager.deleteTaskByIndex(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(e.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            this.infoCapsule.setOutputStr(\"Invalid index input. Please enter an integer\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setCodeToast();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setOutputStr(outputStr);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AjeyAshok": 2,
      "Mudaafi": 29,
      "Araavinds": 15
    }
  },
  {
    "path": "src/main/java/executor/command/CommandDeleteReceipt.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import java.lang.reflect.InvocationTargetException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "public class CommandDeleteReceipt extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    protected String userInput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * Constructor for CommandDeleteReceipt subCommand Class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * @param userInput The user input from the CLI"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    public CommandDeleteReceipt(String userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.description \u003d \"Deletes the specific entry that the user wants to remove. \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                + \"FORMAT: deletereceipt \u003cIndex_of_Entry\u003e\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.commandType \u003d CommandType.DELETERECEIPT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String outputStr;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String integer \u003d Parser.parseForPrimaryInput(this.commandType, userInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        if (integer.isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            this.infoCapsule.setOutputStr(\"Index input is missing. FORMAT : deletereceipt \u003cIndex_of_Entry\u003e\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            int index \u003d Integer.parseInt(integer) - 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            outputStr \u003d (\"Receipt\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                    + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                    + (index + 1)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                    + \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                    + \"has been deleted\\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            storageManager.deleteReceiptByIndex(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            this.infoCapsule.setOutputStr(e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            this.infoCapsule.setOutputStr(\"Invalid index input. Please enter an integer\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.infoCapsule.setCodeToast();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.infoCapsule.setOutputStr(outputStr);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Araavinds": 56
    }
  },
  {
    "path": "src/main/java/executor/command/CommandDisplayBalance.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class CommandDisplayBalance extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * Constructor for CommandDisplayBalance subCommand Class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * @param userInput The user input from the CLI"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public CommandDisplayBalance(String userInput) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        this.description \u003d \"Shows the current balance available in the wallet \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                + \"FORMAT :  \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.commandType \u003d CommandType.BALANCE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        DecimalFormat decimalFormat \u003d new DecimalFormat(\"#0.00\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String outputStr;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            outputStr \u003d \"Your Balance: $\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    + decimalFormat.format(storageManager.getWalletBalance());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setCodeToast();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setOutputStr(outputStr);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AjeyAshok": 2,
      "Mudaafi": 29,
      "Araavinds": 5
    }
  },
  {
    "path": "src/main/java/executor/command/CommandDisplayExpenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class CommandDisplayExpenditure extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * Constructor for CommandDisplayExpenditure subCommand Class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * @param userInput The user input from the CLI"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public CommandDisplayExpenditure(String userInput) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        this.description \u003d \"Shows the total amount of money spent\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                + \"FORMAT :  \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.commandType \u003d CommandType.EXPENSES;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        double totalExpenses;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            totalExpenses \u003d storageManager.getWalletExpenses();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(e.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        DecimalFormat decimalFormat \u003d new DecimalFormat(\"#0.00\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setCodeToast();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setOutputStr(\"Total Expenditure: $\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + decimalFormat.format(totalExpenses));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AjeyAshok": 2,
      "Mudaafi": 29,
      "Araavinds": 5
    }
  },
  {
    "path": "src/main/java/executor/command/CommandDiv.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "public class CommandDiv extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    private double entryOne;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    private double entryTwo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * Constructor for CommandDiv subCommand Class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * @param userInput String is the user input from the CLI"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    public CommandDiv(String userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.description \u003d \"Divides two double values. \\nFORMAT: div \u003cnumber\u003e // \u003cnumber\u003e\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.commandType \u003d CommandType.DIV;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String stringOne \u003d Parser.parseForPrimaryInput(this.commandType, userInput);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String stringTwo \u003d Parser.parseForFlag(\"\", userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            this.entryOne \u003d Double.parseDouble(stringOne);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(\"Invalid input please enter in this Format: div \u003cnum1\u003e / \u003cnum2\u003e\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            this.entryTwo \u003d Double.parseDouble(stringTwo);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(\"Invalid input please enter the second number. Format: div \u003cnum1\u003e / \u003cnum2\u003e\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(\"Enter forward slash and second number. Format: div \u003cnum1\u003e / \u003cnum2\u003e\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        double result \u003d entryOne / entryTwo;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setCodeCli();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        this.infoCapsule.setOutputStr(stringOne"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + \" / \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                + stringTwo"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                + \"\u003d\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + result"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + \"\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 17,
      "Araavinds": 36,
      "priyan-coder": 3
    }
  },
  {
    "path": "src/main/java/executor/command/CommandError.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class CommandError extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * Constructor for CommandError subCommand Class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * @param userInput The user input from the CLI"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    public CommandError(String userInput) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.description \u003d \"Prints error message when program encounters an error\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.commandType \u003d CommandType.ERROR;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Executes a particular Command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setOutputStr(\"Please enter a valid Command. Type \u0027help\u0027 to see the list of Commands.\\n\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 18,
      "Araavinds": 7
    }
  },
  {
    "path": "src/main/java/executor/command/CommandExport.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import com.opencsv.CSVWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import ui.Receipt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "public class CommandExport extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * CommandExport helps to export the wallet data as csv with useful headers."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param userInput String is the user entered input"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    public CommandExport(String userInput) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        this.commandType \u003d CommandType.EXPORT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        this.description \u003d \"Exports txt into CSV\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                            + \"FORMAT : export \\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        String userMessageForEnteringExtraFields \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        if (this.isThereExtraInputByUser(this.userInput)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            userMessageForEnteringExtraFields \u003d \"Incorrect Command but DUKE$$$ understands\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                    + \" you would want to export Wallet to csv !\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            File csv \u003d new File(\"data.csv\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            FileWriter outputFile \u003d new FileWriter(csv);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            CSVWriter writer \u003d new CSVWriter(outputFile);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            String[] header \u003d {\"ID\", \"Tag\", \"Amount\", \"Date\"};"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            writer.writeNext(header);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            storageManager.saveAllData();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            int i \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            for (Receipt receipt :storageManager.getWallet().getReceipts()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                String eachRowOfData \u003d (i + 1) + \". \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                        + receipt.getTags().toString().replaceAll(\" \", \"\") + \" \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                        + receipt.getCashSpent() + \" \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                        + receipt.getDate();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                convertReceiptsToCsv(eachRowOfData,writer);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            this.infoCapsule.setCodeCli();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            this.infoCapsule.setOutputStr(\"data.csv has been created ! Please check the project folder \\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                    + userMessageForEnteringExtraFields);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            this.infoCapsule.setOutputStr(e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * convertReceiptsToCSV is the method used to change receipts into CSV."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param dataTobeAdded String is the row of data which is to be changed to csv"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param writer CSVWriter is the library used to write to CSV"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @throws DukeException Method throws Duke Exception if unable to write to csv"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private void convertReceiptsToCsv(String dataTobeAdded, CSVWriter writer) throws DukeException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            String[] entries \u003d dataTobeAdded.split(\" \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            writer.writeNext(entries);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            throw new DukeException(\"Unable to write to csv\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * isThereExtraInputByUser is the method used to check if the user has entered misleading entries."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param userInput String is the user input entered in the GUI"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @return false is returned if user enters the correct command for exporting into csv"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private boolean isThereExtraInputByUser(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        String additionalEntriesOfUser \u003d Parser.parseForPrimaryInput(this.commandType, userInput);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        return !additionalEntriesOfUser.isEmpty();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "priyan-coder": 84
    }
  },
  {
    "path": "src/main/java/executor/command/CommandFind.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class CommandFind extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    protected String userInput;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Constructor for CommandFind subCommand Class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param userInput The User Input to be translated into a Command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public CommandFind(String userInput) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        this.description \u003d \"Parses input and loops through list of entries and checks if input matches any of them \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                + \"FORMAT :  \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.commandType \u003d CommandType.FIND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        StringBuilder outputStr \u003d new StringBuilder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            String queryInput \u003d Parser.removeStr(\"find\", this.userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            queryInput \u003d queryInput.toLowerCase();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            outputStr.append(\"Duke: Here are the Tasks matching your query \u0027\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    .append(queryInput)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    .append(\"\u0027.\\n\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    .append(storageManager.getTasksByName(queryInput).getPrintableTasks());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AjeyAshok": 2,
      "Mudaafi": 34,
      "Araavinds": 1
    }
  },
  {
    "path": "src/main/java/executor/command/CommandGetSpendingByDay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import ui.UiCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "public class CommandGetSpendingByDay extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    protected String userInput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     * Constructor to show what the class is able to do."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     * @param userInput is the input from the user"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    public CommandGetSpendingByDay(String userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        this.commandType \u003d CommandType.EXPENDEDDAY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        this.description \u003d \"Provides the user the total expenditure for the day stated. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                + \"FORMAT: expendedday \u003cday\u003e\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        String currDate \u003d LocalDate.now().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Double totalMoney;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            totalMoney \u003d storageManager.getReceiptsByDate(currDate).getNettCashSpent();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        this.infoCapsule.setUiCode(UiCode.CLI);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setOutputStr(\"The total amount of money spent today\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + \"(\" + currDate + \") \" + \"is $\" + totalMoney);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AjeyAshok": 26,
      "Mudaafi": 13
    }
  },
  {
    "path": "src/main/java/executor/command/CommandGetSpendingByMonth.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import ui.UiCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "public class CommandGetSpendingByMonth extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    protected String userInput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     * Constructor to explain about the command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     * @param userInput is the input from the user"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    public CommandGetSpendingByMonth(String userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        this.commandType \u003d CommandType.EXPENDEDMONTH;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        this.description \u003d \"Provides the user the total expenditure for the month stated. \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                + \"FORMAT: expendedmonth \u003cmonth\u003e /year \u003cyear\u003e\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            String monthStr \u003d (Parser.parseForPrimaryInput(CommandType.EXPENDEDMONTH, userInput)).toLowerCase();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            if (monthStr.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.infoCapsule.setOutputStr(\"No month input detected. FORMAT : expendedmonth \u003cmonth\u003e /year \u003cyear\u003e\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            int month \u003d monthStrToInt(monthStr);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            if (month \u003d\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.infoCapsule.setOutputStr(\"Wrong month input. Check Spelling\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            String yearStr \u003d Parser.parseForFlag(\"year\", userInput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            if (yearStr.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.infoCapsule.setOutputStr(\"No year input detected. FORMAT : expendedmonth \u003cmonth\u003e /year \u003cyear\u003e\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            if (yearStr.length() !\u003d 4) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                this.infoCapsule.setOutputStr(\"Year input contains lesser/extra number of variables. \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                        + \"\\nFORMAT : expendedmonth \u003cmonth\u003e /year \u003cyear\u003e\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                int year \u003d Integer.parseInt(yearStr);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                if (year \u003e Year.now().getValue()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    this.infoCapsule.setOutputStr(\"Future year entered is invalid!\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                if (year \u003c 1800) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    this.infoCapsule.setOutputStr(\"Year is too far back into the past\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                Double totalMoney \u003d storageManager.getReceiptsByMonthDate(month, year).getTotalExpenses();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                this.infoCapsule.setUiCode(UiCode.CLI);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.infoCapsule.setOutputStr(\"The total amount of money spent in \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                        + monthStr"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                        + \" \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                        + year"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                        + \" : $\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                        + totalMoney"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                        + \"\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.infoCapsule.setOutputStr(\"Year input is either a double or contains String values.\\n \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                        + \"FORMAT : expendedmonth \u003cmonth\u003e /year \u003cyear\u003e\\n\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(\"Wrong format! FORMAT : expendedmonth \u003cmonth\u003e /year \u003cyear\u003e\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     * Returns the corresponding month value."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     * @param month is the name of month from the userInput"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     * @return the value of month, eg: march --\u003e 3."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public int monthStrToInt(String month) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        switch (month) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        case \"january\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        case \"february\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            return 2;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        case \"march\":"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            return 3;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        case \"april\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            return 4;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        case \"may\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            return 5;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        case \"june\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            return 6;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        case \"july\":"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            return 7;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        case \"august\":"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            return 8;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        case \"september\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            return 9;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        case \"october\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            return 10;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        case \"november\":"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            return 11;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        case \"december\":"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            return 12;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AjeyAshok": 93,
      "Mudaafi": 33
    }
  },
  {
    "path": "src/main/java/executor/command/CommandGetSpendingByWeek.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import ui.ReceiptTracker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import ui.UiCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "public class CommandGetSpendingByWeek extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    protected  String userInput;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     * Constructor to explain about the command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     * @param userInput is the user\u0027s input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    public CommandGetSpendingByWeek(String userInput) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        this.commandType \u003d CommandType.EXPENDEDWEEK;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        this.description \u003d \"Provides the user the total expenditure for the current week. \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                + \"FORMAT : expendedweek\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        String checker \u003d Parser.parseForPrimaryInput(CommandType.HELP, userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        if (!checker.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            this.infoCapsule.setCodeToast();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            this.infoCapsule.setOutputStr(\"Extra variables added. FORMAT : expendedweek\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        String day \u003d LocalDate.now().getDayOfWeek().toString().toLowerCase();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        String dayDate \u003d LocalDate.now().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        ArrayList\u003cString\u003e dateList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        Double total \u003d 0.0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        int dayInt \u003d dayStrToInt(day);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        if (dayInt \u003e 0 \u0026\u0026 dayInt \u003c 8) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            LocalDate dateTracker \u003d LocalDate.parse(dayDate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            for (int i \u003d 0; i \u003c dayInt; i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                dateList.add(dateTracker.minusDays(i).toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        for (String a : dateList) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                total +\u003d storageManager.getReceiptsByDate(a).getTotalExpenses();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                this.infoCapsule.setOutputStr(e.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        int remainingDaysOfWeek \u003d 7 - dayInt;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        String out \u003d total.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        this.infoCapsule.setUiCode(UiCode.CLI);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        this.infoCapsule.setOutputStr(\"The total amount spent this week is $\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                + out"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                + \" and there is/are \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                + remainingDaysOfWeek"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                + \"day(s) to end of week\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     * Function to get the number of day in the week according to the day."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     * @param day is the string input of the current day of the week"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     * @return is the number value of the day of the week"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    public static int dayStrToInt(String day) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        switch (day) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        case \"monday\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        case \"tuesday\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            return 2;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        case \"wednesday\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            return 3;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        case \"thursday\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            return 4;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        case \"friday\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            return 5;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        case \"saturday\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            return 6;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        case \"sunday\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            return 7;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AjeyAshok": 90,
      "Mudaafi": 1
    }
  },
  {
    "path": "src/main/java/executor/command/CommandGetSpendingByYear.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import ui.UiCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "public class CommandGetSpendingByYear extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     * Constructor to explain about the method."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     * @param userInput userInput from CLI"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    public CommandGetSpendingByYear(String userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        this.commandType \u003d CommandType.EXPENDEDYEAR;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        this.description \u003d \"Provides the user the total expenditure for the year stated. \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + \"FORMAT : expendedyear \u003cyear\u003e\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        String yearStr \u003d Parser.parseForPrimaryInput(CommandType.EXPENDEDYEAR, userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            if (yearStr.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.infoCapsule.setOutputStr(\"No year input detected.\\nFORMAT : expendedyear 2019\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            if (yearStr.length() !\u003d 4) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                this.infoCapsule.setOutputStr(\"Year input contains lesser/extra number of variables.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                        + \" FORMAT : expendedyear 2019\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            int year \u003d Integer.parseInt(yearStr);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            if (year \u003e Year.now().getValue()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.infoCapsule.setOutputStr(\"Future year entered is invalid!\" + \"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            if (year \u003c 1800) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.infoCapsule.setOutputStr(\"Year is too far back into the past\" + \"\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            Double totalMoney \u003d storageManager.getReceiptsByYear(year).getTotalExpenses();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            this.infoCapsule.setUiCode(UiCode.CLI);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(\"The total amount of money spent in \" + year + \" : $\" + totalMoney + \"\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(\"Year input is either a double or contains String values.\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    + \"FORMAT : expendedyear 2019\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AjeyAshok": 46,
      "Mudaafi": 17
    }
  },
  {
    "path": "src/main/java/executor/command/CommandHelp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.Executor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "public class CommandHelp extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     * Constructor to provide the user with the details about the commands available."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public CommandHelp(String userInput) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        this.description \u003d \"Provides the user with all the available commands and descriptions.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                + \"FORMAT : help\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.commandType \u003d CommandType.HELP;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        StringBuilder outputStr \u003d new StringBuilder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        String specificCommand \u003d Parser.parseForPrimaryInput(CommandType.HELP, userInput).toUpperCase();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        /* Helps to check if the extra input for a specific command is correct and if that input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "           exists in the list of available commands.*/"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        if (!specificCommand.isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            for (String b : CommandType.getNames()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                if (b.equals(specificCommand)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                    StringBuilder outputsSpecificCommandDesc \u003d getDescriptionOfSpecificCommand(b);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                    this.infoCapsule.setCodeCli();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                    this.infoCapsule.setOutputStr(outputsSpecificCommandDesc.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(\"Command invalid. Enter \u0027help\u0027 to see all the available commands.\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        ArrayList\u003cString\u003e listToStoreAllCommands \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        for (String s : CommandType.getNames()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            if (!s.equals(\"ERROR\") \u0026\u0026 !s.equals(\"TASK\") \u0026\u0026 !s.equals(\"BLANK\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                getDescriptionOfAllCommands(s, listToStoreAllCommands);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                Collections.sort(listToStoreAllCommands, String.CASE_INSENSITIVE_ORDER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        for (String a : listToStoreAllCommands) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            outputStr.append(a).append(\"\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setCodeCli();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setOutputStr(outputStr.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        for (String b : listToStoreAllCommands) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            System.out.println(b);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    private StringBuilder getDescriptionOfSpecificCommand(String b) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        StringBuilder out \u003d new StringBuilder();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        CommandType specificCommandType \u003d CommandType.valueOf(b);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        Command specific \u003d Executor.createCommand(specificCommandType, \"null\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        String specificDesc \u003d specific.getDescription();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        String specificOut \u003d b.toUpperCase() + \" - \" + specificDesc + \"\\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        out.append(specificOut).append(\"\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        return out;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    private void getDescriptionOfAllCommands(String s, ArrayList\u003cString\u003e newOut) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        CommandType commandType \u003d CommandType.valueOf(s);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        Command c \u003d Executor.createCommand(commandType, \"null\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        String commandDesc \u003d c.getDescription();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        String temp \u003d s.toUpperCase() + \" - \" + commandDesc + \"\\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        newOut.add(temp);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AjeyAshok": 65,
      "Mudaafi": 13
    }
  },
  {
    "path": "src/main/java/executor/command/CommandHomeDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.UiCode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.gui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class CommandHomeDisplay extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Constructor for CommandHomeDisplay subCommand Class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param userInput The user input from the CLI"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public CommandHomeDisplay(String userInput) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.description \u003d \"Displays the Home Page\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.commandType \u003d CommandType.HOME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setUiCode(UiCode.DISPLAY_HOME);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 23
    }
  },
  {
    "path": "src/main/java/executor/command/CommandList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class CommandList extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * Constructor for CommandList subCommand Class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * @param userInput The user input from the CLI"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public CommandList(String userInput) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        this.description \u003d \"Lists all tasks and receipts added by user\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + \"FORMAT : LIST \\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.commandType \u003d CommandType.LIST;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String outputStr \u003d \"You have (\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    + storageManager.getTaskListSize()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    + \") Tasks in your list!\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        outputStr +\u003d storageManager.getPrintableTasks();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        outputStr +\u003d \"\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        outputStr +\u003d \"You have (\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + storageManager.getReceiptTrackerSize()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + \") receipts!\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        outputStr +\u003d storageManager.getPrintableReceipts();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setCodeCli();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setOutputStr(outputStr);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AjeyAshok": 1,
      "Mudaafi": 27,
      "Araavinds": 5
    }
  },
  {
    "path": "src/main/java/executor/command/CommandMajorExpense.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "public class CommandMajorExpense extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    private String amount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * Constructor for CommandMajorExpense subCommand Class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * @param userInput The user input from the CLI"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    public CommandMajorExpense(String userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.description \u003d \"Lists all major expense receipts higher than user cash input \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                + \"FORMAT : majorexpense \u003cpositive integer cash input\u003e\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                + \"Lists all major expenses above/equal to $100\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                + \"FORMAT : majorexpense\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.commandType \u003d CommandType.MAJOREXPENSE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.amount \u003d Parser.parseForPrimaryInput(this.commandType, userInput);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String outputStr \u003d \"These are your receipts above/equal to\" + \" \" + \"$\" + amount + \"\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String output \u003d \"These are your receipts above/equal to $\" + 100 + \"\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        if (amount.startsWith(\"-\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            this.infoCapsule.setOutputStr(\"Input integer must be positive\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        if (amount.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                output +\u003d storageManager.getMajorReceipt();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                this.infoCapsule.setOutputStr(e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            this.infoCapsule.setCodeCli();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            this.infoCapsule.setOutputStr(output);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                outputStr +\u003d storageManager.getMajorExpense(amount);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                this.infoCapsule.setOutputStr(e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            this.infoCapsule.setCodeCli();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            this.infoCapsule.setOutputStr(outputStr);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Araavinds": 60
    }
  },
  {
    "path": "src/main/java/executor/command/CommandMarkDone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class CommandMarkDone extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * Constructor for CommandMarkDone subCommand Class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * @param userInput The user input from the CLI"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public CommandMarkDone(String userInput) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        this.description \u003d \"Marks a certain task as done \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                + \"FORMAT :  \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.commandType \u003d CommandType.DONE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String outputStr;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            int index \u003d Integer.parseInt(Parser.removeStr(\"done\", this.userInput)) - 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            storageManager.markTaskDoneByIndex(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            storageManager.loadQueuedTasksByIndex(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            outputStr \u003d genMarkDoneReply(index, storageManager);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(\"Invalid \u0027done\u0027 statement. Please indicate the index of\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    + \" the task you wish to mark done.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setCodeToast();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setOutputStr(outputStr);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Generates the standard duke reply to inform user that the Task is marked done."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param index The index of the Task in the TaskList"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param storageManager StorageManager containing the TaskList with all tasks"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return Standard duke reply for user"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private String genMarkDoneReply(int index, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return \"Alrighty, I\u0027ve marked task \u0027\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + (index + 1)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + \") \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + storageManager.getTaskNameByIndex(index)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + \"\u0027 as done!\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AjeyAshok": 2,
      "Mudaafi": 50,
      "Araavinds": 5
    }
  },
  {
    "path": "src/main/java/executor/command/CommandMul.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "public class CommandMul extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    private double entryOne;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    private double entryTwo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * Constructor for CommandMul subCommand Class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * @param userInput String is the user input from the CLI"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    public CommandMul(String userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.description \u003d \"Multiplies two double values. Format: mul \u003cnum1\u003e / \u003cnum2\u003e\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.commandType \u003d CommandType.MUL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String stringOne \u003d Parser.parseForPrimaryInput(this.commandType, userInput);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String stringTwo \u003d Parser.parseForFlag(\"\", userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            this.entryOne \u003d Double.parseDouble(stringOne);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(\"Invalid input please enter in this format: mul \u003cnum1\u003e / \u003cnum2\u003e\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            this.entryTwo \u003d Double.parseDouble(stringTwo);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(\"Invalid input please enter the second number. Format: mul \u003cnum1\u003e / \u003cnum2\u003e\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(\"Enter forward slash and second number. Format: mul \u003cnum1\u003e / \u003cnum2\u003e\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        double result \u003d entryOne * entryTwo;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setCodeToast();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        this.infoCapsule.setOutputStr(stringOne"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + \" * \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                + stringTwo"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                + \"\u003d\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + result"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + \"\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 15,
      "Araavinds": 38,
      "priyan-coder": 3
    }
  },
  {
    "path": "src/main/java/executor/command/CommandNewTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class CommandNewTask extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    protected String userInput;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    protected TaskType taskType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Constructor for the CommandNewTask subCommand Class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param userInput The user input from the CLI."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public CommandNewTask(String userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.commandType \u003d CommandType.TASK;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.taskType \u003d extractTaskType();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        this.description \u003d \"Adds user entry to the list \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                + \"FORMAT :  \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String outputStr;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            checkForwardSlash(this.userInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            storageManager.createTask(this.taskType, this.userInput);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            outputStr \u003d \"I\u0027ve added \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    + storageManager.getPrintableLatestTask()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    + \" to your private list(\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    + storageManager.getTaskListSize()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    + \").\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            ;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setCodeToast();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setOutputStr(outputStr);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     * Throws an exception when there is no \u0027/\u0027 in the user input."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     * @param input this is the user\u0027s input"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     * @throws DukeException this shows the error message and gives the format to follow"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void checkForwardSlash(String input) throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        if (this.taskType.equals(TaskType.FDURATION)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            if (!Parser.containsForwardSlash(input)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                throw new DukeException(\"Check your format!!! Correct format is: fduration \u003cdescription\u003e / \u003ctime\u003e\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private TaskType extractTaskType() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        CommandType specificCommandType \u003d Parser.parseForCommandType(this.userInput);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (specificCommandType \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return TaskType.BLANK;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return TaskType.valueOf(specificCommandType.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AjeyAshok": 17,
      "Mudaafi": 50
    }
  },
  {
    "path": "src/main/java/executor/command/CommandPercent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "public class CommandPercent extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    private String tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * Constructor for CommandPercent subCommand Class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * @param userInput String is the user input from the CLI"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    public CommandPercent(String userInput) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.description \u003d \"Gives the percentage of wallet expenses spent on a tag \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                + \"FORMAT : percent \u003ctag\u003e\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.commandType \u003d CommandType.PERCENT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.tag \u003d Parser.parseForPrimaryInput(this.commandType, userInput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        StringBuilder outputStr \u003d new StringBuilder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        if (this.tag \u003d\u003d null || this.tag.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            this.infoCapsule.setOutputStr(\"Tag input is missing. FORMAT : percent \u003ctag\u003e\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        if (storageManager.getWallet().getReceipts().getPrintableReceipts().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            this.infoCapsule.setOutputStr(\"No receipts found in the list\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            Double totalTag \u003d storageManager.getReceiptsByTag(this.tag).getNettCashSpent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            Double totalSpent \u003d storageManager.getWalletExpenses();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            outputStr.append((totalTag / totalSpent) * 100)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                     .append(\"%\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                     .append(\" \")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                     .append(\"of your wallet expenses is spent on\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                     .append(\" \")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                     .append(this.tag)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                     .append(\"\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            this.infoCapsule.setOutputStr(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.infoCapsule.setCodeCli();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.infoCapsule.setOutputStr(outputStr.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 1,
      "Araavinds": 53
    }
  },
  {
    "path": "src/main/java/executor/command/CommandQueue.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class CommandQueue extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    protected String userInput;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Constructor for CommandQueue subCommand Class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param userInput The user input from the CLI"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public CommandQueue(String userInput) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.commandType \u003d CommandType.QUEUE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        this.description \u003d \"Queues user-inputted task in the list. \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + \"FORMAT : queue \u003ctaskindex\u003e /task \u003ctaskdescription\u003e\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        int mainTaskIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            mainTaskIndex \u003d Integer.parseInt(Parser.parseForPrimaryInput(this.commandType, this.userInput)) - 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(\"Please enter a valid task index. Use LIST to show all tasks.\\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String taskString \u003d Parser.removeStr(this.commandType.toString(), this.userInput).trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        taskString \u003d Parser.removeStr(String.valueOf(mainTaskIndex + 1), taskString).trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        taskString \u003d Parser.removeStr(\"/task\", taskString).trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (taskString.equals(\"\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(\"New Task to be queued was not specified.\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        CommandType newTaskCommandType \u003d Parser.parseForCommandType(taskString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (newTaskCommandType \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(\"Unable to decipher task to be queued.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (newTaskCommandType.getCommandClass() !\u003d CommandNewTask.class) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(\"No Task detected after \u0027Queue\u0027.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String outputStr;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            storageManager.initializeQueueByIndex(mainTaskIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            storageManager.queueTaskByIndex(mainTaskIndex, newTaskCommandType, taskString);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            outputStr \u003d \"New Task Queued after \" + storageManager.getTaskNameByIndex(mainTaskIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(e.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setCodeToast();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setOutputStr(outputStr);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AjeyAshok": 1,
      "Mudaafi": 63
    }
  },
  {
    "path": "src/main/java/executor/command/CommandReminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "public class CommandReminder extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private LocalDate currentDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * Constructor for CommandReminder subCommand Class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * @param userInput The user input from the CLI"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public CommandReminder(String userInput) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.commandType \u003d CommandType.REMINDER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        this.currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.description \u003d \"Loops through list and checks if current \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + \"date matches date linked with task and prints it \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                + \"FORMAT :  reminder \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String outputStr;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            outputStr \u003d storageManager.getTasksByDate(LocalDate.now()).getPrintableTasks();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setCodeCli();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setOutputStr(outputStr);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 19,
      "priyan-coder": 14,
      "Araavinds": 5
    }
  },
  {
    "path": "src/main/java/executor/command/CommandSchedule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "public class CommandSchedule extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * Constructor for CommandSchedule subCommand Class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param userInput String the user input from the CLI"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    public CommandSchedule(String userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.commandType \u003d CommandType.VIEWSCHEDULE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        this.description \u003d \"Prints the schedule for the input date \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                + \"FORMAT :  \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String dateInput \u003d Parser.removeStr(this.commandType.toString(), this.userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String outputStr;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            outputStr \u003d printSchedule(dateInput, storageManager);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setCodeCli();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setOutputStr(outputStr);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private String printSchedule(String dateInput, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        StringBuilder outputStr \u003d new StringBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            LocalDate userDate \u003d LocalDate.parse(dateInput, formatter);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            outputStr.append(\"Here is your schedule for the following date: \\n\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    .append(dateInput)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    .append(\":\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            for (int index \u003d 0; index \u003c storageManager.getTaskListSize(); ++index) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                outputStr.append(storageManager.getTasksByDate(userDate).getPrintableTasks()).append(\"\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(\"Please kindly type help to see the format for using Command Schedule\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return outputStr.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AjeyAshok": 2,
      "Mudaafi": 29,
      "Araavinds": 19,
      "priyan-coder": 7
    }
  },
  {
    "path": "src/main/java/executor/command/CommandSub.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "public class CommandSub extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    private double entryOne;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    private double entryTwo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * Constructor for CommandSub subCommand Class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * @param userInput String is the user input from the CLI"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    public CommandSub(String userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.description \u003d \"Subtracts two double values. Format: sub \u003cnum1\u003e / \u003cnum2\u003e\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.commandType \u003d CommandType.SUB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String stringOne \u003d Parser.parseForPrimaryInput(this.commandType, userInput);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String stringTwo \u003d Parser.parseForFlag(\"\", userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            this.entryOne \u003d Double.parseDouble(stringOne);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(\"Invalid input please enter in this format: sub \u003cnum1\u003e / \u003cnum2\u003e\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            this.entryTwo \u003d Double.parseDouble(stringTwo);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(\"Invalid input please enter the second number. Format: sub \u003cnum1\u003e / \u003cnum2\u003e\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(\"Enter forward slash and second number. Format: sub \u003cnum1\u003e / \u003cnum2\u003e\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        double result \u003d entryOne - entryTwo;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setCodeToast();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        this.infoCapsule.setOutputStr(stringOne"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + \" - \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                + stringTwo"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                + \"\u003d\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + result"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + \"\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 15,
      "Araavinds": 39,
      "priyan-coder": 3
    }
  },
  {
    "path": "src/main/java/executor/command/CommandTagList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "public class CommandTagList extends CommandList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    private String tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * Constructor for CommandTagList subCommand Class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * @param userInput The user input from the CLI"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    public CommandTagList(String userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        this.description \u003d \"Lists based on tag \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                + \"FORMAT : taglist \u003ctag\u003e\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.commandType \u003d CommandType.TAGLIST;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.tag \u003d Parser.parseForPrimaryInput(this.commandType, userInput);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        StringBuilder outputStr \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        if (this.tag \u003d\u003d null || this.tag.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            this.infoCapsule.setOutputStr(\"Tag input is missing. FORMAT : taglist \u003ctag\u003e\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        DecimalFormat decimalFormat \u003d new DecimalFormat(\"#0.00\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            outputStr.append(\"You spent a total of $\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                .append(decimalFormat.format(storageManager.getReceiptsByTag(this.tag).getNettCashSpent()))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                .append(\" \")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                .append(\"on\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                .append(\" \")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                .append(this.tag)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                .append(storageManager.getReceiptsByTag(this.tag).getPrintableReceipts())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                .append(\"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(e.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setCodeCli();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setOutputStr(outputStr.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AjeyAshok": 1,
      "Mudaafi": 21,
      "Araavinds": 32
    }
  },
  {
    "path": "src/main/java/executor/command/CommandTrackTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.UiCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class CommandTrackTag extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private String inputStr;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Constructor for CommandTrack Class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public CommandTrackTag(String userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.commandType \u003d CommandType.TRACK;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.inputStr \u003d Parser.parseForPrimaryInput(this.commandType, userInput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.description \u003d \"Track how much you spend based on a tag! \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + \"FORMAT : TRACK \u003ctag\u003e\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String[] tagsToTrack \u003d this.inputStr.split(\" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (tagsToTrack[0].equals(\"\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setUiCode(UiCode.ERROR);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(\"Please enter a tag to track\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        for (String tag : tagsToTrack) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                storageManager.trackTag(tag);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.infoCapsule.setUiCode(UiCode.ERROR);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.infoCapsule.setOutputStr(e.getMessage()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                        + \"\\nIf you wish to untrack this tag, try UNTRACK \u003ctag\u003e.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setUiCode(UiCode.TOAST);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setOutputStr(\"Tracking tags: \" + this.inputStr);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 46
    }
  },
  {
    "path": "src/main/java/executor/command/CommandType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    TASK(CommandNewTask.class),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    BYE(CommandBye.class),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    LIST(CommandList.class),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    BLANK(CommandBlank.class),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    FIND(CommandFind.class),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    DELETE(CommandDelete.class),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    DELETERECEIPT(CommandDeleteReceipt.class),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    DONE(CommandMarkDone.class),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    MAJOREXPENSE(CommandMajorExpense.class),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    QUEUE(CommandQueue.class),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    VIEWSCHEDULE(CommandSchedule.class),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    REMINDER(CommandReminder.class),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    BALANCE(CommandDisplayBalance.class),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    PERCENT(CommandPercent.class),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    IN(CommandAddIncomeReceipt.class),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    OUT(CommandAddSpendingReceipt.class),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    SETBALANCE(CommandUpdateBalance.class),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    BUDGET(CommandBudget.class),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    EXPORT(CommandExport.class),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    EXPENSES(CommandDisplayExpenditure.class),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    HELP(CommandHelp.class),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    DEADLINE(CommandNewTask.class),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    EVENT(CommandNewTask.class),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    TODO(CommandNewTask.class),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    RECUR(CommandNewTask.class),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    FDURATION(CommandNewTask.class),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    TAGLIST(CommandTagList.class),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    EXPENDEDDAY(CommandGetSpendingByDay.class),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    EXPENDEDWEEK(CommandGetSpendingByWeek.class),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    EXPENDEDMONTH(CommandGetSpendingByMonth.class),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    EXPENDEDYEAR(CommandGetSpendingByYear.class),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    CONVERT(CommandConvert.class),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    DATELIST(CommandDateList.class),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    ERROR(CommandError.class),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    WEATHER(CommandWeather.class),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    HOME(CommandHomeDisplay.class),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    CLI(CommandCliDisplay.class),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    ADD(CommandAdd.class),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    SUB(CommandSub.class),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    DIV(CommandDiv.class),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    MUL(CommandMul.class),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    TRACK(CommandTrackTag.class),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    UNTRACK(CommandUntrackTag.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private final Class commandClass;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Constructor for \u0027CommandType\u0027 enum."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private CommandType(Class commandClass) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.commandClass \u003d commandClass;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Class getCommandClass() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.commandClass;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Method to get all the types of this enum."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return A String Array that contains all the types of this enum"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public static String[] getNames() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        CommandType[] holder \u003d CommandType.values();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String[] returnArray \u003d new String[holder.length];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        for (int index \u003d 0; index \u003c holder.length; ++index) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            returnArray[index] \u003d String.valueOf(holder[index]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return returnArray;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AjeyAshok": 4,
      "Mudaafi": 56,
      "sallysohyun": 1,
      "Araavinds": 10,
      "priyan-coder": 3
    }
  },
  {
    "path": "src/main/java/executor/command/CommandUntrackTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.UiCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class CommandUntrackTag extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private String inputStr;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Constructor for CommandUntrack Class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public CommandUntrackTag(String userInput) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.commandType \u003d CommandType.UNTRACK;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.inputStr \u003d Parser.parseForPrimaryInput(this.commandType, userInput);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.description \u003d \"Untrack a particular tag. \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + \"FORMAT : UNTRACK \u003ctag\u003e\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String[] tagsToTrack \u003d this.inputStr.split(\" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (tagsToTrack[0].equals(\"\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setUiCode(UiCode.ERROR);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(\"Please enter a tag to untrack\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        for (String tag : tagsToTrack) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                storageManager.untrackTag(tag);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.infoCapsule.setUiCode(UiCode.ERROR);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.infoCapsule.setOutputStr(e.getMessage()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                        + \"\\nIf you wish to track this tag, try TRACK \u003ctag\u003e.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setUiCode(UiCode.TOAST);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setOutputStr(\"Untracked tags: \" + this.inputStr);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 44
    }
  },
  {
    "path": "src/main/java/executor/command/CommandUpdateBalance.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "public class CommandUpdateBalance extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private Double newBalance;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * Constructor for the CommandUpdateBalance class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param userInput The user Input from the CLI"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    public CommandUpdateBalance(String userInput) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.commandType \u003d CommandType.SETBALANCE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        this.description \u003d \"Updates current balance to new balance in the wallet and can only be set once \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                + \"FORMAT : setbalance $\u003camount\u003e\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        if (this.hasBeenSetAlready()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            this.infoCapsule.setCodeToast();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            this.infoCapsule.setOutputStr(\"Setbalance can be only set once !!\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.newBalance \u003d extractAmount();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.infoCapsule.setCodeError();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.infoCapsule.setOutputStr(e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            DecimalFormat decimalFormat \u003d new DecimalFormat(\"#0.00\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            storageManager.setWalletBalance(this.newBalance);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setCodeToast();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.infoCapsule.setOutputStr(\"Balance updated to: $\" + decimalFormat.format(this.newBalance) + \"\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            getExecutedCommands().add(this.commandType.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private Double extractAmount() throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String incomeStr \u003d Parser.parseForPrimaryInput(this.commandType, this.userInput);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            incomeStr \u003d incomeStr.trim().replace(\"$\", \"\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            Double amount \u003d Double.parseDouble(incomeStr);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            if (amount \u003c 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                throw new Exception();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            return amount;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(\"Please kindly follow the format : setbalance $\u003camount\u003e \\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            + \"Please enter an amount greater than or equal to zero in your wallet !\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private boolean hasBeenSetAlready() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        return getExecutedCommands().contains(this.commandType.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 26,
      "priyan-coder": 38
    }
  },
  {
    "path": "src/main/java/executor/command/CommandWeather.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "package executor.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import com.google.gson.JsonArray;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import com.google.gson.JsonParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "public class CommandWeather extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private LinkedHashMap\u003cString, LinkedHashMap\u003cString, String\u003e\u003e fullWeatherData;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private Set\u003cString\u003e periodsPossible \u003d new HashSet\u003c\u003e(Arrays.asList(\"now\", \"later\", \"tomorrow\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * CommandWeather displays weather information based on user request."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param userInput String is the user entered Input from CLI"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    public CommandWeather(String userInput) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        this.commandType \u003d CommandType.WEATHER;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        this.description \u003d \"Command that displays weather for now, tomorrow or later \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                + \"FORMAT : weather /until \u003cperiod\u003e\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void execute(StorageManager storageManager) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String outputStr;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        setFullWeatherData(storeWeatherDataFromJson());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        outputStr \u003d getPrintableWeatherDataOutput();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setCodeCli();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.infoCapsule.setOutputStr(outputStr);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * getWhichWeatherDataUserWants parses to see until when user wants weather forecast."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param userInput String is the user entered Input from CLI."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @return this function returns a String based on user\u0027s choice "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private String getWhichWeatherDataUserWants(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        String period \u003d Parser.parseForFlag(\"until\", userInput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        if (period !\u003d null \u0026\u0026 getPeriodsPossible().contains(period)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            period \u003d period.toLowerCase();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            return period;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            String outputStr \u003d getErrorMessage() + \"\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    + \"However we believe you would want to know the weather forecast for today.\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(outputStr);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * getLengthOfHashMapToPrint decides until which point are we to report weather."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param status String is the time until user requests for weather"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @return function returns the length of HashMap we need to print"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private int getLengthOfHashMapToPrint(String status) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        switch (status) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        case \"tomorrow\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            return 2;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        case \"later\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            return this.fullWeatherData.size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        case \"now\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * printWeatherDataOutput loops through the HashMap of HashMap to get weather data."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return String containing the Weather Data"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private String getPrintableWeatherDataOutput() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        StringBuilder outputStr \u003d new StringBuilder();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        int size;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            size \u003d getLengthOfHashMapToPrint(getWhichWeatherDataUserWants(this.userInput));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            outputStr.append(e.getMessage());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            size \u003d getLengthOfHashMapToPrint(\"now\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        if (this.fullWeatherData !\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            outputStr.append(\"Duke$$$ has predicted the following weather forecast :\\n\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            for (Map.Entry\u003cString, LinkedHashMap\u003cString, String\u003e\u003e weather : this.fullWeatherData.entrySet()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                String weatherKey \u003d weather.getKey();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                if (Integer.parseInt(weatherKey) \u003c size) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                    for (Map.Entry\u003cString, String\u003e weatherEntry : weather.getValue().entrySet()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                        String field \u003d weatherEntry.getKey();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                        String value \u003d weatherEntry.getValue();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                        outputStr.append(field"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                                + \" : \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                                + value"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                                + \"\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                    outputStr.append(\"\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            outputStr.append(\"Weather Data not available \\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                    + \"1. Please ensure that you have active Internet access \\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                    + \"2. Please also ensure that you follow correct format for the user input \\n\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return outputStr.toString();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * consultWeatherApi fetches data from the api in json."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @return a String of the json data is returned"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private String consultWeatherApi() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        String link \u003d \"https://www.metaweather.com/api/location/1062617/\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        URL url \u003d new URL(link);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        BufferedReader reader \u003d new BufferedReader(new InputStreamReader(url.openStream()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        String completeJson \u003d \"\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        while (null !\u003d (line \u003d reader.readLine())) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            completeJson +\u003d line;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        return completeJson;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * storeWeatherDataFromJson loops through the string json and gets needed data."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @return a map of maps is returned containing the weather forecast we need by date"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private LinkedHashMap\u003cString, LinkedHashMap\u003cString, String\u003e\u003e storeWeatherDataFromJson() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String json;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            json \u003d consultWeatherApi();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            json \u003d null;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        LinkedHashMap\u003cString, LinkedHashMap\u003cString, String\u003e\u003e weatherData \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        if (json !\u003d null) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            JsonObject jsonObject \u003d new JsonParser().parse(json).getAsJsonObject();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            JsonArray arr \u003d jsonObject.getAsJsonArray(\"consolidated_weather\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            for (int i \u003d 0; i \u003c arr.size(); i++) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                String weatherStateName \u003d arr.get(i).getAsJsonObject().get(\"weather_state_name\").getAsString();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                String minTemp \u003d arr.get(i).getAsJsonObject().get(\"min_temp\").getAsString();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                String maxTemp \u003d arr.get(i).getAsJsonObject().get(\"max_temp\").getAsString();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                String theTemp \u003d arr.get(i).getAsJsonObject().get(\"the_temp\").getAsString();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                String applicableDate \u003d arr.get(i).getAsJsonObject().get(\"applicable_date\").getAsString();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                LinkedHashMap\u003cString, String\u003e innerMap \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                innerMap.put(\"Forecast Date\", applicableDate);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                innerMap.put(\"Minimum Temperature in Degrees Celsius\", minTemp);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                innerMap.put(\"Maximum Temperature in Degrees Celsius\", maxTemp);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                innerMap.put(\"Average Temperature in Degrees Celsius\", theTemp);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                innerMap.put(\"State Of Weather\", weatherStateName);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                weatherData.put(String.valueOf(i), innerMap);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            return weatherData;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private Set\u003cString\u003e getPeriodsPossible() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        return periodsPossible;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private void setFullWeatherData(LinkedHashMap\u003cString, LinkedHashMap\u003cString, String\u003e\u003e fullWeatherData) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        this.fullWeatherData \u003d fullWeatherData;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * getErrorMessage helps to retrieve the long message whenever required."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @return String form of the error message to be displayed is returned"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private String getErrorMessage() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        String errorMessage \u003d \"Please enter in either of the following format : \\n\""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                + \"1. weather /until now \\n\""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                + \"2. weather /until later \\n\""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                + \"3. weather /until tomorrow \\n\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        return errorMessage;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AjeyAshok": 2,
      "Mudaafi": 38,
      "priyan-coder": 146
    }
  },
  {
    "path": "src/main/java/executor/task/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    // Initialization"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    Deadline(String name) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.taskType \u003d TaskType.DEADLINE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.recordTaskDetails(name);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.parseDateTime();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private void parseDateTime() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (this.detailDesc \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (this.detailDesc.equals(\"by\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                LocalDateTime dateTime \u003d LocalDateTime.parse(this.taskDetails,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                        DateTimeFormatter.ofPattern(\"dd/MM/yy HHmm\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                LocalDate localDate \u003d dateTime.toLocalDate();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                LocalTime localTime \u003d dateTime.toLocalTime();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                this.setDate(localDate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                this.setTime(localTime);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                System.out.println(\"Date Interpreted: \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                        + getDate().format(dateFormatter)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                        + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                        + getTime().format(timeFormatter));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                this.setDate(LocalDate.now());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                this.setTime(LocalTime.now());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                System.out.println(\"Invalid Input. Unable to interpret Datetime (use: dd/MM/yy HHmm) \\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                        + \"So we have assigned this task to be deadline of today \\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    // -- Setters \u0026 Getters"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Getter for datetime."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return Datetime stored in this Deadline Object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 34,
      "priyan-coder": 20
    }
  },
  {
    "path": "src/main/java/executor/task/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    // Initialization"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    Event(String name) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskType \u003d TaskType.EVENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        this.recordTaskDetails(name);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 1,
      "-": 9
    }
  },
  {
    "path": "src/main/java/executor/task/FixedDuration.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class FixedDuration extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for the \u0027Task\u0027 Class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name Name of the task as inputted by the user"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public FixedDuration(String name) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskType \u003d TaskType.FDURATION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.recordTaskDetails(name);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.detailDesc \u003d \"needs\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/executor/task/Recurring.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "package executor.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "public class Recurring extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    private final TaskType taskType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    // Initialization"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    Recurring(String name) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.taskType \u003d TaskType.RECUR;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        this.detailDesc \u003d \"for\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        this.recordTaskDetails(name);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 1,
      "sallysohyun": 17
    }
  },
  {
    "path": "src/main/java/executor/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    protected String taskName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    protected String taskDetails;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    protected String detailDesc;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    protected TaskType taskType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    protected Boolean isDone \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList queuedTasks \u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    protected LocalTime time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for the \u0027Task\u0027 Class."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name Name of the task as inputted by the user"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String name) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.taskType \u003d TaskType.BLANK;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskName \u003d name.replace(this.taskType.name(), \"\").trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        this.date \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        this.time \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Get a \u0027tick\u0027 or \u0027cross\u0027 depending on .isDone"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A special string that represents a tick for true or a cross for false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"\\u2713\"; // / u2713"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"\\u2718\"; // / u2718"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets a Task object\u0027s .isDone property to true."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets a Task object\u0027s .isDone property to false."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markNotDone() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a String Describing the Task Object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Optimized for user\u0027s reading."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return String detailing the Task Object, taskName and taskDetails"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String genTaskDesc() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String generatedStr \u003d \"\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (this.taskName !\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            generatedStr \u003d this.taskName;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.detailDesc !\u003d null || this.taskDetails !\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            generatedStr +\u003d \" (\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            if (this.detailDesc !\u003d null \u0026\u0026 !this.detailDesc.isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                generatedStr +\u003d this.detailDesc + \": \";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            if (this.taskDetails !\u003d null \u0026\u0026 !this.taskDetails.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                generatedStr +\u003d this.taskDetails;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            generatedStr +\u003d \")\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return generatedStr;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public String genTypeAcronym() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.taskType.name().substring(0, 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Records the details from the user input into this Task object."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput The input taken from the user in CLI"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void recordTaskDetails(String userInput) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d Parser.removeStr(this.taskType.name(), userInput);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskName \u003d userInput;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        int indexBackslash \u003d userInput.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        //Check if \u0027/\u0027 exists"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (indexBackslash \u003e\u003d 0) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            int indexMsg \u003d userInput.indexOf(\u0027 \u0027, indexBackslash);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            if (indexMsg \u003e\u003d 0) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                this.detailDesc \u003d userInput.substring(indexBackslash + 1, indexMsg);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            String[] splitDetails \u003d userInput.split(\u0027/\u0027 + this.detailDesc, 2);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            this.taskName \u003d splitDetails[0].trim();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            if (splitDetails.length \u003e 1) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                this.taskDetails \u003d splitDetails[1].trim();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Initializes the Queue if it hasn\u0027t been initialized."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void initializeQueue() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (this.isQueuedTasks()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setQueuedTasks(new TaskList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    // -- Boolean Checkers"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if the current task has any queued tasks."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return false if queuedTask property is null, true otherwise"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isQueuedTasks() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.queuedTasks \u003d\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    // -- Setters \u0026 Getters"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Getter for taskName Property."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return String containing the taskName of the Task"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.taskName;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Setter for taskName Property."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param taskName taskName to be set"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setTaskName(String taskName) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Getter for detailDesc Property."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return String containing the detailDesc of the Task"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public String getDetailDesc() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return detailDesc;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Setter for the detailDesc Property."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param detailDesc detailDesc to be set"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setDetailDesc(String detailDesc) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.detailDesc \u003d detailDesc;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Getter for the taskDetails Property."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return String containing the taskDetails of the Task"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public String getTaskDetails() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return taskDetails;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Setter for the taskDetails Property."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param taskDetails taskDetails to be set"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setTaskDetails(String taskDetails) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.taskDetails \u003d taskDetails;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Getter for the taskType Property."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return TaskType of the taskType Property."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public TaskType getTaskType() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Setter for the taskType Property."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param taskType TaskType Enum to be set"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setTaskType(TaskType taskType) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Getter for the isDone Property."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return Boolean representing the isDone Property"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Boolean getIsDone() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Getter for queuedTask Property."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArrayList containing Task Objects"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList getQueuedTasks() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        return queuedTasks;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * Setter for queued Task Property."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param queuedTasks ArrayList to be set"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setQueuedTasks(TaskList queuedTasks) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        this.queuedTasks \u003d queuedTasks;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * Setter for datetime property."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "     * @param date The Date to set"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * Getter for datetime property."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Date represented by the datetime property"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    public void setTime(LocalTime time) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 97,
      "-": 135,
      "priyan-coder": 19
    }
  },
  {
    "path": "src/main/java/executor/task/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class TaskList extends ArrayList\u003cTask\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Constructor for \u0027TaskList\u0027 Class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Deletes a task via its index."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param index Index of the task to be deleted"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void deleteTaskByIndex(int index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.remove(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Adds a new task to the List."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param newTask The Task Object to be added"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void addTask(Task newTask) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.add(newTask);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Finds and prints each task that contains the string."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param name The substring to be found."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public TaskList getTasksByName(String name) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        TaskList filteredTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        for (int index \u003d 0; index \u003c this.size(); ++index) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                if (this.get(index).taskName.contains(name)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    filteredTaskList.addTask(this.get(index));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                // Read invalid taskName\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return filteredTaskList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Prints tasks from taskList based on the index provided."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param indexes Varargs The indexes of tasks from taskList to be printed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return String representing the list of Tasks to be printed to the User."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public String getPrintableTaskByIndex(int... indexes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        StringBuilder outputStr \u003d new StringBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        for (int index : indexes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            outputStr.append(index + 1)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    .append(\". \")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    .append(this.get(index).genTaskDesc())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    .append(\"\\n\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return outputStr.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Task getMostRecentTaskAdded() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.get(this.size() - 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Initializes a \u0027Task\u0027 subclass based on TaskType."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * TODO: Think about how this can be neater."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param taskDesc The task description from the user input"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param taskType TaskType enum that specifies the subclass to create"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public static Task createTask(TaskType taskType, String taskDesc) throws DukeException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                newTask \u003d new Deadline(taskDesc);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                newTask \u003d new Event(taskDesc);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                newTask \u003d new ToDo(taskDesc);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            case FDURATION:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                newTask \u003d new FixedDuration(taskDesc);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            case RECUR:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "                newTask \u003d new Recurring(taskDesc);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                newTask \u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(\"Unable to create task.\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Creates a Task Object from a saved (Storage) String."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param userInput The saved string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return Created Task Object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public static Task createTaskFromString(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String[] parsedInput \u003d Parser.parseStoredTaskDetails(userInput);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        TaskType taskType \u003d TaskType.valueOf(parsedInput[0]);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Task newTask \u003d TaskList.createTask(taskType, parsedInput[1]);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (Boolean.parseBoolean(parsedInput[2])) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            newTask.markDone();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    // ---- Get Methods"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Returns a String representing each task in the taskList."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return String containing all the Tasks to be printed by the User."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public String getPrintableTasks() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        StringBuilder outputStr \u003d new StringBuilder();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        for (int index \u003d 0; index \u003c this.size(); ++index) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                outputStr.append(index + 1)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                        .append(\". \")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                        .append(this.get(index).genTaskDesc())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                        .append(\"\\n\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                ;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                outputStr.append(\"Unable to print Task \")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                         .append(index + 1)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                        .append(\"\\n\")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                ;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return outputStr.toString();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Loads all queued Tasks from the now-done Task to the main TaskList."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param mainTask The Task that has been marked done"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void loadQueuedTasks(Task mainTask) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        TaskList queuedTasks \u003d mainTask.getQueuedTasks();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (queuedTasks \u003d\u003d null) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        for (Task newTask : queuedTasks) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.addTask(newTask);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        mainTask.setQueuedTasks(null);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AjeyAshok": 3,
      "Mudaafi": 154,
      "sallysohyun": 2
    }
  },
  {
    "path": "src/main/java/executor/task/TaskType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    BLANK, DEADLINE, TODO, EVENT, FDURATION, RECUR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for \u0027TaskType\u0027 enum."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskType() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to get all the types of this enum."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A String Array that contains all the types of this enum"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String[] getNames() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskType[] holder \u003d TaskType.values();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] returnArray \u003d new String[holder.length];"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int index \u003d 0; index \u003c holder.length; ++index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            returnArray[index] \u003d String.valueOf(holder[index]);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return returnArray;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 2,
      "-": 23
    }
  },
  {
    "path": "src/main/java/executor/task/ToDo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package executor.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private LocalDate dateFrom;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private LocalDate dateTo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Constructor for Class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param name The user input from CLI"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public ToDo(String name) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.taskType \u003d TaskType.TODO;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.recordTaskDetails(name);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.parseForTaskPeriod();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private void parseForTaskPeriod()  {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (this.detailDesc \u003d\u003d null) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (this.detailDesc.equals(\"between\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                String[] dates \u003d taskDetails.trim().split(\" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                setDateFrom(LocalDate.parse(dates[0], formatter));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                setDateTo(LocalDate.parse(dates[1], formatter));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                this.setDate(getDateFrom());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                System.out.println(\"Date Interpreted as: From \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                        + this.getDateFrom().format(formatter)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                        + \" to \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                        + this.getDateTo().format(formatter));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                this.dateFrom \u003d LocalDate.now();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                this.dateTo \u003d LocalDate.now();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                System.out.println(\"Invalid Input. Unable to interpret Datetime (use: dd/MM/yy)\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    // -- Setters \u0026 Getters"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Sets the dateFrom variable."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param dateFrom date to do the task from"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    public void setDateFrom(LocalDate dateFrom) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.dateFrom \u003d dateFrom;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Sets the dateFrom variable."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param dateTo date to do the task from"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    public void setDateTo(LocalDate dateTo) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.dateTo \u003d dateTo;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    public LocalDate getDateFrom() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return dateFrom;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    public LocalDate getDateTo() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return dateTo;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 50,
      "priyan-coder": 23
    }
  },
  {
    "path": "src/main/java/interpreter/Interpreter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package interpreter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import utils.AccessType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.CommandType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.Executor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import utils.InfoCapsule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class Interpreter {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private Executor executorLayer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Interpreter(String taskPath, String walletPath) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.executorLayer \u003d new Executor(taskPath, walletPath);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Interprets the userInput relative to the TaskList provided and executes the Command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param userInput The userInput taken from the User Interface"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return InfoCapsule containing the execution results of the Command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public InfoCapsule interpret(String userInput) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        CommandType commandType \u003d Parser.parseForCommandType(userInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.executorLayer.runCommand(commandType, userInput);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public InfoCapsule requestSave() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.executorLayer.saveAllData();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public InfoCapsule request(AccessType accessType, String argsStr) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.executorLayer.access(accessType, argsStr);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 32
    }
  },
  {
    "path": "src/main/java/interpreter/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package interpreter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.CommandType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "import ui.Receipt;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": " * Parser will parse through user inputs."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": " * User inputs will follow the following Structure:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": " * \"CommandType PrimaryInput /flag1 flag1Details /flag2 flag2Details ...\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": " * Parser will NOT return a changed user input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PARSE_MARKER_IS_DONE \u003d \"####\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PARSE_MARKER_TASK \u003d \"--\u003e\u003e\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for \u0027Parser\u0027 Class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Parses the input to classify the Command requested."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param userInput The input that the user types from the CLI"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return CommandType enum that identifies the Command requested"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public static CommandType parseForCommandType(String userInput) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        // User enters an empty command (like a blank)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (userInput.trim() \u003d\u003d \"\") {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return CommandType.BLANK;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String commandStr \u003d parseForEnum(userInput, CommandType.getNames());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        // Type of command not as specified inside the enum types"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (commandStr \u003d\u003d \"\") {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return CommandType.ERROR;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return CommandType.valueOf(commandStr);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Parses the input to extract the primary input of the user-command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param commandType CommandType of the user-command being parsed"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param userInput String representing the user-command"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return String representing the PrimaryInput of the user-command"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public static String parseForPrimaryInput(CommandType commandType, String userInput) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String primaryInput \u003d Parser.removeStr(commandType.toString(), userInput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (primaryInput.contains(\"/\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            primaryInput \u003d primaryInput.substring(0, primaryInput.indexOf(\"/\")).trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return primaryInput;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Parses the input to extract a particular flag from the user-command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param flag String denoting the flag to be found"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param userInput String representing the user-command"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return String representing the flagDetails if flag is found, null otherwise"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public static String parseForFlag(String flag, String userInput) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        flag \u003d \"/\" + flag;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (!userInput.contains(flag)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        int indexFlag \u003d userInput.indexOf(flag) + flag.length();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        int indexEndFlag \u003d userInput.indexOf(\"/\", indexFlag);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (indexEndFlag \u003d\u003d -1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            indexEndFlag \u003d userInput.length();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return userInput.substring(indexFlag, indexEndFlag).trim();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Abstract Function that searches for a specific Enum type given an Enum."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput The String to search"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param enumTypes String Array containing the Enum Types"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String value of the Enum Type"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String parseForEnum(String userInput, String[] enumTypes) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        int minIndex \u003d 999;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        int testIndex;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String enumType \u003d \"\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String typeIter : enumTypes) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            testIndex \u003d userInput.toUpperCase().indexOf(typeIter);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            if (minIndex \u003e testIndex \u0026\u0026 testIndex \u003e\u003d 0) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                enumType \u003d typeIter;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                minIndex \u003d testIndex;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            } else if (minIndex \u003d\u003d testIndex \u0026\u0026 typeIter.length() \u003e enumType.length()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                enumType \u003d typeIter;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return enumType;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the Command Literal from the user input string.*"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandStr Command Literal to remove"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput  User Input to be parsed"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String with command literal removed"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String removeStr(String commandStr, String userInput) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        //(?i) is regex which tells Java to be case-Insensitive"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInput.replaceFirst(\"(?i)\" + commandStr, \"\").trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Work in progress."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public String[] parseTask(TaskType taskType, String userInput) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    // TODO: Currently in \u0027Task\u0027 RecordTaskDetails"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    // -- Storage-Parsing"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String[] parseStoredTask(String encodedTask) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return encodedTask.split(PARSE_MARKER_TASK);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses through the Stored task to return the Task type, Task Description and Task isDone as a String Array."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * ONLY FOR FORMATTED INPUT"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskString User Input to be parsed"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String Array containing task type, task description and task isDone"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String[] parseStoredTaskDetails(String taskString) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] returnArray \u003d new String[3];"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] holder \u003d taskString.split(PARSE_MARKER_IS_DONE, 2);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        returnArray[0] \u003d String.valueOf(parseForCommandType(holder[0]));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        returnArray[1] \u003d holder[0].replace(returnArray[0], \"\").trim();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        returnArray[2] \u003d holder[1].replace(PARSE_MARKER_IS_DONE.substring(1), \"\").trim();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return returnArray;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encodes the Task for Storage."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * FORMAT: (taskType) (taskName)/(detailDesc) (taskDetails)(PARSE_MARKER_TASK)(isDone)(PARSE_MARKER_TASK)(...)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task Task Object"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String to be stored/saved"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public static String encodeTask(Task task) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder strSave \u003d new StringBuilder();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        strSave.append(encodeMainTask(task));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        strSave.append(encodeQueuedTasks(task));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        strSave.append(\"\\n\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return strSave.toString();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String encodeMainTask(Task task) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String strSave \u003d \"\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        strSave +\u003d task.getTaskType().name()"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + task.getTaskName();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (task.getDetailDesc() !\u003d null \u0026\u0026 task.getTaskDetails() !\u003d null) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            strSave +\u003d \u0027/\u0027;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (task.getDetailDesc() !\u003d null) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            strSave +\u003d task.getDetailDesc();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        strSave +\u003d \" \";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (task.getTaskDetails() !\u003d null) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            strSave +\u003d task.getTaskDetails();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        strSave +\u003d PARSE_MARKER_IS_DONE + task.getIsDone().toString();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return strSave;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String encodeQueuedTasks(Task task) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!task.isQueuedTasks()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder queuedTaskString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        for (Task queuedTask : task.getQueuedTasks()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            queuedTaskString.append(PARSE_MARKER_TASK);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            queuedTaskString.append(encodeTask(queuedTask));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        return queuedTaskString.toString();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "     * Encodes the Receipt for Storage."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "     * FORMAT: (commandType) (cashSpent) (date) /(tags)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "     * @param receipt Receipt object"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "     * @return String to be stored/saved"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    public static String encodeReceipt(Receipt receipt) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        StringBuilder strSave \u003d new StringBuilder();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        strSave.append(encodeMainReceipt(receipt));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        strSave.append(\"\\n\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        return strSave.toString();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    private static String encodeMainReceipt(Receipt receipt) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        String strSave \u003d \"\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        if (receipt.getCashSpent() \u003c 0) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "            strSave +\u003d \"in\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "            strSave +\u003d \" $\""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "                    + -receipt.getCashSpent();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        } else if (receipt.getCashSpent() \u003e\u003d 0) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "            strSave +\u003d \"out\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "            strSave +\u003d \" $\""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "                    + receipt.getCashSpent();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (receipt.getDate() !\u003d null \u0026\u0026 receipt.getTags().size() \u003e 1) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "            strSave +\u003d \u0027 \u0027;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        if (receipt.getDate() !\u003d null) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "            strSave +\u003d \"/date \""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "                    + receipt.getDate();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        strSave +\u003d \" \";"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (receipt.getTags().size() \u003e 1) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "            strSave +\u003d \"/tags\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "            for (String tag : receipt.getTags()) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                if (!tag.equals(\"Income\") \u0026\u0026 !tag.equals(\"Expenses\")) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "                    strSave +\u003d \" \";"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "                    strSave +\u003d tag;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        return strSave;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * Boolean to check if the user input has a slash."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput this is the user input"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if there is a slash in the user input"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public static Boolean containsForwardSlash(String userInput) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        if (userInput.contains(\"/\")) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 75,
      "sallysohyun": 46,
      "-": 121
    }
  },
  {
    "path": "src/main/java/main/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.gui.MainGui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    protected static MainGui gui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    protected static TaskList taskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * The Main method by which main.Duke will be launched."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        initializeGui(args);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private static void initializeGui(String[] args) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        gui \u003d new MainGui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        gui.initialize(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private static void initializeUi() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 25
    }
  },
  {
    "path": "src/main/java/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.CommandType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import main.Duke;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Receipt;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.ReceiptTracker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class StorageManager {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private String initializationStatus;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private StorageWallet walletStore;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private StorageTask taskStore;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private Wallet wallet \u003d new Wallet();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Constructor for the StorageManager Object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param taskPath String detailing the filepath to the stored Task Data"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param walletPath String detailing the filepath to the stored Wallet Data"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public StorageManager(String taskPath, String walletPath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.initializationStatus \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.initializationStatus +\u003d this.loadTasks(taskPath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.initializationStatus +\u003d this.loadWallet(walletPath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public StorageManager() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.initializationStatus \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Saves both the TaskList and the Wallet."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @throws DukeException Error Saving either the Wallet or the TaskList"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void saveAllData() throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.taskStore.saveData(this.taskList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.walletStore.saveData(this.wallet);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Tracks a particular tag."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param tag String to track by"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @throws DukeException The tag is already tracked."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void trackTag(String tag) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.wallet.addFolder(tag);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Untracks a particular tag."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param tag String to untrack"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @throws DukeException The tag is not yet tracked."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void untrackTag(String tag) throws DukeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.wallet.removeFolder(tag);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Adds a receipt to the Wallet Object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Used in CommandAddReceipt."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param r Receipt Object to be added into the Wallet"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @throws DukeException Error occurred when trying to add Receipt to Wallet."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void addReceipt(Receipt r) throws DukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.wallet.addReceipt(r);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(\"Unable to add receipt to the Wallet.\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Gets all receipts for a particular date."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Used by CommandDateList."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param date String that represents the date"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return ReceiptTracker containing all the Receipts of a particular date"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @throws DukeException Error occurred when getting Receipts on Date"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public ReceiptTracker getReceiptsByDate(String date) throws DukeException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return this.wallet.getReceiptsByDate(date);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(\"Unable to get receipts with Date:\" + date + \"\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Returns a TaskList of Task by a specific date."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param date LocalDate to be found"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return TaskList containing all the Tasks matching date"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @throws DukeException Error when trying to access Tasks at the given date."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public TaskList getTasksByDate(LocalDate date) throws DukeException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        TaskList filteredTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            for (Task task : this.taskList) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                String dateOfTask \u003d task.getDate().format(formatter);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                if (dateOfTask.equals(date.format(formatter))) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    filteredTaskList.addTask(task);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(\"There are no tasks for today.\\n\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return filteredTaskList;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Gets all receipts for a particular month in a particular year."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param month int representing month to look for"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param year int representing year to look for"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return ReceiptTracker containing all the Receipts for a partiuclar month/year"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @throws DukeException Error occurred when getting receipts by month"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public ReceiptTracker getReceiptsByMonthDate(int month, int year) throws DukeException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return this.wallet.getReceiptsByMonthYear(month, year);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(\"Unable to get receipt from month/year: \" + month + \"/\" + year + \"\\n\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Gets all receipts for a particular year."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param year int representing year to look for"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return ReceiptTracker containing all the Receipts for a partiuclar year"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @throws DukeException Error occurred when getting receipts by month"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public ReceiptTracker getReceiptsByYear(int year) throws DukeException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return this.wallet.getReceiptsByYear(year);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(\"Unable to get receipts from year: \" + year + \"\\n\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Accessor method to ReceiptTracker\u0027s getReceiptByTag() method."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param tag String to be found in tag"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return ReceiptTracker containing all the Receipts with tag"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @throws DukeException Error when trying to obtain all receipts with the tag"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public ReceiptTracker getReceiptsByTag(String tag) throws DukeException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return this.wallet.getReceipts().getReceiptsByTag(tag);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(\"Unable to get receipts with tag: \" + tag + \"\\n\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * Gets all receipts that have cash spent attribute more than or equal to user input."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * Used by CommandMajorExpense"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * @param amount String that represents the user input"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * @return ReceiptTracker containing all the major expense receipts"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * @throws DukeException Error occurred when getting major expenses"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    public String getMajorExpense(String amount) throws DukeException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            return this.wallet.getReceipts().getMajorExpenses(amount).getPrintableReceipts();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            throw new DukeException(\"Invalid cash input. Please enter integer\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            throw new DukeException(\"Unable to get major expenses\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * Gets all receipts that have cash spent attribute more than or equal to $100."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * Used by CommandMajorExpense"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * @return ReceiptTracker containing all the receipts above or equal to $100"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * @throws DukeException Error occurred when getting major expenses"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    public String getMajorReceipt() throws DukeException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            return this.wallet.getReceipts().getMajorReceipts().getPrintableReceipts();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            throw new DukeException(\"Unable to get major receipt\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Deletes Task by Index in TaskList Object."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Used in CommandDelete."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param index int of Task to be deleted"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @throws DukeException Error occured when trying to delete Task"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void deleteTaskByIndex(int index) throws DukeException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.taskList.deleteTaskByIndex(index);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(\"Invalid \u0027delete\u0027 statement. \""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    + \"Please indicate the index of the task you wish to mark delete.\\n\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * Deletes Receipt by Index in ReceiptTracker Object."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * Used in CommandDeleteReceipt"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * @param index int of Receipt to be deleted"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * @throws DukeException Error occured when trying to delete Receipt"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    public void deleteReceiptByIndex(int index) throws DukeException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            this.wallet.getReceipts().deleteReceiptsByIndex(index);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            throw new DukeException(\"Invalid \u0027deletereceipt\u0027 statement.\""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            + \"Please indicate the index of the receipt you wish to delete.\\n\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Gets the taskName property of a Task by its index in a TaskList."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Used in CommandDelete."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param index int representing the index of the Task"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return String corresponding to the taskName property of the Task"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @throws DukeException Error occurred when retrieving the taskName of the Task"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public String getTaskNameByIndex(int index) throws DukeException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return this.taskList.get(index).getTaskName();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(\"Unable to get Task Name of Task at index \" + index + \"\\n\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Gets the balance property of the Wallet Object."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return Double representing the balance property of the Wallet Object."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @throws DukeException Error occurred when retrieving the balance of the Wallet Object."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Double getWalletBalance() throws DukeException {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return this.wallet.getBalance();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(\"Unable to get Wallet Balance.\\n\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Gets the totalExpenses property of the Wallet Object."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return Double representing the totalExpenses property of the Wallet Object."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @throws DukeException Error occurred when retrieving the balance of the Wallet Object."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Double getWalletExpenses() throws DukeException {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return this.wallet.getTotalExpenses();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(\"Unable to get Total Expenses.\\n\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Gets all the Tasks containing a string."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param name String to be found"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return TaskList containing all the Tasks with the name"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @throws DukeException Error creating a TaskList with all Tasks containing the name"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public TaskList getTasksByName(String name) throws DukeException {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return this.taskList.getTasksByName(name);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(\"Unable to obtain tasks with name: \" + name);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Accessor Method to ReceiptTracker\u0027s getPrintableReceipts() method."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return String detailing all the Receipts to be printed to the User"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public String getPrintableReceipts() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.wallet.getReceipts().getPrintableReceipts();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Accessor Method to TaskList\u0027s getPrintableTasks() method."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return String detailing all the Tasks to be printed to the User."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public String getPrintableTasks() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.taskList.getPrintableTasks();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Accessor Method to Task\u0027s markDone Method."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param index int representing the index of the Task to mark done"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @throws DukeException Error when trying to Mark a Task as Done"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void markTaskDoneByIndex(int index) throws DukeException {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.taskList.get(index).markDone();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(\"Unable to mark Task as done. \\n\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Loads all queued Tasks in particular indexed-Task."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param index int representing the index of the Task to load all the queuedTasks from"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @throws DukeException Error when trying to load queued Tasks."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void loadQueuedTasksByIndex(int index) throws DukeException {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.taskList.loadQueuedTasks(this.taskList.get(index));"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(\"Unable to Load Queued Tasks.\\n\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Creates a Task and adds it to the TaskList."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param taskType TaskType of the Task to be created."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param userInput String with all the Task details"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @throws DukeException Error when trying to add a task into the TaskList"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void createTask(TaskType taskType, String userInput) throws DukeException {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.taskList.addTask(TaskList.createTask(taskType, userInput));"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(\"Unable to add new Task into TaskList.\\n\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Returns a String detailing the most recent Task appended to the TaskList."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return String detailing the most recently appended Task"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public String getPrintableLatestTask() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.taskList.getMostRecentTaskAdded().genTaskDesc();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Initializes a queuedTask List of a Task given its index."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param index int representing the index of the Task in question"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @throws DukeException Error when trying to access a Task outside the Array Size"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void initializeQueueByIndex(int index) throws DukeException {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.taskList.get(index).initializeQueue();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(\"No task found at Index: \" + index + \"\\n\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Creates and queues a Task to an existing Task given its index."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param index int representing the index of the Task to queue the other Task on"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param commandType CommandType of the Task to be created"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param taskStr String with all the details of the Task to be created."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @throws DukeException Error when trying to queue a task"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void queueTaskByIndex(int index, CommandType commandType, String taskStr) throws DukeException {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            Task task \u003d TaskList.createTask(TaskType.valueOf(commandType.toString()), taskStr);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.taskList.get(index).getQueuedTasks().addTask(task);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(\"Unable to queue new task.\\n\");"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private String loadTasks(String taskPath) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.taskStore \u003d new StorageTask(taskPath);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String outputStr;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.taskStore.loadData(this.taskList);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            outputStr \u003d \"Tasks loaded successfully.\\n\";"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            outputStr \u003d e.getMessage();"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return outputStr;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private String loadWallet(String walletPath) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String outputStr;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.walletStore \u003d new StorageWallet(walletPath);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.walletStore.loadData(this.wallet);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            outputStr \u003d \"Wallet loaded successfully.\\n\";"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            outputStr \u003d e.getMessage();"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return outputStr;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    // Setters \u0026 Getters"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setWalletBalance(Double amt) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.wallet.setBalance(amt);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public TaskList getTaskList() {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Wallet getWallet() {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.wallet;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public String getInitializationStatus() {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return initializationStatus;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public int getTaskListSize() {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public int getReceiptTrackerSize() {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.wallet.getReceipts().size();"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 377,
      "Araavinds": 48
    }
  },
  {
    "path": "src/main/java/storage/StorageTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "public class StorageTask {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String filePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "     * * Constrctor for the \u0027StorageTask\u0027 Class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath The file path to be used to store and load data"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    public StorageTask(String filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to save the current list of tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param taskList TaskList that houses all the Tasks to be saved"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void saveData(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FileWriter writer \u003d new FileWriter(this.filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            for (Task task : taskList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                String strSave \u003d Parser.encodeTask(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                writer.write(strSave);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(\"Unable to load saved Task Data.\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to load previously saved list of tasks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param taskList TaskList that will house all the Tasks"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void loadData(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            File file \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            Task newTask;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                String loadedInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                if (loadedInput.equals(\"\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                newTask \u003d loadTaskFromStorageString(loadedInput);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                taskList.addTask(newTask);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(\"No Previously Saved Tasks.\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts saved String in Storage to actual Task Object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param loadedInput The saved String to be converted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Task Object from String"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    public Task loadTaskFromStorageString(String loadedInput) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList queuedTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Task newTask \u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Task queuedTask \u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] taskStrings \u003d Parser.parseStoredTask(loadedInput);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String taskString : taskStrings) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newTask \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    newTask \u003d TaskList.createTaskFromString(taskString);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    // Task cannot be created. Continue"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    queuedTask \u003d TaskList.createTaskFromString(taskString);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                // Task cannot be created. Continue"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                queuedTasks.add(queuedTask);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (queuedTask !\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            newTask.setQueuedTasks(queuedTasks);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 28,
      "sallysohyun": 4,
      "-": 61
    }
  },
  {
    "path": "src/main/java/storage/StorageWallet.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.CommandAddIncomeReceipt;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.CommandAddReceipt;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.CommandAddSpendingReceipt;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.CommandType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.IncomeReceipt;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "import ui.Receipt;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "public class StorageWallet {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    protected String filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Constrctor for the \u0027StorageWallet\u0027 Class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "     * @param filePath The file path to be used to store and load data"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    public StorageWallet(String filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "     * Method to save the current list of receipts."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param wallet Wallet Object that stores all the Receipts"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void saveData(Wallet wallet) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "            FileWriter writer \u003d new FileWriter(this.filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            writer.write(wallet.getBalance().toString() + \"\\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            StringBuilder folderNames \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            for (String folderName : wallet.getFolders().keySet()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                if (!folderName.equals(\"Income\") \u0026\u0026 !folderName.equals(\"Expenses\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    folderNames.append(folderName).append(\"-\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            writer.write(folderNames.toString() + \"\\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "            for (Receipt receipt : wallet.getReceipts()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "                String strSave \u003d Parser.encodeReceipt(receipt);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "                writer.write(strSave);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(\"Unable to save Wallet Data.\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "     * Method to load previously saved list of receipts."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param wallet Wallet Object to be used to house all the Receipts"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void loadData(Wallet wallet) throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "            File file \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "            Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            String storedBalanceStr \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            double storedBalanceDouble \u003d 0.0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                storedBalanceDouble \u003d Double.parseDouble(storedBalanceStr);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                throw new DukeException(\"Balance cannot be read\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            wallet.setBalance(storedBalanceDouble);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            String folderNames \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "            while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "                String loadedInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                if (loadedInput.equals(\"\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                parseAddReceiptFromStorageString(wallet, loadedInput);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            for (String folderName : folderNames.split(\"-\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                wallet.addFolder(folderName);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(\"No Previously Saved Wallet Data.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "     * Converts saved String in StorageWallet to actual Receipt object and saves in Wallet Object."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param wallet Wallet Object for the Receipt to be added in."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "     * @param loadedInput The saved String to be converted"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void parseAddReceiptFromStorageString(Wallet wallet, String loadedInput) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        CommandType commandtype \u003d Parser.parseForCommandType(loadedInput);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Receipt r \u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (commandtype \u003d\u003d CommandType.OUT) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            CommandAddReceipt c \u003d new CommandAddSpendingReceipt(loadedInput);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            r \u003d new Receipt(c.getCash(), c.getDate(), c.getTags());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } else if (commandtype \u003d\u003d CommandType.IN) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            CommandAddIncomeReceipt c \u003d new CommandAddIncomeReceipt(loadedInput);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            r \u003d new IncomeReceipt(c.getCash(), c.getDate(), c.getTags());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (r !\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            wallet.addReceipt(r);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 50,
      "sallysohyun": 54
    }
  },
  {
    "path": "src/main/java/ui/IncomeReceipt.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class IncomeReceipt extends Receipt {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    // Constructors"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public IncomeReceipt(Double cashGained, LocalDate date, ArrayList\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super(-cashGained, date, tags);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public IncomeReceipt(Double cashGained, LocalDate date) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super(-cashGained, date);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public IncomeReceipt(Double cashGained) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super(-cashGained);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    // -- Setters \u0026 Getters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Sets the cashGained by setting the negative as the cashSpent property of this Receipt Object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param cashGained Double to be set"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setCashGained(Double cashGained) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setCashSpent(-cashGained);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Get the cashGained by negating the cashSpent property of this Receipt Object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return Double representing the cashGained."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Double getCashGained() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return -this.getCashSpent();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 37,
      "sallysohyun": 1
    }
  },
  {
    "path": "src/main/java/ui/Receipt.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class Receipt {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private Double cashSpent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private ArrayList\u003cString\u003e tags;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Complete Constructor for Receipt Object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param cashSpent Double to be set as cashSpent property of Receipt Object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param date Data Object to be set as the date property of Receipt Object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param tags ArrayList to be set as the tags property of Receipt Object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Receipt(Double cashSpent, LocalDate date, ArrayList\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setCashSpent(cashSpent);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setDate(date);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setTags(tags);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Partial Constructor for Receipt Object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param cashSpent Double to be set as cashSpent property of Receipt Object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param date Data Object to be set as the date property of Receipt Object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Receipt(Double cashSpent, LocalDate date) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setCashSpent(cashSpent);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setDate(date);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setTags(new ArrayList\u003cString\u003e());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Partial Constructor for Receipt Object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param cashSpent Double to be set as cashSpent property of Receipt Object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Receipt(Double cashSpent) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setCashSpent(cashSpent);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setDate(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setTags(new ArrayList\u003cString\u003e());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Adds a tag to the tags property of Receipt Object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param tag String to be stored as a tag"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void addTag(String tag) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.tags.add(tag);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    // -- Boolean Functions"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Checks if the tags property is empty."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return true if tags property is empty, false otherwise."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public boolean areTagsEmpty() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.getTags().isEmpty();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Checks if a tag is in the tags property of Receipt Object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param tag String to be checked"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return true if tag exists in the Receipt Object, false otherwise."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public boolean containsTag(String tag) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.getTags().contains(tag);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * Checks if a date equals to the date property of Receipt Object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * @param date String to be checked"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * @return true if date equals tot the one in the Receipt Object, false otherwise."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    public boolean equalsDate(String date) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        return this.getDate().equals(LocalDate.parse(date));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    // -- Setters \u0026 Getters"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Setter for cashSpent property of Receipt Object."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param cashSpent Double to be set as cashSpent property of Receipt Object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setCashSpent(Double cashSpent) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.cashSpent \u003d cashSpent;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Getter for cashSpent property of Receipt Object."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return Double corresponding to cashSpent property of Receipt Object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Double getCashSpent() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return cashSpent;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Setter for tags property."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param tags ArrayList to be set as the tags property of Receipt Object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setTags(ArrayList\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Getter for the tags property of Receipt Object."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return ArrayList of the tags property of Receipt Object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public ArrayList\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Setter for date property."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param date Data Object to be set as the date property of Receipt Object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Getter for date property."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return Date Object of the date property of Receipt Object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 120,
      "Araavinds": 12
    }
  },
  {
    "path": "src/main/java/ui/ReceiptTracker.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class ReceiptTracker extends ArrayList\u003cReceipt\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private HashMap\u003cString, ReceiptTracker\u003e folders;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private Double nettCashSpent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    private Double budget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Overloaded Constructor for ReceiptTracker."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param receiptList List of receipts to be loaded into the ReceiptTracker."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public ReceiptTracker(ArrayList\u003cReceipt\u003e receiptList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setFolders(new HashMap\u003c\u003e());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.addAll(receiptList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.addFolder(\"Income\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.addFolder(\"Expenditure\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.updateNettCashSpent();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setFolders(new HashMap\u003c\u003e());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Default Constructor for ReceiptTracker."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public ReceiptTracker() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.updateNettCashSpent();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setFolders(new HashMap\u003c\u003e());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void initializeMainReceiptTracker() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.getFolders().put(\"Income\", new ReceiptTracker());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.getFolders().put(\"Expenses\", new ReceiptTracker());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Wrapper to add a new Receipt Object to the Receipt Tracker."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param receipt Receipt Object to be added."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void addReceipt(Receipt receipt) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.add(receipt);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        for (String tag : receipt.getTags()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            if (isRegisteredTag(tag)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                Double currTotalCashSpent \u003d folders.get(tag).getNettCashSpent();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                folders.get(tag).addReceipt(receipt);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                folders.get(tag).setNettCashSpent(currTotalCashSpent + receipt.getCashSpent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.updateNettCashSpent();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Updates totalCashSpent property of this ReceiptTracker Object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void updateNettCashSpent() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setNettCashSpent(this.sumReceipts());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Sums the cashSpent of all the Receipts, subtracting any cashGained from IncomeReceipts."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return Double representing the totalCashSpent"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Double sumReceipts() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Double sum \u003d 0.0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        for (Receipt receipt : this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            sum +\u003d receipt.getCashSpent();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return sum;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Registers a tag to be tracked."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param tag String to be registered into the folders property of ReceiptTracker Object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @throws DukeException Folder already exists"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void addFolder(String tag) throws DukeException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (isRegisteredTag(tag)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(\"Category already exists!\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        ArrayList\u003cReceipt\u003e taggedReceipts \u003d getReceiptsByTag(tag);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (taggedReceipts.size() \u003c this.size()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.getFolders().put(tag, new ReceiptTracker(taggedReceipts));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Unregisters a tag."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param tag String to be unregistered"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @throws DukeException Folder doesn\u0027t exist"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void removeFolder(String tag) throws DukeException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (!isRegisteredTag(tag)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(\"\u003c\" + tag + \"\u003e is not being tracked!\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.getFolders().remove(tag);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Find all receipts that are tagged with a specific String."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param tag Specific String to be filtered with."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return ArrayList containing all the Receipts with the specific tag"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public ReceiptTracker getReceiptsByTag(String tag) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        ReceiptTracker taggedReceipts \u003d new ReceiptTracker();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        for (Receipt receipt : this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            if (receipt.containsTag(tag)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                taggedReceipts.addReceipt(receipt);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return taggedReceipts;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * Find all the expenses more than or equal to the cash input."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * @param amount Specific String to be filtered with."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * @return ArrayList containing all the Receipts with all the major expenses"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    public ReceiptTracker getMajorExpenses(String amount) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        int input \u003d Integer.parseInt(amount);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        ReceiptTracker expenseReceipts \u003d new ReceiptTracker();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        for (Receipt receipt : this) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            if (receipt.getCashSpent() \u003e\u003d input) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                expenseReceipts.addReceipt(receipt);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        return expenseReceipts;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * Find all the expenses more than or equal to $100."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * @return ArrayList containing all the receipts with expenses above/equal to $100"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    public ReceiptTracker getMajorReceipts() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        ReceiptTracker receipts \u003d new ReceiptTracker();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        for (Receipt receipt : this) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            if (receipt.getCashSpent() \u003e\u003d 100) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                receipts.addReceipt(receipt);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        return receipts;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * Find all receipts that corresponds to the specific date."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * @param date Specific String to be filtered with"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * @return ArrayList containing all the Receipts with the specific date"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public ReceiptTracker getReceiptsByDate(String date) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        ReceiptTracker dateReceipts \u003d new ReceiptTracker();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        for (Receipt receipt : this) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            if (receipt.equalsDate(date)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                dateReceipts.addReceipt(receipt);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        return dateReceipts;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     * Finds all the receipts that corresponds to that month and year."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     * @param month is the month given by the user"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     * @param year is the year given by the user"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     * @return ArrayList containing all the receipts which corresponds to year and month"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public ReceiptTracker getReceiptsByMonthYear(int month, int year) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        ReceiptTracker receiptByMonthYear \u003d new ReceiptTracker();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        for (Receipt receipt : this) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            if ((receipt.getDate().getMonthValue() \u003d\u003d month) \u0026\u0026 (receipt.getDate().getYear() \u003d\u003d year)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                receiptByMonthYear.addReceipt(receipt);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        return receiptByMonthYear;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     * Finds all the receipts that corresponds to that year."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     * @param year is the year given by the user"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return ReceiptTracker containing all the receipts which corresponds to the year given by user"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public ReceiptTracker getReceiptsByYear(int year) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        ReceiptTracker receiptByYear \u003d new ReceiptTracker();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        for (Receipt receipt : this) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            if (receipt.getDate().getYear() \u003d\u003d year) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                receiptByYear.addReceipt(receipt);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        return receiptByYear;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    // -- Boolean Functions"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Checks if a tag has been registered previously."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param tag String representing folder to be checked"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return true if a folder in the folders property has the name tag, false otherwise"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public boolean isRegisteredTag(String tag) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.getFolders().containsKey(tag);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    // -- Setters \u0026 Getters"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Retrieves the totalCashSpent by a specific tag."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param tag String representing the tag to filter by"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return Double, the total amount spent on a given tag"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public double getCashSpentByTag(String tag) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (isRegisteredTag(tag)) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return this.getFolders().get(tag).getNettCashSpent();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            ReceiptTracker temp \u003d new ReceiptTracker(this.getReceiptsByTag(tag));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return temp.getNettCashSpent();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Setter for the folders property of the ReceiptTracker Object."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param folders HashMap to be set as the folders property of ReceiptTracker Object"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setFolders(HashMap\u003cString, ReceiptTracker\u003e folders) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.folders \u003d folders;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Getter for the folders property of the ReceiptTracker Object."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return HashMap representing the folders property of ReceiptTracker Object"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public HashMap\u003cString, ReceiptTracker\u003e getFolders() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return folders;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Setter for the totalCashSpent property of the ReceiptTracker Object."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param nettCashSpent Double amount to be set as the totalCashSpent property of ReceiptTracker Object"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setNettCashSpent(Double nettCashSpent) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.nettCashSpent \u003d nettCashSpent;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Getter for totalCashSpent property of ReceiptTracker Object."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return Double representing the totalCashSpent property of ReceiptTracker Object"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Double getNettCashSpent() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return nettCashSpent;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * Deletes a receipt via its index."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     *"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     * @param index Index of the receipt to be deleted"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    public void deleteReceiptsByIndex(int index) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        this.remove(index);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Prints all the receipts stored in the ReceiptTracker Object."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return String containing all the receipts to be printed to the User"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public String getPrintableReceipts() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        StringBuilder outputStr \u003d new StringBuilder();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        DecimalFormat decimalFormat \u003d new DecimalFormat(\"#0.00\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        for (int index \u003d 0; index \u003c this.size(); ++index) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                outputStr.append(index + 1)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                        .append(\". \")"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                        .append(this.get(index).getTags())"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                        .append(\" $\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                if (this.get(index).getCashSpent() \u003e\u003d 0) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    outputStr.append(decimalFormat.format(this.get(index).getCashSpent()));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    outputStr.append(decimalFormat.format(-this.get(index).getCashSpent()));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                outputStr.append(\" \")"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                        .append(this.get(index).getDate())"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                        .append(\"\\n\")"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                ;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                outputStr.append(\"Unable to print Receipt \")"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                        .append(String.valueOf(index + 1))"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                        .append(\"\\n\")"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                ;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "            }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return outputStr.toString();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Gets the total sum of all the Income Receipts."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return Double representing said sum"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Double getTotalIncome() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (isRegisteredTag(\"Income\")) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return -this.getFolders().get(\"Income\").getNettCashSpent();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } else if (this.nettCashSpent \u003c 0) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return -this.nettCashSpent;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return 0.0;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Gets the total sum of all the Spending Receipts."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return Double representing said sum"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Double getTotalExpenses() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (isRegisteredTag(\"Expenses\")) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return this.getFolders().get(\"Expenses\").getNettCashSpent();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } else if (this.nettCashSpent \u003e\u003d 0) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return this.nettCashSpent;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return 0.0;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "      "
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    public Double getBudget() {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        return budget;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    public void setBudget(Double budget) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AjeyAshok": 29,
      "Mudaafi": 234,
      "priyan-coder": 7,
      "Araavinds": 64
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import interpreter.Interpreter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.CommandType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "import storage.StorageTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "import storage.StorageWallet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import utils.InfoCapsule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private Interpreter interpreterLayer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private UiCode uiCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private List\u003cString\u003e userInputHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private boolean exitRequest;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    static final String LOGO \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "            \"  ______            _        _______     _        _        _    \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                    + \"(  __  \\\\ |\\\\     /|| \\\\    /\\\\(  ____ \\\\ __|_|___ __|_|___ __|_|___\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                    + \"| (  \\\\  )| )   ( ||  \\\\  / /| (    \\\\/(  _____/(  _____/(  _____/\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                    + \"| |   ) || |   | ||  (_/ / | (__    | (|_|__ | (|_|__ | (|_|__ \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                    + \"| |   | || |   | ||   _ (  |  __)   (_____  )(_____  )(_____  )\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                    + \"| |   ) || |   | ||  ( \\\\ \\\\ | (      /\\\\_|_|) |/\\\\_|_|) |/\\\\_|_|) |\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                    + \"| (__/  )| (___) ||  /  \\\\ \\\\| (____/\\\\\\\\_______)\\\\_______)\\\\_______)\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                    + \"(______/ (_______)|_/    \\\\/(_______/   |_|      |_|      |_|   \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                    + \"                                                               \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                    + \"\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    static final String LINE \u003d \"________________________________________________\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Constructor for the \u0027Ui\u0027 Class."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    public Ui(String taskPath, String walletPath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.interpreterLayer \u003d new Interpreter(taskPath, walletPath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.uiCode \u003d UiCode.UPDATE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.exitRequest \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.userInputHistory \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Method to start the Ui."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void initialise() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        printWelcomeMsg();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        while (!this.exitRequest) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.interact();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.exitUi();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Obtains user input and executes commands."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void interact()  {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String userInput \u003d this.scanInput();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        InfoCapsule infoCapsule \u003d this.interpreterLayer.interpret(userInput);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.updateUi(infoCapsule);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Scans the CLI for User Input."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return String representing the User Input"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private String scanInput() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        System.out.print(\"User : \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        userInput \u003d this.scanner.nextLine();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void updateUi(InfoCapsule infoCapsule) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.uiCode \u003d infoCapsule.getUiCode();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            switch (this.uiCode) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            case CLI:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.printToDisplay(infoCapsule.getOutputStr());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            case TOAST:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.dukeSays(infoCapsule.getOutputStr());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            case ERROR:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                infoCapsule.throwError();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            case EXIT:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.printGoodbyeMsg();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.exitRequest \u003d true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            case UPDATE:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                System.out.println(infoCapsule.getOutputStr());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.dukeSays(e.getMessage());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Exits the Ui."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void exitUi() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.scanner.close();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        InfoCapsule infoCapsule \u003d this.interpreterLayer.requestSave();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.updateUi(infoCapsule);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Prints Exit Msg."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void printGoodbyeMsg() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        dukeSays(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void printToDisplay(String string) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        System.out.println(string + \"\\n\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.printSeparator();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Helper method to indicate duke is saying something."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param stringX The message duke wants to say"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void dukeSays(String stringX) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        System.out.println(\"Duke: \" + stringX + \"\\n\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Helper method to print Line Separator."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void printSeparator() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Prints Welcome Message."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void printWelcomeMsg() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        System.out.println(LOGO); // Logo"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        dukeSays(\"Hello! I\u0027m Duke.\\nDuke: What can I do for you?\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        printUserBalance();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        printUserExpenses();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        printSeparator();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Prints the User\u0027s Current Balance."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void printUserBalance() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        InfoCapsule infoCapsule \u003d this.interpreterLayer.interpret(\"balance\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        infoCapsule.setCodeUpdate();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.updateUi(infoCapsule);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Prints the User\u0027s Current Expenses."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void printUserExpenses() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        InfoCapsule infoCapsule \u003d this.interpreterLayer.interpret(\"expenses\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        infoCapsule.setCodeUpdate();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.updateUi(infoCapsule);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AjeyAshok": 10,
      "Mudaafi": 161,
      "sallysohyun": 3
    }
  },
  {
    "path": "src/main/java/ui/UiCode.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public enum UiCode {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    TOAST, CLI, UPDATE, ERROR, EXIT, DISPLAY_HOME, DISPLAY_CLI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 5
    }
  },
  {
    "path": "src/main/java/ui/Wallet.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class Wallet {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private Double balance;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private ReceiptTracker receipts;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Complete Constructor for Wallet Object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param balance Double to be set for balance property of Wallet Object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param receipts ArrayList to be set for receipts property of Wallet Object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Wallet(Double balance, ReceiptTracker receipts) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setBalance(balance);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setReceipts(receipts);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Partial Constructor for Wallet Object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param balance Double to be set for balance property of Wallet Object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Wallet(Double balance) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setBalance(balance);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setReceipts(new ReceiptTracker());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Default Constructor for Wallet Object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Wallet() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setBalance(0.00);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.setReceipts(new ReceiptTracker());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.getReceipts().initializeMainReceiptTracker();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Adds a new Receipt Object into the receipts property of Wallet Object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param receipt Receipt Object to be stored"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void addReceipt(Receipt receipt) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.receipts.addReceipt(receipt);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    // -- Boolean Functions"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Checks if the Wallet contains any receipts."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return true if receipts property is an empty list, false otherwise"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Boolean isReceiptsEmpty() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.getReceipts().isEmpty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    // -- Setters \u0026 Getters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Setter for balance property of Wallet Object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param input The value to be set as balance"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setBalance(Double input) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.balance \u003d input;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Getter for balance property of Wallet Object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return Double value corresponding to balance property in Wallet Object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Double getBalance() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return balance;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Setter for receipts property of Wallet Object."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param receipts ArrayList of receipts property of Wallet Object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setReceipts(ReceiptTracker receipts) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.receipts \u003d receipts;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Getter for receipts property of Wallet Object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return ArrayList of receipts property in Wallet Object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public ReceiptTracker getReceipts() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.receipts;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Getter for the totalCashSpent property of the ReceiptTracker Object housed in the Wallet Object."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return Double representing the total cash spent as recorded by the ReceiptTracker"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public double getTotalExpenses() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.receipts.getNettCashSpent();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Getter for the folders property of the ReceiptTracker Object housed in the Wallet Object."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return HashMap representing keys and the corresponding ReceiptTracker object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public HashMap\u003cString, ReceiptTracker\u003e getFolders() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.receipts.getFolders();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Accessor for method getReceiptsByDate in ReceiptTracker."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param date String representing the date to look for"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return ReceiptTracker containing all the Receipts for a particular Date"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public ReceiptTracker getReceiptsByDate(String date) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.receipts.getReceiptsByDate(date);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Accessor for method getReceiptByMonthYear in ReceiptTracker."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param month int representing the month to look for"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param year int representing the year to look for"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return ReceiptTracker containing all the Receipts for a particular month and year"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public ReceiptTracker getReceiptsByMonthYear(int month, int year) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.receipts.getReceiptsByMonthYear(month, year);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Accessor for method getReceiptsByYear in ReceiptTracker."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param year int representing the year to look for"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return ReceiptTracker containing all the Receipts for a particular year"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public ReceiptTracker getReceiptsByYear(int year) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.receipts.getReceiptsByYear(year);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Accessor for method getFolder in ReceiptTracker."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param tag String to track by"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @throws DukeException Error creating a folder to track tag."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void addFolder(String tag) throws DukeException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.receipts.addFolder(tag);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Accessor for method removeFolder in ReceiptTracker."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param tag String to be unregistered"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @throws DukeException Error untracking a tag."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void removeFolder(String tag) throws DukeException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.receipts.removeFolder(tag);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 151
    }
  },
  {
    "path": "src/main/java/ui/gui/CommandLineDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package ui.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class CommandLineDisplay {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    AnchorPane cliDisplayRoot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    ScrollPane cliDisplay;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    VBox container;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public static final String LINE \u003d \"________________________________________________\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Prints string to CLI Display."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param outputStr String to be printed onto the display"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void printToDisplay(String outputStr) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Text newOutput \u003d new Text(outputStr);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        container.getChildren().add(newOutput);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setStyle() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.cliDisplay.vvalueProperty().bind(container.heightProperty());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Helper method to indicate duke is saying something."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param string The message duke wants to say"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void dukeSays(String string) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        printToDisplay(\"Duke: \" + string + \"\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Helper method to print Line Separator."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void printSeparator() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.printToDisplay(LINE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 46
    }
  },
  {
    "path": "src/main/java/ui/gui/DisplayType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package ui.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public enum DisplayType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    HOME, CLI, NONE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 5
    }
  },
  {
    "path": "src/main/java/ui/gui/DonutChart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package ui.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.geometry.Bounds;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class DonutChart extends PieChart {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private Circle hole;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Constructor for GUI Component DonutChart."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public DonutChart() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super(FXCollections.observableArrayList());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.hole \u003d new Circle(50);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.hole.setFill(Color.valueOf(\"#ede7d1\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private DonutChart(ObservableList\u003cData\u003e pieChartData) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super(pieChartData);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.hole \u003d new Circle(50);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.hole.setFill(Color.valueOf(\"#ede7d1\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    protected void layoutChartChildren(double top, double left, double contentWidth, double contentHeight) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        super.layoutChartChildren(top, left, contentWidth, contentHeight);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (this.getData().size() \u003e 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            Node pie \u003d this.getData().get(0).getNode();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            Pane parentChart \u003d (Pane) pie.getParent();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            if (!parentChart.getChildren().contains(hole)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                matchHoleToChart();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                parentChart.getChildren().add(hole);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    // @@author {Mudaafi}-reused"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    // Solution below adapted from:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    // https://stackoverflow.com/questions/24121580/can-piechart-from-javafx-be-displayed-as-a-doughnut"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void matchHoleToChart() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        double minX \u003d Double.MAX_VALUE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        double minY \u003d Double.MAX_VALUE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        double maxX \u003d Double.MIN_VALUE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        double maxY \u003d Double.MIN_VALUE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        for (PieChart.Data data: this.getData()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            Node node \u003d data.getNode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            Bounds bounds \u003d node.getBoundsInParent();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            if (bounds.getMinX() \u003c minX) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                minX \u003d bounds.getMinX();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            if (bounds.getMinY() \u003c minY) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                minY \u003d bounds.getMinY();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            if (bounds.getMaxX() \u003e maxX) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                maxX \u003d bounds.getMaxX();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            if (bounds.getMaxY() \u003e maxY) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                maxY \u003d bounds.getMaxY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.hole.setCenterX(minX + (maxX - minX) / 2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.hole.setCenterY(minY + (maxY - minY) / 2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.hole.setRadius((maxX - minX) / 2.6);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Creates a DonutChart GUI Component."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param budgetedAmt The amount in Gold"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param expenditure The amount in Red"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return DonutChart Object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public static DonutChart createBalanceChart(double budgetedAmt, double expenditure) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                FXCollections.observableArrayList("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                        new PieChart.Data(\"Budget left\", budgetedAmt - expenditure),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                        new PieChart.Data(\"Expenses\", expenditure));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return new DonutChart(pieChartData);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 86
    }
  },
  {
    "path": "src/main/java/ui/gui/HomeWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package ui.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import interpreter.Interpreter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.chart.StackedBarChart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.ReceiptTracker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.UiCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import utils.AccessType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import utils.InfoCapsule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class HomeWindow extends AnchorPane {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private DonutChart balanceChart;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private Label balanceFigure;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private StackedBarChart\u003cString, Double\u003e breakdownChart;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private VBox taskContainerLeft;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private VBox taskContainerRight;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private Boolean exitRequest \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private Interpreter interpreterLayer;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private ArrayList\u003cString\u003e userInputHistory;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private ObservableList\u003cPieChart.Data\u003e pieChartData;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private XYChart.Series\u003cString, Double\u003e expenditureSeries;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private XYChart.Series\u003cString, Double\u003e incomeSeries;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private XYChart.Series\u003cString, Double\u003e backdrop;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void initialize(ArrayList\u003cString\u003e userInputHistory, Interpreter interpreterLayer) throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.exitRequest \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.userInputHistory \u003d userInputHistory;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.interpreterLayer \u003d interpreterLayer;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.expenditureSeries \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.expenditureSeries.setName(\"Expenditure\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.incomeSeries \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.incomeSeries.setName(\"Income\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.backdrop \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.backdrop.setName(\"Backdrop\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.displayTasks();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.displayBalanceChart();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.displayBreakdownChart();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void extractPieChartData() throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        InfoCapsule infoCapsule \u003d this.interpreterLayer.request(AccessType.PIE_CHART_DATA, null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (infoCapsule.getUiCode() \u003d\u003d UiCode.ERROR) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(infoCapsule.getOutputStr());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.pieChartData \u003d infoCapsule.getPieChartData();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void updateBalanceChart() throws DukeException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        InfoCapsule balanceCapsule \u003d this.interpreterLayer.request(AccessType.BALANCE, null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        InfoCapsule expensesCapsule \u003d this.interpreterLayer.request(AccessType.EXPENSES, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (balanceCapsule.getUiCode() \u003d\u003d UiCode.ERROR) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(balanceCapsule.getOutputStr());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (expensesCapsule.getUiCode() \u003d\u003d UiCode.ERROR) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(expensesCapsule.getOutputStr());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.pieChartData.get(0).setPieValue(expensesCapsule.getOutputDouble());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.pieChartData.get(1).setPieValue(balanceCapsule.getOutputDouble()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                - expensesCapsule.getOutputDouble());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        DecimalFormat decimalFormat \u003d new DecimalFormat(\"$#0\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.balanceFigure.setText(decimalFormat.format(balanceCapsule.getOutputDouble()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                - expensesCapsule.getOutputDouble()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void displayBalanceChart() throws DukeException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.extractPieChartData();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.balanceChart.setData(this.pieChartData);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.balanceChart.setLegendVisible(false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.balanceChart.setLabelsVisible(false);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.balanceChart.setStartAngle(90.0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String css \u003d this.getClass().getResource(\"/css/PieChart.css\").toExternalForm();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.balanceChart.getStylesheets().add(css);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        DecimalFormat decimalFormat \u003d new DecimalFormat(\"$#0\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Double walletBalance \u003d getWalletBalance();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.balanceFigure.setText(decimalFormat.format(walletBalance));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private Double getWalletBalance() throws DukeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        InfoCapsule infoCapsule \u003d this.interpreterLayer.request(AccessType.BALANCE, null);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        InfoCapsule infoCapsule1 \u003d this.interpreterLayer.request(AccessType.EXPENSES, null);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (infoCapsule.getUiCode() \u003d\u003d UiCode.UPDATE) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return infoCapsule.getOutputDouble() - infoCapsule1.getOutputDouble();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } else if (infoCapsule.getUiCode() \u003d\u003d UiCode.ERROR) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(infoCapsule.getOutputStr());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(\"Unable to Access Wallet Balance\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void displayTasks() throws DukeException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        InfoCapsule infoCapsule \u003d this.interpreterLayer.request(AccessType.TASKLIST, null);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (infoCapsule.getUiCode() \u003d\u003d UiCode.ERROR) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            throw new DukeException(infoCapsule.getOutputStr());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.taskContainerRight.getChildren().clear();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.taskContainerLeft.getChildren().clear();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        for (Task task : infoCapsule.getTaskList()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            int leftListLength \u003d this.taskContainerLeft.getChildren().size();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            int rightListLength \u003d this.taskContainerRight.getChildren().size();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            if (leftListLength \u003e rightListLength) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.taskContainerRight.getChildren().add(TaskBox.getNewTaskBox(task));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.taskContainerLeft.getChildren().add(TaskBox.getNewTaskBox(task));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void displayBreakdownChart() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        updateBreakdownData();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.breakdownChart.getData().add(this.expenditureSeries);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.breakdownChart.getData().add(this.incomeSeries);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.breakdownChart.getData().add(this.backdrop);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.breakdownChart.setScaleY(1.1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String css \u003d this.getClass().getResource(\"/css/BreakdownChart.css\").toExternalForm();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.breakdownChart.getStylesheets().add(css);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void updateBreakdownData() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        InfoCapsule infoCapsule \u003d this.interpreterLayer.request(AccessType.WALLET, null);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Wallet wallet \u003d infoCapsule.getWallet();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        HashMap\u003cString, Double\u003e newExpenditureData \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        HashMap\u003cString, Double\u003e newIncomeData \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        for (Map.Entry\u003cString, ReceiptTracker\u003e folder : wallet.getFolders().entrySet()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            if (isFolderValid(folder)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                newExpenditureData.put(folder.getKey(), folder.getValue().getTotalExpenses());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                newIncomeData.put(folder.getKey(), folder.getValue().getTotalIncome());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Double backdropValue \u003d this.getBackdropValue(wallet);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        HashMap\u003cString, Double\u003e newBackdropData \u003d this.getBackdropData(backdropValue,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.expenditureSeries, this.incomeSeries);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.updateSeriesData(this.expenditureSeries, newExpenditureData);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.updateSeriesData(this.incomeSeries, newIncomeData);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.updateSeriesData(this.backdrop, newBackdropData);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void updateSeriesData(XYChart.Series\u003cString, Double\u003e series, HashMap\u003cString, Double\u003e newData) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        ArrayList\u003cXYChart.Data\u003cString, Double\u003e\u003e toDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        for (XYChart.Data\u003cString, Double\u003e oldDataPoint : series.getData()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            String key \u003d oldDataPoint.getXValue();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            if (newData.containsKey(key)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                oldDataPoint.setYValue(newData.get(key));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                newData.remove(key);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                toDelete.add(oldDataPoint);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        for (XYChart.Data\u003cString, Double\u003e item : toDelete) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            series.getData().remove(item);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        for (Map.Entry\u003cString, Double\u003e newDataPoint : newData.entrySet()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            series.getData().add(new XYChart.Data\u003cString, Double\u003e("
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    newDataPoint.getKey(),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    newDataPoint.getValue()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private boolean isFolderValid(Map.Entry\u003cString, ReceiptTracker\u003e folder) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (folder.getKey().equals(\"Expenses\")) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } else if (folder.getKey().equals(\"Income\")) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } else if (folder.getValue().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private Double getBackdropValue(Wallet wallet) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        double maxValue \u003d 100.0;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        for (Map.Entry\u003cString, ReceiptTracker\u003e folder : wallet.getFolders().entrySet()) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            if (!folder.getKey().equals(\"Income\") \u0026\u0026 !folder.getKey().equals(\"Expenses\")) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                if (folder.getValue().getTotalExpenses() \u003e maxValue) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    maxValue \u003d folder.getValue().getTotalExpenses();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                } else if (folder.getValue().getTotalIncome() \u003e maxValue) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    maxValue \u003d folder.getValue().getTotalIncome();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return maxValue;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private HashMap\u003cString, Double\u003e getBackdropData(Double backdropValue,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                                                    XYChart.Series\u003cString, Double\u003e expenditureSeries,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                                                    XYChart.Series\u003cString, Double\u003e incomeSeries) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        HashMap\u003cString, Double\u003e backdropData \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        for (XYChart.Data\u003cString, Double\u003e data : expenditureSeries.getData()) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            backdropData.put(data.getXValue(), backdropValue - data.getYValue());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        for (XYChart.Data\u003cString, Double\u003e data : incomeSeries.getData()) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            if (backdropData.containsKey(data.getXValue())) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                backdropData.replace(data.getXValue(), backdropData.get(data.getXValue()) - data.getYValue());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                backdropData.put(data.getXValue(), backdropValue - data.getYValue());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return backdropData;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 230
    }
  },
  {
    "path": "src/main/java/ui/gui/Launcher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package ui.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Application.launch(MainGui.class, args);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 9
    }
  },
  {
    "path": "src/main/java/ui/gui/MainGui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package ui.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import main.Duke;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageWallet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class MainGui extends Application {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private String taskPath \u003d \"savedTask.txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private String walletPath \u003d \"savedWallet.txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private MainWindow mainWindowController;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void initialize(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Application.launch(MainGui.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            FXMLLoader loaderMain \u003d new FXMLLoader(MainGui.class"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    .getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            AnchorPane anchorPane \u003d loaderMain.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.mainWindowController \u003d loaderMain.\u003cMainWindow\u003egetController();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.mainWindowController.initialize(stage, this.taskPath, this.walletPath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            Scene scene \u003d new Scene(anchorPane);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            stage.setTitle(\"Duke$$$\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.mainWindowController.saveAllData();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 48
    }
  },
  {
    "path": "src/main/java/ui/gui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package ui.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import interpreter.Interpreter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import main.Duke;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageTask;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageWallet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.UiCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import utils.InfoCapsule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private AnchorPane mainPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private AnchorPane headerPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private AnchorPane contentPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private ImageView headerBackground;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private Boolean exitRequest;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private ArrayList\u003cString\u003e userInputHistory;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private Stage mainStage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private DisplayType displayType;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private CommandLineDisplay cliController;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private HomeWindow homeController;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private Interpreter interpreterLayer;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void initialize(Stage stage, String taskPath, String walletPath) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.exitRequest \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.mainStage \u003d stage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.interpreterLayer \u003d new Interpreter(taskPath, walletPath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.displayType \u003d DisplayType.NONE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.userInputHistory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.fetchStoredImages();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.showHomeDisplay();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.refresh();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String input \u003d this.userInput.getText();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.userInputHistory.add(input);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        InfoCapsule infoCapsule \u003d this.interpreterLayer.interpret(input);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.updateGui(infoCapsule);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (this.displayType \u003d\u003d DisplayType.HOME) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.updateHomeDisplay();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.refresh(); // Javafx won\u0027t update completely"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.userInput.clear();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (this.exitRequest) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Set the Graphical User Interface to the Home Display."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void showHomeDisplay() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (this.displayType \u003d\u003d DisplayType.HOME) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.updateHomeDisplay();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            FXMLLoader loaderHomeDisplay \u003d new FXMLLoader(MainGui.class"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    .getResource(\"/view/HomeWindow.fxml\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            AnchorPane homeDisplayRoot \u003d loaderHomeDisplay.load();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.homeController \u003d loaderHomeDisplay.\u003cHomeWindow\u003egetController();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.homeController.initialize(this.userInputHistory, this.interpreterLayer);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.contentPane.getChildren().add(homeDisplayRoot);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.displayType \u003d DisplayType.HOME;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.displayToast(e.getMessage());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            // Catch Error"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (this.contentPane.getChildren().size() \u003e 1) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.contentPane.getChildren().remove(0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void updateHomeDisplay() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.homeController.updateBalanceChart();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.displayToast(e.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.homeController.displayTasks();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.displayToast(e.getMessage());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.homeController.updateBreakdownData();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void updateGui(InfoCapsule infoCapsule) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        UiCode uiCode \u003d infoCapsule.getUiCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            switch (uiCode) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            case CLI:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.showCliDisplay();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.printToDisplay(infoCapsule.getOutputStr());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            case TOAST:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.displayToast(infoCapsule.getOutputStr());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            case ERROR:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                infoCapsule.throwError();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            case EXIT:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.exitRequest \u003d true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            case DISPLAY_HOME:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.showHomeDisplay();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            case DISPLAY_CLI:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                this.showCliDisplay();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            case UPDATE:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.displayToast(e.getMessage());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void saveAllData() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.interpreterLayer.requestSave();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void refresh() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.updateHomeDisplay();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Fetches Images stored in application for display in slots for features yet to be developed."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void fetchStoredImages() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Image headerBackgroundPic \u003d new Image(this.getClass().getResourceAsStream(\"/images/headerBackground.png\"));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.headerBackground.setImage(headerBackgroundPic);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Set the Graphical User Interface to the CLI Display."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void showCliDisplay() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (this.displayType \u003d\u003d DisplayType.CLI) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            FXMLLoader loaderCliDisplay \u003d new FXMLLoader(MainGui.class"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                .getResource(\"/view/CommandLineDisplay.fxml\"));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            AnchorPane cliDisplayRoot \u003d loaderCliDisplay.load();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.cliController \u003d loaderCliDisplay.\u003cCommandLineDisplay\u003egetController();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.cliController.setStyle();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.contentPane.getChildren().add(cliDisplayRoot);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.displayType \u003d DisplayType.CLI;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            System.out.println(e.toString());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        if (this.contentPane.getChildren().size() \u003e 1) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            this.contentPane.getChildren().remove(0);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void displayToast(String string) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Toast.makeText(this.mainStage, string);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void dukeSays(String string) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.showCliDisplay();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.cliController.dukeSays(string);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void printToDisplay(String string) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.showCliDisplay();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.cliController.printToDisplay(string);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.printSeparator();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void printSeparator() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.showCliDisplay();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.cliController.printSeparator();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 210
    }
  },
  {
    "path": "src/main/java/ui/gui/TaskBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package ui.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class TaskBox extends HBox {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private TextFlow taskText;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private TaskBox(String taskTypeStr, String taskDescStr) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            FXMLLoader loader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/TaskBox.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            loader.setController(this);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            loader.setRoot(this);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            loader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Text boldText \u003d new Text(taskTypeStr + \" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        boldText.setStyle(\"-fx-font-weight: bold\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.taskText.getChildren().addAll(boldText, new Text(taskDescStr));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Creates a new TaskBox GUI Component for a Task Object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param task Task Object to be printed"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @return TaskBox Object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public static TaskBox getNewTaskBox(Task task) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String taskTypeStr \u003d task.getTaskType().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String taskDescStr \u003d task.genTaskDesc();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        TaskBox newTaskBox \u003d new TaskBox(taskTypeStr, taskDescStr);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        newTaskBox.setAlignment(Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return newTaskBox;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 44
    }
  },
  {
    "path": "src/main/java/ui/gui/Toast.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package ui.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.animation.KeyValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.control.Control;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.stage.Popup;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.stage.StageStyle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "// @@author {Mudaafi}-reused"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "// Solution below adapted from:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "// https://stackoverflow.com/questions/18669209/javafx-what-is-the-best-way-to-display-a-simple-message"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public final class Toast {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private static int TOAST_TIMEOUT \u003d 2000;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private static ArrayList\u003cString\u003e toastedArr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private static Popup createPopup(final String message) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        final Popup popup \u003d new Popup();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        popup.setAutoFix(true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Label label \u003d new Label(message);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        label.getStylesheets().add(\"/css/mainStyles.css\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        label.getStyleClass().add(\"popup\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        popup.getContent().add(label);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return popup;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Creates a popup message for the User on the Graphical User Interface."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param stage Stage the popup is to appear on"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * @param message String to be printed to the User"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public static void makeText(final Stage stage, final String message) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Popup popup \u003d createPopup(message);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        popup.setOnShown(e -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            popup.setX(stage.getX() + stage.getWidth() / 2 - popup.getWidth() / 2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            popup.setY(stage.getHeight() + (1.5 - toastedArr.size()) * popup.getHeight());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            popup.setWidth(stage.getWidth());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        popup.show(stage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        toastedArr.add(popup.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        int toastedTime \u003d TOAST_TIMEOUT * (1 + message.length() / 40);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        new Timeline(new KeyFrame(Duration.millis(toastedTime), ae -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            popup.hide();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            toastedArr.remove(popup.toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        })).play();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 60
    }
  },
  {
    "path": "src/main/java/utils/AccessType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.accessors.AccessDeny;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.accessors.AccessPieChartData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.accessors.AccessTaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.accessors.AccessWallet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.accessors.AccessWalletBalance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.accessors.AccessWalletExpenses;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public enum AccessType {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    DENY(AccessDeny.class),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    BALANCE(AccessWalletBalance.class),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    EXPENSES(AccessWalletExpenses.class),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    TASKLIST(AccessTaskList.class),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    WALLET(AccessWallet.class),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    PIE_CHART_DATA(AccessPieChartData.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private final Class accessClass;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     * Constructor for \u0027AccessType\u0027 enum."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private AccessType(Class accessClass) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.accessClass \u003d accessClass;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    // Setters \u0026 Getters"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Class getAccessClass() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return accessClass;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 32
    }
  },
  {
    "path": "src/main/java/utils/InfoCapsule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.UiCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class InfoCapsule {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private UiCode uiCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private String outputStr;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private Double outputDouble;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private ObservableList\u003cPieChart.Data\u003e pieChartData;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private Wallet wallet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void throwError() throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        throw new DukeException(outputStr);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    // Setters \u0026 Getters"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setCodeToast() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.uiCode \u003d UiCode.TOAST;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setCodeCli() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.uiCode \u003d UiCode.CLI;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setCodeUpdate() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.uiCode \u003d UiCode.UPDATE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setCodeError() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.uiCode \u003d UiCode.ERROR;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setCodeExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.uiCode \u003d UiCode.EXIT;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setUiCode(UiCode uiCode) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.uiCode \u003d uiCode;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public UiCode getUiCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return this.uiCode;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setOutputStr(String outputStr) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.outputStr \u003d outputStr;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public String getOutputStr() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return outputStr;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setOutputDouble(Double outputDouble) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.outputDouble \u003d outputDouble;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Double getOutputDouble() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return outputDouble;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setPieChartData(ObservableList\u003cPieChart.Data\u003e pieChartData) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.pieChartData \u003d pieChartData;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public ObservableList\u003cPieChart.Data\u003e getPieChartData() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return pieChartData;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setTaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public TaskList getTaskList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void setWallet(Wallet wallet) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.wallet \u003d wallet;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public Wallet getWallet() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return wallet;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AjeyAshok": 2,
      "Mudaafi": 91
    }
  },
  {
    "path": "src/main/resources/css/BreakdownChart.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ".chart {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ".chart-content {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    -fx-padding: 0px;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ".chart-title {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "  -fx-text-fill: #4682b4;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "  -fx-font-size: 0.1em;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ".default-color0.chart-bar { -fx-bar-fill: #f2c1bf }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ".default-color1.chart-bar { -fx-bar-fill: #f3c774 }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ".default-color2.chart-bar {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    -fx-bar-fill: #e5e0ca;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": " }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ".axis {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    -fx-tick-label-fill: #264358;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    -fx-tick-label-font-size: 1.1em;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    -fx-tick-label-font-weight: bold;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    -fx-tick-label-font-family: Constantia;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ".chart-plot-background {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ".chart-vertical-grid-lines {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    -fx-stroke: transparent;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ".chart-horizontal-grid-lines {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    -fx-stroke: transparent;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ".chart-alternative-row-fill {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    -fx-fill: transparent;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    -fx-stroke: transparent;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    -fx-stroke-width: 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 43
    }
  },
  {
    "path": "src/main/resources/css/PieChart.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ".chart-pie {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ".default-color0.chart-pie { -fx-pie-color: #e39a97; }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ".default-color1.chart-pie { -fx-pie-color: #f9bd4d; }"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 6
    }
  },
  {
    "path": "src/main/resources/css/mainStyles.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ".popup {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    -fx-background-color: cornsilk;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    -fx-font-size: 16;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 5
    }
  },
  {
    "path": "src/main/resources/view/CommandLineDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003cAnchorPane xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            fx:id\u003d\"cliDisplayRoot\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            fx:controller\u003d\"ui.gui.CommandLineDisplay\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            style\u003d\"-fx-background: #ede7d1; -fx-background-color: #ede7d1;\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"cliDisplay\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                AnchorPane.topAnchor\u003d\"50\" AnchorPane.bottomAnchor\u003d\"50\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                AnchorPane.rightAnchor\u003d\"50\" AnchorPane.leftAnchor\u003d\"50\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                hbarPolicy\u003d\"NEVER\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                style\u003d\"-fx-background: #ede7d1; -fx-background-color: transparent;\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        \u003cVBox fx:id\u003d\"container\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "              prefHeight\u003d\"-Infinity\" prefWidth\u003d\"450\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "              style\u003d\"-fx-background-color: #ede7d1;\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "              /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 27
    }
  },
  {
    "path": "src/main/resources/view/HomeWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c?import ui.gui.DonutChart?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c?import javafx.scene.chart.StackedBarChart?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003cAnchorPane xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            fx:controller\u003d\"ui.gui.HomeWindow\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    \u003cAnchorPane fx:id\u003d\"balanceChartPane\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                prefHeight\u003d\"190.0\" prefWidth\u003d\"254.0\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                AnchorPane.leftAnchor\u003d\"30\" AnchorPane.topAnchor\u003d\"30\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    \u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        \u003cStackPane prefHeight\u003d\"190.0\" prefWidth\u003d\"254.0\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                   AnchorPane.leftAnchor\u003d\"0\" AnchorPane.rightAnchor\u003d\"0\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                   AnchorPane.bottomAnchor\u003d\"0\" AnchorPane.topAnchor\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            \u003cLabel fx:id\u003d\"balanceChartDesc\" StackPane.alignment\u003d\"TOP_LEFT\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                   text\u003d\"BALANCE: \" textFill\u003d\"#013950\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    \u003cFont name\u003d\"Constantia\" size\u003d\"11.0\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            \u003cDonutChart fx:id\u003d\"balanceChart\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                        maxHeight\u003d\"190.0\" prefHeight\u003d\"190.0\" maxWidth\u003d\"254.0\" prefWidth\u003d\"252.0\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                        AnchorPane.bottomAnchor\u003d\"0\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            \u003cLabel fx:id\u003d\"balanceFigure\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                   maxWidth\u003d\"130\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                   StackPane.alignment\u003d\"CENTER\" style\u003d\"-fx-padding: 0 0 15 10;\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                   textFill\u003d\"#f9bd4d\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    \u003cFont name\u003d\"Constantia\" size\u003d\"45.0\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            \u003cLabel fx:id\u003d\"balanceIndicator\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                   StackPane.alignment\u003d\"CENTER\" style\u003d\"-fx-padding: 35 0 0 80;\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                   textFill\u003d\"#013950\" text\u003d\"left\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    \u003cFont name\u003d\"Constantia\" size\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    \u003cAnchorPane fx:id\u003d\"breakdownChartPane\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                prefHeight\u003d\"190.0\" prefWidth\u003d\"254.0\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                AnchorPane.rightAnchor\u003d\"30\" AnchorPane.topAnchor\u003d\"50\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    \u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        \u003cLabel fx:id\u003d\"breakdownChartDesc\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "               alignment\u003d\"TOP_LEFT\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "               text\u003d\"STATS: \" textFill\u003d\"#013950\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \u003cFont name\u003d\"Constantia\" size\u003d\"11.0\"/\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        \u003cStackedBarChart fx:id\u003d\"breakdownChart\" style\u003d\"-fx-background-color: #ede7d1;\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                         maxHeight\u003d\"190.0\" prefHeight\u003d\"180.0\" maxWidth\u003d\"254.0\" prefWidth\u003d\"252.0\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                         AnchorPane.bottomAnchor\u003d\"0\" AnchorPane.topAnchor\u003d\"20\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            \u003cxAxis\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \u003cCategoryAxis fx:id\u003d\"xAxis\" side\u003d\"BOTTOM\"/\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            \u003cyAxis\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \u003cNumberAxis fx:id\u003d\"yAxis\" side\u003d\"LEFT\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                            tickLabelsVisible\u003d\"false\" opacity\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        \u003c/StackedBarChart\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    \u003cAnchorPane fx:id\u003d\"taskPane\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                AnchorPane.topAnchor\u003d\"255.0\" AnchorPane.rightAnchor\u003d\"30\" AnchorPane.leftAnchor\u003d\"30\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                prefHeight\u003d\"168.0\" prefWidth\u003d\"585.0\" minWidth\u003d\"585.0\" maxWidth\u003d\"585.0\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                style\u003d\"-fx-background-color: #ede7d1;\" \u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"taskScroller\" prefWidth\u003d\"Infinity\" prefHeight\u003d\"168\" maxHeight\u003d\"Infinity\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    hbarPolicy\u003d\"NEVER\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    AnchorPane.topAnchor\u003d\"0\" AnchorPane.leftAnchor\u003d\"0\" AnchorPane.rightAnchor\u003d\"-10\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    style\u003d\"-fx-background: #ede7d1; -fx-background-color: transparent;\"\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            \u003cAnchorPane fx:id\u003d\"taskContainerMain\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                        prefHeight\u003d\"-Infinity\" prefWidth\u003d\"540.0\" pickOnBounds\u003d\"false\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                        style\u003d\"-fx-background-color: #ede7d1;\" \u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \u003cVBox fx:id\u003d\"taskContainerLeft\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                      prefHeight\u003d\"-Infinity\" prefWidth\u003d\"266.5\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                      AnchorPane.leftAnchor\u003d\"0\" AnchorPane.topAnchor\u003d\"0\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                      spacing\u003d\"5.0\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                      style\u003d\"-fx-background-color: #ede7d1;\" /\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \u003cVBox fx:id\u003d\"taskContainerRight\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                      prefHeight\u003d\"-Infinity\" prefWidth\u003d\"266.5\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                      AnchorPane.rightAnchor\u003d\"0\" AnchorPane.topAnchor\u003d\"0\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                      spacing\u003d\"5.0\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                      style\u003d\"-fx-background-color: #ede7d1;\" /\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 107
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"mainPain\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            mouseTransparent\u003d\"false\" prefHeight\u003d\"600.0\" prefWidth\u003d\"642.0\" style\u003d\"-fx-background-color: #ede7d1;\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            fx:controller\u003d\"ui.gui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        \u003cAnchorPane fx:id\u003d\"headerPane\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                   prefHeight\u003d\"128.0\" prefWidth\u003d\"642.0\" style\u003d\"-fx-background-color: #10073e;\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                   AnchorPane.topAnchor\u003d\"0\" AnchorPane.rightAnchor\u003d\"0\" AnchorPane.leftAnchor\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \u003cImageView fx:id\u003d\"headerBackground\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                           fitHeight\u003d\"128.0\" fitWidth\u003d\"642.0\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                           nodeOrientation\u003d\"INHERIT\" pickOnBounds\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \u003cLabel fx:id\u003d\"appName\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                       AnchorPane.topAnchor\u003d\"10\" AnchorPane.leftAnchor\u003d\"0\" AnchorPane.rightAnchor\u003d\"0\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                       alignment\u003d\"TOP_CENTER\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                       text\u003d\"Duke$$$\" textFill\u003d\"#fffaeb\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                        \u003cFont name\u003d\"Bodoni MT Bold\" size\u003d\"70.0\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \u003cLabel fx:id\u003d\"appDescription\" AnchorPane.leftAnchor\u003d\"0\" AnchorPane.rightAnchor\u003d\"0\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                       alignment\u003d\"BOTTOM_CENTER\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                       AnchorPane.bottomAnchor\u003d\"15\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                       text\u003d\"Financial Tracker\" textFill\u003d\"#ede7d1\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                        \u003cFont name\u003d\"Bodoni MT Bold\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        \u003cAnchorPane fx:id\u003d\"inputPane\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    prefHeight\u003d\"30.0\" prefWidth\u003d\"600.0\" style\u003d\"-fx-background-color: #ede7d1;\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    AnchorPane.leftAnchor\u003d\"21.0\" AnchorPane.rightAnchor\u003d\"21.0\" AnchorPane.topAnchor\u003d\"150\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            \u003cTextField fx:id\u003d\"userInput\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                       onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                       prefHeight\u003d\"26.0\" prefWidth\u003d\"585.0\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                       promptText\u003d\"Ready\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                       style\u003d\"-fx-background-color: #ede7d1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                       -fx-border-style: none none solid none; -fx-border-width: 0 0 1 0; -fx-border-color: #696969;\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                       AnchorPane.leftAnchor\u003d\"30.0\" AnchorPane.rightAnchor\u003d\"30.0\" AnchorPane.topAnchor\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    \u003cFont name\u003d\"Constantia\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            \u003c/TextField\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        \u003cAnchorPane fx:id\u003d\"contentPane\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    prefHeight\u003d\"450.0\" prefWidth\u003d\"600.0\" style\u003d\"-fx-background-color: #ede7d1;\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                    AnchorPane.leftAnchor\u003d\"21.0\" AnchorPane.rightAnchor\u003d\"21.0\" AnchorPane.topAnchor\u003d\"180\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 62
    }
  },
  {
    "path": "src/main/resources/view/TaskBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003cfx:root type\u003d\"javafx.scene.layout.HBox\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "         maxHeight\u003d\"25.0\" maxWidth\u003d\"266.5\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "         prefWidth\u003d\"266.5\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "         alignment\u003d\"TOP_RIGHT\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "         style\u003d\"-fx-background-color: #f3efe0;\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "         \u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    \u003cTextFlow fx:id\u003d\"taskText\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 24
    }
  },
  {
    "path": "src/test/java/CommandAddReceiptTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import com.sun.tools.javac.Main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.CommandAddIncomeReceipt;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.CommandAddSpendingReceipt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.CommandType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.gui.MainWindow;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "public class CommandAddReceiptTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        String incomeInput \u003d \"In $3.00 /date 1990-01-24 /tags bank robbed crime\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        String spendingInput \u003d \"Out $15 /date 2019-12-31 /tags fine bank robbed\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        CommandAddIncomeReceipt testIncome \u003d new CommandAddIncomeReceipt(incomeInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        CommandAddSpendingReceipt testSpending \u003d new CommandAddSpendingReceipt(spendingInput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        testIncome.execute(storageManager);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        testSpending.execute(storageManager);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        assertEquals(CommandType.IN, testIncome.getCommandType());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(3.00, testIncome.getCash());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        assertEquals(\"1990-01-24\", testIncome.getDate().toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"bank\", testIncome.getTags().get(1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"robbed\", testIncome.getTags().get(2));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"crime\", testIncome.getTags().get(3));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(CommandType.OUT, testSpending.getCommandType());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(15, testSpending.getCash());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        assertEquals(\"2019-12-31\", testSpending.getDate().toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"fine\", testSpending.getTags().get(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"bank\", testSpending.getTags().get(2));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"robbed\", testSpending.getTags().get(3));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 20,
      "sallysohyun": 18
    }
  },
  {
    "path": "src/test/java/CommandCalculatorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import executor.command.CommandAdd;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import executor.command.CommandDiv;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import executor.command.CommandMul;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import executor.command.CommandSub;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "public class CommandCalculatorTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "     void execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        CommandAdd add \u003d new CommandAdd(\"1/2\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        add.execute(storageManager);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String result \u003d add.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        assertEquals(\"1 + 2 \u003d 3.0\\n\", result);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        CommandAdd add2 \u003d new CommandAdd(\"134fg 1\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        add2.execute(storageManager);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String result2 \u003d add2.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        assertEquals(\"Invalid input please enter in this format: add \u003cnum1\u003e / \u003cnum2\u003e\", result2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        CommandSub sub \u003d new CommandSub(\"1/3\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        sub.execute(storageManager);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String output \u003d sub.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        assertEquals(\"1 - 3 \u003d -2.0\\n\", output);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        CommandSub sub2 \u003d new CommandSub(\"1\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        sub2.execute(storageManager);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String output2 \u003d sub2.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        assertEquals(\"Enter forward slash and second number. Format: sub \u003cnum1\u003e / \u003cnum2\u003e\", output2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        CommandDiv div \u003d new CommandDiv(\"4/2\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        div.execute(storageManager);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String result1 \u003d div.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        assertEquals(\"4 / 2 \u003d 2.0\\n\", result1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        CommandDiv div2 \u003d new CommandDiv(\"2/0\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        div2.execute(storageManager);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String result3 \u003d div2.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        assertEquals(\"2 / 0 \u003d Infinity\\n\", result3);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        CommandMul mul \u003d new CommandMul(\"3/2.0\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        mul.execute(storageManager);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String output3 \u003d mul.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        assertEquals(\"3 * 2.0 \u003d 6.0\\n\", output3);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        CommandMul mul2 \u003d new CommandMul(\"3/ abc\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        mul2.execute(storageManager);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String output4 \u003d mul2.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        assertEquals(\"Invalid input please enter the second number. Format: mul \u003cnum1\u003e / \u003cnum2\u003e\", output4);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Araavinds": 57
    }
  },
  {
    "path": "src/test/java/CommandDateListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import executor.command.CommandDateList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import ui.Receipt;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "public class CommandDateListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        Receipt receiptOne \u003d new Receipt(3.0);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        receiptOne.addTag(\"transport\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        receiptOne.setDate(LocalDate.parse(\"2019-02-01\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        storageManager.getWallet().addReceipt(receiptOne);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        CommandDateList dateOne \u003d new CommandDateList(\"datelist 2019-02-01\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        dateOne.execute(storageManager);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String output \u003d dateOne.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"You have the following receipts for 2019-02-01\\n1. [transport] $3.00 2019-02-01\\n\", output);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        CommandDateList d1 \u003d new CommandDateList(\"datelist 123cwv\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        d1.execute(storageManager);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String result \u003d d1.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        assertEquals(\"Invalid date input. FORMAT : datelist yyyy-mm-dd\", result);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        CommandDateList d2 \u003d new CommandDateList(\"datelist\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        d2.execute(storageManager);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String result2 \u003d d2.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        assertEquals(\"Invalid date input. FORMAT : datelist yyyy-mm-dd\", result2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 1,
      "Araavinds": 35
    }
  },
  {
    "path": "src/test/java/CommandDeleteReceiptTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import executor.command.CommandDeleteReceipt;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import ui.Receipt;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "public class CommandDeleteReceiptTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        Receipt receiptOne \u003d new Receipt(4.0);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        receiptOne.addTag(\"transport\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        receiptOne.setDate(LocalDate.parse(\"2019-02-01\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        storageManager.getWallet().addReceipt(receiptOne);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        CommandDeleteReceipt d1 \u003d new CommandDeleteReceipt(\"deletereceipt 1\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        d1.execute(storageManager);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String output \u003d d1.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        assertEquals(\"Receipt 1 has been deleted\\n\", output);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        CommandDeleteReceipt d2 \u003d new CommandDeleteReceipt(\"deletereceipt\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        d2.execute(storageManager);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String result \u003d d2.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        assertEquals(\"Index input is missing. FORMAT : deletereceipt \u003cIndex_of_Entry\u003e\", result);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        CommandDeleteReceipt d3 \u003d new CommandDeleteReceipt(\"deletereceipt 2.0f\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        d3.execute(storageManager);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String out \u003d d3.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        assertEquals(\"Invalid index input. Please enter an integer\", out);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        CommandDeleteReceipt d4 \u003d new CommandDeleteReceipt(\"deletereceipt 10\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        d4.execute(storageManager);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String output2 \u003d d4.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        assertEquals(\"Invalid \u0027deletereceipt\u0027 statement.\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "                + \"Please indicate the index of the receipt you wish to delete.\\n\", output2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Araavinds": 42
    }
  },
  {
    "path": "src/test/java/CommandDeleteTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import executor.command.CommandDelete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import executor.task.ToDo;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "public class CommandDeleteTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        storageManager.getTaskList().addTask(new ToDo(\"assignment\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        CommandDelete d1 \u003d new CommandDelete(\"delete 1\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        d1.execute(storageManager);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String result \u003d d1.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        assertEquals(\"Task 1)assignment has been deleted.\\n\", result);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        CommandDelete d2 \u003d new CommandDelete(\"delete 34f5t\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        d2.execute(storageManager);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String output \u003d d2.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        assertEquals(\"Invalid index input. Please enter an integer\", output);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        CommandDelete d3 \u003d new CommandDelete(\"delete 3\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        d3.execute(storageManager);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String result1 \u003d d3.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        assertEquals(\"Unable to get Task Name of Task at index 2\\n\", result1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Araavinds": 37
    }
  },
  {
    "path": "src/test/java/CommandDisplayBalanceTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.CommandDisplayBalance;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.gui.MainWindow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class CommandDisplayBalanceTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private ByteArrayOutputStream outContent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private ByteArrayOutputStream errContent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private PrintStream originalOut;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private PrintStream originalErr;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void resetTextTracker() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        errContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        originalOut \u003d System.out;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        originalErr \u003d System.err;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        System.setErr(new PrintStream(errContent));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void endTextTracker() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        System.setErr(originalErr);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void executeTest() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 38
    }
  },
  {
    "path": "src/test/java/CommandDisplayExpenditureTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.CommandDisplayExpenditure;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Receipt;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.gui.MainWindow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class CommandDisplayExpenditureTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private ByteArrayOutputStream outContent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private ByteArrayOutputStream errContent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private PrintStream originalOut;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private PrintStream originalErr;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void resetTextTracker() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        errContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        originalOut \u003d System.out;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        originalErr \u003d System.err;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        System.setErr(new PrintStream(errContent));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private void endTextTracker() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        System.setErr(originalErr);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 37
    }
  },
  {
    "path": "src/test/java/CommandGetSpendingByMonthTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import executor.command.CommandGetSpendingByMonth;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import ui.Receipt;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "public class CommandGetSpendingByMonthTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "   void execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        Receipt receipt1 \u003d new Receipt(5.0);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        receipt1.addTag(\"food\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        receipt1.setDate(LocalDate.parse(\"2019-10-10\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        storageManager.getWallet().addReceipt(receipt1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        Receipt receipt2 \u003d new Receipt(5.0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        receipt2.addTag(\"food\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        receipt2.setDate(LocalDate.parse(\"2019-11-10\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        storageManager.getWallet().addReceipt(receipt2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        CommandGetSpendingByMonth c1 \u003d new CommandGetSpendingByMonth(\"expendedmonth october /year 2019\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        c1.execute(storageManager);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        String ans1 \u003d c1.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        assertEquals(\"The total amount of money spent in october 2019 : $5.0\\n\", ans1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        CommandGetSpendingByMonth c2 \u003d new CommandGetSpendingByMonth(\"expendedmonth november /year 2019\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        c2.execute(storageManager);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        String ans2 \u003d c2.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        assertEquals(\"The total amount of money spent in november 2019 : $5.0\\n\", ans2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        CommandGetSpendingByMonth c3 \u003d new CommandGetSpendingByMonth(\"expendedmonth nov /year 2019\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        c3.execute(storageManager);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        String ans3 \u003d c3.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        assertEquals(\"Wrong month input. Check Spelling\", ans3);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        CommandGetSpendingByMonth c4 \u003d new CommandGetSpendingByMonth(\"expendedmonth november /year 209\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        c4.execute(storageManager);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        String ans4 \u003d c4.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        assertEquals(\"Year input contains lesser/extra number of variables. \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                + \"\\nFORMAT : expendedmonth \u003cmonth\u003e /year \u003cyear\u003e\", ans4);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        CommandGetSpendingByMonth c5 \u003d new CommandGetSpendingByMonth(\"expendedmonth november /yea 2019\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        c5.execute(storageManager);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        String ans5 \u003d c5.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        assertEquals(\"Wrong format! FORMAT : expendedmonth \u003cmonth\u003e /year \u003cyear\u003e\", ans5);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        CommandGetSpendingByMonth c6 \u003d new CommandGetSpendingByMonth(\"expendedmonth november /year 1750\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        c6.execute(storageManager);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        String ans6 \u003d c6.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        assertEquals(\"Year is too far back into the past\", ans6);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        CommandGetSpendingByMonth c7 \u003d new CommandGetSpendingByMonth(\"expendedmonth november /year 2750\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        c7.execute(storageManager);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        String ans7 \u003d c7.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        assertEquals(\"Future year entered is invalid!\", ans7);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        CommandGetSpendingByMonth c8 \u003d new CommandGetSpendingByMonth(\"expendedmonth november /year\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        c8.execute(storageManager);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        String ans8 \u003d c8.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        assertEquals(\"No year input detected. FORMAT : expendedmonth \u003cmonth\u003e /year \u003cyear\u003e\", ans8);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        CommandGetSpendingByMonth c9 \u003d new CommandGetSpendingByMonth(\"expendedmonth /year 2019\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        c9.execute(storageManager);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        String ans9 \u003d c9.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        assertEquals(\"No month input detected. FORMAT : expendedmonth \u003cmonth\u003e /year \u003cyear\u003e\", ans9);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AjeyAshok": 72
    }
  },
  {
    "path": "src/test/java/CommandGetSpendingByWeekTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import executor.command.CommandGetSpendingByWeek;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import ui.Receipt;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "public class CommandGetSpendingByWeekTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        String dayDate \u003d LocalDate.now().toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        Receipt receipt1 \u003d new Receipt(5.0);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        receipt1.addTag(\"breakfast\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        receipt1.setDate(LocalDate.parse(dayDate));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        storageManager.getWallet().addReceipt(receipt1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        String yesterday \u003d LocalDate.now().minusDays(1).toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        Receipt receipt2 \u003d new Receipt(5.0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        receipt2.addTag(\"trans\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        receipt2.setDate(LocalDate.parse(yesterday));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        storageManager.getWallet().addReceipt(receipt2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        int dayNum \u003d CommandGetSpendingByWeek.dayStrToInt(LocalDate.now().getDayOfWeek().toString().toLowerCase());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        int dayLeft \u003d 7 - dayNum;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        CommandGetSpendingByWeek c1 \u003d new CommandGetSpendingByWeek(\"expendedweek\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        c1.execute(storageManager);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        String ans1 \u003d c1.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        assertEquals(\"The total amount spent this week is $\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                + \"10.0\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                + \" and there is/are \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                + dayLeft"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                + \"day(s) to end of week\", ans1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AjeyAshok": 38
    }
  },
  {
    "path": "src/test/java/CommandGetSpendingByYearTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import executor.command.CommandGetSpendingByMonth;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import executor.command.CommandGetSpendingByYear;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import ui.Receipt;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "public class CommandGetSpendingByYearTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        Receipt receipt1 \u003d new Receipt(5.0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        receipt1.addTag(\"food\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        receipt1.setDate(LocalDate.parse(\"2019-10-10\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        storageManager.getWallet().addReceipt(receipt1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        Receipt receipt2 \u003d new Receipt(5.0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        receipt2.addTag(\"food\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        receipt2.setDate(LocalDate.parse(\"2019-11-10\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        storageManager.getWallet().addReceipt(receipt2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        CommandGetSpendingByYear c1 \u003d new CommandGetSpendingByYear(\"expendedyear 2019\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        c1.execute(storageManager);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        String ans1 \u003d c1.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        assertEquals(\"The total amount of money spent in 2019 : $10.0\\n\", ans1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        CommandGetSpendingByYear c2 \u003d new CommandGetSpendingByYear(\"expendedyear\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        c2.execute(storageManager);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        String ans2 \u003d c2.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        assertEquals(\"No year input detected.\\nFORMAT : expendedyear 2019\\n\", ans2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        CommandGetSpendingByYear c3 \u003d new CommandGetSpendingByYear(\"expendedyear 201\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        c3.execute(storageManager);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        String ans3 \u003d c3.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        assertEquals(\"Year input contains lesser/extra number of variables.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                + \" FORMAT : expendedyear 2019\\n\", ans3);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        CommandGetSpendingByYear c4 \u003d new CommandGetSpendingByYear(\"expendedyear 2091\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        c4.execute(storageManager);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        String ans4 \u003d c4.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        assertEquals(\"Future year entered is invalid!\" + \"\\n\", ans4);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        CommandGetSpendingByYear c5 \u003d new CommandGetSpendingByYear(\"expendedyear 1750\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        c5.execute(storageManager);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        String ans5 \u003d c5.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        assertEquals(\"Year is too far back into the past\" + \"\\n\", ans5);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        CommandGetSpendingByYear c6 \u003d new CommandGetSpendingByYear(\"expendedyear abcd\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        c6.execute(storageManager);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        String ans6 \u003d c6.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        assertEquals(\"Year input is either a double or contains String values.\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "                + \"FORMAT : expendedyear 2019\\n\", ans6);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AjeyAshok": 66
    }
  },
  {
    "path": "src/test/java/CommandHelpTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import executor.Executor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import executor.command.Command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import executor.command.CommandBye;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import executor.command.CommandHelp;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import executor.command.CommandType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "public class CommandHelpTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        String outputStr \u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        Command c \u003d Executor.createCommand(CommandType.BYE,\"null\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        outputStr \u003d c.getDescription();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        String out \u003d \"BYE\" + \" - \" + outputStr + \"\\n\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        CommandHelp c1 \u003d new CommandHelp(\"help bye\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        c1.execute(storageManager);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        String ans1 \u003d c1.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        assertEquals(out,ans1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        CommandHelp c2 \u003d new CommandHelp(\"helpcwdcwv\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        c2.execute(storageManager);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        String ans2 \u003d c2.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        assertEquals(\"Command invalid. Enter \u0027help\u0027 to see all the available commands.\\n\",ans2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        CommandHelp c3 \u003d new CommandHelp(\"help 234243\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        c3.execute(storageManager);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        String ans3 \u003d c3.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "        assertEquals(\"Command invalid. Enter \u0027help\u0027 to see all the available commands.\\n\",ans3);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AjeyAshok": 36
    }
  },
  {
    "path": "src/test/java/CommandMajorExpenseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import executor.command.CommandMajorExpense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import ui.Receipt;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "public class CommandMajorExpenseTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        Receipt receiptOne \u003d new Receipt(40.0);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        receiptOne.addTag(\"transport\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        receiptOne.setDate(LocalDate.parse(\"2019-02-01\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        storageManager.getWallet().addReceipt(receiptOne);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        Receipt receiptTwo \u003d new Receipt(4.0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        receiptTwo.addTag(\"food\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        receiptTwo.setDate(LocalDate.parse(\"2019-02-02\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        storageManager.getWallet().addReceipt(receiptTwo);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        Receipt receiptThree \u003d new Receipt(100.0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        receiptThree.addTag(\"transport\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        receiptThree.setDate(LocalDate.parse(\"2019-05-02\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        storageManager.getWallet().addReceipt(receiptThree);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        CommandMajorExpense m1 \u003d new CommandMajorExpense(\"majorexpense 40\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        m1.execute(storageManager);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String output \u003d m1.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        assertEquals(\"These are your receipts above/equal to\" + \" \" + \"$\" + 40 + \"\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + \"1. [transport] $40.00 2019-02-01\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + \"2. [transport] $100.00 2019-05-02\\n\", output);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        CommandMajorExpense m2 \u003d new CommandMajorExpense(\"majorexpense -5.0\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        m2.execute(storageManager);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String result \u003d m2.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        assertEquals(\"Input integer must be positive\", result);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        CommandMajorExpense m3 \u003d new CommandMajorExpense(\"majorexpense\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        m3.execute(storageManager);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String result1 \u003d m3.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        assertEquals(\"These are your receipts above/equal to $\" + 100 + \"\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                + \"1. [transport] $100.00 2019-05-02\\n\", result1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        CommandMajorExpense m4 \u003d new CommandMajorExpense(\"majorexpense 34df5\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        m4.execute(storageManager);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String result2 \u003d m4.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        assertEquals(\"Invalid cash input. Please enter integer\", result2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 3,
      "Araavinds": 52
    }
  },
  {
    "path": "src/test/java/CommandMarkDoneTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.CommandMarkDone;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "class CommandMarkDoneTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void loadQueuedTasks() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Task mainTask \u003d null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Task queuedTask \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            mainTask \u003d TaskList.createTask(TaskType.EVENT, \"something/by somewhen\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            queuedTask \u003d TaskList.createTask(TaskType.DEADLINE, \"Something Else / rly\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assert mainTask !\u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assert queuedTask !\u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList queuedTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        queuedTaskList.addTask(queuedTask);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        mainTask.setQueuedTasks(queuedTaskList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        storageManager.getTaskList().addTask(mainTask);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandMarkDone c \u003d new CommandMarkDone(\"Done1\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        c.execute(storageManager);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Task loadedTask \u003d storageManager.getTaskList().get(1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(true, mainTask.getIsDone());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(false, mainTask.isQueuedTasks());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(TaskType.DEADLINE, loadedTask.getTaskType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"Something Else\", loadedTask.getTaskName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"\", loadedTask.getDetailDesc());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"rly\", loadedTask.getTaskDetails());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 25,
      "-": 15
    }
  },
  {
    "path": "src/test/java/CommandPercentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import executor.command.CommandPercent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import ui.Receipt;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "public class CommandPercentTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        Receipt receiptOne \u003d new Receipt(4.0);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        receiptOne.addTag(\"transport\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        receiptOne.setDate(LocalDate.parse(\"2019-02-01\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        storageManager.getWallet().addReceipt(receiptOne);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        Receipt receiptTwo \u003d new Receipt(4.0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        receiptTwo.addTag(\"food\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        receiptTwo.setDate(LocalDate.parse(\"2019-02-02\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        storageManager.getWallet().addReceipt(receiptTwo);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        CommandPercent percentOne \u003d new CommandPercent(\"percent transport\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        percentOne.execute(storageManager);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String output \u003d percentOne.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        assertEquals(\"50.0% of your wallet expenses is spent on transport\\n\", output);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        CommandPercent percentTwo \u003d new CommandPercent(\"percent\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        percentTwo.execute(storageManager);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String result \u003d percentTwo.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        assertEquals(\"Tag input is missing. FORMAT : percent \u003ctag\u003e\", result);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        CommandPercent percentThree \u003d new CommandPercent(\"percent books\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        percentThree.execute(storageManager);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String result2 \u003d percentThree.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        assertEquals(\"0.0% of your wallet expenses is spent on books\\n\", result2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Araavinds": 43
    }
  },
  {
    "path": "src/test/java/CommandQueueTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.CommandQueue;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "class CommandQueueTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Task testTask \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            testTask \u003d TaskList.createTask(TaskType.EVENT, \"something/by somewhen\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assert testTask !\u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        storageManager.getTaskList().addTask(testTask);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        CommandQueue testCommand \u003d new CommandQueue(\"Queue 1 /task EventIce Cream Party / Tomorrow\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        testCommand.execute(storageManager);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Task mainTask \u003d storageManager.getTaskList().get(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, mainTask.isQueuedTasks());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Task queuedTask \u003d mainTask.getQueuedTasks().get(0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(TaskType.EVENT, queuedTask.getTaskType());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"Ice Cream Party\", queuedTask.getTaskName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"\", queuedTask.getDetailDesc());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"Tomorrow\", queuedTask.getTaskDetails());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 23,
      "-": 12
    }
  },
  {
    "path": "src/test/java/CommandTagListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import executor.command.CommandTagList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import ui.Receipt;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "public class CommandTagListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        Receipt receiptOne \u003d new Receipt(3.0);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        receiptOne.addTag(\"food\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        receiptOne.setDate(LocalDate.parse(\"2019-02-01\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        storageManager.getWallet().addReceipt(receiptOne);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        CommandTagList dateOne \u003d new CommandTagList(\"taglist food\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        dateOne.execute(storageManager);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String output \u003d dateOne.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"You spent a total of $3.00 on food\\n\" + \"1. [food] $3.00 2019-02-01\\n\\n\", output);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        CommandTagList d1 \u003d new CommandTagList(\"taglist\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        d1.execute(storageManager);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        String result \u003d d1.getInfoCapsule().getOutputStr();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "        assertEquals(\"Tag input is missing. FORMAT : taglist \u003ctag\u003e\", result);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Araavinds"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Araavinds"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 1,
      "Araavinds": 30
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.CommandType;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import interpreter.Parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void removeStr() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"Something\", Parser.removeStr(\"TODO\", \"TodoSomething\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Should remove \u0027Todo\u0027\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"event /by tmrw\", Parser.removeStr(\"DEADLINE\", \"deadline event /by tmrw\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Should remove \u0027deadline\u0027\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"something whitespace\", Parser.removeStr(\"EVENT\", \" Event something whitespace \"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Should remove \u0027Event\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void parseStoredTask() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] expectedResult \u003d {\"TODO\", \"yoda things/ tmrw at last\", \"false\"};"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResult[0], Parser.parseStoredTaskDetails(\"TODO yoda things/ tmrw at last####false\\n\")[0],"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                \"First Object\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResult[1], Parser.parseStoredTaskDetails(\"TODO yoda things/ tmrw at last####false\\n\")[1],"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Second Object\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResult[2], Parser.parseStoredTaskDetails(\"TODO yoda things/ tmrw at last####false\\n\")[2],"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Third Object\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void parseForPrimaryInputTest() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"5\", Parser.parseForPrimaryInput(CommandType.TODO,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \"todo5\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"holiday\", Parser.parseForPrimaryInput(CommandType.RECUR,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \"Recur holiday /repeat always\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"Death as a respite from CS2113T\", Parser.parseForPrimaryInput(CommandType.EVENT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \"EventDeath as a respite from CS2113T /when anytime /where anywhere\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void parseForFlagsTest() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertNull(Parser.parseForFlag(\"when\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \"Delete2\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"23\", Parser.parseForFlag(\"times\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \"Recur this /times 23\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"somewhere somewhen\", Parser.parseForFlag(\"details\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \"Event there /details somewhere somewhen\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"Over the moon\", Parser.parseForFlag(\"feeling\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \"Deadline cry /feeling Over the moon /due 2359, tonight\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"bring presents\", Parser.parseForFlag(\"todo\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \"Event Birthday Party /when 23-09-2019 /at Mark Zuckerberg\u0027s /todo bring presents /dress-code blue\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 27,
      "-": 27
    }
  },
  {
    "path": "src/test/java/StorageTaskTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.Task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.TaskType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "import storage.StorageTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "public class StorageTaskTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void loadData() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        StorageTask storagetask \u003d new StorageTask(\"testDataLoad.txt\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        TaskList taskListResult \u003d new TaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            storagetask.loadData(taskListResult);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        final SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        //TODO yoda things/ tmrw at last@|@false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Task taskResult \u003d taskListResult.get(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(TaskType.TODO, taskResult.getTaskType(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \"Loaded wrong taskType\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"yoda things\", taskResult.getTaskName(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \"Loaded wrong taskName\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"\", taskResult.getDetailDesc(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \"Loaded wrong detailDesc\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"tmrw at last\", taskResult.getTaskDetails(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \"Loaded wrong taskDetails\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(false, taskResult.getIsDone(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \"Loaded wrong isDone\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        //EVENT something/by somewhen@|@true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        taskResult \u003d taskListResult.get(1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(TaskType.EVENT, taskResult.getTaskType(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \"Loaded wrong taskType\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"something\", taskResult.getTaskName(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \"Loaded wrong taskName\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"by\", taskResult.getDetailDesc(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \"Loaded wrong detailDesc\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"somewhen\", taskResult.getTaskDetails(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \"Loaded wrong taskDetails\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(true, taskResult.getIsDone(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \"Loaded wrong isDone\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        //DEADLINE this/by 19/09/19 1015@|@false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        taskResult \u003d taskListResult.get(2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(TaskType.DEADLINE, taskResult.getTaskType(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \"Loaded wrong taskType\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"this\", taskResult.getTaskName(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \"Loaded wrong taskName\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"by\", taskResult.getDetailDesc(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \"Loaded wrong detailDesc\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"19/09/19 1015\", taskResult.getTaskDetails(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \"Loaded wrong taskDetails\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(false, taskResult.getIsDone(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \"Loaded wrong isDone\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"19/09/19\", taskResult.getDate().format(DateTimeFormatter.ofPattern(\"dd/MM/yy\")),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                \"Loaded wrong taskDetails\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"1015\", taskResult.getTime().format(DateTimeFormatter.ofPattern(\"HHmm\")));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void saveData() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        // testDataLoad is the test Data"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        // Follow the Storage Format when inputting new test cases"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        StorageTask storageExpected \u003d new StorageTask(\"testDataLoad.txt\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        StorageTask storageSaved \u003d new StorageTask(\"testDataSave.txt\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            storageExpected.loadData(taskList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            storageSaved.saveData(taskList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        File fileExpected \u003d new File(\"testDataLoad.txt\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        File fileSaved \u003d new File(\"testDataSave.txt\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            Scanner scannerExpected \u003d new Scanner(fileExpected);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            Scanner scannerSaved \u003d new Scanner(fileSaved);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            while (scannerExpected.hasNextLine()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                assertEquals(scannerExpected.nextLine(), scannerSaved.nextLine());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            System.out.println(e.toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 94,
      "sallysohyun": 6
    }
  },
  {
    "path": "src/test/java/StorageWalletTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageWallet;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "import ui.Wallet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "import ui.Receipt;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "public class StorageWalletTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    void loadData() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        StorageWallet storageWallet \u003d new StorageWallet(\"testWalletDataLoad.txt\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Wallet wallet \u003d new Wallet();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            storageWallet.loadData(wallet);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        //In 5.00 /date 2019-01-29 /tags street"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        Receipt firstReceipt \u003d wallet.getReceipts().get(0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        assertEquals(-5.00, firstReceipt.getCashSpent(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "                \"Loaded wrong cashSpent\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        assertEquals(\"2019-08-30\", firstReceipt.getDate().toString(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "                \"Loaded wrong date\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"street\", firstReceipt.getTags().get(1),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "                \"Loaded wrong tag\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        //out $10 /date 2001-08-25"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        Receipt secondReceipt \u003d wallet.getReceipts().get(1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        assertEquals(10, secondReceipt.getCashSpent(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "                \"Loaded wrong cashSpent\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        assertEquals(\"2001-08-25\", secondReceipt.getDate().toString(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "                \"Loaded wrong date\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        //Out $15.00 /date 2019-12-10 /tags dogfood puppy monthly"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        Receipt thirdReceipt \u003d wallet.getReceipts().get(2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        assertEquals(15, thirdReceipt.getCashSpent(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "                \"Loaded wrong cashSpent\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        assertEquals(\"2019-12-10\", thirdReceipt.getDate().toString(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "                \"Loaded wrong date\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"dogfood\", thirdReceipt.getTags().get(1),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "                \"Loaded wrong tag\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"puppy\", thirdReceipt.getTags().get(2),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "                        \"Loaded wrong tag\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"monthly\", thirdReceipt.getTags().get(3),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "                        \"Loaded wrong tag\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        //in $3.00 /date 2018-03-14 /tags refund clothes"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        Receipt fourthReceipt \u003d wallet.getReceipts().get(3);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        assertEquals(-3.00, fourthReceipt.getCashSpent(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "                \"Loaded wrong cashSpent\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        assertEquals(\"2018-03-14\", fourthReceipt.getDate().toString(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "                \"Loaded wrong date\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"refund\", fourthReceipt.getTags().get(1),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "                \"Loaded wrong tag\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"clothes\", fourthReceipt.getTags().get(2),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "                        \"Loaded wrong tag\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    void saveData() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        // testDataLoad is the test Data"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        // Follow the Storage Format when inputting new test cases"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        StorageWallet storageExpected \u003d new StorageWallet(\"testWalletDataLoad.txt\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        StorageWallet storageSaved \u003d new StorageWallet(\"testWalletDataSave.txt\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Wallet wallet \u003d new Wallet();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            storageExpected.loadData(wallet);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        // Check file content manually, as input may differ from standard format (Input: $5 Saved: $5.00)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "            storageSaved.saveData(wallet);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            System.out.println(e.toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 25,
      "sallysohyun": 57
    }
  },
  {
    "path": "src/test/java/ToDoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.task.ToDo;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "class ToDoTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void initialize() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        final DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        ToDo test \u003d new ToDo(\"TodoSomething\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"Something\", test.getTaskName(), \"taskName interpretation error\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        test \u003d new ToDo(\"TODO SomethingElse / yolo\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"SomethingElse\", test.getTaskName(), \"taskName interpretation error\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"yolo\", test.getTaskDetails(), \"taskDetails interpretation error\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        test \u003d new ToDo(\"todo fire in my pants /by   yolo  \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"fire in my pants\", test.getTaskName(), \"taskName interpretation error\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"yolo\", test.getTaskDetails(), \"taskDetails interpretation error\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"by\", test.getDetailDesc(), \"detailDesc interpretation error\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        test \u003d new ToDo(\"todosurvive /between 19/09/97 19/09/19\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"survive\", test.getTaskName(), \"taskName interpretation error\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"19/09/97 19/09/19\", test.getTaskDetails(), \"taskDetails interpretation error\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"between\", test.getDetailDesc(), \"detailDesc interpretation error\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"19/09/97\", test.getDateFrom().format(formatter), \"dateFrom interpretation error\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"19/09/19\",  test.getDateTo().format(formatter), \"dateTo interpretation error\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        test \u003d new ToDo(\"todo SU /for weekly\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        assertEquals(\"SU\", test.getTaskName(), \"taskName interpretation error\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        assertEquals(\"for\", test.getDetailDesc(), \"detailDesc interpretation error\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sallysohyun"
        },
        "content": "        assertEquals(\"weekly\", test.getTaskDetails(), \"taskDetails interpretation error\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 16,
      "sallysohyun": 5,
      "-": 18
    }
  },
  {
    "path": "src/test/java/ui/CommandConvertTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import executor.command.CommandConvert;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import executor.command.CommandType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "public class CommandConvertTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        CommandConvert c1 \u003d new CommandConvert(\"convert\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        c1.execute(storageManager);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        assertEquals(CommandType.CONVERT, c1.getCommandType());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        CommandConvert c2 \u003d new CommandConvert(\"convert /from usd /to SGD\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        c2.execute(storageManager);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        String error1 \u003d \"Please enter a valid amount\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        assertTrue(c2.getInfoCapsule().getOutputStr().contains(error1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        CommandConvert c3 \u003d new CommandConvert(\"convert 2000 /from usd /to SGD\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        c3.execute(storageManager);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        assertTrue(c3.getInfoCapsule().getOutputStr().contains(\"DUKE$$$ has converted \"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        assertEquals(c3.getDescription(), \"Command that converts the user input cash amount from\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                + \"one currency to another and prints it on the User Interface.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                + \"FORMAT : convert \u003camount\u003e /from \u003cBase currency ISO e.g USD \u003e /to \u003cRequired Currency ISO e.g SGD\u003e\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "priyan-coder": 31
    }
  },
  {
    "path": "src/test/java/ui/CommandReminderTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import executor.command.CommandReminder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import executor.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import executor.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import executor.task.TaskType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "public class CommandReminderTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        String date \u003d LocalDate.now().toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        Task testTask \u003d null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            testTask \u003d TaskList.createTask(TaskType.DEADLINE, \"deadline finish assignment /by \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                    + date);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        storageManager.getTaskList().addTask(testTask);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        CommandReminder testCommand \u003d new CommandReminder(\"deadline finish assignment /by \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                + date);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        testCommand.execute(storageManager);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        Task mainTask \u003d storageManager.getTaskList().get(0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        assertEquals(TaskType.DEADLINE, mainTask.getTaskType());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        assertEquals(\"finish assignment\", mainTask.getTaskName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        assertEquals(\"by\", mainTask.getDetailDesc());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        assertEquals(LocalDate.now(),mainTask.getDate());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "priyan-coder": 37
    }
  },
  {
    "path": "src/test/java/ui/CommandTrackTagTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.CommandTrackTag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class CommandTrackTagTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void executeTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        StorageManager store \u003d new StorageManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        CommandTrackTag emptyArg \u003d new CommandTrackTag(\"Track\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        emptyArg.execute(store);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(emptyArg.getInfoCapsule().getUiCode(), UiCode.ERROR);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(emptyArg.getInfoCapsule().getOutputStr(), \"Please enter a tag to track\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        tags.add(\"food\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        store.getWallet().addReceipt(new Receipt(100.0, LocalDate.now(), tags));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        store.getWallet().addReceipt(new Receipt(100.0, LocalDate.now(), tags));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        CommandTrackTag correctArg \u003d new CommandTrackTag(\"Track food\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        correctArg.execute(store);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(correctArg.getInfoCapsule().getUiCode(), UiCode.TOAST);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(correctArg.getInfoCapsule().getOutputStr(), \"Tracking tags: food\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        CommandTrackTag multipleArgs \u003d new CommandTrackTag(\"Track food dating\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        multipleArgs.execute(store);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(multipleArgs.getInfoCapsule().getUiCode(), UiCode.TOAST);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(multipleArgs.getInfoCapsule().getOutputStr(), \"Tracking tags: food dating\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 35
    }
  },
  {
    "path": "src/test/java/ui/CommandUntrackTagTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import executor.command.CommandUntrackTag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class CommandUntrackTagTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void executeTest() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        StorageManager store \u003d new StorageManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        CommandUntrackTag emptyArg \u003d new CommandUntrackTag(\"Untrack\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        emptyArg.execute(store);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(UiCode.ERROR, emptyArg.getInfoCapsule().getUiCode());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"Please enter a tag to untrack\", emptyArg.getInfoCapsule().getOutputStr());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            tags.add(\"food\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            store.getWallet().addReceipt(new Receipt(100.0, LocalDate.now(), tags));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            tags.remove(\"food\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            store.getWallet().addReceipt(new Receipt(100.0, LocalDate.now(), tags));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            store.getWallet().getReceipts().addFolder(\"food\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        CommandUntrackTag correctUntrack \u003d new CommandUntrackTag(\"Untrack food\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        correctUntrack.execute(store);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"Untracked tags: food\", correctUntrack.getInfoCapsule().getOutputStr());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(UiCode.TOAST, correctUntrack.getInfoCapsule().getUiCode());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        // Removing a non-existent tracking tag"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        CommandUntrackTag notTracked \u003d new CommandUntrackTag(\"Untrack food\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        notTracked.execute(store);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(notTracked.getInfoCapsule().getUiCode(), UiCode.ERROR);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"\u003cfood\u003e is not being tracked!\\nIf you wish to track this tag, try TRACK \u003ctag\u003e.\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "                notTracked.getInfoCapsule().getOutputStr());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 45
    }
  },
  {
    "path": "src/test/java/ui/CommandUpdateBalanceTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import executor.command.CommandType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import executor.command.CommandUpdateBalance;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "public class CommandUpdateBalanceTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        CommandUpdateBalance c1 \u003d new CommandUpdateBalance(\"setbalance\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        c1.execute(storageManager);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        String error \u003d \"Please kindly follow the format : setbalance $\u003camount\u003e \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                + \"Please enter an amount greater than or equal to zero in your wallet !\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        assertTrue(c1.getInfoCapsule().getOutputStr().contains(error));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        assertEquals(CommandType.SETBALANCE, c1.getCommandType());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        CommandUpdateBalance c2 \u003d new CommandUpdateBalance(\"setbalance $300\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        DecimalFormat decimalFormat \u003d new DecimalFormat(\"#0.00\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        c2.execute(storageManager);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        String output \u003d \"Balance updated to: $\" + decimalFormat.format(300) + \"\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        assertTrue(c2.getInfoCapsule().getOutputStr().contains(output));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        String description \u003d \"Updates current balance to new balance in the wallet and can only be set once \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                + \"FORMAT : setbalance $\u003camount\u003e\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        assertEquals(description,c2.getDescription());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "priyan-coder": 32
    }
  },
  {
    "path": "src/test/java/ui/CommandWeatherTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import executor.command.CommandType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import executor.command.CommandWeather;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "public class CommandWeatherTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        CommandWeather c1 \u003d new CommandWeather(\"weather\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        c1.execute(storageManager);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        assertEquals(CommandType.WEATHER, c1.getCommandType());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        CommandWeather c2 \u003d new CommandWeather(\"weather\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        c2.execute(storageManager);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        String error1 \u003d \"Please enter in either of the following format : \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                + \"1. weather /until now \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                + \"2. weather /until later \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                + \"3. weather /until tomorrow \\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        assertTrue(c2.getInfoCapsule().getOutputStr().contains(error1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        CommandWeather c3 \u003d new CommandWeather(\"weather /until now\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        c3.execute(storageManager);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        String description \u003d \"Command that displays weather for now, tomorrow or later \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "                + \"FORMAT : weather /until \u003cperiod\u003e\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        assertEquals(CommandType.WEATHER, c3.getCommandType());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        assertEquals(description, c3.getDescription());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        String headerMessage \u003d \"Duke$$$ has predicted the following weather forecast :\\n\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        assertTrue(c3.getInfoCapsule().getOutputStr().contains(headerMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "        assertTrue(c3.getInfoCapsule().getOutputStr().contains(\"Minimum Temperature in Degrees Celsius\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "priyan-coder"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "priyan-coder": 38
    }
  },
  {
    "path": "src/test/java/ui/IncomeReceiptTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class IncomeReceiptTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void generalTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        IncomeReceipt receipt \u003d new IncomeReceipt(5.00);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(-5.00, receipt.getCashSpent());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(5.00, receipt.getCashGained());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        receipt.setCashSpent(27.00);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(27.00, receipt.getCashSpent());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(-27.00, receipt.getCashGained());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        receipt.setCashGained(19.00);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(-19.00, receipt.getCashSpent());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(19.00, receipt.getCashGained());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Receipt receipt1 \u003d new IncomeReceipt(7.00);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(-7.00, receipt1.getCashSpent());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        receipt1.setCashSpent(-9.00);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(-9.00, receipt1.getCashSpent());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 25
    }
  },
  {
    "path": "src/test/java/ui/MainGuiTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.gui.MainGui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import ui.gui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class MainGuiTest extends MainGui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private String taskPath \u003d \"savedTask.txt\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private String walletPath \u003d \"savedWallet.txt\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private MainWindow mainWindowController;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     * Tests the working of the GUI."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     * @param taskPath is the path the leads to the task content"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     * @param walletPath is the path that leads to the wallet contents"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AjeyAshok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public void initialize(String taskPath, String walletPath) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        String[] args \u003d {};"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.taskPath \u003d taskPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        this.walletPath \u003d walletPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Application.launch(MainGui.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    public MainWindow getMainWindowController() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return mainWindowController;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AjeyAshok": 5,
      "Mudaafi": 22
    }
  },
  {
    "path": "src/test/java/ui/ReceiptTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class ReceiptTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void addTagTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Receipt receipt \u003d new Receipt(5.00);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(true, receipt.areTagsEmpty());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        receipt.addTag(\"Fire\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(false, receipt.areTagsEmpty());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"Fire\", receipt.getTags().get(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        receipt.addTag(\"abc\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"Fire\", receipt.getTags().get(0));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(\"abc\", receipt.getTags().get(1));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 21
    }
  },
  {
    "path": "src/test/java/ui/ReceiptTrackerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class ReceiptTrackerTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    private ReceiptTracker initializeTracker() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        ReceiptTracker tracker \u003d new ReceiptTracker();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Receipt receiptA \u003d new Receipt(5.00);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        receiptA.addTag(\"loans\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        tracker.addReceipt(receiptA);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Receipt receiptB \u003d new Receipt(4.00);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        receiptB.addTag(\"loans\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        receiptB.addTag(\"ice\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        tracker.addReceipt(receiptB);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Receipt receiptC \u003d new IncomeReceipt(9.00);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        receiptC.addTag(\"ice\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        tracker.addReceipt(receiptC);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Receipt receiptD \u003d new Receipt(1.00);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        tracker.addReceipt(receiptD);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        return tracker;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void constructorTest() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        ReceiptTracker trackerA \u003d new ReceiptTracker();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(0.0, trackerA.getNettCashSpent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertTrue(trackerA.isEmpty());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertTrue(trackerA.getFolders().isEmpty());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        ArrayList\u003cReceipt\u003e receiptList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        ReceiptTracker trackerB \u003d new ReceiptTracker(receiptList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(0.0, trackerB.getNettCashSpent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertTrue(trackerB.isEmpty());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertTrue(trackerB.getFolders().isEmpty());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Receipt receipt \u003d new Receipt(5.0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        receiptList.add(receipt);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        ReceiptTracker trackerC \u003d new ReceiptTracker(receiptList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertFalse(trackerC.isEmpty());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(5.00, trackerC.getNettCashSpent());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(5.00, trackerC.get(0).getCashSpent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void sumReceiptsTest() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        ReceiptTracker tracker \u003d new ReceiptTracker();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        for (double x \u003d 1.0; x \u003c 11.0; ++x) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            Receipt receipt \u003d new Receipt(x);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            tracker.add(receipt);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(0.0, tracker.getNettCashSpent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(55.0, tracker.sumReceipts());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        tracker.updateNettCashSpent();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(55.0, tracker.getNettCashSpent());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void addReceiptTest() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        ReceiptTracker tracker \u003d new ReceiptTracker();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Receipt receiptA \u003d new Receipt(5.00);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        tracker.addReceipt(receiptA);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(5.00, tracker.getNettCashSpent());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        tracker.getFolders().put(\"tagged\", new ReceiptTracker());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Receipt receiptB \u003d new Receipt(10.00);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        receiptB.getTags().add(\"tagged\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        tracker.addReceipt(receiptB);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(15.00, tracker.getNettCashSpent());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(10.00, tracker.getFolders().get(\"tagged\").getNettCashSpent());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertTrue(tracker.getFolders().get(\"tagged\").getFolders().isEmpty());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void findReceiptsByTagTest() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        ReceiptTracker tracker \u003d initializeTracker();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(1.00, tracker.getNettCashSpent());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(5.00, tracker.getReceiptsByTag(\"loans\").get(0).getCashSpent());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(4.00, tracker.getReceiptsByTag(\"loans\").get(1).getCashSpent());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(4.00, tracker.getReceiptsByTag(\"ice\").get(0).getCashSpent());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(-9.00, tracker.getReceiptsByTag(\"ice\").get(1).getCashSpent());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void addFolderTest() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        ReceiptTracker tracker \u003d new ReceiptTracker();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        for (double x \u003d 1.0; x \u003c 6.0; ++x) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            Receipt receipt \u003d new Receipt(x);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            tracker.addReceipt(receipt);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        tags.add(\"tagged\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        tags.add(\"Fire\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        for (double x \u003d 6.0; x \u003c 11.0; ++x) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            Receipt taggedReceipt \u003d new Receipt(x, null, tags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            tracker.addReceipt(taggedReceipt);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertTrue(tracker.getFolders().isEmpty());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertFalse(tracker.isRegisteredTag(\"tagged\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertFalse(tracker.isRegisteredTag(\"Fire\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            tracker.addFolder(\"tagged\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            assertFalse(tracker.getFolders().isEmpty());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            assertTrue(tracker.isRegisteredTag(\"tagged\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            assertEquals(40.0, tracker.getFolders().get(\"tagged\").getNettCashSpent());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            assertFalse(tracker.isRegisteredTag(\"Fire\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            System.out.println(e.toString());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            tracker.addFolder(\"fire\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            assertFalse(tracker.getFolders().isEmpty());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            assertTrue(tracker.isRegisteredTag(\"fire\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            assertFalse(tracker.isRegisteredTag(\"Fire\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            assertEquals(0.0, tracker.getFolders().get(\"fire\").getNettCashSpent());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            System.out.println(e.toString());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            tracker.addFolder(\"fire\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            System.out.println(e.toString());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void getCashSpentByTagTest() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        ReceiptTracker tracker \u003d initializeTracker();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertTrue(tracker.getFolders().isEmpty());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(9.00, tracker.getCashSpentByTag(\"loans\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            tracker.addFolder(\"ice\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "            System.out.println(e.toString());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(-5.00, tracker.getCashSpentByTag(\"ice\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertFalse(tracker.isRegisteredTag(\"loans\"));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertTrue(tracker.isRegisteredTag(\"ice\"));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(-5.00, tracker.getCashSpentByTag(\"ice\"));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 157
    }
  },
  {
    "path": "src/test/java/ui/WalletTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "public class WalletTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    void addReceiptTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Wallet wallet \u003d new Wallet();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(true, wallet.isReceiptsEmpty());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Receipt receiptA \u003d new Receipt(5.00);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        wallet.addReceipt(receiptA);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(false, wallet.isReceiptsEmpty());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(receiptA, wallet.getReceipts().get(0));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(5.00, wallet.getTotalExpenses());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        LocalDate date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        Receipt receiptB \u003d new Receipt(12.00, date);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        wallet.addReceipt(receiptB);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(receiptA, wallet.getReceipts().get(0));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(receiptB, wallet.getReceipts().get(1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "        assertEquals(17.00, wallet.getTotalExpenses());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Mudaafi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Mudaafi": 30
    }
  }
]
