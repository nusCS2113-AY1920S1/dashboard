[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    mainClassName \u003d \"Optix\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OungKennedy": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/Optix.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.Ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.commands.Command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.core.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.util.ShowMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "public class Optix {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    private ShowMap shows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public Optix(File filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        shows \u003d storage.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        File currentDir \u003d new File(System.getProperty(\"user.dir\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        File filePath \u003d new File(currentDir.toString() + \"\\\\src\\\\main\\\\data\\\\optix.txt\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        new Optix(filePath).run();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        System.out.println(ui.showWelcome());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            String fullCommand \u003d ui.readCommand(sc);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            c.execute(shows, ui, storage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            System.out.println(ui.showLine());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "OungKennedy": 46
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import duke.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import duke.commands.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import duke.commands.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import duke.commands.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import duke.commands.FindFreeTimeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import duke.commands.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import duke.commands.RemindersCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import duke.commands.SnoozeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import duke.commands.ViewCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parse the date and return AddCommand class for Event task type."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskType The type of task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param command command to be parse to description and dateTime"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return AddCommand for Event task type"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Command parseEvent(String taskType, String command) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] splitStr \u003d command.split(\"/at \", 2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (splitStr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Invalid command\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(taskType, splitStr[0], splitStr[1]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parse the date and return AddCommand class for Deadline task type."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskType The type of task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param command command to be parse to description and dateTime"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return AddCommand for Deadline task type"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Command parseDeadline(String taskType, String command) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] splitStr \u003d command.split(\"/by \", 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (splitStr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Invalid command\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(taskType, splitStr[0], splitStr[1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Mark the task indicated by user to be done."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param command The taskNo to be converted to an integer"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return DoneCommand with the index of item to be mark as done"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NumberFormatException if command has characters"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Command parseDone(String command) throws NumberFormatException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d Integer.parseInt(command);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DoneCommand(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Delete the task indicated by user."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param command The taskNo to be converted to an integer"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return DeleteCommand with the index of item to be deleted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NumberFormatException if command has characters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Command parseDelete(String command) throws NumberFormatException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d Integer.parseInt(command);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DeleteCommand(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Snooze the task indicated by user."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param command The taskNo to be converted to an integer."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return DeleteCommand with the index of item to be snoozed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NumberFormatException if command has characters."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Command parseSnooze(String command) throws NumberFormatException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] details \u003d command.split(\" \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d Integer.parseInt(details[0]);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        int value \u003d Integer.parseInt(details[1]);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String units \u003d details[2];"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new SnoozeCommand(index, value, units);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheesengg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     * find free time according to period desired"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     * @param s String containing details like amount of time . e.g. 5 min"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     * @return FindFreeTimeCommand a command to find the time"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     * @throws DukeException when s is invalid."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    private static Command parseFindFreeTime(String s) throws DukeException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        String[] details \u003d s.split(\" \");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        int value \u003d Integer.parseInt(details[0]);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        String units \u003d details[1];"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        return new FindFreeTimeCommand(value, units);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     * Return the correct command given by user, Class method."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param fullCommand command input by user to be parse"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The correct command class as defined by first word"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NumberFormatException if command has characters."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if the command is invalid or there are missing parameters."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Command parse(String fullCommand) throws NumberFormatException, DukeException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] splitStr \u003d fullCommand.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (splitStr.length) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                switch (splitStr[0].toLowerCase()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                    case \"list\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                        return new ListCommand();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                    case \"bye\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                        return new ByeCommand();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                    case \"reminders\":"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                        return new RemindersCommand();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                        throw new DukeException(\"Invalid command\\n\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!splitStr[1].isEmpty()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                    splitStr[1] \u003d splitStr[1].trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                    switch (splitStr[0].toLowerCase()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                        case \"todo\":"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                            return new AddCommand(splitStr[0], splitStr[1]);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                        case \"deadline\":"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                            return parseDeadline(splitStr[0], splitStr[1]);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                        case \"event\":"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                            return parseEvent(splitStr[0], splitStr[1]);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                        case \"find\":"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                            return new FindCommand(splitStr[1]);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                        case \"done\":"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                            return parseDone(splitStr[1]);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                        case \"delete\":"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                            return parseDelete(splitStr[1]);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                        case \"snooze\":"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                            return parseSnooze(splitStr[1]);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                        case \"findfreetime\":"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                            return parseFindFreeTime(splitStr[1]);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                        case \"view\":"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                            return new ViewCommand(splitStr[1]);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                        default:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                            throw new DukeException(\"Invalid command\\n\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\"Invalid command\\n\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"Invalid command\\n\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OungKennedy": 27,
      "cheesengg": 1,
      "-": 127
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskType taskType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isCompleted \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    enum TaskType {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        TODO, EVENT, DEADLINE"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String description, TaskType taskType) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * To make task as done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        isCompleted \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * To check if task is done."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return {@code true} task is completed"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *          {@code false} task is incomplete"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return isCompleted;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Get the task description."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String of the task description"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Get the corresponding Icon according to whether task is completed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return If task is complete get TICK, If task is incomplete get CROSS"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return (isCompleted ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Details of the task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the expected format of String message for this task"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return  \"[\" + getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskType getTaskType() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract String getSymbol();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract String writeToFile();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract String getDateTime();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract LocalDateTime getLocalDate();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract void setDate(String newDate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OungKennedy": 1,
      "-": 69
    }
  },
  {
    "path": "src/main/java/optix/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "package optix;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.constant.OptixResponse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": " * Reads in the command input by user amd"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": " * returns the response by the Optix program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     * Stores the appropriate response based on users input command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     * Once user command is processed, Optix\u0027s response is stored using"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     * setMessage method to store the appropriate message. Use"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     * by showLine method to print out the response."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     * A variable to access DukeResponse Class for all Optix\u0027s response related"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     * constants."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    private OptixResponse or \u003d new OptixResponse();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     * Read in the command by user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     * @return String input by user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public String readCommand(Scanner sc) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     * Set appropriate response by Optix to be shown based on user\u0027s input."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     * @param message String Optix will respond with based on user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public void setMessage(String message) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        this.message \u003d or.SPACES + message + or.SPACES;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     * Prints out the greeting by Optix program when Optix starts running."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     * @return Greetings by Optix"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public String showWelcome() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        return or.SPACES + or.GREET + or.SPACES;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     * Prints out the Optix\u0027s response based on user\u0027s input."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     * @return Response by Optix"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public String showLine() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OungKennedy": 59
    }
  },
  {
    "path": "src/main/java/optix/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "package optix.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.constant.OptixResponse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.core.Show;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.core.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.util.ShowMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    private double cost;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public AddCommand(String name, String date, double cost) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        // need to check if it is a valid date if not need to throw exception"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        this.date \u003d toLocalDate(date);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public void execute(ShowMap shows, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        Show show \u003d new Show(name, cost);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        LocalDate today \u003d storage.getToday();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        if (date.compareTo(today) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            ui.setMessage(\"☹ OOPS!!! It is not possible to perform in the past.\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        } else if (shows.containsKey(date)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            // to abstract the  date formatting in the future extensions"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            ui.setMessage(\"☹ OOPS!!! There is already a show being added on that date.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                    + \"Please try again. \\n\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            shows.put(date, show);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            ui.setMessage(new OptixResponse().ADD + show.toString() + \" at: \" + this.date + \"\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    private String getFormat(String date) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        int padCount \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        StringBuilder format \u003d new StringBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        String[] timeType \u003d {\"d\",\"M\",\"y\",\"H\",\"H\",\"m\",\"m\"};"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        for (int i \u003d 0; i \u003c date.length(); i +\u003d 1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            char c \u003d date.charAt(i);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            if (Character.isDigit(c)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                format.append(timeType[padCount]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                if (padCount \u003e\u003d 3) { padCount +\u003d 1;}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                format.append(c);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                padCount +\u003d 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        return format.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    //TODO create a date formatter class"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     * function to convert String to localDate"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     * note that currently the format is fixed 1/1/1997"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     * @param dateString"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    private LocalDate toLocalDate(String dateString) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(getFormat(dateString));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        //Convert string to localdate"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        LocalDate localDate \u003d LocalDate.parse(dateString,formatter);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        return localDate;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        return super.isExit();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OungKennedy": 81
    }
  },
  {
    "path": "src/main/java/optix/commands/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "package optix.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.constant.OptixResponse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.core.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.util.ShowMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "public class ByeCommand extends  Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public void execute(ShowMap shows, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        storage.write(shows);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        ui.setMessage(new OptixResponse().BYE);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OungKennedy": 19
    }
  },
  {
    "path": "src/main/java/optix/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "package optix.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.util.ShowMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    protected boolean quit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public abstract void execute(ShowMap shows, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OungKennedy": 15
    }
  },
  {
    "path": "src/main/java/optix/commands/DeleteAllCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "package optix.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.core.Show;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.core.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.util.ShowMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "public class DeleteAllCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    private String[] showNames;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public DeleteAllCommand(String[] showNames) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        this.showNames \u003d showNames;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     * Command that deletes all instances of a specific show."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public void execute(ShowMap shows, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        StringBuilder message \u003d new StringBuilder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        ArrayList\u003cString\u003e deletedShows \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        ArrayList\u003cString\u003e missingShows \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        for (String show: this.showNames) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            boolean isFound \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            ArrayList\u003cMap.Entry\u003cLocalDate, Show\u003e\u003e entryArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            for (Map.Entry\u003cLocalDate, Show\u003e entry : shows.entrySet()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                if (entry.getValue().toString().equals(show)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                    String showDescription \u003d entry.getKey().toString() + \u0027 \u0027 + entry.getValue().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                    entryArrayList.add(entry);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                    deletedShows.add(showDescription);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                    isFound \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            // add show to missing show list if it\u0027s not found."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            if (!isFound) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                missingShows.add(show);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            // remove entry from shows."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            for (Map.Entry\u003cLocalDate,Show\u003e entry: entryArrayList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                shows.remove(entry.getKey(), entry.getValue());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        if (!deletedShows.isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            message.append(\"Noted. These are the deleted entries.\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            for (String infoStrings: deletedShows) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                message.append(infoStrings).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        if (!missingShows.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            message.append(\"Sorry, these shows were not found:\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            for (String missingShow: missingShows) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                message.append(missingShow).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        ui.setMessage(message.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OungKennedy": 65
    }
  },
  {
    "path": "src/main/java/optix/commands/DeleteOneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "package optix.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.core.Show;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.core.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.util.ShowMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "public class DeleteOneCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\tprivate String showDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\tprivate String showName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\tpublic DeleteOneCommand(String showDate, String showName) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t\tthis.showDate \u003d showDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t\tthis.showName \u003d showName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\tpublic void execute(ShowMap shows, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t\tStringBuilder message \u003d new StringBuilder();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t\tLocalDate showLocalDate \u003d toLocalDate(showDate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t\tShow showToDelete \u003d shows.get(showLocalDate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t\tif (showToDelete !\u003d null \u0026\u0026 showToDelete.toString().equals(showName)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t\t\tshows.remove(showLocalDate,showToDelete);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t\t\tmessage.append(String.format(\"Noted. The show \u003c%s\u003e scheduled on \u003c%s\u003e has been removed.\\n\", showName, showDate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t\t\tmessage.append(String.format(\"Unable to find show called \u003c%s\u003e schedule on \u003c%s\u003e\\n\", showName, showDate));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t\tui.setMessage(message.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t//TODO create a date formatter class"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t * function to convert String to localDate"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t * note that currently the format is fixed 1/1/1997"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t * @param dateString"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t * @return"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\tprivate LocalDate toLocalDate(String dateString) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t\tDateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(getFormat(dateString));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t\t//Convert string to localdate"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t\tLocalDate localDate \u003d LocalDate.parse(dateString,formatter);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t\treturn localDate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\tprivate String getFormat(String date) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t\tint padCount \u003d 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t\tStringBuilder format \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t\tString[] timeType \u003d {\"d\",\"M\",\"y\",\"H\",\"H\",\"m\",\"m\"};"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t\tfor (int i \u003d 0; i \u003c date.length(); i +\u003d 1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t\t\tchar c \u003d date.charAt(i);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t\t\tif (Character.isDigit(c)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t\t\t\tformat.append(timeType[padCount]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t\t\t\tif (padCount \u003e\u003d 3) { padCount +\u003d 1;}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t\t\t} else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t\t\t\tformat.append(c);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t\t\t\tpadCount +\u003d 1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t\treturn format.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OungKennedy": 63
    }
  },
  {
    "path": "src/main/java/optix/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "package optix.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.constant.OptixResponse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.core.Show;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.core.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.util.ShowMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public void execute(ShowMap shows, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        LocalDate today \u003d storage.getToday();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        if (!shows.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            message +\u003d new OptixResponse().LIST_FOUND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            for (Map.Entry\u003cLocalDate, Show\u003e entry : shows.entrySet()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                Show show \u003d entry.getValue();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                LocalDate showDate \u003d entry.getKey();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                if (showDate.compareTo(today) \u003e 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                    message +\u003d String.format(\"%d. %s (on: %s)\\n\", counter, show.toString(), showDate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                    counter++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        if (shows.isEmpty() || counter \u003d\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            message \u003d new OptixResponse().LIST_NOT_FOUND;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        ui.setMessage(message);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        return super.isExit();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OungKennedy": 45
    }
  },
  {
    "path": "src/main/java/optix/commands/PostponeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "package optix.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.core.Show;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.core.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.util.ShowMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "public class PostponeCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    private String showName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    private LocalDate oldDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    private LocalDate newDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public PostponeCommand(String showName, String oldDate, String newDate) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        // need to check if both dates are valid if not throw exception"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        // need to check if the event was completed in the past. Past event shouldn\u0027t be postponed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        this.showName \u003d showName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        this.oldDate \u003d toLocalDate(oldDate);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        this.newDate \u003d toLocalDate(newDate);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public void execute(ShowMap shows, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        LocalDate today \u003d storage.getToday();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        if (oldDate.compareTo(today) \u003e 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            message \u003d \"☹ OOPS!!! The show is already over.\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        } else if (newDate.compareTo(today) \u003e 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            message \u003d \"☹ OOPS!!! It is not possible to postpone to the past.\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            if (!shows.containsKey(oldDate)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                message \u003d \"☹ OOPS!!! There isn\u0027t any show on \" + oldDate + \"\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            } else if (shows.containsKey(newDate)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                message \u003d \"☹ OOPS!!! There exist a show for \" + newDate + \"\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            } else if (!shows.get(oldDate).hasSameName(showName)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                message \u003d \"☹ OOPS!!! Did you get the wrong date or wrong show. \\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                        + \"Try again!\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                Show postponedShow \u003d shows.removeShow(oldDate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                shows.put(newDate, postponedShow);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                message \u003d String.format(\"%s has been postponed from %s to %s\\n\", showName, oldDate, newDate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        ui.setMessage(message);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        return super.isExit();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    private String getFormat(String date) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        int padCount \u003d 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        String format \u003d \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        String[] timeType \u003d {\"d\",\"M\",\"y\",\"H\",\"H\",\"m\",\"m\"};"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        for (int i \u003d 0; i \u003c date.length(); i +\u003d 1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            char c \u003d date.charAt(i);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            if (Character.isDigit(c)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                format +\u003d timeType[padCount];"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                if (padCount \u003e\u003d 3) { padCount +\u003d 1;}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                format +\u003d c;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                padCount +\u003d 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        return format;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    //TODO create a date formatter class"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     * function to convert String to localDate"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     * note thzt currently the formzt is fixed 1/1/1997"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     * @param dateString"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    private LocalDate toLocalDate(String dateString) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(getFormat(dateString));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        //Convert string to localdate"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        LocalDate localDate \u003d LocalDate.parse(dateString,formatter);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        return localDate;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OungKennedy": 87
    }
  },
  {
    "path": "src/main/java/optix/constant/OptixResponse.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "package optix.constant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "public class OptixResponse {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public final String SPACES \u003d \"_________________________________________\\n\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public final String GREET \u003d \"Hello! I\u0027m Optix\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            + \"What can I do for you?\\n\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public final String BYE \u003d \"Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public final String LIST_FOUND \u003d \"Here are the list of shows:\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public final String LIST_NOT_FOUND \u003d \"☹ OOPS!!! There are no shows in the near future.\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public final String DONE_FOUND \u003d \"Nice! I\u0027ve marked this task as done:\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public final String DONE_COMPLETED \u003d \"☹ OOPS!!! This task has already been completed\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public final String DELETE_FOUND \u003d \"Noted. I\u0027ve removed this task:\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public final String FIND_FOUND \u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public final String NOT_FOUND \u003d \"☹ OOPS!!! The task cannot be found. \\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public final String EXCEPTION \u003d \"☹ OOPS!!! That is an invalid input\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            + \"Please try again. \\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public final String ADD \u003d \"Got it. I\u0027ve added this show:\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public final String REMINDERS_FOUND \u003d \"Here are your reminders:\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public final String REMINDERS_NOT_FOUND \u003d \"☹ OOPS!!! You currently do not have deadlines.\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public final String FREE_TIME_FOUND \u003d \"You next free time for the required period is:\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public final String WRONG_TASKTYPE \u003d \"☹ OOPS!!! Snooze cannot be used for Todos.\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public final String SNOOZE_SUCCESS \u003d \"Noted. I\u0027ve snoozed this task:\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OungKennedy": 40
    }
  },
  {
    "path": "src/main/java/optix/core/Show.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "package optix.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "public class Show {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    private Theatre theatre;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    private double cost;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    private double revenue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public Show(String name, double cost) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        this.theatre \u003d new Theatre();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        this.revenue \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    // Might be removed depending on how the revenue is being added back into Show"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public Show(String name, double cost, double revenue) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        this.revenue \u003d revenue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public String writeToFile() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        return String.format(\"%s | %f | %f \\n\", this.name, this.cost, this.revenue);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public boolean hasSameName(String checkName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        return name.toLowerCase().equals(checkName.toLowerCase());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OungKennedy": 39
    }
  },
  {
    "path": "src/main/java/optix/core/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "package optix.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.util.ShowMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    private File filePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    private LocalDate today;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public Storage(File filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            if (!filePath.getParentFile().exists()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                filePath.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            if (!filePath.exists()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                filePath.createNewFile();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            System.out.println(\"Unable to create file.\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public ShowMap load() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        ShowMap shows \u003d new ShowMap();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            FileReader rd \u003d new FileReader(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(rd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            String message;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            int counter \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            while ((message \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                String[] arrStr \u003d message.split(\" \\\\| \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                if (arrStr[0].toLowerCase().equals(\"s\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                    LocalDate date \u003d localDate(arrStr[1]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                    String showName \u003d arrStr[2].trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                    double cost \u003d Double.parseDouble(arrStr[3]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                    double revenue \u003d Double.parseDouble(arrStr[4]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                    Show show \u003d new Show(showName, cost, revenue);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                    shows.put(date, show);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            br.close();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            rd.close();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            System.out.println(\"Unable to load file.\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        return shows;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public void write(ShowMap shows) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            filePath.delete();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            filePath.createNewFile();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            FileWriter wr \u003d new FileWriter(filePath, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            for (Map.Entry\u003cLocalDate, Show\u003e entry : shows.entrySet()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                Show show \u003d entry.getValue();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                LocalDate date \u003d entry.getKey();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "                wr.write(String.format(\"S | %s | %s\", date, show.writeToFile()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            wr.close();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            System.out.println(\"Unable to write to file.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    private LocalDate localDate(String date) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        //Convert string to localdate"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        LocalDate localDate \u003d LocalDate.parse(date, formatter);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        return localDate;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public LocalDate getToday() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        return today;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OungKennedy": 98
    }
  },
  {
    "path": "src/main/java/optix/core/Theatre.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "package optix.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "public class Theatre {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    private String[][] seats \u003d new String[5][10];"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OungKennedy": 7
    }
  },
  {
    "path": "src/main/java/optix/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "package optix.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.commands.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.commands.DeleteAllCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.commands.DeleteOneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.commands.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.commands.PostponeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public static Command parse(String fullCommand) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        // add exception for null pointer exception. e.g. postpone"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        String[] splitStr \u003d fullCommand.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        switch (splitStr[0].toLowerCase()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        case \"postpone\":"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            return parsePostpone(splitStr[1]);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            return parseAddShow(splitStr[1]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        case \"delete-all\": // e.g. delete-all poto|lion king"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            return parseDeleteAllOfShow(splitStr[1]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        case \"delete-one\": // e.g. delete-one 2/10/2019|poto"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            return parseDeleteOneOfShow(splitStr[1]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    private static Command parsePostpone(String postponeDetails) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        String[] splitStr \u003d postponeDetails.trim().split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        // need to check if size of array is 3, if not throw exception"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        String showName \u003d splitStr[0].trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        String oldDate \u003d splitStr[1].trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        String newDate \u003d splitStr[2].trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        return new PostponeCommand(showName, oldDate, newDate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    private static Command parseAddShow(String showDetails) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        String[] splitStr \u003d showDetails.trim().split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        // need to check if size of array is 3, if not throw exception"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        String showName \u003d splitStr[0].trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        String showDate \u003d splitStr[1].trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        // need to add a NumberFormatException here"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        double showCost \u003d Double.parseDouble(splitStr[2]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        return new AddCommand(showName, showDate, showCost);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    // delete a single show on a particular date"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    private static Command parseDeleteOneOfShow(String showDetails) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        String[] splitStr \u003d showDetails.trim().split(\"\\\\|\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        String showName \u003d splitStr[0];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        String showDate \u003d splitStr[1];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        // should add exception when no date is entered."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        return new DeleteOneCommand(showName, showDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    // delete all instances of shows with specified name. Can contain multiple names, separated by pipe."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    private static Command parseDeleteAllOfShow(String deleteDetails) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        String[] splitStr \u003d deleteDetails.trim().split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        return new DeleteAllCommand(splitStr);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OungKennedy": 73
    }
  },
  {
    "path": "src/main/java/optix/util/ShowMap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "package optix.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import optix.core.Show;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "public class ShowMap extends TreeMap\u003cLocalDate, Show\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    public Show removeShow(Object key) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        Show show \u003d this.get(key);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        this.remove(key);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "        return show;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "OungKennedy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "OungKennedy": 16
    }
  },
  {
    "path": "src/test/java/duke/commands/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheesengg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheesengg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class ListCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    ListCommand listCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    void testExecute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.add(new Todo(\"test1\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.add(new Todo(\"test2\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.add(new Todo(\"test3\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        listCommand.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String expected \u003d \"_________________________________________\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Here are the tasks in your list:\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"1.[T][✘] test1\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"2.[T][✘] test2\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"3.[T][✘] test3\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"_________________________________________\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, ui.showLine());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheesengg": 2,
      "-": 33
    }
  }
]
