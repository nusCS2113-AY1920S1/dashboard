[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    archiveBaseName \u003d \"RoomShare\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    mainClassName \u003d \"RoomShare\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.4.0\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 15,
      "-": 25
    }
  },
  {
    "path": "src/main/java/CustomExceptions/RoomShareException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "package CustomExceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Enums.ExceptionType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public class RoomShareException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private static final String outOfBounds_Text \u003d \"Index is out of Bounds!\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private static final String anomaly_Text \u003d \"Anomaly Detected\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private static final String emptylist_Text \u003d \"List is empty\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private static final String timeclash_Text \u003d \"Time Clash Detected\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private static final String wrongFormat_Text \u003d \"Wrong Format Detected\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    private static final String wrongPriority_Text \u003d \"Wrong Priority Detected\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Constructor for DukeException Exception"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Takes in the exception type thrown and prints out the specific error message"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param type type of exception detected"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public RoomShareException(ExceptionType type){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        switch(type) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            case emptylist:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                System.out.println(emptylist_Text);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            case timeClash:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                System.out.println(timeclash_Text);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            case wrongFormat:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                System.out.println(wrongFormat_Text);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            case outOfBounds:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                System.out.println(outOfBounds_Text);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            case wrongPriority:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                System.out.println(wrongPriority_Text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                System.out.println(anomaly_Text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 14,
      "tyeryan": 2,
      "calebtay": 31
    }
  },
  {
    "path": "src/main/java/Enums/ExceptionType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calebtay"
        },
        "content": "package Enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calebtay"
        },
        "content": "public enum ExceptionType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    timeClash, emptylist, wrongFormat, empty, outOfBounds, wrongPriority, test"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calebtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calebtay": 5
    }
  },
  {
    "path": "src/main/java/Enums/HelpType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "package Enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public enum HelpType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    list, bye, find, done , delete, todo, deadline, event, recur, snooze, others, priority, reorder, exit"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 5
    }
  },
  {
    "path": "src/main/java/Enums/Priority.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calebtay"
        },
        "content": "package Enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calebtay"
        },
        "content": "public enum Priority {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    high, medium, low"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calebtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calebtay": 5
    }
  },
  {
    "path": "src/main/java/Enums/RecurTaskType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "package Enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public enum RecurTaskType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     list, find, others, add, exit"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 5
    }
  },
  {
    "path": "src/main/java/Enums/RecurrenceScheduleType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "package Enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public enum RecurrenceScheduleType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    day, week, month"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 5
    }
  },
  {
    "path": "src/main/java/Enums/ReplyType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "package Enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "public enum ReplyType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    yes, no, others"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tyeryan": 5
    }
  },
  {
    "path": "src/main/java/Enums/ReportType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "package Enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public enum ReportType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    full, finished, unfinished, upcoming, recurring, others, exit"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 5
    }
  },
  {
    "path": "src/main/java/Enums/SaveType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calebtay"
        },
        "content": "package Enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public enum SaveType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    T, E, D, empty"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calebtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 2,
      "calebtay": 3
    }
  },
  {
    "path": "src/main/java/Enums/TaskType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "package Enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    list, bye, find, done , delete, todo, deadline, other, event, recur, time, snooze, others, help, priority, reorder,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    assign, report, restore"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 6
    }
  },
  {
    "path": "src/main/java/Enums/TimeUnit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "package Enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public enum TimeUnit {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    year, month, day, hours, minutes"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 4,
      "calebtay": 1
    }
  },
  {
    "path": "src/main/java/Model_Classes/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Model_Classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Enums.Priority;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * An object class representing types of tasks with deadlines."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores the description and when the task should be done by."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for the Deadline object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Takes in inputs for description and date/time the tasks should be done by."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description Description of the task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param by The time the tasks should be done by."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Deadline (String description, Date by) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * Overload Constructor for Deadline object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * @param description Description of the task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * @param by The time the task should be done by"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * @param user User whom the task is assigned to"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    public Deadline (String description, Date by, String user) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        super(description, user);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Overload Constructor for the Deadline object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Takes in inputs for description and date/time the tasks should be done by."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param by The time the tasks should be done by."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param done Whether the task is completed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param priority Priority of the task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public Deadline (String description, Date by, boolean done, Priority priority) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        super(description, done, priority);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Returns date of Deadline"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @return date of Deadline"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public Date checkDate() { return by; }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public void snoozeYear(int amount) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        this.by.setYear(this.by.getYear() + amount);;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public void snoozeMonth(int amount) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        this.by.setMonth(this.by.getMonth() + amount);;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public void snoozeDay(int amount) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        this.by.setDate(this.by.getDate() + amount);;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public void snoozeHour(int amount){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        this.by.setHours(this.by.getHours() + amount);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public void snoozeMinute(int amount){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        this.by.setMinutes(this.by.getMinutes() + amount);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the full description including the deadline of the task."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A string indicating the task type, description, and when it should be done by."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benitokun123": 21,
      "tyeryan": 11,
      "calebtay": 20,
      "-": 32
    }
  },
  {
    "path": "src/main/java/Model_Classes/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Model_Classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Enums.Priority;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * An object class representing types of tasks that are events."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores the description and when the event happens."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    private Date at;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for Event object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Takes in inputs for description of the event and the time the event occurs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description Description of the event"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param at Time the event happens"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public Event(String description, Date at) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * Overload Constructor for the Event object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * Takes in an input for the user assigned to the event object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * @param description Description of the event"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * @param at Time the event happens"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * @param user User whom the task is assigned to"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    public Event(String description, Date at, String user) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        super(description, user);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Overload Constructor for Event object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Takes in inputs for description of the event and the time the event occurs"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param description Description of the event"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param at Time the event happens"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param done Whether the task is completed"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param priority Priority of the task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public Event(String description, Date at, boolean done, Priority priority) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        super(description, done, priority);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Returns date of Event"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @return date of Event"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public Date checkDate() { return this.at; }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Snoozes the Event by set amount of years"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param amount number of years to snooze"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public void snoozeYear(int amount) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        this.at.setYear(this.at.getYear() + amount);;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Snoozes the Event by set amount of months"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param amount number of months to snooze"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public void snoozeMonth(int amount) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        this.at.setMonth(this.at.getMonth() + amount);;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Snoozes the Event by set amount of days"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param amount number of days to snooze"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public void snoozeDay(int amount) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        this.at.setDate(this.at.getDate() + amount);;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Snoozes the Event by set amount of hours"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param amount number of hours to snooze"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public void snoozeHour(int amount){"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        this.at.setHours(this.at.getHours() + amount);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Snoozes the Event by set amount of hours"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param amount number of minutes to snooze"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public void snoozeMinute(int amount){"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        this.at.setMinutes(this.at.getMinutes() + amount);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a string that has the full description of the vent including the occurrence time"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A string indicating the task type, description and the occurrence of the task"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        return \"[E]\" + super.toString() + \" (on: \" + at + \")\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 2,
      "benitokun123": 23,
      "tyeryan": 12,
      "calebtay": 45,
      "-": 26
    }
  },
  {
    "path": "src/main/java/Model_Classes/FixedDuration.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "package Model_Classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Enums.Priority;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "public class FixedDuration extends Event {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    private int duration;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private String unit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    private Date at;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Constructor for fixed duration"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param description Description of event"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param at Date of event"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * @param duration Duration of event"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public FixedDuration(String description, Date at, int duration, String unit) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        super(description, at);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        this.unit \u003d unit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * Overload constructor for fixed duration"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * @param description Description of event"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * @param at Date of event"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * @param duration Duration of event"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * @param user User whom the task is assigned to"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public FixedDuration(String description, Date at, int duration, String user, String unit) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        super(description, at, user);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        this.unit \u003d unit;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Overload constructor for fixed duration"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param description Description of event"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param at Date of event"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * @param duration Duration of event"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param done Whether the task is completed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param priority Priority of the task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public FixedDuration(String description, Date at, int duration, boolean done, Priority priority, String unit) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        super(description, at, done, priority);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        this.unit \u003d unit;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Returns duration"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @return duration of event in DD/MM/YYYY format"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public int getDuration(){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public String getUnit() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        return unit;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Returns string with format of date and duration"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @return string containing date and duration of the event"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        return super.toString() + \" (done in: \" + duration + \" \" + unit + \")\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 13,
      "tyeryan": 28,
      "calebtay": 30
    }
  },
  {
    "path": "src/main/java/Model_Classes/RecurringDeadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "package Model_Classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Enums.Priority;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public class RecurringDeadline extends Deadline {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private String recurrence;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Constructor for the RecurringDeadline object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Takes in inputs for description and date/time the tasks should be done by."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param recurrence Frequency task is repeated"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param description Description of the task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param by          The time the tasks should be done by."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public RecurringDeadline(String description, Date by, String recurrence) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        super(description, by);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Overload constructor for the RecurringDeadline object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Takes in inputs for description and date/time the tasks should be done by."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param recurrence Frequency task is repeated"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param description Description of the task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param by          The time the tasks should be done by."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param done Whether the task is completed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param priority Priority of the task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public RecurringDeadline(String description, Date by, String recurrence, Boolean done, Priority priority) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        super(description, by, done, priority);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Returns the full descriptor of the task"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * will show the type of task, whether it has been done,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * the description of the task, the time it should be done by,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * and the recurrence schedule of the task"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @return A String with all the information listed above."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        return super.toString() + \" (R: \" + recurrence + \")\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 29,
      "tyeryan": 2,
      "calebtay": 17
    }
  },
  {
    "path": "src/main/java/Model_Classes/RecurringEvent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "package Model_Classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Enums.Priority;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public class RecurringEvent extends Event {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private String recurrence;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Constructor for RecurringEvent object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Takes in inputs for description of the event and the time the event occurs"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param recurrence Frequency task is repeated"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param description Description of the event"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param at Time the event happens"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public RecurringEvent(String description, Date at, String recurrence) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        super(description, at);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Overload constructor for RecurringEvent object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Takes in inputs for description of the event and the time the event occurs"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param recurrence Frequency task is repeated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param description Description of the event"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param at Time the event happens"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public RecurringEvent(String description, Date at, String recurrence, boolean done, Priority priority) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        super(description, at, done, priority);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Returns the full descriptor of the task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * will show the type of task, whether it has been done,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * the description of the task, the time it should be done by,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * and the recurrence schedule of the task"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @return A String with all the information listed above."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        return super.toString() + \" (R: \" + recurrence + \")\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 29,
      "tyeryan": 1,
      "calebtay": 15
    }
  },
  {
    "path": "src/main/java/Model_Classes/RecurringToDo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "package Model_Classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Enums.Priority;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public class RecurringToDo extends ToDo {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private String recurrence;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Constructor of the RecurringTodo class. Takes in the description of the task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param recurrence Frequency task is repeated"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public RecurringToDo(String description, String recurrence) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Overload constructor of the RecurringTodo class. Takes in the description of the task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param recurrence Frequency task is repeated"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param done Whether the task is completed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param priority Priority of the task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public RecurringToDo(String description, String recurrence, boolean done, Priority priority) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        super(description, done, priority);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Returns the full descriptor of the task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * will show the type of task, whether it has been done,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * the description of the task,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * and the recurrence schedule of the task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @return A String with all the information listed above."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        return super.toString() + \" (R: \" + recurrence + \")\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 25,
      "tyeryan": 1,
      "calebtay": 17
    }
  },
  {
    "path": "src/main/java/Model_Classes/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Model_Classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Enums.Priority;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parent class for all other types of tasks"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Task{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private String created;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    private String user;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for the task object. takes in the description of the task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description Description of the task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        DateTimeFormatter dateTimeFormatterNow \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        this.created \u003d now.format(dateTimeFormatterNow);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        this.priority \u003d Priority.low;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * Overload constructor for the task object. Takes in the user assigned to the task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * @param description Description of the task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * @param user User whom the tasks is assigned to"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    public Task(String description, String user) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        DateTimeFormatter dateTimeFormatterNow \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        this.created \u003d now.format(dateTimeFormatterNow);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        this.priority \u003d Priority.low;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        this.user \u003d user;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Overload constructor for the task object. takes in the description of the task"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param done Whether the task is completed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param priority Priority of the task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public Task(String description, boolean done, Priority priority) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        this.isDone \u003d done;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        DateTimeFormatter dateTimeFormatterNow \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        this.created \u003d now.format(dateTimeFormatterNow);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * Returns String of the user that was specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * @return name of the user"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    public String getUser() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        return this.user;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Returns String of the time Task was created"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @return time the task was created"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public String getCreated() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        return this.created;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * returns whether the task has been done"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return isDone The state of completion of the task."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean getDone() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the status of the completion of the task."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * shows a tick if done, and a cross if not done."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A String showing a tick or X symbol."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public String getStatusIcon() { return (isDone ? \"[\\u2713] \" : \"[\\u2718] \"); } //return tick or X symbols"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the description of the task"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return description Description of the task"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Returns the priority of the task"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @return priority of the task"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public Priority getPriority() { return priority; }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the task to be done"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Sets the priority of the task"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param p priority of the task"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void setPriority(Priority p) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        priority \u003d p;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns both the status icon and the description of the task."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        return getStatusIcon() + getDescription() + \" \" + \"(\" + getUser() + \")\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Snooze the task in year"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param amount number of years to snooze"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void snoozeYear(int amount) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Snooze the task in month"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param amount number of months to snooze"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void snoozeMonth(int amount) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Snooze the task in day"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param amount number of days to snooze"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void snoozeDay(int amount) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Snooze the task in hour"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param amount number of hours to snooze"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void snoozeHour(int amount) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Snooze the task in minute"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param amount number of minutes to snooze"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void snoozeMinute(int amount) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 55,
      "tyeryan": 24,
      "calebtay": 37,
      "-": 53
    }
  },
  {
    "path": "src/main/java/Model_Classes/ToDo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Model_Classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Enums.Priority;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * An object class that stores the description of tasks that needs to be done with no deadline."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of the class. Takes in the description of the task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * Overload constructor of the class"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * Takes in the user at which the task is assigned to"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * @param description Description of the task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * @param user User whom the task is assigned to"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    public ToDo(String description, String user) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        super(description, user);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Overload constructor of the class. Takes in the description of the task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param done Whether the task is completed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param priority Priority of the task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public ToDo(String description, boolean done, Priority priority) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        super(description, done, priority);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a string with the full description of the task"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A string with the task type and its description."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tyeryan": 10,
      "calebtay": 11,
      "-": 24
    }
  },
  {
    "path": "src/main/java/Modes/HelpMode.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "package Modes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.HelpType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Operations.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Operations.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public class HelpMode {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public HelpMode() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        ui.help();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            String temp \u003d parser.getCommandLine();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            HelpType helpType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                helpType \u003d HelpType.valueOf(temp);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "               helpType \u003d HelpType.others;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            switch (helpType) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                case bye:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    ui.explainBye();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                case done:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    ui.explainDone();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                case find:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    ui.explainFind();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                case list:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    ui.explainList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                case todo:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    ui.explainToDo();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                case event:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    ui.explainEvent();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                case deadline:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    ui.explainDeadline();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                case recur:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    ui.explainRecur();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                case delete:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    ui.explainDelete();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                case snooze:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    ui.explainSnooze();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                case reorder:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    ui.explainReorder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                case priority:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    ui.explainPriority();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                case exit:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    isExit \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    System.out.println(\"You have quit help mode!\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    ui.showCommandError();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 72
    }
  },
  {
    "path": "src/main/java/Modes/RecurringMode.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "package Modes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.RecurTaskType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Operations.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Operations.RecurHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Operations.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Operations.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public class RecurringMode {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private RecurHandler recurHandler;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public RecurringMode(TaskList taskList) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        recurHandler \u003d new RecurHandler(taskList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        ui.promptRecurringActions();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            String temp \u003d parser.getCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            RecurTaskType recurType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                recurType \u003d RecurTaskType.valueOf(temp);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                recurType \u003d RecurTaskType.others;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            switch (recurType) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                case list:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    recurHandler.listRecurring();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                case find:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    recurHandler.findRecurring(parser.getKey());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                case exit:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    isExit \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    ui.showExit();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                case add:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    recurHandler.addBasedOnOperation();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    ui.showCommandError();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 49
    }
  },
  {
    "path": "src/main/java/Modes/ReportMode.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "package Modes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.ReportType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Operations.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Operations.Report;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Operations.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Operations.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public class ReportMode {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private Report report;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public ReportMode(TaskList taskList) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        report \u003d new Report(taskList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            String temp \u003d parser.getCommandLine();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            ReportType reportType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                reportType \u003d ReportType.valueOf(temp);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                reportType \u003d ReportType.others;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            switch (reportType) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                case exit:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    isExit \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                case full:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    report.fullReport();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                case finished:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    report.finishedReport();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                case unfinished:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    report.unfinishedReport();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                case upcoming:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    report.upcomingReport();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                case recurring:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    report.recurringReport();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    ui.showCommandError();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 60
    }
  },
  {
    "path": "src/main/java/Operations/CheckAnomaly.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calebtay"
        },
        "content": "package Operations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Model_Classes.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Model_Classes.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Model_Classes.FixedDuration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Model_Classes.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": " * This class checks if there are clashes in timings for events"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calebtay"
        },
        "content": "public class CheckAnomaly {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Checks if the FixedDuration task has any clashes with any other tasks in the task list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * If there is a clash, returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * If there is no clash, returns false"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param currEvent FixedDuration being checked for time clashes"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @return true if there are time clashes, false if there are no time clashes"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public static Boolean checkTime(FixedDuration currEvent) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        double currDuration;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        currDuration \u003d currEvent.getDuration() * 3600000;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        ArrayList\u003cTask\u003e curr \u003d TaskList.currentList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        for( int i \u003d 0; i\u003cTaskList.currentList().size(); i++ ) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            Date checkDate \u003d currEvent.checkDate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            if( curr.get(i) instanceof FixedDuration ) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                double duration;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                duration \u003d ((FixedDuration) curr.get(i)).getDuration() * 3600000;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                Date listDate \u003d ((FixedDuration) curr.get(i)).checkDate();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                if ( listDate.getYear() \u003d\u003d checkDate.getYear() \u0026\u0026 listDate.getMonth() \u003d\u003d checkDate.getMonth() \u0026\u0026 listDate.getDay() \u003d\u003d checkDate.getDay() ) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    double checkTime \u003d listDate.getTime();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    double currTime \u003d checkDate.getTime();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    if( checkTime \u003c\u003d currTime + currDuration \u0026\u0026 checkTime \u003e\u003d currTime || checkTime + duration \u003c\u003d currTime + currDuration \u0026\u0026 checkTime + duration \u003e\u003d currTime ) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            } else if( curr.get(i) instanceof Event ) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                Date listDate \u003d ((Event) curr.get(i)).checkDate();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                // Checks if both events are on the same day"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                if ( listDate.getYear() \u003d\u003d checkDate.getYear() \u0026\u0026 listDate.getMonth() \u003d\u003d checkDate.getMonth() \u0026\u0026 listDate.getDay() \u003d\u003d checkDate.getDay() ) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    double checkTime \u003d listDate.getTime();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    double currTime \u003d checkDate.getTime();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    if( checkTime \u003c\u003d currTime + currDuration \u0026\u0026 checkTime \u003e\u003d currTime ) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Overload function for checkTime"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Checks if the FixedDuration task has any clashes with any other tasks in the task list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * If there is a clash, returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * If there is no clash, returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param at Date of the event we are checking"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @return true if there are time clashes, false if there are no time clashes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public static Boolean checkTime(Date at){"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        ArrayList\u003cTask\u003e curr \u003d TaskList.currentList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        for( int i \u003d 0; i\u003cTaskList.currentList().size(); i++ ) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            if( curr.get(i) instanceof Event \u0026\u0026 ((Event) curr.get(i)).checkDate().equals(at) ) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            } else if( curr.get(i) instanceof FixedDuration ) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "calebtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 10,
      "calebtay": 63
    }
  },
  {
    "path": "src/main/java/Operations/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Operations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import CustomExceptions.RoomShareException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.ExceptionType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import Enums.ReplyType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.TimeUnit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for handling all parsing for Duke. Makes sure that inputs by the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * are properly formatted as parameters for other classes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for the Parser object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the command that the user has given Duke."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return command The command given by the user to Duke."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d scanner.next().toLowerCase();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public String getCommandLine() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        String command \u003d scanner.nextLine().toLowerCase().trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Returns the index number requested by the user for commands like \u0027snooze\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return index Index the user wishes to perform operations on."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Integer getIndex() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String temp \u003d scanner.nextLine().trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        int index \u003d Integer.parseInt(temp) - 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Return a single index number or a range of index number requested by users for command \u0027done\u0027 and \u0027delete\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @return a single index or a range of index"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public int[] getIndexRange() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        String temp[] \u003d scanner.nextLine().trim().split(\"-\",2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        int[] index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        if (temp.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            index \u003d new int[]{Integer.parseInt(temp[0].trim()) - 1};"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        else"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            index \u003d new int[]{Integer.parseInt(temp[0].trim()) - 1, Integer.parseInt(temp[1].trim()) - 1};"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the description the user inputs for tasks. Will not accept empty descriptions"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return temp The description that the user has specified for the task. Cannot be null."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @throws RoomShareException If temp is empty."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public String getDescription() throws RoomShareException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String temp \u003d scanner.nextLine().trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (temp.equals(\"\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            throw new RoomShareException(ExceptionType.empty);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an array of strings that stores the raw description and date Strings to be stored in Duke."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return array An array of String containing the description and date information. Index 0 stores the description,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *               index 1 stores the date String."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public String[] getDescriptionWithDate() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] array \u003d scanner.nextLine().trim().split(\"/\", 2);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return array;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a Date object from a raw date that is stored as a String."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the format of the input string is unacceptable, will throw a DukeException and will not return anything."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param by Input String containing the date information."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A Date object containing the appropriately formatted date."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @throws RoomShareException If by is not in dd/MM/yyyy HH:mm format"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public Date formatDate(String by) throws RoomShareException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SimpleDateFormat(\"dd/MM/yyyy HH:mm\").parse(by);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            throw new RoomShareException(ExceptionType.wrongFormat);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the keyword to be searched for."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return key A string of the keyword to be searched for"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getKey() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String key \u003d scanner.nextLine().toLowerCase();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return key;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public String getRecurrence() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        return scanner.nextLine().trim().toLowerCase();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Returns the amount of time the customer request to snooze"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @return the amount of time the customer request to snooze"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public int getAmount(){"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        String temp \u003d scanner.nextLine().trim();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        return Integer.parseInt(temp);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Returns the unit of time the customer request to snooze"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @return the unit of time the customer request to snooze"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public TimeUnit getTimeUnit(){"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        String temp \u003d scanner.next();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        return TimeUnit.valueOf(temp);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * Gets a yes or no answer from the user"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * @return the response of the user. Either yes or no."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    public ReplyType getReply() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        String temp \u003d scanner.nextLine().trim();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        return ReplyType.valueOf(temp);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Returns the index of the task and priority the user wants to set it to"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @return the index and priority of the task the user wants to set"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public String[] getPriority() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        String empty \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        return scanner.nextLine().trim().split(\" \", 2);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    public String getResponse() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        return scanner.next();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 45,
      "benitokun123": 11,
      "tyeryan": 14,
      "calebtay": 9,
      "-": 79
    }
  },
  {
    "path": "src/main/java/Operations/RecurHandler.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "package Operations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import CustomExceptions.RoomShareException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.ExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.RecurrenceScheduleType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.TaskType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Model_Classes.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": " * This class deals with operations for Recurring Tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": " * will perform operations such as add, list, find"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": " * also checks for recurrence of tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public class RecurHandler {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private static final String ENTER_TASK_TYPE \u003d \"please enter a todo, deadline or event task type!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private static final String RECURRENCE_SYMBOL \u003d \"(R:\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private static final String EMPTY_SEARCH \u003d \"\\tYour search returned no results.... Try searching with another keyword!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private static final String TODO_MARKER \u003d \"[T]\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private static final String DAY \u003d \"day\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private static final String WEEK \u003d \"week\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private static final String MONTH \u003d \"month\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private static final String DEADLINE_MARKER \u003d \"[D]\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public static final String DATE_ERROR_GENERATE_NEW_RECURRING_TASK \u003d \"Error in parsing dates, generating new recurring task\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public static final String DATE_ERROR_SET_AS_NOT_DONE \u003d \"Error in parsing date, will be setting the task to not done instead\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Constructor for RecurHandler class"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param recurringList The TaskList to be operated on using RecurHandler"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public RecurHandler(TaskList recurringList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        this.taskList \u003d recurringList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Constructs and adds a Recurring type task into the task list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Creates new types of tasks called RecurringDeadline, RecurringToDo, RecurringEvent"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * and adds them into the task list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Will prompt user on the recurrence schedule before any creation of tasks."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void addBasedOnOperation() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        ui.promptForRecurrence();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        String recurrence \u003d parser.getRecurrence();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        ui.promptForTask();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        //get the command to create a recurring task"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        String command \u003d parser.getCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        TaskType taskType;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            taskType \u003d TaskType.valueOf(command);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            taskType \u003d TaskType.others;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        case todo:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "             try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                 RecurringToDo temp \u003d new RecurringToDo(parser.getDescription(), recurrence);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                 taskList.add(temp);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                 ui.showAddRecur();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "             } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                 ui.showEmptyDescriptionError();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "             }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "             break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        case deadline:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                String[] deadlineArray \u003d parser.getDescriptionWithDate();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                Date by \u003d parser.formatDate(deadlineArray[1]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                RecurringDeadline temp \u003d new RecurringDeadline(deadlineArray[0], by, recurrence);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                taskList.add(temp);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                ui.showAddRecur();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                ui.showDateError();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        case event:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                String[] eventArray \u003d parser.getDescriptionWithDate();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                Date at \u003d parser.formatDate(eventArray[1]);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                if(CheckAnomaly.checkTime(at)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    RecurringEvent temp \u003d new RecurringEvent(eventArray[0], at, recurrence);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    taskList.add(temp);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    ui.showAddRecur();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    throw new RoomShareException(ExceptionType.timeClash);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                ui.showDateError();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            System.out.println(ENTER_TASK_TYPE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Lists out all recurring tasks in the task list"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void listRecurring() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        ui.showListRecur();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        int listCount \u003d 1;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        for (Task output : TaskList.currentList()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            if (output.toString().contains(RECURRENCE_SYMBOL)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                System.out.println(\"\\t\" + listCount + \". \" + output.toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                listCount +\u003d 1;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Finds all recurring tasks with any mention of the keyword"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Lists all these tasks to the user."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param key keyword that is being queried in all the recurring tasks"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void findRecurring(String key) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        ui.showListRecur();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        int queryCount \u003d 1;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        for (Task query : TaskList.currentList()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            if (query.toString().toLowerCase().contains(key.trim()) \u0026\u0026 query.toString().contains(RECURRENCE_SYMBOL)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                // task contains the keyword and is a recurring task."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                System.out.println(\"\\t\" + queryCount + \". \" + query.toString());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            queryCount +\u003d 1;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        if (queryCount \u003d\u003d 1) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            System.out.println(EMPTY_SEARCH);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Checks for recurrences based on the date."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * if there is a recurrence, replaces the old recurring task with a new one"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * new recurring task will have an updated recurrence date."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Returns a boolean value that determines if there was any recurrence triggered."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @return A boolean value where true indicates a recurrence was triggered, and false being otherwise."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public boolean checkRecurrence() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        DateTimeFormatter dateTimeFormatterNow \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        String currentTime \u003d now.format(dateTimeFormatterNow);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        boolean isEdited \u003d false;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        for (Task check : TaskList.currentList()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            if (check instanceof RecurringToDo || check instanceof RecurringEvent || check instanceof RecurringDeadline) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                String temp \u003d check.toString();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                String[] array \u003d temp.split(\"\\\\(\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                String recurrenceSchedule;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                RecurrenceScheduleType type;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                String description \u003d check.getDescription();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                if (check instanceof RecurringToDo) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    // extract the recurrence schedule."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    recurrenceSchedule \u003d array[2].substring(3, array[2].length() - 1);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    type \u003d RecurrenceScheduleType.valueOf(recurrenceSchedule);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    switch (type) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    case day:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        // check if recurrence date has passed"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        if (dateHasPassedToDo(currentTime, check.getCreated(), DAY, description, index, isEdited)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            RecurringToDo recurringToDo \u003d new RecurringToDo(description, DAY);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            taskList.replace(index, recurringToDo);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            isEdited \u003d true;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    case week:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        // check if recurrence date has passed"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        if (dateHasPassedToDo(currentTime, check.getCreated(), WEEK, description, index, isEdited)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            RecurringToDo recurringToDo \u003d new RecurringToDo(description, WEEK);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            taskList.replace(index, recurringToDo);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            isEdited \u003d true;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    case month:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        // check if recurrence date has passed"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        if (dateHasPassedToDo(currentTime, check.getCreated(), MONTH, description, index, isEdited)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            RecurringToDo recurringToDo \u003d new RecurringToDo(description, MONTH);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            taskList.replace(index, recurringToDo);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            isEdited \u003d true;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    // handling for deadline and event recurrences"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    recurrenceSchedule \u003d array[3].substring(3, array[3].length() - 1);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    type \u003d RecurrenceScheduleType.valueOf(recurrenceSchedule);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    switch (type) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    case week:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        // check if recurrence date has passed"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        if (dateHasPassedOthers(currentTime, check, isEdited )) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            if (check instanceof RecurringDeadline) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                                RecurringDeadline recurringDeadline \u003d new RecurringDeadline(description, getNewDate(check), WEEK);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                                taskList.replace(index, recurringDeadline);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                                isEdited \u003d true;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                                RecurringEvent recurringEvent \u003d new RecurringEvent(description, getNewDate(check), WEEK);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                                taskList.replace(index, recurringEvent);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                                isEdited \u003d true;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    case day:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        // check if recurrence date has passed"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        if (dateHasPassedOthers(currentTime, check, isEdited )) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            if (check.toString().contains(DEADLINE_MARKER)) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                                RecurringDeadline recurringDeadline \u003d new RecurringDeadline(description, getNewDate(check), DAY);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                                taskList.replace(index, recurringDeadline);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                                isEdited \u003d true;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                                RecurringEvent recurringEvent \u003d new RecurringEvent(description, getNewDate(check), DAY);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                                taskList.replace(index, recurringEvent);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                                isEdited \u003d true;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    case month:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        // check if recurrence date has passed"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        if (dateHasPassedOthers(currentTime, check, isEdited )) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            if (check.toString().contains(DEADLINE_MARKER)) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                                RecurringDeadline recurringDeadline \u003d new RecurringDeadline(description, getNewDate(check), MONTH);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                                taskList.replace(index, recurringDeadline);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                                isEdited \u003d true;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                                RecurringEvent recurringEvent \u003d new RecurringEvent(description, getNewDate(check), MONTH);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                                taskList.replace(index, recurringEvent);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                                isEdited \u003d true;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            // move on to next item in the task list"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            index +\u003d 1;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        return isEdited;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * checks if the recurrence date has passed for a RecurringToDo object"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * if date has passed, returns true"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * if date has not passed, returns false."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param currentTime current time of the computer system as a string"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param createdTime time the RecurringToDo object was created"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param recurrence recurrence schedule of the object"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param description description of the task"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param index index the task is stored in the task list"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param isEdited boolean variable describing if the task list has been edited in anyway"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private boolean dateHasPassedToDo(String currentTime, String createdTime, String recurrence,"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                                      String description, int index, boolean isEdited) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        boolean isPassed \u003d false;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            Date current \u003d parser.formatDate(currentTime);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            Date created \u003d parser.formatDate(createdTime);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            calendar.setTime(created);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            calendar.add(Calendar.DAY_OF_MONTH, 1);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            Date newDate \u003d calendar.getTime();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            if (newDate.compareTo(current) \u003c 0) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                // date has passed"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                isPassed \u003d true;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            System.out.println(DATE_ERROR_GENERATE_NEW_RECURRING_TASK);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            RecurringToDo recurringToDo \u003d new RecurringToDo(description, recurrence);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            taskList.replace(index, recurringToDo);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            isEdited \u003d true;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        return isPassed;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Returns a new Date object with the date stored in the task object class"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * If any error occurs, the Date object will be set to the current date instead."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param check Task object containing the Date information to be extracted"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @return newDate, containing a the date information of the task object class."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private Date getNewDate(Task check) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        Date newDate \u003d new Date();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            String date \u003d new Storage().convertForStorage(check);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            date \u003d date.substring(0, 16);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            Date storedDate \u003d parser.formatDate(date);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            calendar.setTime(storedDate);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            calendar.add(Calendar.MONTH, 1);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            newDate \u003d calendar.getTime();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        return newDate;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * checks if the recurrence date has passed for a RecurringDeadline or RecurringEvent object"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * if date has passed, returns true"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * if date has not passed, returns false."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param currentTime current time of the system as a string"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param check Task to be time checked"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param isEdited boolean variable describing if the task list has been edited in anyway"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private boolean dateHasPassedOthers(String currentTime, Task check, boolean isEdited) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        boolean isPassed \u003d false;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            Date current \u003d parser.formatDate(currentTime);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            Date newDate \u003d getNewDate(check);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            if (newDate.compareTo(current) \u003c 0) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                // date has passed"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                isPassed \u003d true;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            System.out.println(DATE_ERROR_SET_AS_NOT_DONE);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            check.setDone(false);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            isEdited \u003d true;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        return isPassed;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 330,
      "calebtay": 1
    }
  },
  {
    "path": "src/main/java/Operations/Report.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "package Operations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import CustomExceptions.RoomShareException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public class Report {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public Report(TaskList taskList) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void fullReport() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        ui.reportTasks();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            taskList.list();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            ui.showListError();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        finishedReport();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        unfinishedReport();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        upcomingReport();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        recurringReport();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void finishedReport() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        ui.reportFinished();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            double percentage \u003d taskList.listDone();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            ui.reportDonePercentage(percentage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            ui.showListError();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void unfinishedReport() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        ui.reportUnfinished();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            double percentage \u003d taskList.listNotDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            ui.reportNotDonePercentage(percentage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            ui.showListError();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void upcomingReport() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        ui.reportUpcoming();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        DateTimeFormatter dateTimeFormatterNow \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        String currentTime \u003d now.format(dateTimeFormatterNow);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            int upcoming \u003d taskList.listUpcoming(currentTime);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            ui.reportUpcomingCount(upcoming);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            ui.showListError();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void recurringReport() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        ui.reportRecurring();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        int recurring \u003d taskList.listRecurringReport();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        ui.reportRecurringCount(recurring);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 66
    }
  },
  {
    "path": "src/main/java/Operations/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Operations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import CustomExceptions.RoomShareException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Enums.ExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Enums.Priority;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.SaveType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import Model_Classes.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.lang.reflect.Array;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Performs storage operations such as writing and reading from a .txt file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for the Storage class"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an ArrayList of Tasks from a .txt file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts the relevant information from the data.txt file in Duke to create the tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Populates an ArrayList with these created tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return taskArrayList An ArrayList of Tasks that is created from the .txt file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @throws RoomShareException If the file has mistakes in formatting. Creates and empty task list instead and returns the empty list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public ArrayList\u003cTask\u003e loadFile(String fileName) throws RoomShareException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(new FileReader(fileName));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            String line \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            ArrayList\u003cString\u003e tempList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                tempList.add(line);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            parser \u003d new Parser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            for (String list : tempList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                String[] temp \u003d list.split(\"#\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                SaveType type;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                Priority priority;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    priority \u003d Priority.valueOf(temp[2]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    priority \u003d Priority.low;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                boolean done \u003d temp[1].equals(\"y\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    type \u003d SaveType.valueOf(temp[0]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    type \u003d SaveType.empty;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                if (list.contains(\"#week\") || list.contains(\"#day\") || list.contains(\"#month\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    switch (type) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        case T:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                            RecurringToDo tempToDo \u003d new RecurringToDo(temp[3], temp[4], done, priority);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            taskArrayList.add(tempToDo);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        case E:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                            Date by \u003d parser.formatDate(temp[4]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                            RecurringEvent tempEvent \u003d new RecurringEvent(temp[3], by, temp[5], done, priority);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            taskArrayList.add(tempEvent);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        case D:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                            Date deadlineBy \u003d parser.formatDate(temp[4]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                            RecurringDeadline tempDeadline \u003d new RecurringDeadline(temp[3], deadlineBy, temp[5], done, priority);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            taskArrayList.add(tempDeadline);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    switch (type) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                        case T:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            ToDo tempToDo \u003d new ToDo(temp[3], temp[4]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            tempToDo.setPriority(priority);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            tempToDo.setDone(done);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            taskArrayList.add(tempToDo);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                        case E:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                            Date by \u003d parser.formatDate(temp[4]);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            if (temp.length \u003d\u003d 8) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                                FixedDuration tempEvent \u003d new FixedDuration(temp[3], by, Integer.parseInt(temp[5]), temp[7], temp[6]);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                                tempEvent.setDone(done);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                                tempEvent.setPriority(priority);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                                taskArrayList.add(tempEvent);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                                Event tempEvent \u003d new Event(temp[3], by, temp[5]);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                                tempEvent.setDone(done);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                                tempEvent.setPriority(priority);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                                taskArrayList.add(tempEvent);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                        case D:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                            Date deadlineBy \u003d parser.formatDate(temp[4]);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            Deadline tempDeadline \u003d new Deadline(temp[3], deadlineBy, temp[5]);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            tempDeadline.setDone(done);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            tempDeadline.setPriority(priority);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            taskArrayList.add(tempDeadline);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        default:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            throw new RoomShareException(ExceptionType.wrongFormat);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            throw new RoomShareException(ExceptionType.wrongFormat);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return (taskArrayList);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Rewrites the data.txt file with a task list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Formats all task information into a style that the loadFile() method is able to understand"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes all the formatted information into a data.txt file for storage"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will not write any information if the there are mistakes in the ArrayList information."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param list ArrayList of Tasks to be stored on data.txt"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @throws RoomShareException If there are parsing errors in the ArrayList."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void writeFile(ArrayList\u003cTask\u003e list, String fileName) throws RoomShareException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(fileName));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Task s : list) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                String done \u003d s.getDone() ? \"y\" : \"n\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                String type \u003d String.valueOf(s.toString().charAt(1));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                String priority \u003d s.getPriority().name();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                String description \u003d s.getDescription();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                String time \u003d convertForStorage(s);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                String assignee \u003d s.getUser();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                String out \u003d type + \"#\" + done + \"#\" + priority + \"#\" + description + \"#\" + time + assignee;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                writer.write(out);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                writer.newLine();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            throw new RoomShareException(ExceptionType.wrongFormat);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Extracts and converts all the information in the task object for storage"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * will format the time information for deadline and event tasks"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Additional formatting will be done for recurring tasks to include recurrence schedule"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * returns a string with all the relevant information."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param task task object to be converted"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @return time A String containing all the relevant information"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @throws RoomShareException If there is any error in parsing the Date information."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    String convertForStorage(Task task) throws RoomShareException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            String time \u003d \"\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            String[] prelimSplit \u003d task.toString().split(\"\\\\(\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            String[] tempString \u003d prelimSplit[2].split(\"\\\\s+\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            if (!(task instanceof RecurringToDo || task instanceof RecurringDeadline || task instanceof RecurringEvent)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                // tasks that enter here are not recurring tasks"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                if (!(task instanceof ToDo)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    String year \u003d tempString[6].substring(0, tempString[6].length() - 1);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    Date date \u003d new SimpleDateFormat(\"MMM\").parse(tempString[2]);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    DateFormat dateFormat \u003d new SimpleDateFormat(\"MM\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    String month \u003d dateFormat.format(date);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    String[] timeArray \u003d tempString[4].split(\":\", 3);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    String day \u003d tempString[3];"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    time \u003d day + \"/\" + month + \"/\" + year + \" \" + timeArray[0] + \":\" + timeArray[1] + \u0027#\u0027;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                if (task instanceof FixedDuration) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    String[] durationArray \u003d prelimSplit[3].split(\":\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    String temp \u003d durationArray[1].trim();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    String[] tempDuration \u003d temp.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    time \u003d time + tempDuration[0].trim() + \"#\" + tempDuration[1].trim().substring(0, tempDuration[1].length() - 1) + \"#\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                // tasks that enter here are recurring tasks"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                if (!(task instanceof RecurringToDo)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    String year \u003d tempString[6].substring(0, tempString[6].length() - 1);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    Date date \u003d new SimpleDateFormat(\"MMM\").parse(tempString[2]);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    DateFormat dateFormat \u003d new SimpleDateFormat(\"MM\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    String month \u003d dateFormat.format(date);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    String day \u003d tempString[3];"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    String[] timeArray \u003d tempString[4].split(\":\", 3);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    String recurringFrame \u003d prelimSplit[3].substring(3, prelimSplit[3].length() - 1);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    time \u003d day + \"/\" + month + \"/\" + year + \" \" + timeArray[0] + \":\" + timeArray[1] + \"#\" + recurringFrame + \"#\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    time \u003d prelimSplit[2].substring(3, prelimSplit[2].length() - 1) + \"#\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            return time;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            throw new RoomShareException(ExceptionType.wrongFormat);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 117,
      "calebtay": 20,
      "-": 64
    }
  },
  {
    "path": "src/main/java/Operations/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Operations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import CustomExceptions.RoomShareException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Enums.ExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Enums.Priority;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Model_Classes.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.TimeUnit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to perform operations on the task list in Duke"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    private static ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for the TaskList class."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * takes in an ArrayList as the list of tasks to be operated on."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks ArrayList of Task objects to be operated on."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new task into the task list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param newTask Task object to be added into the list of tasks"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Task newTask) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes a task from the list. Task to be deleted is specified by the index that is input into this method"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will not perform any operations if the index does not exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index Index of task in the list to be deleted"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @throws RoomShareException If the index cannot be found in the list of tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void delete(int[] index, TempDeleteList deletedList) throws RoomShareException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        int[] idx \u003d index.clone();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        if (idx.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            if (idx[0] \u003c 0 || idx[0] \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                throw new RoomShareException(ExceptionType.outOfBounds);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            deletedList.add(tasks.get(idx[0]));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            tasks.remove(idx[0]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            for (int i \u003d idx[0]; idx[1] \u003e\u003d idx[0]; idx[1]--) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                if (i \u003c 0 || i \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    throw new RoomShareException(ExceptionType.outOfBounds);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                deletedList.add(tasks.get(i));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                tasks.remove(i);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Lists out all tasks in the current list in the order they were added into the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void list() throws RoomShareException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        if( tasks.size() !\u003d 0 ){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            int listCount \u003d 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            for (Task output : tasks) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                System.out.println(\"\\t\" + listCount + \". \" + output.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                listCount +\u003d 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            throw new RoomShareException(ExceptionType.emptylist);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets a task in the list as \u0027done\u0027 to mark that the user has completed the task."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will not perform any operations if the index does not exist in the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index Index of the task to be marked as done."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @throws RoomShareException If the index cannot be found in the list of tasks."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void done(int[] index) throws RoomShareException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        if (index.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            if (index[0] \u003c 0 || index[0] \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                throw new RoomShareException(ExceptionType.outOfBounds);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            tasks.get(index[0]).setDone(true);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            for (int i \u003d index[0]; i \u003c\u003d index[1]; i++){"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                if (i \u003c 0 || i \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    throw new RoomShareException(ExceptionType.outOfBounds);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                tasks.get(i - 1).setDone(true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Searches for tasks that has the specified keyword and prints them to the console."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will prompt that the search has no results if keyword does not exist in the list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param key Keyword of the search."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find (String key) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        int queryCount \u003d 1;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task query : tasks) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            if (query.toString().toLowerCase().contains(key.trim())) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                System.out.println(\"\\t\" + queryCount + \". \" + query.toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            queryCount +\u003d 1;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (queryCount \u003d\u003d 1) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"    Your search returned no results.... Try searching with another keyword!\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the entire ArrayList of tasks"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return tasks The ArrayList of Task objects that is being operated on."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public static ArrayList\u003cTask\u003e currentList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void replace(int index, Task replacement) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        tasks.set(index, replacement);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Snooze a specific task indicated by user"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param index the index of the task to be snoozed"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param amount the amount of time to snooze"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param timeUnit unit for snooze time: year, month, day, hour, minute"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void snooze (int index, int amount, TimeUnit timeUnit){"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        if (tasks.get(index) instanceof ToDo){"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            System.out.println(\"Todo cannot be snoozed\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        switch (timeUnit) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            case year:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                tasks.get(index).snoozeYear(amount);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            case month:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                tasks.get(index).snoozeMonth(amount);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            case day:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                tasks.get(index).snoozeDay(amount);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            case hours:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                tasks.get(index).snoozeHour(amount);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            case minutes:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                tasks.get(index).snoozeMinute(amount);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Sets priority of task"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void setPriority(String[] info) throws RoomShareException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            int index \u003d Integer.parseInt(info[0]) - 1;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            Priority priority \u003d Priority.valueOf(info[1]);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            tasks.get(index).setPriority(priority);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        } catch (IllegalArgumentException a) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            throw new RoomShareException(ExceptionType.wrongPriority);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        } catch (IndexOutOfBoundsException i) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            throw new RoomShareException(ExceptionType.outOfBounds);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Returns priority of the task in the form of an integer"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * high \u003d 0, medium \u003d 1, low \u003d 2"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param t task in which we are checking the value of"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @return integer value of the task\u0027s priority"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public int getValue(Task t) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        if (t.getPriority().equals(Priority.high)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        } else if (t.getPriority().equals(Priority.medium)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            return 2;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Sorts the list based on priority"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void sortPriority() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        tasks.sort(new Comparator\u003c\u003e() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            public int compare(Task task1, Task task2) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                return Integer.compare(getValue(task1), getValue(task2));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        });"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void reorder(int first, int second) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        Collections.swap(tasks, first, second);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public double listDone() throws RoomShareException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        if( tasks.size() !\u003d 0 ){"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            int listCount \u003d 1;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            double doneCount \u003d 0.0;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            for (Task output : tasks) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                if (output.getDone()) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    System.out.println(\"\\t\" + listCount + \". \" + output.toString());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    doneCount +\u003d 1.0;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                listCount +\u003d 1;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            return (doneCount/tasks.size()) * 100.0;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            throw new RoomShareException(ExceptionType.emptylist);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public double listNotDone() throws RoomShareException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        if( tasks.size() !\u003d 0 ){"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            int listCount \u003d 1;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            double notDoneCount \u003d 0.0;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            for (Task output : tasks) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                if (!output.getDone()) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    System.out.println(\"\\t\" + listCount + \". \" + output.toString());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    notDoneCount +\u003d 1.0;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                listCount +\u003d 1;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            return (notDoneCount/tasks.size()) * 100.0;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            throw new RoomShareException(ExceptionType.emptylist);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public int listUpcoming(String currentDate) throws RoomShareException {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        if( tasks.size() !\u003d 0 ){"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            Date dateNow \u003d parser.formatDate(currentDate);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            int listCount \u003d 1;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            int upcomingCount \u003d 0;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            for (Task output : tasks) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                if (!(output instanceof ToDo)) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    String date \u003d new Storage().convertForStorage(output);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    date \u003d date.substring(0, 16);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    Date storedDate \u003d parser.formatDate(date);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    if (storedDate.compareTo(dateNow) \u003e 0) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        // the date the task should be done by has not passed the current date"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        System.out.println(\"\\t\" + listCount + \". \" + output.toString());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        upcomingCount +\u003d 1;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                listCount +\u003d 1;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            return upcomingCount;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            throw new RoomShareException(ExceptionType.emptylist);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public int listRecurringReport() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        int listCount \u003d 1;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        int recurringCount \u003d 0;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        for (Task output : tasks) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            if (output instanceof RecurringEvent || output instanceof RecurringDeadline"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    || output instanceof RecurringToDo) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                System.out.println(\"\\t\" + listCount + \". \" + output.toString());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                recurringCount +\u003d 1;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            listCount +\u003d 1;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        return recurringCount;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 147,
      "benitokun123": 9,
      "tyeryan": 3,
      "calebtay": 54,
      "-": 69
    }
  },
  {
    "path": "src/main/java/Operations/TempDeleteList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "package Operations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Model_Classes.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public class TempDeleteList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private ArrayList\u003cTask\u003e tempDelete;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public TempDeleteList(ArrayList\u003cTask\u003e tempDelete) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        this.tempDelete \u003d tempDelete;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        tempDelete.add(task);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void restore(int index, TaskList taskList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        taskList.add(tempDelete.get(index));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 21
    }
  },
  {
    "path": "src/main/java/Operations/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Operations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * class to tell user about errors and completion of operations"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for Ui class"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public Ui () {   }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Shows the startup logo for RoomShare"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void startUp() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        String logo \u003d \" __________         _\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                + \"|          \\\\       / \\\\\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                + \"|    ___    \\\\     /   \\\\\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                + \"|   |___|    |   |  |  | \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                + \"|          _/    |  |  | \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                + \"|    ___    \\\\    \\\\  \\\\  /\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                + \"|   |   \\\\    \\\\    \\\\  \\\\/\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                + \"|   |    \\\\    \\\\   /\\\\  \\\\\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                + \"|___|     \\\\____\\\\ /  \\\\  \\\\\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                + \"                 |  |  |\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                + \"                 |  |  |\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                + \"                 \\\\     /\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                + \"                  \\\\   /\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                + \"                   \\\\_/\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Hello from RoomShare!\\n\" + logo);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"How may I serve you?\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        System.out.println(\"Enter \u0027help\u0027 if you require assistance\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void help() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Enter any of the commands below to see the detailed information on how to use them\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Input \u0027exit\u0027 to leave help mode\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        System.out.println(\"List of Commands:\\n\" +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                \"todo\\n\" + \"deadline\\n\" + \"event\\n\" + \"recur\\n\" + \"snooze\\n\" + \"list\\n\" + \"done\\n\" + \"find\\n\" + \"bye\" );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints an error message telling the user that the data file cannot be loaded and an empty list is generated instead"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showLoadError () {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Error in loading data file, initialising empty task list...\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints a message telling the user that the task at the index has been deleted."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index Index of task to be deleted."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public void showDeleted (int[] index) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        if (index.length \u003d\u003d 1)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            System.out.println(\"Deleted task number \" + (index[0] + 1) + \"!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        else"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            System.out.println(\"Deleted task number \" + (index[0] + 1) + \" to \" + (index[1] + 1) + \" !\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tells the user that the search operation is executing"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showFind () {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Searching for item in task list...\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tells the user that the task of index has been done and the list has been updated."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showDone () {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Completed task! Your task list has been updated\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * tells the user that a task has been added into the list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showAdd () {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Your task has been added into the list!\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void showAddRecur () {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Your task has been added into the recurring list!\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * tells the user goodbye"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showBye() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Goodbye!\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void showExit() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"You have exited recurring list mode\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * tells the user that RoomShare is listing the tasks"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Listing tasks in your task list...\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void showListRecur() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Listing tasks in your recurring task list...\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * tells the user that there is an error in writing the data.txt file."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showWriteError() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Error in writing file, cancelling write process...\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * tells the user that the index specified doesn\u0027t exist"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showIndexError() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Index you\u0027ve entered doesn\u0027t exist, try with another index!\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Tells the user that an invalid command has been input into RoomShare."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showCommandError() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Sorry, I don\u0027t understand this command...\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Try typing todo, deadline or event followed by the task description to add tasks to your todo list\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"    Type list, find, done, delete to perform operations on your todo list\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * reminds user to put description for tasks"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showEmptyDescriptionError() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Looks like your task descriptor is empty! Please add an item description!\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * tells user how to format date due to error in date format"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showDateError() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"please input date format as dd/mm/yyyy HH:mm\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"example: deadline meeting/30/12/2019 18:00\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"example: event concert/30/12/2019 18:00\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Tells the user that they are in recurring mode to add or perform operations on recurring tasks"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void promptRecurringActions() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"You have accessed Recurring Mode\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"You are now accessing and performing operations on the Recurring Task List\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Tasks that appear here will appear based on when you want it to appear again\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Please input your intended action\\n\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"To add a new task into the recurring task list, input \u0027add\u0027\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"To perform operations like find or list, do it similar to how you would do it normally\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"\\tE.g : find homework\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"\\tE.g : list\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"To quit recurring mode, input \u0027exit\u0027.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Prompts the user to describe the recurrence schedule of the task"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void promptForRecurrence() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Please enter the recurrence of the task, either by day, week or month\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"\\tE.g : Day\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"\\tE.g : Week\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"\\tE.g : Month\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Prompts the user on how to add new recurring tasks"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void promptForTask() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"now enter your desired task as usual!\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"\\tE.g : todo buy groceries\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"\\tE.g : todo buy groceries\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"\\tE.g : deadline homework 22/12/2019 18:00\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"\\tE.g : deadline homework 22/12/2019 18:00\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"\\tE.g : event meeting 22/12/2019 18:00\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"\\tE.g : event meeting 22/12/2019 18:00\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * tells the user that recurring tasks have appeared."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void showChangeInTaskList() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"You have some recurring tasks that need to be cleared, please check them:\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * tells the user to input the amount of time to snooze the task"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void showSnooze() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Please indicate the amount of time you want to snooze this task\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * tells the user that the requested task has been snoozed"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void showSnoozeComplete() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Great I\u0027ve snoozed your task\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * Asks the user for the duration of the task"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    public void promptForDuration() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"How long is the duration for this event?\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        System.out.println(\"Please specify hours, minutes\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        System.out.println(\"\\tE.g : hours 2\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Asks the user whether the task has a duration"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    public void promptForReply() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"Does this task have a duration? (yes/no)\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    public void promptForTime() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"Enter the amount of time\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Tells the user to input valid amount of time"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public void showTimeError(){"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        System.out.println(\"Please indicate a valid amount of time\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Provides user with instructions to prioritise task"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void priority() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        System.out.println(\"Enter task index followed by priority (high, medium, low)\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        System.out.println(\"\\te.g. 1 high\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Notifies the user that their task\u0027s priority has been set"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void prioritySet() { System.out.println(\"Your task\u0027s priority has been set\"); }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void promptSecondIndex() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Please enter the index to swap to\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void showReordering() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Reordering the task list...\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    public void promptForAssigning() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"Do you want to assign this task? (if yes enter the assignee\u0027s name)\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void explainBye() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Entering \u0027bye\u0027 will exit RoomShare and save all your data\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"\\te.g : bye\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void explainList() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Entering list will cause RoomShare to list out all the existing tasks in the task list\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"\\te.g : list\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void explainDelete() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Deletes the tasks in the specific indices from the task list\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"\\te.g : delete 1\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"\\te.g : \u0027delete 1 - 2\u0027\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void explainFind() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Searches the current task list for any tasks that contain the input keyword\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"\\te.g : find homework\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"\\te.g : find math quiz\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void explainDone() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Sets the tasks in the specific indices as done\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"\\te.g : done 1\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"\\te.g : \u0027done 1 - 2\u0027\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void explainToDo() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Adds a ToDo task into RoomShare\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Requires you to have a task description\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"\\te.g : todo homework\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void explainDeadline() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Adds a Deadline task into RoomShare\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Requires you to have a task description and deadline\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"The description must be separated from the deadline by a \u0027/\u0027\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"The time format must be of dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"\\te.g : deadline math assignment/22/12/2019 18:00\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void explainEvent() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Adds an Event task into RoomShare\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Requires you to have a task description and happening time\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"The description must be separated from the time by a \u0027/\u0027\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"The time format must be of dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"\\te.g : event market sale/22/12/2019 18:00\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Will also ask if event has fixed duration to start creation of fixed duration tasks\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void explainRecur() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"brings RoomShare into the Recurring tasks mode where you can add recurring tasks\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"\\te.g : recur\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void explainSnooze() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Snoozes the task specified for a set amount of time\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"\\te.g : snooze 1\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void explainPriority() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Allows you to set the priority of the task\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Input \u0027priority\u0027 to start the process of setting priority\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void explainReorder() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Swaps the tasks with a specified index\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"\\te.g : reorder 1\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"RoomShare will prompt you to input a new index to swap the task to\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void reportTasks() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Here\u0027s your report for the task list:\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void showListError() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Seems like your task list is empty... Try adding a task to your list before listing!\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void reportFinished() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"\\nHere\u0027s all the tasks that you have done\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void reportDonePercentage(double percentage) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"You\u0027ve finished \" + percentage + \" of your tasks\");"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        if (percentage \u003c 25.0) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            System.out.println(\"Keep working at it!\");"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } else if (percentage \u003c 50.0) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            System.out.println(\"On track to the halfway mark!\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } else if (percentage \u003d\u003d 50.0) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            System.out.println(\"Halfway there!\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } else if (percentage \u003c 75.0) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            System.out.println(\"Good progress!\");"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } else if (percentage \u003c 100.0) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            System.out.println(\"That\u0027s a lot of work done!\");"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } else if (percentage \u003e\u003d 100) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            System.out.println(\"Congratulations! All done!\");"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void reportUnfinished() {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"\\nHere\u0027s all the tasks that you have NOT done\");"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void reportNotDonePercentage(double percentage) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"You haven\u0027t finished \" + percentage + \" of your tasks...\");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        if (percentage \u003c 25.0) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            System.out.println(\"Keep up the good work\");"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } else if (percentage \u003c 50.0) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            System.out.println(\"Good progress!\");"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } else if (percentage \u003d\u003d 50.0) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            System.out.println(\"Halfway there!\");"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } else if (percentage \u003c 75.0) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            System.out.println(\"Good try, let\u0027s hit the halfway mark\");"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } else if (percentage \u003c 100.0) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            System.out.println(\"Isn\u0027t it time to start work soon?\");"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } else if (percentage \u003e\u003d 100) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            System.out.println(\"Better to start work than never....\");"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void reportUpcoming() {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"\\nThese are your upcoming tasks: \");"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void reportUpcomingCount(int upcoming) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"You have \" + upcoming + \" tasks that are upcoming\");"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void reportRecurring() {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"\\nThese are the recurring tasks in your list\");"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void reportRecurringCount(int recurring) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"You have \" + recurring + \" recurring tasks\");"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 236,
      "benitokun123": 9,
      "tyeryan": 20,
      "calebtay": 26,
      "-": 98
    }
  },
  {
    "path": "src/main/java/RoomShare.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import CustomExceptions.RoomShareException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import Enums.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Model_Classes.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Modes.HelpMode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Modes.RecurringMode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Modes.ReportMode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Operations.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benitokun123"
        },
        "content": " * Main class of the RoomShare program."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public class RoomShare {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private RecurHandler recurHandler;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private TempDeleteList tempDeleteList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Constructor of a Duke class. Creates all necessary objects and collections for Duke to run"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Also loads the ArrayList of tasks from the data.txt file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public RoomShare() throws RoomShareException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        ui.startUp();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        ArrayList\u003cTask\u003e tempStorage \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        tempDeleteList \u003d new TempDeleteList(tempStorage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            taskList \u003d new TaskList(storage.loadFile(\"data.txt\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            ui.showLoadError();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            ArrayList\u003cTask\u003e emptyList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            taskList \u003d new TaskList(emptyList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        recurHandler \u003d new RecurHandler(taskList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        if (recurHandler.checkRecurrence()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            ui.showChangeInTaskList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            taskList.list();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Deals with the operation flow of Duke."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            String command \u003d parser.getCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            TaskType type;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                type \u003d TaskType.valueOf(command);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                type \u003d TaskType.others;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            case help:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                ui.help();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                HelpMode helpMode \u003d new HelpMode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                helpMode.run();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            case list:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                ui.showList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    taskList.list();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    ui.showWriteError();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            case bye:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                isExit \u003d true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    storage.writeFile(TaskList.currentList(), \"data.txt\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    ui.showWriteError();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                ui.showBye();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            case done:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    taskList.done(parser.getIndexRange());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    ui.showDone();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    ui.showIndexError();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            case delete:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    int[] index \u003d parser.getIndexRange();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    taskList.delete(index, tempDeleteList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    ui.showDeleted(index);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    ui.showIndexError();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "             case restore:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                int restoreIndex \u003d parser.getIndex();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                tempDeleteList.restore(restoreIndex, taskList);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            case find:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                ui.showFind();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                taskList.find(parser.getKey().toLowerCase());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            case priority:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                boolean success \u003d true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    taskList.list();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    ui.priority();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    taskList.setPriority(parser.getPriority());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    success \u003d false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    ui.priority();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    if (success) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                        taskList.sortPriority();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                        ui.prioritySet();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "calebtay"
        },
        "content": "             case todo:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                 try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                     String description \u003d parser.getDescription();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                     ui.promptForAssigning();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                     String response \u003d parser.getResponse();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                     if (response.equals(\"no\")) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                         ToDo temp \u003d new ToDo(description);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                         taskList.add(temp);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                         ui.showAdd();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                      }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                     else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                         ToDo temp \u003d new ToDo(description, response);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                         taskList.add(temp);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                         ui.showAdd();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                     }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                 } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                     ui.showEmptyDescriptionError();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                 }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                 break;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "calebtay"
        },
        "content": "             case deadline:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                 try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                     String[] deadlineArray \u003d parser.getDescriptionWithDate();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                     Date by \u003d parser.formatDate(deadlineArray[1]);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                     ui.promptForAssigning();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                     String response \u003d parser.getResponse();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                     if (response.equals(\"no\")) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                         Deadline temp \u003d new Deadline(deadlineArray[0], by);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                         taskList.add(temp);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                         ui.showAdd();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                     }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                     else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                         Deadline temp \u003d new Deadline(deadlineArray[0], by, response);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                         taskList.add(temp);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                         ui.showAdd();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                      }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                 } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                     ui.showDateError();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                 }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                 break;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            case event:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    String[] eventArray \u003d parser.getDescriptionWithDate();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    Date at \u003d parser.formatDate(eventArray[1]);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    ui.promptForReply();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    ReplyType replyType;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                        replyType \u003d parser.getReply();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                        replyType \u003d ReplyType.others;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    switch (replyType) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    case yes:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                        ui.promptForDuration();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                        TimeUnit timeUnit \u003d parser.getTimeUnit();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                        int duration \u003d parser.getAmount();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        String unit \u003d timeUnit.toString();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                        ui.promptForAssigning();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                        String response \u003d parser.getResponse();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                        if (response.equals(\"no\")) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            FixedDuration fixedDuration \u003d new FixedDuration(eventArray[0], at, duration, unit);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                            //checks for clashes"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                            if (CheckAnomaly.checkTime(fixedDuration)) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                                taskList.add(fixedDuration);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                                throw new RoomShareException(ExceptionType.timeClash);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            FixedDuration fixedDuration \u003d new FixedDuration(eventArray[0], at, duration, response, unit);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                            //checks for clashes"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                            if (CheckAnomaly.checkTime(fixedDuration)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                                taskList.add(fixedDuration);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                                throw new RoomShareException(ExceptionType.timeClash);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                        Timer timer \u003d new Timer();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                        class RemindTask extends TimerTask {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                            public void run() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                                System.out.println(eventArray[0] + \" is completed\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                                timer.cancel();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                        RemindTask rt \u003d new RemindTask();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                        switch (timeUnit) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                        case hours:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                            timer.schedule(rt, duration * 1000 * 60 * 60);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                        case minutes:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                            timer.schedule(rt, duration * 1000 * 60);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                        ui.showAdd();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        break; // end yes"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    case no:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                        ui.promptForAssigning();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                        String res \u003d parser.getResponse();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                        if (res.equals(\"no\")) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            Event event \u003d new Event(eventArray[0], at);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                            taskList.add(event);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            ui.showAdd();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                            Event event \u003d new Event(eventArray[0], at, res);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                            taskList.add(event);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                            ui.showAdd();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                     default:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                        ui.showCommandError();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "               }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            catch (RoomShareException e) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                ui.showDateError();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            case recur:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                RecurringMode recurringMode \u003d new RecurringMode(taskList);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                recurringMode.run();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            case snooze :"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    int index \u003d parser.getIndex();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    TaskList.currentList().get(index - 1);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    ui.showSnooze();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    int amount \u003d parser.getAmount();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    TimeUnit timeUnit \u003d parser.getTimeUnit();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    taskList.snooze(index, amount, timeUnit);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    ui.showSnoozeComplete();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    ui.showIndexError();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    ui.showTimeError();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            case reorder:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                int firstIndex \u003d parser.getIndex();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                ui.promptSecondIndex();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                int secondIndex \u003d parser.getIndex();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                ui.showReordering();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                taskList.reorder(firstIndex, secondIndex);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            case report:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                ReportMode report \u003d new ReportMode(taskList);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                report.run();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                ui.showCommandError();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Main function of Duke."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Creates a new instance of Duke class"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param args command line arguments"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @throws RoomShareException Custom exception class within Duke program"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public static void main(String[] args) throws RoomShareException {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        new RoomShare().run();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 163,
      "benitokun123": 18,
      "tyeryan": 85,
      "calebtay": 44,
      "-": 2
    }
  },
  {
    "path": "src/test/java/CheckAnomalyTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import CustomExceptions.RoomShareException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Model_Classes.Event;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Model_Classes.FixedDuration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Operations.CheckAnomaly;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Operations.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Operations.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Operations.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calebtay"
        },
        "content": "public class CheckAnomalyTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    private static final Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    private static final Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    private static FixedDuration currEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    private static Date at1, at2, at3, at4, at5;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    private static TaskList taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            at1 \u003d parser.formatDate(\"12/12/2019 12:00\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            at2 \u003d parser.formatDate(\"20/12/2019 12:00\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            at3 \u003d parser.formatDate(\"12/12/2019 10:00\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            at4 \u003d parser.formatDate(\"20/12/2019 13:00\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            at5 \u003d parser.formatDate(\"21/12/2019 13:00\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            taskList \u003d new TaskList(storage.loadFile(\"data.txt\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            FixedDuration fixedDuration \u003d new FixedDuration(\"test1\", at1, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            Event event \u003d new Event(\"test2\", at2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void timeCheckFixedTest() { assertEquals(true, new CheckAnomaly().checkTime(new FixedDuration(\"check\", at3, 3))); }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void timeCheckOnlyDateTrueTest() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        assertEquals(true, new CheckAnomaly().checkTime(at1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void timeCheckOnlyDateFalseTest() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        assertEquals(false, new CheckAnomaly().checkTime(at5));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calebtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calebtay": 48
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Model_Classes.Deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private static Date by;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private static Deadline deadline \u003d new Deadline(\"homework\", by);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(\"[D][\\u2718] homework (by: Sun Dec 22 18:00:00 SGT 2019)\", deadline.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 15
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import CustomExceptions.RoomShareException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Model_Classes.Deadline;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Operations.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Date by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            by \u003d parser.formatDate(\"22/12/2019 18:00\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"[D][\\u2718] homework (by: Sun Dec 22 18:00:00 SGT 2019)\", new Deadline(\"homework\", by).toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 2,
      "-": 22
    }
  },
  {
    "path": "src/test/java/RoomShareExceptionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import CustomExceptions.RoomShareException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Enums.ExceptionType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calebtay"
        },
        "content": "public class RoomShareExceptionTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    private static final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    static void restoreStreams() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void testEmptylist() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        new RoomShareException(ExceptionType.emptylist);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        assertEquals(\"List is empty\", outContent.toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void testTimeclash() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        new RoomShareException(ExceptionType.timeClash);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        assertEquals(\"Time Clash Detected\", outContent.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void testWrongFormat() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        new RoomShareException(ExceptionType.wrongFormat);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        assertEquals(\"Wrong Format Detected\", outContent.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void testWrongPrioirty() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        new RoomShareException(ExceptionType.wrongPriority);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        assertEquals(\"Wrong Priority Detected\", outContent.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void testOutofBounds() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        new RoomShareException(ExceptionType.outOfBounds);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        assertEquals(\"Index is out of Bounds!\", outContent.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void testDefault() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        new RoomShareException(ExceptionType.test);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        assertEquals(\"Anomaly Detected\", outContent.toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "calebtay"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "calebtay": 63
    }
  },
  {
    "path": "src/test/java/Task_Test.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import CustomExceptions.RoomShareException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Enums.Priority;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Model_Classes.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calebtay"
        },
        "content": "public class Task_Test {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    private static Task task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        task \u003d new Task(\"test\", \"user\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void testGetUser() { assertEquals(\"user\", new Task(\"test\", \"user\").getUser()); }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void testGetCreated() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        DateTimeFormatter dateTimeFormatterNow \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        assertEquals(now.format(dateTimeFormatterNow), new Task(\"test\", \"user\").getCreated());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void testGetDone() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        assertEquals(false, new Task(\"test\", \"user\").getDone());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void testGetStatusIcon() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(\"[\\u2718] \", new Task(\"test\", \"user\").getStatusIcon());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void testGetDescription() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        assertEquals(\"test\", new Task(\"test\", \"user\").getDescription());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void testGetPriority() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        assertEquals(Priority.low, new Task(\"test\", \"user\").getPriority());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void testSetDone() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        task.setDone();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        assertEquals(true, task.getDone());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void testSetPriority() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        task.setPriority(Priority.high);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        assertEquals(Priority.high, task.getPriority());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(\"[\\u2718] test (user)\", new Task(\"test\", \"user\").toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "calebtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 2,
      "calebtay": 60
    }
  },
  {
    "path": "src/test/java/ToDoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import Model_Classes.ToDo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private static ToDo toDo \u003d new ToDo(\"homework\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(\"[T][\\u2718] homework (nul)\", toDo.toString());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 2,
      "-": 10
    }
  }
]
