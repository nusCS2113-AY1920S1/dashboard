[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    archiveBaseName \u003d \"RoomShare\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    mainClassName \u003d \"RoomShare\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.4.0\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 21,
      "-": 25
    }
  },
  {
    "path": "src/main/java/CustomExceptions/RoomShareException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "package CustomExceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Enums.ExceptionType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public class RoomShareException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    private static final String LINE \u003d \"___________________________________________________________________________________\\n\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    private static final String OUT_OF_BOUNDS_TEXT \u003d \"\\tIndex is out of Bounds!\\n\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    private static final String ANOMALY_TEXT \u003d \"\\tAnomaly Detected\\n\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    private static final String EMPTY_LIST_TEXT \u003d \"\\tList is empty\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    private static final String TIME_CLASH_TEXT \u003d \"\\tTime Clash Detected\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    private static final String WRONG_FORMAT_TEXT \u003d \"\\tWrong Format Detected\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    private static final String WRONG_PRIORITY_TEXT \u003d \"\\tYou\u0027ve entered wrong format of priority\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    private static final String SUB_TASK_TEXT \u003d \"\\tOnly Assignments are supported with Subtasks\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public static final String WRONG_TASK_TYPE_TEXT \u003d \"\\tOnly meeting, assignment, or leave tag are accepted\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public static final String EMPTY_DESCRIPTION_TEXT \u003d \"\\tYou haven\u0027t included the description of you task\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public static final String EMPTY_DATE_TEXT \u003d \"\\tYou haven\u0027t included the date of your task\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public static final String EMPTY_USER_TEXT \u003d \"\\tYou haven\u0027t included the user of your task\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public static final String EMPTY_TASK_TYPE_TEXT \u003d \"\\tYou haven\u0027t specified the type of your task: assignment, meeting, or leave\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public static final String WRITE_ERROR_TEXT \u003d \"\\tError in writing file, cancelling write process...\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public static final String WRONG_INDEX_FORMAT_TEXT \u003d \"\\tThe index you\u0027ve enter is in the wrong format\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public static final String WRONG_TIME_FORMAT_TEXT \u003d \"\\tYou\u0027ve entered an invalid time format\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public static final String WRONG_SORT_TYPE_TEXT \u003d \"\\tPlease enter a valid sort type: priority, alphabetical or deadline\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public static final String LOG_ERROR_TEXT \u003d \"\\tError writing to a new log file. Please try again.\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public static final String NEGATIVE_AMOUNT_TEXT \u003d \"\\tThe amount of time to snooze a task cannot be negative.\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public static final String EMPTY_SUB_TASK \u003d \"\\tYou haven\u0027t included your list of sub-tasks\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public static final String DUPLICATE_SUB \u003d \"\\tDuplicate subtask detected\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public static final String DUPLICATE_TASK \u003d \"\\tDuplicate task detected\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Constructor for DukeException Exception"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Takes in the exception type thrown and prints out the specific error message"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param type type of exception detected"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public RoomShareException(ExceptionType type){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        switch(type) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        case emptyUser:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            message \u003d EMPTY_USER_TEXT;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        case emptyList:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            message \u003d EMPTY_LIST_TEXT;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        case writeError:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            message \u003d WRITE_ERROR_TEXT;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        case wrongIndexFormat:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            message \u003d WRONG_INDEX_FORMAT_TEXT;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        case wrongTimeFormat:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            message \u003d WRONG_TIME_FORMAT_TEXT;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        case timeClash:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            message \u003d TIME_CLASH_TEXT;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        case wrongFormat:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            message \u003d WRONG_FORMAT_TEXT;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        case outOfBounds:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            message \u003d OUT_OF_BOUNDS_TEXT;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        case wrongPriority:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            message \u003d WRONG_PRIORITY_TEXT;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        case subTaskError:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            message \u003d SUB_TASK_TEXT;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        case wrongTaskType:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            message \u003d WRONG_TASK_TYPE_TEXT;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        case emptyDescription:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            message \u003d EMPTY_DESCRIPTION_TEXT;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        case emptyDate:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            message \u003d EMPTY_DATE_TEXT;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        case emptyTaskType:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            message \u003d EMPTY_TASK_TYPE_TEXT;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        case emptySubTask:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            message \u003d EMPTY_SUB_TASK;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        case wrongSortFormat:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            message \u003d WRONG_SORT_TYPE_TEXT;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        case logError:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            message \u003d LOG_ERROR_TEXT;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        case negativeTimeAmount:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            message \u003d NEGATIVE_AMOUNT_TEXT;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        case duplicateSubtask:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            message \u003d DUPLICATE_SUB;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        case duplicateTask:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            message \u003d DUPLICATE_TASK;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            message \u003d ANOMALY_TEXT;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * toString() method returning the message of the Exception"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @return the message of the Exception"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        return LINE + message + LINE;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 8,
      "benitokun123": 82,
      "tyeryan": 4,
      "calebtay": 39
    }
  },
  {
    "path": "src/main/java/Enums/ExceptionType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calebtay"
        },
        "content": "package Enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calebtay"
        },
        "content": "public enum ExceptionType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    wrongTimeFormat,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    wrongIndexFormat,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    wrongSortFormat,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    wrongTaskType,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    wrongFormat,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    wrongPriority,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    negativeTimeAmount,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    timeClash,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    duplicateTask,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    emptyList,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    emptyUser,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    outOfBounds,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    emptySubTask,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    test,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    subTaskError,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    duplicateSubtask,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    emptyDescription,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    emptyDate,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    emptyTaskType,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    logError,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    writeError"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      }
    ],
    "authorContributionMap": {
      "benitokun123": 24,
      "calebtay": 6
    }
  },
  {
    "path": "src/main/java/Enums/HelpType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "package Enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public enum HelpType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    list, bye, find, done , delete, add, recur, snooze, others, priority, reorder, exit"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 4,
      "benitokun123": 1
    }
  },
  {
    "path": "src/main/java/Enums/Priority.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calebtay"
        },
        "content": "package Enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calebtay"
        },
        "content": "public enum Priority {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    high, medium, low"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calebtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calebtay": 5
    }
  },
  {
    "path": "src/main/java/Enums/RecurrenceScheduleType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "package Enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public enum RecurrenceScheduleType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    day, week, month, none"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 5
    }
  },
  {
    "path": "src/main/java/Enums/ReplyType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "package Enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "public enum ReplyType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    yes, no, others"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tyeryan": 5
    }
  },
  {
    "path": "src/main/java/Enums/ReportType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "package Enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public enum ReportType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    full, finished, unfinished, upcoming, recurring, others, exit"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 5
    }
  },
  {
    "path": "src/main/java/Enums/SaveType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calebtay"
        },
        "content": "package Enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public enum SaveType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    A, L, empty"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calebtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 1,
      "tyeryan": 1,
      "calebtay": 3
    }
  },
  {
    "path": "src/main/java/Enums/SortType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calebtay"
        },
        "content": "package Enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calebtay"
        },
        "content": "public enum SortType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    priority, alphabetical, deadline"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calebtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calebtay": 5
    }
  },
  {
    "path": "src/main/java/Enums/TaskType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "package Enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    list, bye, find, done , delete, time, snooze, others, help, priority, reorder,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    assign, report, restore, add, subtask, update, sort, log, completed"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 5,
      "calebtay": 1
    }
  },
  {
    "path": "src/main/java/Enums/TimeUnit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "package Enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public enum TimeUnit {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    month, day, hours, minutes, unDefined"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 4,
      "benitokun123": 1
    }
  },
  {
    "path": "src/main/java/Model_Classes/Assignment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "package Model_Classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benitokun123"
        },
        "content": " * An object class representing types of tasks: assignment."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": " * Stores the description and when the task should be done by."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public class Assignment extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    private ArrayList\u003cString\u003e subTasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Constructor for the Assignment object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Takes in inputs for description and date/time the tasks should be done by."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param description Description of the task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param by The time the tasks should be done by."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public Assignment (String description, Date by) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        super(description, by);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Takes in arraylist of subtasks and sets it as this assignment\u0027s subtasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param subTasks array list containing subtasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void setSubTasks(ArrayList\u003cString\u003e subTasks) { this.subTasks \u003d  subTasks; }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Takes in a String, splits it by \",\" and sets each new String as a subtask of current Task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param subTasks string containing subtasks"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void setSubTasks(String subTasks) { this.subTasks \u003d new ArrayList\u003c\u003e(Arrays.asList(subTasks.trim().split(\",\"))); }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Returns the ArrayList containing the Assignment\u0027s subtasks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @return ArrayList\u003cString\u003e subtasks."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public ArrayList\u003cString\u003e getSubTasks() { return subTasks; }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Returns the full description including of the assignment."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @return A string indicating the task type, description, and when it should be done by."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        return \"[A]\" + super.toString() + \" (by: \" + super.getDate() + \")\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 17,
      "benitokun123": 9,
      "calebtay": 25
    }
  },
  {
    "path": "src/main/java/Model_Classes/Leave.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "package Model_Classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tyeryan"
        },
        "content": " * An object class representing tasks the are leaves."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tyeryan"
        },
        "content": " * Stores the description as well as the start and end time of the leave."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tyeryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "public class Leave extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    private Date from;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    private Date to;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    private String user;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * constructor for the leave class"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param description description of the leave"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param user the person who is taking leave"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param from the start date and time of the leave"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param to the end date and time for the leave"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    public Leave(String description, String user, Date from, Date to) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        super(description, from);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        this.user \u003d user;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        this.from \u003d from;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        this.to \u003d to;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * gets the start date of the leave"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @return the start date and time of the leave"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public Date getStartDate() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        return this.from;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * sets the start date of the leave"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param date the start date and time of the leave"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public void setStartDate(Date date) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        this.from \u003d date;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * gets the end date of the leave"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @return end date and time of the leave"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public Date getEndDate() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        return this.to;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * sets the end date of the leave"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param date the end date and time of the leave"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public void setEndDate(Date date) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        this.to \u003d date;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * gets the user who is being assigned to the leave"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @return user who is assigned the leave"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public String getAssignee() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        return this.user;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * returns the information of the leave being taken"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @return String with the information of the leave."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        return \"[L] \" + super.getDescription() + \" (\" + user + \")\" + \" (From: \" + from + \" To: \" + to + \")\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 31,
      "benitokun123": 11,
      "tyeryan": 36
    }
  },
  {
    "path": "src/main/java/Model_Classes/Meeting.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "package Model_Classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.TimeUnit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benitokun123"
        },
        "content": " * An object class representing types of tasks: meeting."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benitokun123"
        },
        "content": " * Stores the description and when the meeting happens."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public class Meeting extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    private int duration \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    private TimeUnit timeUnit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Constructor for Meeting object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Takes in inputs for description of the meeting and the time the meeting occurs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @param description Description of the meeting"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @param at Time the meeting happens"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public Meeting(String description, Date at) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        super(description, at);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        this.duration \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        this.timeUnit \u003d TimeUnit.unDefined;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * overload constructor for meeting class"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * duration is specified in this constructor"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param description description of the meeting"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param date date and time the meeting starts"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param duration duration of the meeting in numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param unit unit of time the meeting is in (hours, minutes etc)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public Meeting (String description, Date date, int duration, TimeUnit unit) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        super(description, date);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        this.timeUnit \u003d unit;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Returns a string that has the full description of the meeting including the occurrence time"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @return A string indicating the task type, description and the occurrence of the task"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        if (this.isFixedDuration()){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            return \"[M]\" + super.toString() + \" (on: \" + super.getDate() + \") (duration: \" + duration + \" \" + timeUnit.toString() + \")\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            return \"[M]\" + super.toString() + \" (on: \" + super.getDate() + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * checks if the meeting is fixed duration"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @return true if meeting does not have an undefined time unit"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public boolean isFixedDuration() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        // undefined TimeUnit indicates that meeting is not fixed duration"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        return !this.timeUnit.equals(TimeUnit.unDefined);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * sets the duration of the meeting"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param duration duration in numbers of the meeting"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param timeUnit time unit of the meeting (minutes, hours, days, months, undefined)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public void setDuration(int duration, TimeUnit timeUnit) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        this.timeUnit \u003d timeUnit;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * gets the duration of the meeting"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @return duration of the meeting as a String."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public String getDuration() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        return Integer.toString(duration);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * gets the time unit of the meeting"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @return timeunit of the meeting"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public TimeUnit getTimeUnit() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        return timeUnit;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 62,
      "benitokun123": 21,
      "tyeryan": 1,
      "calebtay": 3
    }
  },
  {
    "path": "src/main/java/Model_Classes/ProgressBar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "package Model_Classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "public class ProgressBar {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    private String[] bar \u003d new String[50];"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    private float total;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    private float done;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * Constructor for Progress Bar"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * @param total Total number of tasks that are in the task list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * @param done Total number of completed tasks in the task list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    public ProgressBar(float total, float done) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        this.total \u003d total;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        this.done \u003d done;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * Displays the number of tasks completed to the total number of task in"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * a progress bar format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    public String showBar() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        for (int i\u003d0; i\u003c50; i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            bar[i] \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        float percentage \u003d0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        if(total \u003e\u003d 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            percentage \u003d done / total;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            for (int i \u003d 0; i \u003c (int)(percentage*50); i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                bar[i] \u003d \"\u003d\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        DecimalFormat df \u003d new DecimalFormat(\"#.#\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        return Arrays.toString(bar).replace(\",\", \"\").trim() + \" \" + Float.valueOf(df.format(percentage*100)) + \"%\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tyeryan": 39
    }
  },
  {
    "path": "src/main/java/Model_Classes/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Model_Classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Enums.Priority;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.RecurrenceScheduleType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Parent class for all other types of tasks"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "public abstract class Task{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    private String assignee;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private RecurrenceScheduleType recurrenceSchedule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private boolean hasRecurring;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for the task object. takes in the description of the task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description Description of the task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public Task(String description, Date date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        this.priority \u003d Priority.low;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        this.assignee \u003d \"everyone\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        this.recurrenceSchedule \u003d RecurrenceScheduleType.none;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Returns the description of the task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @return description Description of the task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Set the description of the task"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Returns the time of the Task ( deadline of Assignment / time of meeting )"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @return time task is due or starts"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public Date getDate() { return date; }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Sets the date and time of the task"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @param date date and time of the task"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public void setDate(Date date) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * returns whether the task has been done"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return isDone The state of completion of the task."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean getDone() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Sets the task to be done"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Returns String of the assignee that was specified"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @return name of the user"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public String getAssignee() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        return this.assignee;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Set the assignee of the task"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @param assignee name of the assignee"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public void setAssignee(String assignee) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        this.assignee \u003d assignee;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Returns the priority of the task"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @return priority of the task"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public Priority getPriority() { return priority; }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Sets the priority of the task"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param p priority of the task"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void setPriority(Priority p) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        priority \u003d p;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Gets the recurrence schedule of the task"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @return the recurrence schedule of the task"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public RecurrenceScheduleType getRecurrenceSchedule() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        return recurrenceSchedule;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Sets the recurrence schedule of the task"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @param recurrenceSchedule the recurrence schedule that the task is set to"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void setRecurrenceSchedule(RecurrenceScheduleType recurrenceSchedule) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        this.recurrenceSchedule \u003d recurrenceSchedule;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        if (recurrenceSchedule.equals(RecurrenceScheduleType.none)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            this.hasRecurring \u003d false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            this.hasRecurring \u003d true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Return whether the task is recurred"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @return hasRecurring: whether the task is recurred"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public boolean hasRecurring() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        return hasRecurring;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Snoozes the task by set amount of months"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param amount number of months to snooze"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void snoozeMonth(int amount) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        this.date.setMonth(this.date.getMonth() + amount);;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Snoozes the task by set amount of days"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param amount number of days to snooze"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void snoozeDay(int amount) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        this.date.setDate(this.date.getDate() + amount);;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Snoozes the task by set amount of hours"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param amount number of hours to snooze"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void snoozeHour(int amount){"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        this.date.setHours(this.date.getHours() + amount);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Snoozes the task by set amount of hours"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param amount number of minutes to snooze"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void snoozeMinute(int amount){"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        this.date.setMinutes(this.date.getMinutes() + amount);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns both the status icon and the description of the task."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @return the information of the task, consisting of status icon, description and assignee"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        if (hasRecurring)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            return \" \" + getDescription() + \" \" + \"(\" + getAssignee() + \") (every \""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    + getRecurrenceSchedule().toString() + \")\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        return \" \" + getDescription() + \" \" + \"(\" + getAssignee() + \")\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 27,
      "benitokun123": 59,
      "tyeryan": 4,
      "calebtay": 48,
      "-": 42
    }
  },
  {
    "path": "src/main/java/Model_Classes/TaskReminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "package Model_Classes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import java.awt.Toolkit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "public class TaskReminder {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    private Timer timer \u003d new Timer();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    private int duration;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * constructor for the TaskReminder class"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param description description of the reminder"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param duration duration of the reminder"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    public TaskReminder(String description, int duration) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * schedules a timer to play a sound when the time is up"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    public void start() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        timer.schedule(new TimerTask() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                playSound();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                timer.cancel();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            private void playSound() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                System.out.println(description + \" is completed!!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                Toolkit.getDefaultToolkit().beep();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        }, duration * 1000);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 8,
      "tyeryan": 29
    }
  },
  {
    "path": "src/main/java/Operations/CheckAnomaly.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calebtay"
        },
        "content": "package Operations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Enums.TimeUnit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Model_Classes.Meeting;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Model_Classes.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benitokun123"
        },
        "content": " * This class checks if there are clashes in timings for meetings"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calebtay"
        },
        "content": "public class CheckAnomaly {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Checks for tasks with the same description when adding a new task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param task task we are checking"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @return true if duplicate detected and false if no duplicate detected"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public static Boolean checkDuplicate(Task task) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        String name \u003d task.getDescription();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        for( Task output : TaskList.currentList() ) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            if( output.getDescription().equals(name) ) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Checks first if the task is a meeting, then decides which check function to use depending on whether the meeting has a fixed duration"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param task task we are checking"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @return true if there is a time clash, false if there is no clash."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public static Boolean checkTask(Task task) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        if( task instanceof Meeting ) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            if( ((Meeting) task).isFixedDuration() ) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                return checkTimeDuration(task);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                return checkTime(task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Checks if the Meeting with fixed duration task has any clashes with any other meetings in the task list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * If there is a clash, returns true."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * If there is no clash, returns false."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param task task we are checking"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @return true if there are time clashes, false if there are no time clashes."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    private static Boolean checkTimeDuration(Task task) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        ArrayList\u003cTask\u003e curr \u003d TaskList.currentList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        for( int i \u003d 0; i\u003cTaskList.currentList().size(); i++ ) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            if( curr.get(i) instanceof Meeting  ) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                if(  ((Meeting) curr.get(i)).isFixedDuration() \u0026\u0026 checkOverlap(((Meeting) curr.get(i)), task) ) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                } else if( !(((Meeting) curr.get(i)).isFixedDuration()) \u0026\u0026 checkIntersect( curr.get(i).getDate(), task) ) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Checks if the Meeting with no fixed duration has any clashes with any other tasks in the task list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * If there is a clash, returns true. If there is no clash, returns false."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param task task we are checking for time clashes"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @return true if there are time clashes, false if there are no time clashes."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    private static Boolean checkTime(Task task){"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        Date at \u003d task.getDate();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        ArrayList\u003cTask\u003e curr \u003d TaskList.currentList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        // Goes down list of Tasks"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        for( int i \u003d 0; i\u003cTaskList.currentList().size(); i++ ) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            // If task is a meeting, checks if it has a fixed duration"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            if ( curr.get(i) instanceof Meeting ) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                long check1 \u003d curr.get(i).getDate().getTime() / 10000 * 10000;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                long check2 \u003d at.getTime() / 10000 * 10000;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                if( ((Meeting) curr.get(i)).isFixedDuration() ) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    if( checkIntersect(at, (Meeting) curr.get(i)) ) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                } else if( check1 \u003d\u003d check2 ) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Checks if a timing clashes with the duration of another meeting."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param time Timing we are checking."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param task task we are checking."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @return True if the two timings clash and False if there is no clash."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    private static Boolean checkIntersect(Date time, Task task) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        Date rangeTime \u003d task.getDate();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        if( rangeTime.getYear() \u003d\u003d time.getYear() \u0026\u0026 rangeTime.getMonth() \u003d\u003d time.getMonth() \u0026\u0026 rangeTime.getDay() \u003d\u003d time.getDay() ) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            long meetingTime \u003d task.getDate().getTime();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            long currTime \u003d time.getTime();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            long duration;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            if( task instanceof Meeting ) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                duration \u003d timeToMilSeconds(Long.parseLong(((Meeting) task).getDuration()), ((Meeting) task).getTimeUnit());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                // task is a Leave"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                duration \u003d timeToMilSeconds(Long.parseLong(((Meeting) task).getDuration()), ((Meeting) task).getTimeUnit());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            if(currTime \u003c meetingTime + duration \u0026\u0026 currTime \u003e\u003d meetingTime) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Checks if the timings of two Meetings overlap."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param first First task input."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param second Second task input."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @return True if there is an overlap and false if there is no overlap."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    private static Boolean checkOverlap(Task first, Task second) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        Date date1 \u003d first.getDate();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        Date date2 \u003d second.getDate();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        if( date1.getYear() \u003d\u003d date2.getYear() \u0026\u0026 date1.getMonth() \u003d\u003d date2.getMonth() \u0026\u0026 date1.getDay() \u003d\u003d date2.getDay() ) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            long duration1;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            long duration2;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            if( first instanceof Meeting ) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                duration1 \u003d timeToMilSeconds(Integer.parseInt(((Meeting) first).getDuration()), ((Meeting) first).getTimeUnit());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                // task is a leave"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                duration1 \u003d timeToMilSeconds(Integer.parseInt(((Meeting) first).getDuration()), ((Meeting) first).getTimeUnit());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            if( second instanceof Meeting ) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                duration2 \u003d timeToMilSeconds(Integer.parseInt(((Meeting) first).getDuration()), ((Meeting) first).getTimeUnit());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                // task is a leave"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                duration2 \u003d timeToMilSeconds(Integer.parseInt(((Meeting) first).getDuration()), ((Meeting) first).getTimeUnit());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            long time1 \u003d date1.getTime();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            long time2 \u003d date2.getTime();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            if( (time1 \u003c time2 + duration2 \u0026\u0026 time1 \u003e\u003d time2) || (time2 \u003c time1 + duration1 \u0026\u0026 time2 \u003e\u003d time1) ) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Converts time to milliseconds."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param duration duration of the Meeting."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param unit unit the duration of the Meeting is in."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @return duration of Meeting in milliseconds."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    private static long timeToMilSeconds(long duration, TimeUnit unit) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        switch (unit) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            case day:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                return duration * 60 * 60 * 24 * 1000;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            case hours:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                return duration * 60 * 60 * 1000;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            case minutes:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                return  duration * 60 * 1000;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                return duration;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "calebtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 5,
      "benitokun123": 1,
      "calebtay": 164
    }
  },
  {
    "path": "src/main/java/Operations/Help.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "package Operations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.TaskType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public class Help {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * constructor for help class"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public Help() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * shows the help tips for the command specified by the keyword"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param keyword the command the user wants tot seek help on"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void showHelp(String keyword) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        TaskType taskType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            taskType \u003d TaskType.valueOf(keyword);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            taskType \u003d TaskType.others;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            case add:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                ui.helpAdd();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            case delete:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                ui.helpDelete();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            case list:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                ui.helperList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            case done:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                ui.helpDone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            case restore:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                ui.helpRestore();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            case find:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                ui.helpFind();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            case priority:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                ui.helpPriority();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            case snooze:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                ui.helpSnooze();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            case reorder:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                ui.helpReorder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            case subtask:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                ui.helpSubtask();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            case update:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                ui.helpUpdate();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            case sort:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                ui.helpSort();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            case log:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                ui.helpLog();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * shows all commands that can be used with help"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    public void helpCommandList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        ui.helpList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 37,
      "tyeryan": 37
    }
  },
  {
    "path": "src/main/java/Operations/ListRoutine.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "package Operations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import CustomExceptions.RoomShareException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Model_Classes.ProgressBar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public class ListRoutine {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * constructor for the ListRoutine"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param taskList the task list to be listed using the list routine"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public ListRoutine(TaskList taskList) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * the listing method to be used by ListRoutine"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * lists the tasks and the associated information, while showing the progress bar"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void list() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        ui.showSort();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        ui.showList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            taskList.list();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        ProgressBar progressBar \u003d new ProgressBar(taskList.getSize(), taskList.getDoneSize());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        ui.showBar(progressBar.showBar());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 32,
      "calebtay": 1
    }
  },
  {
    "path": "src/main/java/Operations/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Operations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import CustomExceptions.RoomShareException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.ExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.SortType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.TimeUnit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for handling all parsing for Duke. Makes sure that inputs by the user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * are properly formatted as parameters for other classes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for the Parser object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Returns the command that the user has given RoomShare"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @return command The command given by the user to RoomShare"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        String command \u003d scanner.next().toLowerCase().trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Return the line of command that the user has given Duke"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @return command The line of command given by the user to RoomShare"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public String getCommandLine() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        String command \u003d scanner.nextLine().toLowerCase().trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Returns the index number requested by the user for commands like \u0027snooze, update\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @param input the input the user has entered"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @return the index the user wishes to perform operations on."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @throws RoomShareException when the format is invalid"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public Integer getIndex(String input) throws RoomShareException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            String[] arr \u003d input.trim().split(\" \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            int index \u003d Integer.parseInt(arr[0]) - 1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            return index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            throw new RoomShareException(ExceptionType.wrongIndexFormat);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Return the first/second/... index number requested by the user for command like \u0027reorder\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @param input the input the user has entered"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @param ordinal the first/second/..."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @return the index the user wishes to perform operations on."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @throws RoomShareException when the format is invalid"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public Integer getIndex(String input, int ordinal) throws RoomShareException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            String[] arr \u003d input.trim().split(\" \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            int index \u003d Integer.parseInt(arr[ordinal]) - 1 ;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            return index;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        } catch (IllegalArgumentException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            throw new RoomShareException(ExceptionType.wrongIndexFormat);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Returns the index number requested by the user for subTask."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @return index Index the user wishes to assign subtasks to."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public Integer getIndexSubtask(String input) throws RoomShareException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            String[] arr \u003d input.trim().split(\" \");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            int index \u003d Integer.parseInt(arr[0]) - 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            return index;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            throw new RoomShareException(ExceptionType.wrongIndexFormat);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Return the sub-tasks list from the user\u0027s input"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @param input the input the user has entered"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @return the sub-tasks list as a String"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @throws RoomShareException when there is no sub-tasks list"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public String getSubTasks(String input) throws RoomShareException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            String[] arr \u003d input.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            return arr[1];"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            throw new RoomShareException(ExceptionType.emptySubTask);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Return a single index number or a range of index number requested by users for command \u0027done\u0027 and \u0027delete\u0027"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @return a single index or a range of index"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public int[] getIndexRange(String input) throws RoomShareException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        String[] temp \u003d input.trim().split(\"-\",2);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            int[] index;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            if (temp.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                index \u003d new int[]{Integer.parseInt(temp[0].trim()) - 1};"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            } else"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                index \u003d new int[]{Integer.parseInt(temp[0].trim()) - 1, Integer.parseInt(temp[1].trim()) - 1};"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            return index;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            throw new RoomShareException(ExceptionType.wrongIndexFormat);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Returns a Date object from a raw date that is stored as a String in any format"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @param by Input String containing the date information."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @return A Date object containing the appropriately formatted date."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @throws RoomShareException if the input is uninterpretable."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public Date formatDate(String by) throws RoomShareException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        Date date;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        if (this.formatDateCustom_2(by) !\u003d null)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            date \u003d this.formatDateCustom_2(by);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        else if (this.formatDateCustom_3(by) !\u003d null)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            date \u003d this.formatDateCustom_3(by);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        else"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            date \u003d this.formatDateCustom_1(by);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Returns a Date object from a raw date that is stored as a String in a DD/MM/YYYY HH:MM format."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the format of the input string is unacceptable, will throw a DukeException and will not return anything."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param by Input String containing the date information."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A Date object containing the appropriately formatted date."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @throws RoomShareException If by is not in dd/MM/yyyy HH:mm format"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public Date formatDateCustom_1(String by) throws RoomShareException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SimpleDateFormat(\"dd/MM/yyyy HH:mm\").parse(by);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        } catch (ParseException | IndexOutOfBoundsException | IllegalArgumentException e2) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            throw new RoomShareException(ExceptionType.wrongFormat);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Returns a Date object from a raw date that is stored as a String with special key words like \"tomorrow, today\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @param by Input String containing the date information."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @return A Date object containing the appropriately formatted date."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public Date formatDateCustom_2(String by) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            Date date \u003d new Date();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            String[] temp \u003d by.split(\" \");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            String day \u003d temp[0];"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            String[] time \u003d temp[1].split(\":\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            // extract and validate hours and minutes"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            int hours \u003d Integer.parseInt(time[0]);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            int minutes \u003d Integer.parseInt(time[1]);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            date.setHours(hours);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            date.setMinutes(minutes);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            date.setSeconds(0);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            if (day.toLowerCase().equals(\"tomorrow\") || day.toLowerCase().equals(\"tmr\")) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                date.setDate(date.getDate() + 1);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                return date;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            else if (day.toLowerCase().equals(\"today\") || day.toLowerCase().equals(\"tdy\")) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                return date;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            else return null;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        } catch (IndexOutOfBoundsException | IllegalArgumentException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Returns a Date object from a raw date that is stored as a String with special key words like \"next monday, this fri\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @param by Input String containing the date information."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @return A Date object containing the appropriately formatted date."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public Date formatDateCustom_3(String by) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            LocalDate date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            DayOfWeek currentDayOfWeek \u003d date.getDayOfWeek();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            Date outputDate;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            String[] temp \u003d by.split(\" \");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            // Check if the user enter proper keyword \"next\" or \"this\""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            if (!temp[0].toLowerCase().equals(\"next\") \u0026\u0026 !temp[0].toLowerCase().equals(\"this\"))"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            // Check which day of the week the user input"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            String day \u003d temp[1].trim();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            DayOfWeek dayOfWeek;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            if (day.toLowerCase().equals(\"monday\") || day.toLowerCase().equals(\"mon\")) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                dayOfWeek \u003d DayOfWeek.MONDAY;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            } else if (day.toLowerCase().equals(\"tuesday\") || day.toLowerCase().equals(\"tues\")) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                dayOfWeek \u003d DayOfWeek.TUESDAY;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            } else if (day.toLowerCase().equals(\"wednesday\") || day.toLowerCase().equals(\"wed\")) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                dayOfWeek \u003d DayOfWeek.WEDNESDAY;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            } else if (day.toLowerCase().equals(\"thursday\") || day.toLowerCase().equals(\"thurs\")) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                dayOfWeek \u003d DayOfWeek.THURSDAY;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            } else if (day.toLowerCase().equals(\"friday\") || day.toLowerCase().equals(\"fri\")) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                dayOfWeek \u003d DayOfWeek.FRIDAY;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            } else if (day.toLowerCase().equals(\"saturday\") || day.toLowerCase().equals(\"sat\")) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                dayOfWeek \u003d DayOfWeek.SATURDAY;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            } else if (day.toLowerCase().equals(\"sunday\") || day.toLowerCase().equals(\"sun\")) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                dayOfWeek \u003d DayOfWeek.SUNDAY;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            } else"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            if (temp[0].toLowerCase().equals(\"this\")) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                date \u003d date.with(TemporalAdjusters.next(dayOfWeek));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                if (currentDayOfWeek.getValue() \u003c dayOfWeek.getValue()) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    date \u003d date.with(TemporalAdjusters.next(dayOfWeek));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    date \u003d date.with(TemporalAdjusters.next(dayOfWeek));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                else"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    date \u003d date.with(TemporalAdjusters.next(dayOfWeek));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            // Convert LocalDate object to Date object for storing compatibility"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            ZoneId defaultZoneId \u003d ZoneId.systemDefault();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            outputDate \u003d Date.from(date.atStartOfDay(defaultZoneId).toInstant());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            // Set hours and minute as specified"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            String[] time \u003d temp[2].split(\":\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            int hours \u003d Integer.parseInt(time[0]);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            int minutes \u003d Integer.parseInt(time[1]);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            outputDate.setHours(hours);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            outputDate.setMinutes(minutes);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            return outputDate;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        } catch (IndexOutOfBoundsException | IllegalArgumentException e) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the keyword to be searched for."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return key A string of the keyword to be searched for"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getKey() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        String key \u003d scanner.nextLine().trim();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        return key;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Returns the amount of time the customer request to snooze"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @return the amount of time the customer request to snooze"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public int getAmount(String input) throws RoomShareException{"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            String[] arr \u003d input.trim().split(\" \");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            int amount \u003d Integer.parseInt(arr[1]);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            return amount;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        } catch (IllegalArgumentException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            throw new RoomShareException(ExceptionType.wrongTimeFormat);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Returns the unit of time the customer request to snooze"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @return the unit of time the customer request to snooze"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public TimeUnit getTimeUnit(String input) throws RoomShareException{"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            String[] arr \u003d input.trim().split(\" \");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            return TimeUnit.valueOf(arr[2]);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        } catch (IllegalArgumentException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            throw new RoomShareException(ExceptionType.wrongTimeFormat);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Returns the index of the task and priority the user wants to set it to"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @return the index and priority of the task the user wants to set"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public String[] getPriority() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        return scanner.nextLine().trim().split(\" \", 2);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public SortType getSort(String input) throws RoomShareException {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            SortType sortType \u003d SortType.valueOf(input.trim());"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            return sortType;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            throw new RoomShareException(ExceptionType.wrongSortFormat);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Closes the scanner used in Parser class"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 43,
      "benitokun123": 199,
      "tyeryan": 1,
      "calebtay": 23,
      "-": 58
    }
  },
  {
    "path": "src/main/java/Operations/RecurHandler.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "package Operations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import CustomExceptions.RoomShareException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.RecurrenceScheduleType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Model_Classes.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": " * This class deals with operations for Recurring Tasks"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": " * will perform operations such as add, list, find"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": " * also checks for recurrence of tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public class RecurHandler {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public static final String DATE_ERROR_SET_AS_NOT_DONE \u003d \"Error in parsing date, will be setting the task to not done instead\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Constructor for RecurHandler class"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param recurringList The TaskList to be operated on using RecurHandler"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public RecurHandler(TaskList recurringList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        this.taskList \u003d recurringList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Checks for recurrences based on the date."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * if there is a recurrence, replaces the old recurring task with a new one"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * new recurring task will have an updated recurrence date."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Returns a boolean value that determines if there was any recurrence triggered."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @return A boolean value where true indicates a recurrence was triggered, and false being otherwise."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public boolean checkRecurrence() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        DateTimeFormatter dateTimeFormatterNow \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        String currentTime \u003d now.format(dateTimeFormatterNow);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        boolean isEdited \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        for (Task check : TaskList.currentList()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            if (check.hasRecurring()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                // task is a recurring task"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                RecurrenceScheduleType type;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                String description \u003d check.getDescription();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                type \u003d check.getRecurrenceSchedule();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                // check if recurrence date has passed"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                if (dateHasPassedOthers(currentTime, check, isEdited)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    if (check instanceof Assignment) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        Assignment recurringAssignment\u003d new Assignment(description, getNewDate(check));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        recurringAssignment.setRecurrenceSchedule(type);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        recurringAssignment.setPriority(check.getPriority());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                        recurringAssignment.setAssignee(check.getAssignee());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        taskList.replace(index, recurringAssignment);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        isEdited \u003d true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        Meeting recurringMeeting\u003d new Meeting(description, getNewDate(check));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        recurringMeeting.setRecurrenceSchedule(type);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        recurringMeeting.setPriority(check.getPriority());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                        recurringMeeting.setAssignee(check.getAssignee());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        taskList.replace(index, recurringMeeting);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        isEdited \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            // move on to next item in the task list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            index +\u003d 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        return isEdited;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Returns a new Date object with the date stored in the task object class"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * If any error occurs, the Date object will be set to the current date instead."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param check Task object containing the Date information to be extracted"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @return newDate, containing a the date information of the task object class."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private Date getNewDate(Task check) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        Date newDate \u003d new Date();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            String date \u003d new Storage().convertForStorage(check);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            date \u003d date.substring(0, 15);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            Date storedDate \u003d parser.formatDateCustom_1(date);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            calendar.setTime(storedDate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            if (check.getRecurrenceSchedule().equals(RecurrenceScheduleType.day)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                calendar.add(Calendar.DAY_OF_MONTH, 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            } else if (check.getRecurrenceSchedule().equals(RecurrenceScheduleType.week)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                calendar.add(Calendar.WEEK_OF_MONTH, 1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                calendar.add(Calendar.MONTH, 1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            newDate \u003d calendar.getTime();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        return newDate;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * checks if the recurrence date has passed for a Meeting or Assignment object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * if date has passed, returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * if date has not passed, returns false."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param currentTime current time of the system as a string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param check Task to be time checked"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param isEdited boolean variable describing if the task list has been edited in anyway"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @return isPassed boolean variable describing if the recurrence date has been passed."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private boolean dateHasPassedOthers(String currentTime, Task check, boolean isEdited) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        boolean isPassed \u003d false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            Date current \u003d parser.formatDateCustom_1(currentTime);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            Date newDate \u003d getNewDate(check);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            if (newDate.compareTo(current) \u003c 0) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                // date has passed"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                isPassed \u003d true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            System.out.println(DATE_ERROR_SET_AS_NOT_DONE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            check.setDone(false);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            isEdited \u003d true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        return isPassed;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 121,
      "benitokun123": 5
    }
  },
  {
    "path": "src/main/java/Operations/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Operations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import CustomExceptions.RoomShareException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import Model_Classes.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Performs storage operations such as writing and reading from a .txt file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for the Storage class"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an ArrayList of Tasks from a .txt file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts the relevant information from the data.txt file in Duke to create the tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Populates an ArrayList with these created tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return taskArrayList An ArrayList of Tasks that is created from the .txt file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @throws RoomShareException If the file has mistakes in formatting. Creates and empty task list instead and returns the empty list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public ArrayList\u003cTask\u003e loadFile(String fileName) throws RoomShareException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(new FileReader(fileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            String line \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            ArrayList\u003cString\u003e tempList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                tempList.add(line);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            parser \u003d new Parser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            for (String list : tempList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                String[] temp \u003d list.split(\"#\", 0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                // Identify type of task"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                String scanType \u003d temp[0].trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                SaveType type;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    type \u003d SaveType.valueOf(scanType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    type \u003d SaveType.empty;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                String scanDone \u003d temp[1].trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                boolean done \u003d scanDone.equals(\"y\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                String scanPriority \u003d temp[2].trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                Priority priority;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    priority \u003d Priority.valueOf(scanPriority);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    priority \u003d Priority.low;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                String scanDescription \u003d temp[3].trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                String description \u003d scanDescription;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                Date from \u003d new Date();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                Date to \u003d new Date();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                Date date \u003d new Date();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                if (temp[4].contains(\"-\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    String[] dateArray \u003d temp[4].trim().split(\"-\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    String scanFromDate \u003d dateArray[0].trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                        from \u003d parser.formatDateCustom_1(scanFromDate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                        System.out.println(\"error in loading file: date format error\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    String scanToDate \u003d dateArray[1].trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                        to \u003d parser.formatDateCustom_1(scanToDate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                        System.out.println(\"error in loading file: date format error\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    String scanDate \u003d temp[4].trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                        date \u003d parser.formatDateCustom_1(scanDate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                        System.out.println(\"error in loading file: date format error\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                String scanRecurrence \u003d temp[5].trim();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                RecurrenceScheduleType recurrence \u003d RecurrenceScheduleType.valueOf(scanRecurrence);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                String scanUser \u003d temp[6].trim();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                String user \u003d scanUser;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                String scanIsFixedDuration \u003d temp[7].trim();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                boolean isFixedDuration \u003d scanIsFixedDuration.equals(\"F\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                String scanDuration \u003d temp[8].trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                int duration \u003d Integer.parseInt(scanDuration);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                String scanUnit \u003d temp[9].trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                TimeUnit unit \u003d TimeUnit.valueOf(scanUnit);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                String scanSubTask \u003d \"\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                if (temp.length \u003e 10) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    scanSubTask \u003d temp[10].trim();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                if (type.equals(SaveType.A)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    // Assignment type"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    Assignment assignment \u003d new Assignment(description, date);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    assignment.setPriority(priority);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    assignment.setAssignee(user);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    assignment.setRecurrenceSchedule(recurrence);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    assignment.setDone(done);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    if (!scanSubTask.equals(\"\")) assignment.setSubTasks(scanSubTask);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    taskArrayList.add(assignment);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                } else if (type.equals(SaveType.L)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    //Leave type"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    Leave leave \u003d new Leave(description, user, from, to);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    leave.setPriority(priority);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    leave.setRecurrenceSchedule(recurrence);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    leave.setDone(done);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    taskArrayList.add(leave);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    //Meeting type"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    if (isFixedDuration) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                        Meeting meeting \u003d new Meeting(description, date, duration, unit);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        meeting.setPriority(priority);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                        meeting.setAssignee(user);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                        meeting.setRecurrenceSchedule(recurrence);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        meeting.setDone(done);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        taskArrayList.add(meeting);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                        Meeting meeting \u003d new Meeting(description, date);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                        meeting.setRecurrenceSchedule(recurrence);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        meeting.setPriority(priority);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                        meeting.setAssignee(user);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        meeting.setDone(done);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        taskArrayList.add(meeting);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        } catch (IOException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            throw new RoomShareException(ExceptionType.wrongFormat);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return (taskArrayList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Rewrites the data.txt file with a task list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Formats all task information into a style that the loadFile() method is able to understand"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes all the formatted information into a data.txt file for storage"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will not write any information if the there are mistakes in the ArrayList information."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param list ArrayList of Tasks to be stored on data.txt"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @throws RoomShareException If there are parsing errors in the ArrayList."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void writeFile(ArrayList\u003cTask\u003e list, String fileName) throws RoomShareException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            FileWriter fw \u003d new FileWriter(fileName);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            BufferedWriter writer \u003d new BufferedWriter(fw);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Task s : list) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                String out \u003d \"\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                String type \u003d String.valueOf(s.toString().charAt(1));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                String isDone \u003d s.getDone() ? \"y\" : \"n\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                String priority \u003d s.getPriority().name();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                String description \u003d s.getDescription();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                String date \u003d convertForStorage(s);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                String recurrence \u003d s.getRecurrenceSchedule().toString();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                String user \u003d s.getAssignee();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                if (s instanceof Assignment) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    out \u003d type + \"#\" +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                            isDone + \"#\" +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                            priority + \"#\" +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                            description + \"#\" +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                            date + \"#\" +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                            recurrence + \"#\" +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                            user + \"#\" +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                            \"N\" + \"#\" +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                            \"0\" + \"#\" +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                            \"unDefined\" + \"#\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    // Saves sub-tasks"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    if (!(((Assignment) s).getSubTasks() \u003d\u003d null)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                        ArrayList\u003cString\u003e subTasks \u003d ((Assignment) s).getSubTasks();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                        for (String subTask : subTasks) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                            out +\u003d subTask + \",\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    out +\u003d \"#\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                } else if (s instanceof Leave) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    String leaveDate \u003d convertForStorageLeave(s);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    out \u003d type + \"#\" +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                            isDone + \"#\" +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                            priority + \"#\" +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                            description + \"#\" +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                            leaveDate + \"#\" +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                            recurrence + \"#\" +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                            user + \"#\" +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                            \"N\" + \"#\" +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                            \"0\" + \"#\" +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                            \"unDefined\" + \"#\""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                            + \"#\";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                } else if (s instanceof Meeting) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    if (((Meeting) s).isFixedDuration()) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        String duration \u003d ((Meeting) s).getDuration();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        String unit \u003d ((Meeting) s).getTimeUnit().toString();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                        out \u003d type + \"#\" +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                                isDone + \"#\" +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                                priority + \"#\" +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                                description + \"#\" +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                                date + \"#\" +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                                recurrence + \"#\" +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                                user + \"#\" +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                                \"F\" + \"#\" +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                                duration + \"#\" +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                                unit + \"#\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                                + \"#\";"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                        out \u003d type + \"#\" +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                                isDone + \"#\" +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                                priority + \"#\" +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                                description + \"#\" +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                                date + \"#\" +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                                recurrence + \"#\" +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                                user + \"#\" +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                                \"N\" + \"#\" +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                                \"0\" + \"#\" +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                                \"unDefined\" + \"#\""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                                + \"#\";"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                writer.write(out);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                writer.newLine();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        } catch (IOException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            throw new RoomShareException(ExceptionType.writeError);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Create a new text file and write all information of the current task list to it"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @param list the current task list"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @throws IOException when there\u0027s error creating or writing to file"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @throws FileNotFoundException when there\u0027s error creating or writing to file"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public String writeLogFile(ArrayList\u003cTask\u003e list) throws RoomShareException {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        String fileName \u003d \"log \" + new Date().toString() + \".txt\";"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        fileName \u003d fileName.replaceAll(\" \", \"_\").replaceAll(\":\",\"_\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        String filePath \u003d \"logs\\\\\" + fileName;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        String folderName \u003d \"logs\";"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            File folder \u003d new File(folderName);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            if (!folder.exists()) folder.mkdir();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            PrintWriter writer \u003d new PrintWriter(filePath, \"UTF-8\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            for (Task t : list) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                writer.println(t.toString());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            throw new RoomShareException(ExceptionType.logError);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Extracts and converts all the information in the task object for storage"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * will format the time information for meeting and assignment tasks"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Additional formatting will be done for recurring tasks to include recurrence schedule"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * returns a string with all the relevant information."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param task task object to be converted"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @return time A String containing all the relevant information"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @throws RoomShareException If there is any error in parsing the Date information."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public String convertForStorage(Task task) throws RoomShareException {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            String time \u003d \"\";"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            String[] prelimSplit \u003d task.toString().split(\"\\\\(\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            String[] tempString \u003d prelimSplit[2].split(\"\\\\s+\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            String year \u003d tempString[6].substring(0, tempString[6].length() - 1);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            Date date \u003d new SimpleDateFormat(\"MMM\").parse(tempString[2]);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"MM\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            String month \u003d dateFormat.format(date);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            String[] timeArray \u003d tempString[4].split(\":\", 3);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            String day \u003d tempString[3];"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            time \u003d day + \"/\" + month + \"/\" + year + \" \" + timeArray[0] + \":\" + timeArray[1];"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            return time;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            throw new RoomShareException(ExceptionType.wrongFormat);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * Extracts the time information from the leave class object for it to be able"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * to store in the data file to be saved."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * @param task Task object to be converted."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * @return time A string with the correct formatting to be placed in the data file."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     * @throws RoomShareException If there is any error in parsing the Date information."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    private String convertForStorageLeave(Task task) throws RoomShareException {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            String time;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            String[] prelimSplit \u003d task.toString().split(\"\\\\(\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            String[] tempString \u003d prelimSplit[2].split(\"\\\\s+\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            String fromYear \u003d tempString[6].trim();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            String toYear \u003d tempString[13].trim().substring(0, tempString[13].length() -1);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            Date fromMonth \u003d new SimpleDateFormat(\"MMM\").parse(tempString[2]);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            DateFormat dateFormatFromMonth \u003d new SimpleDateFormat(\"MM\");"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            String fromMth \u003d dateFormatFromMonth.format(fromMonth);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            Date toMonth \u003d new SimpleDateFormat(\"MMM\").parse(tempString[9]);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            DateFormat dateFormatToMonth \u003d new SimpleDateFormat(\"MM\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            String toMth \u003d dateFormatToMonth.format(toMonth);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            String[] fromTimeArray \u003d tempString[4].split(\":\", 3);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            String[] toTimeArray \u003d tempString[11].split(\":\", 3);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            String fromDay \u003d tempString[3];"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            String toDay \u003d tempString[10];"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            time \u003d fromDay + \"/\" + fromMth + \"/\" + fromYear + \" \" + fromTimeArray[0] + \":\" + fromTimeArray[1] + \"-\" +"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    toDay + \"/\" + toMth + \"/\" + toYear + \" \" + toTimeArray[0] + \":\" + toTimeArray[1];"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            return time;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            throw new RoomShareException(ExceptionType.wrongFormat);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 74,
      "benitokun123": 123,
      "tyeryan": 80,
      "calebtay": 5,
      "-": 63
    }
  },
  {
    "path": "src/main/java/Operations/TaskCreator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "package Operations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import CustomExceptions.RoomShareException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "import Enums.ExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.Priority;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.RecurrenceScheduleType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.TimeUnit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import Model_Classes.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public class TaskCreator {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public static final String UPDATED_DESCRIPTION_ERROR \u003d \"There is a formatting error in your updated description\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public static final String DURATION_FORMAT_ERROR \u003d \"There\u0027s a problem with the duration you\u0027ve specified, default to no duration\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public static final String RECURRENCE_FORMAT_ERROR \u003d \"There seems to some mistake in your recurrence entry, will be setting recurrence as none\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public static final String DATE_FORMAT_ERROR \u003d \"Wrong date format, date is set default to current date\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public static final String STARTING_DATE_FORMAT_ERROR \u003d \"Wrong date format, starting date is set default to current date\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public static final String ENDING_DATE_FORMAT_ERROR \u003d \"Wrong date format, ending date is set default to current date\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public static final String UPDATED_DATE_ERROR \u003d \"Please check the updated date of your task\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    Timer timer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Constructor for a TaskCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public TaskCreator() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        timer \u003d new Timer();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Extract the task type from the user\u0027s input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @param input user\u0027s input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @return the task type"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @throws RoomShareException when the task type is invalid"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public String extractType(String input) throws RoomShareException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        String[] typeArray \u003d input.split(\"#\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        String type;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        if (typeArray.length !\u003d 1)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            type \u003d typeArray[1].toLowerCase();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        else"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            throw new RoomShareException(ExceptionType.emptyTaskType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Extract the description of a task from user\u0027s input"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @param input user\u0027s input"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @return the description of the task"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @throws RoomShareException when there\u0027s no description detected"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public String extractDescription(String input) throws RoomShareException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        String[] descriptionArray \u003d input.split(\"\\\\(\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        if (descriptionArray.length !\u003d 1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            String[] descriptionArray2 \u003d descriptionArray[1].trim().split(\"\\\\)\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            description \u003d descriptionArray2[0].trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        } else"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            throw new RoomShareException(ExceptionType.emptyDescription);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Extract the priority of a task from user\u0027s input"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @param input user\u0027s input"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @return the priority of the task"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public Priority extractPriority(String input) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        String[] priorityArray \u003d input.split(\"\\\\*\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        Priority priority;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        if (priorityArray.length !\u003d 1) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            String inputPriority \u003d priorityArray[1].trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                priority \u003d Priority.valueOf(inputPriority);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                System.out.println(\"There seems to some mistake in your priority entry, will be setting priority as low\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                priority \u003d Priority.low;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            priority \u003d Priority.low;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Extract the date and time of a task from user\u0027s input"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @param input user\u0027s input"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @return the date and time of the task"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @throws RoomShareException when there is no date and time detected or the format of date and time is invalid"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public ArrayList\u003cDate\u003e extractDate(String input) throws RoomShareException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        // counts the number of \u0027\u0026\u0027 tags to determine if the user input a single date or double dates"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        char[] inputAsChar \u003d input.toCharArray();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        for (char c: inputAsChar) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            if (c \u003d\u003d \u0027\u0026\u0027) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        String[] dateArray \u003d input.split(\"\u0026\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        ArrayList\u003cDate\u003e dates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        if (count \u003e 0) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            if (count \u003d\u003d 2) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                String dateInput \u003d dateArray[1].trim();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    dates.add(parser.formatDate(dateInput));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    System.out.println(DATE_FORMAT_ERROR);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    dates.add(new Date());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                String fromInput \u003d dateArray[1].trim();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                String toInput \u003d dateArray[2].trim();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    dates.add(parser.formatDate(fromInput));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    System.out.println(STARTING_DATE_FORMAT_ERROR);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    dates.add(new Date());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    dates.add(parser.formatDate(toInput));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    System.out.println(ENDING_DATE_FORMAT_ERROR);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    dates.add(new Date());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        } else"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            throw new RoomShareException(ExceptionType.emptyDate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        return dates;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Extract the assignee of a task from user\u0027s input"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @param input user\u0027s input"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @return the name of the assignee"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public String extractAssignee(String input) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        String[] assigneeArray \u003d input.split(\"@\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        String assignee;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        if (assigneeArray.length !\u003d 1) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            assignee \u003d assigneeArray[1].trim();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            assignee \u003d \"everyone\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        return assignee;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Extract the recurrence schedule of task from user\u0027s input"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @param input user\u0027s input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @return the recurrence schedule of the task"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public RecurrenceScheduleType extractRecurrence(String input) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        String[] recurrenceArray \u003d input.split(\"%\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        RecurrenceScheduleType recurrence;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        if (recurrenceArray.length !\u003d 1) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                String inputRecurrence \u003d recurrenceArray[1].trim();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                recurrence \u003d RecurrenceScheduleType.valueOf(inputRecurrence);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            } catch (IllegalArgumentException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                System.out.println(RECURRENCE_FORMAT_ERROR);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                recurrence \u003d RecurrenceScheduleType.none;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            recurrence \u003d RecurrenceScheduleType.none;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        return  recurrence;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Extract the duration of a task from user\u0027s input"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @param input user\u0027s input"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @return the amount of time and unit of the duration as a Pair\u003cInteger,TimeUnit\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public Pair\u003cInteger, TimeUnit\u003e extractDuration(String input) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        String[] durationArray \u003d input.split(\"\\\\^\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        int duration;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        TimeUnit unit;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        if (durationArray.length !\u003d 1) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                String[] inputDuration \u003d durationArray[1].split(\" \");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                duration \u003d Integer.parseInt(inputDuration[0].trim());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                unit \u003d TimeUnit.valueOf(inputDuration[1].trim());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            } catch (IllegalArgumentException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                System.out.println(DURATION_FORMAT_ERROR);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                duration \u003d 0;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                unit \u003d TimeUnit.unDefined;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            duration \u003d 0;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            unit \u003d TimeUnit.unDefined;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        return new Pair\u003c\u003e(duration,unit);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Extract the reminder flag of a task from user\u0027s input"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @param input user\u0027s input"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @return the reminder flag of the task"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public boolean extractReminder(String input) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        String[] reminderArray \u003d input.split(\"!\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        if (reminderArray.length !\u003d 1) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            if(reminderArray[1].contains(\"R\"))"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            else"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Create a new task based on the description the user key in"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @param input the description of the task"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @return a new Task object created based on the description"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @throws RoomShareException when there are some formatting errors"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public Task create(String input) throws RoomShareException {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        // extract the Task Type"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        String type \u003d this.extractType(input);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        // extract the priority"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        Priority priority \u003d this.extractPriority(input);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        // extract the description"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        String description \u003d this.extractDescription(input);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        // extract date"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        ArrayList\u003cDate\u003e dates \u003d this.extractDate(input);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        Date from \u003d new Date();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        Date to \u003d new Date();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        if (dates.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            date \u003d dates.get(0);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            from \u003d dates.get(0);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            to \u003d dates.get(1);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        // extract the assignee"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        String assignee \u003d this.extractAssignee(input);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        // extract recurrence schedule"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        RecurrenceScheduleType recurrence \u003d this.extractRecurrence(input);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        //extract duration"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        Pair\u003cInteger, TimeUnit\u003e durationAndUnit \u003d this.extractDuration(input);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        int duration \u003d durationAndUnit.getKey();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        TimeUnit unit \u003d durationAndUnit.getValue();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        //extract reminder"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        boolean remind \u003d this.extractReminder(input);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        if (type.contains(\"assignment\")) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            Assignment assignment \u003d new Assignment(description, date);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            assignment.setPriority(priority);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            assignment.setAssignee(assignee);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            assignment.setRecurrenceSchedule(recurrence);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            return assignment;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        } else if (type.contains(\"leave\")) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            String user;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            String[] leaveUserArray \u003d input.split(\"@\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            if (leaveUserArray.length !\u003d 1) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                user \u003d leaveUserArray[1].trim();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            } else"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                throw new RoomShareException(ExceptionType.emptyUser);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            Leave leave \u003d new Leave(description, user, from, to);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            leave.setPriority(priority);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            leave.setRecurrenceSchedule(recurrence);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            return leave;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        } else if (type.contains(\"meeting\")) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            if (remind) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                if (unit.equals(TimeUnit.unDefined)) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    // duration was not specified or not correctly input"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    Meeting meeting \u003d new Meeting(description, date);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    meeting.setPriority(priority);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    meeting.setAssignee(assignee);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    meeting.setRecurrenceSchedule(recurrence);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    TaskReminder taskReminder \u003d new TaskReminder(description, duration);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    taskReminder.start();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    return meeting;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    Meeting meeting \u003d new Meeting(description, date, duration, unit);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    meeting.setPriority(priority);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    meeting.setAssignee(assignee);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    meeting.setRecurrenceSchedule(recurrence);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    TaskReminder taskReminder \u003d new TaskReminder(description, duration);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    taskReminder.start();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    return meeting;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                if (unit.equals(TimeUnit.unDefined)) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    // duration was not specified or not correctly input"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    Meeting meeting \u003d new Meeting(description, date);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    meeting.setPriority(priority);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    meeting.setAssignee(assignee);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    meeting.setRecurrenceSchedule(recurrence);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    return meeting;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    Meeting meeting \u003d new Meeting(description, date, duration, unit);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    meeting.setPriority(priority);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    meeting.setAssignee(assignee);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    meeting.setRecurrenceSchedule(recurrence);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    return meeting;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            throw new RoomShareException(ExceptionType.wrongTaskType);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Update a task from the task list according to the user\u0027s input"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @param input user\u0027s input"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @param oldTask the task to be updated"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public void updateTask(String input, Task oldTask) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            if (input.contains(\"(\") \u0026\u0026 input.contains(\")\")) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                String description \u003d this.extractDescription(input);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                oldTask.setDescription(description);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            System.out.println(UPDATED_DESCRIPTION_ERROR);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            if (input.contains(\"\u0026\")) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                ArrayList\u003cDate\u003e dates \u003d this.extractDate(input);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                if (oldTask instanceof Leave \u0026\u0026 dates.size() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    Leave oldLeave \u003d (Leave) oldTask;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    Date start \u003d dates.get(0);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    Date end \u003d dates.get(1);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    oldLeave.setDate(start);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    oldLeave.setStartDate(start);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    oldLeave.setEndDate(end);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    Date date \u003d dates.get(0);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    oldTask.setDate(date);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            System.out.println(UPDATED_DATE_ERROR);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        if (input.contains(\"*\")) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            Priority priority \u003d this.extractPriority(input);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            oldTask.setPriority(priority);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        if (input.contains(\"@\")) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            String assignee \u003d this.extractAssignee(input);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            oldTask.setAssignee(assignee);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        if (input.contains(\"^\") \u0026\u0026 oldTask instanceof Meeting) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            Pair\u003cInteger, TimeUnit\u003e durationAndUnit \u003d this.extractDuration(input);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            int duration \u003d durationAndUnit.getKey();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            TimeUnit unit \u003d durationAndUnit.getValue();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            Meeting oldMeeting \u003d (Meeting) oldTask;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            oldMeeting.setDuration(duration,unit);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        if (input.contains(\"%\")) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            RecurrenceScheduleType recurrence \u003d this.extractRecurrence(input);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            oldTask.setRecurrenceSchedule(recurrence);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 35,
      "benitokun123": 279,
      "tyeryan": 65,
      "calebtay": 2
    }
  },
  {
    "path": "src/main/java/Operations/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Operations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import CustomExceptions.RoomShareException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Enums.ExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Enums.Priority;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Enums.SortType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.TimeUnit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Model_Classes.Assignment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import Model_Classes.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to perform operations on the task list in Duke"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    private static ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    private static SortType sortType \u003d SortType.priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for the TaskList class."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * takes in an ArrayList as the list of tasks to be operated on."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks ArrayList of Task objects to be operated on."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new task into the task list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param newTask Task object to be added into the list of tasks"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Task newTask) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        sortTasks();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes a task from the list. Task to be deleted is specified by the index that is input into this method"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will not perform any operations if the index does not exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index Index of task in the list to be deleted"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param deletedList temporary storage list for the deleted items so they can be restored"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @throws RoomShareException If the index cannot be found in the list of tasks."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void delete(int[] index, TempDeleteList deletedList) throws RoomShareException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        int[] idx \u003d index.clone();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        if (idx.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            if (idx[0] \u003c 0 || idx[0] \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                throw new RoomShareException(ExceptionType.outOfBounds);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            deletedList.add(tasks.get(idx[0]));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            tasks.remove(idx[0]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            if (idx[0] \u003c 0 || idx[0] \u003e\u003d tasks.size() || idx[1] \u003c 0 || idx[1] \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                throw new RoomShareException(ExceptionType.outOfBounds);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            for (int i \u003d idx[0]; idx[1] \u003e\u003d idx[0]; idx[1]--) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                deletedList.add(tasks.get(i));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                tasks.remove(i);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Lists out all tasks in the current list in the order they were added into the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * shows all information related to the tasks"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * hides completed tasks"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @throws RoomShareException when the list is empty"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void list() throws RoomShareException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        sortTasks();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        if( tasks.size() !\u003d 0 ){"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            int listCount \u003d 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            for (Task output : tasks) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                if( !output.getDone() ) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    System.out.println(\"\\t\" + listCount + \". \" + output.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    if( output instanceof Assignment \u0026\u0026 !(((Assignment) output).getSubTasks() \u003d\u003d null) ) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                        ArrayList\u003cString\u003e subTasks \u003d ((Assignment) output).getSubTasks();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                        for(String subtask : subTasks) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                            System.out.println(\"\\t\" + \"\\t\" + \"- \" + subtask);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    listCount +\u003d 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            throw new RoomShareException(ExceptionType.emptyList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Lists out completed tasks in the list"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @throws RoomShareException"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void showCompleted() throws RoomShareException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        sortTasks();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        System.out.println(\"Completed Tasks:\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        if( tasks.size() !\u003d 0 ){"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            int listCount \u003d 1;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            for (Task output : tasks) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                if( output.getDone() ) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    System.out.println(\"\\t\" + listCount + \". \" + output.toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    if( output instanceof Assignment \u0026\u0026 !(((Assignment) output).getSubTasks() \u003d\u003d null) ) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                        ArrayList\u003cString\u003e subTasks \u003d ((Assignment) output).getSubTasks();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                        for(String subtask : subTasks) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                            System.out.println(\"\\t\" + \"\\t\" + \"- \" + subtask);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    listCount +\u003d 1;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            throw new RoomShareException(ExceptionType.emptyList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets a task in the list as \u0027done\u0027 to mark that the user has completed the task."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will not perform any operations if the index does not exist in the list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index Index of the task to be marked as done."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @throws RoomShareException If the index cannot be found in the list of tasks."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void done(int[] index) throws RoomShareException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        if (index.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            if (index[0] \u003c 0 || index[0] \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                throw new RoomShareException(ExceptionType.outOfBounds);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            tasks.get(index[0]).setDone(true);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            if (index[0] \u003c 0 || index[0] \u003e\u003d tasks.size() || index[1] \u003c 0 || index[1] \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                throw new RoomShareException(ExceptionType.outOfBounds);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            for (int i \u003d index[0]; i \u003c\u003d index[1]; i++){"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                tasks.get(i).setDone(true);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Searches for tasks that has the specified keyword and prints them to the console."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will prompt that the search has no results if keyword does not exist in the list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param key Keyword of the search."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find (String key) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        int queryCount \u003d 1;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task query : tasks) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            if (query.toString().toLowerCase().contains(key.trim())) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                System.out.println(\"\\t\" + queryCount + \". \" + query.toString());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            queryCount +\u003d 1;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (queryCount \u003d\u003d 1) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"    Your search returned no results.... Try searching with another keyword!\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the entire ArrayList of tasks"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return tasks The ArrayList of Task objects that is being operated on."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public static ArrayList\u003cTask\u003e currentList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * replaces the task at the specified index with a new task"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param index index of the task to be replaced"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param replacement the replacement task"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void replace(int index, Task replacement) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        tasks.set(index, replacement);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Sets priority of task at an index to a new priority"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param info the information of the task index and the priority it should be set to"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @throws RoomShareException when the priority specified is wrong or index is out of bounds"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void setPriority(String[] info) throws RoomShareException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            int index \u003d Integer.parseInt(info[0]) - 1;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            Priority priority \u003d Priority.valueOf(info[1]);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            tasks.get(index).setPriority(priority);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        } catch (IllegalArgumentException a) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            throw new RoomShareException(ExceptionType.wrongPriority);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        } catch (IndexOutOfBoundsException i) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            throw new RoomShareException(ExceptionType.outOfBounds);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Returns priority of the task in the form of an integer"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * high \u003d 0, medium \u003d 1, low \u003d 2"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param t task in which we are checking the value of"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @return integer value of the task\u0027s priority"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public static int getValue(Task t) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        if (t.getPriority().equals(Priority.high)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        } else if (t.getPriority().equals(Priority.medium)) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            return 2;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Changes taskList sort mode"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param sortType new sort mode"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public static void changeSort(SortType sortType) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        TaskList.sortType \u003d sortType;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        sortTasks();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Sorts the list based on current sort mode"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @throws IllegalArgumentException when the sort type is not of priority, alphabetical or by deadline"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public static void sortTasks() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        switch (sortType) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        case priority:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            comparePriority();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        case alphabetical:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            compareAlphabetical();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        case deadline:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            compareDeadline();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            throw new IllegalStateException(\"Unexpected value: \" + sortType);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Compare tasks based on priority"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public static void comparePriority() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        Collections.sort(tasks, (task1, task2) -\u003e {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            if( task1.getDone() \u0026\u0026 !task2.getDone() ) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            } else if( task2.getDone() \u0026\u0026 !task1.getDone() ) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                return  getValue(task1) - getValue(task2);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        });"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Compare tasks based on Alphabetical order"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public static void compareAlphabetical() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        Collections.sort(tasks, (task1, task2) -\u003e {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            if( task1.getDone() \u0026\u0026 !task2.getDone() ) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            } else if( task2.getDone() \u0026\u0026 !task1.getDone() ) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                String name1 \u003d task1.getDescription();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                String name2 \u003d task2.getDescription();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                return name1.compareTo(name2);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        });"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Compare tasks based on Deadline"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public static void compareDeadline() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        Collections.sort(tasks, (task1, task2) -\u003e {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            if( task1.getDone() \u0026\u0026 !task2.getDone() ) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            } else if( task2.getDone() \u0026\u0026 !task1.getDone() ) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                Date date1 \u003d task1.getDate();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                Date date2 \u003d task2.getDate();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                return (int) (date1.getTime() - date2.getTime());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        });"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Reorder the positions of two tasks inside the task list"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @param first the first task"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @param second the second task"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public void reorder(int first, int second) throws RoomShareException {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            Collections.swap(tasks, first, second);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            throw new RoomShareException(ExceptionType.outOfBounds);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Snooze a specific task indicated by user"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param index the index of the task to be snoozed"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param amount the amount of time to snooze"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param timeUnit unit for snooze time: month, day, hour, minute"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @throws IndexOutOfBoundsException when the specified index is not within the task list indices"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public void snooze (int index, int amount, TimeUnit timeUnit) throws RoomShareException {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            switch (timeUnit) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            case month:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                tasks.get(index).snoozeMonth(amount);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            case day:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                tasks.get(index).snoozeDay(amount);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            case hours:"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                tasks.get(index).snoozeHour(amount);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            case minutes:"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                tasks.get(index).snoozeMinute(amount);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            throw new RoomShareException(ExceptionType.outOfBounds);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Get the number of tasks inside the task list"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @return the number of tasks inside the task list"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Get the number of completed tasks inside the task list"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @return the number of completed tasks inside the task list"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public int getDoneSize(){"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        for (Task t: tasks){"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            if (t.getDone()) count++;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        return count;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Retrieve a task from the list"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @param index the index of the task"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @return the task at the specified index of the task list"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @throws RoomShareException when the index specified is out of bounds"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public static Task get(int index) throws RoomShareException{"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            return tasks.get(index);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            throw new RoomShareException(ExceptionType.outOfBounds);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Returns current sort type of list"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @return current sort type of list"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public static SortType getSortType() { return sortType; }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 74,
      "benitokun123": 66,
      "tyeryan": 1,
      "calebtay": 161,
      "-": 70
    }
  },
  {
    "path": "src/main/java/Operations/TempDeleteList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "package Operations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import CustomExceptions.RoomShareException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.ExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Model_Classes.Assignment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Model_Classes.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public class TempDeleteList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private ArrayList\u003cTask\u003e tempDelete;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Constructor for the TempDeleteList Class"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Takes in an ArrayList of Task objects as a parameter"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param tempDelete ArrayList of Task objects to be operated on"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public TempDeleteList(ArrayList\u003cTask\u003e tempDelete) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        this.tempDelete \u003d tempDelete;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Adds a Task to the temporary deleted list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param task Task that was deleted from the main list and"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     *             has to be added into the temp delete list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        tempDelete.add(task);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Restores a Task from the temp delete list into the main list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * ALso removes the Task from the temp delete list"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * if index is not valid, will show the temp delete list to help the"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * user see the deleted items"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param index index of the task in the temp delete list that is being restored"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param taskList the main list to add the restored task back into"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @throws RoomShareException if the index entered is not valid"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void restore(int index, TaskList taskList) throws RoomShareException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        if (index \u003c 0 || index \u003e tempDelete.size() - 1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            System.out.println(\"This are your tasks in the temp delete list\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            list();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            throw new RoomShareException(ExceptionType.outOfBounds);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            taskList.add(tempDelete.get(index));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            this.tempDelete.remove(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * lists the tasks in the temp delete list"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @throws RoomShareException when the list is empty"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private void list() throws RoomShareException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        if (tempDelete.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            throw new RoomShareException(ExceptionType.emptyList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            int listCount \u003d 1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            for (Task output : tempDelete) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                System.out.println(\"\\t\" + listCount + \". \" + output.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                if( output instanceof Assignment \u0026\u0026 !(((Assignment) output).getSubTasks() \u003d\u003d null) ) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    ArrayList\u003cString\u003e subTasks \u003d ((Assignment) output).getSubTasks();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    for(String subtask : subTasks) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                        System.out.println(\"\\t\" + \"\\t\" + \"-\" + subtask);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                listCount +\u003d 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 71,
      "benitokun123": 1
    }
  },
  {
    "path": "src/main/java/Operations/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Operations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.SortType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "import Enums.TimeUnit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "import Model_Classes.ProgressBar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * class to tell user about errors and completion of operations"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for Ui class"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Shows the startup logo for RoomShare"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void startUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        String logo \u003d \"******   ******\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    + \"**  **   **\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    + \"**  **   **\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    + \"******   ******\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    + \"******       **\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    + \"**   **      **\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    + \"**    ** ******\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Hello from RoomShare!\\n\" + logo);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"How may I serve you?\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        System.out.println(\"Enter \u0027help\u0027 if you require assistance\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void helpAdd() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"Adds a Meeting or Assignment to the list\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"You must specify the description, type of task, and time of the task\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"Each field has a particular format of entry\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Type of task must be either meeting or assignment, wrapped in \u0027#\u0027\\n\" +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                \"\\te.g #meeting# # assignment#\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Description must be wrapped in parentheses\\n \" +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                \"\\te.g (description)\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Priority must be either high medium or low, wrapped in asterisks \u0027*\u0027\\n \" +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                \"\\te.g *low*\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Time must be specified, wrapped in \u0027\u0026\u0027\\n\" +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                \"\\te.g \u002622/12/2019 18:00\u0026  \u0026this friday 13:00\u0026  \u0026next monday 14:00\u0026  \u0026tmr 16:00\u0026\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"If time isn\u0027t specified, then the duration of the task must at least be specified\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Duration can be specified by wrapping in \u0027^\u0027, in terms of number of hours or number of minutes\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"\\te.g ^2 hours^ ^1 minutes^\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Recurrence of the task can be specified by wrapping either days, weeks or months\" +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                \"\\nin \u0027%\u0027\\n\\te.g %day% %week% %month%\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Task can also be assigned to a name, by wrapping the name in \u0027@\u0027\\n\" +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                \"\\te.g @Alice@\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"You must specify the task type, description, and either time or duration\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"The rest of the fields can still be changed later using other commands\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void helpDelete() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Deletes the tasks in the index or the specified range\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"\\te.g delete 1\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"\\te.g delete 3 - 5\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    public void helperList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"Shows the list of task that are currently in the Task list\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"\\teg. list\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    public void helpDone() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"Marks the specified task as done/completed\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"\\teg. done 1\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"\\teg. done 2 - 4\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    public void helpRestore() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"Restores a deleted task back into the task list based on its index\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"\\teg. restore 2\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    public void helpFind() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"Finds tasks in the task list based on keyword specified\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"\\teg. find maths\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"\\treturns all tasks that contains the \u0027maths\u0027 keyword\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    public void helpPriority() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"Changes the priority of the specified task\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"\\t3 levels of priority: 1 (High), 2 (Medium), 3 (Low)\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"\\teg. priority 1\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"\\tThis changes the priority of the task to high\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    public void helpSnooze() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"Snoozes a task for a specified amount of time\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"Different time units include: hours, minutes\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"\\teg. snooze 1 2 hours\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"\\tThis snoozes task 1 for a period of 2 hours\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    public void helpReorder() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"Reorder 2 different tasks in the task list\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"\\teg. reorder 1 - 3\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"\\tThis will swap the order task 1 and task 3\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    public void helpSubtask() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"Adds subtasks to an assignment task type\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"\\teg. subtask 3 subtask1, subtask2\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"\\tThis will add 2 subtasks to the task at index 3, subtask1 and subtask2\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    public void helpUpdate() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"Updates the task details\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"Fields that are updatable: \");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"\\tDescription: (new_description)\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"\\tDate Time: \u002620/09/2019 20:00\u0026\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"\\tPriority: *high*\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"\\tDuration: ^3 hours^\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"\\tRecurrence: %day%\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"\\tAssignee: @joel@\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    public void helpSort() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"Sorts the tasks in the task list based on, deadline, priority and alphabetical order\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"\\teg. sort deadline\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"\\tThis will sort the tasks in the task list by their deadlines\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    public void helpLog() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"Logs the current task list into a saved file\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints an error message telling the user that the data file cannot be loaded and an empty list is generated instead"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void showLoadError() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Error in loading data file, initialising empty task list...\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints a message telling the user that the task at the index has been deleted."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index Index of task to be deleted."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public void showDeleted(int[] index) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        if (index.length \u003d\u003d 1)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            System.out.println(\"Deleted task number \" + (index[0] + 1) + \"!\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        else"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            System.out.println(\"Deleted task number \" + (index[0] + 1) + \" to \" + (index[1] + 1) + \" !\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tells the user that the search operation is executing"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void showFind() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Searching for item in task list...\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tells the user that the task of index has been done and the list has been updated."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void showDone() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Completed task! Your task list has been updated\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * tells the user that a task has been added into the list"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void showAdd() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Your task has been added into the list!\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * tells the user goodbye"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showBye() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Goodbye!\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * tells the user that RoomShare is listing the tasks"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showList() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Listing tasks in your task list...\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Tells the user that an invalid command has been input into RoomShare."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void showCommandError() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Sorry, I don\u0027t understand this command...\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        System.out.println(\"Try type \\\"help add\\\" for instructions on how to add new task\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"    Type list, find, done, delete to perform operations on your todo list\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * tells the user that recurring tasks have appeared."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void showChangeInTaskList() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"You have some recurring tasks that need to be cleared, please check them:\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * tells the user that the requested task has been snoozed"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public void showSnoozeComplete(int index, int amount, TimeUnit unit) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        System.out.println(\"Great I\u0027ve snoozed task \" + index + \" by \" + amount + \" \" + unit.name());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Provides user with instructions to prioritise task"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public void priorityInstruction() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        System.out.println(\"Enter task index followed by priority (high, medium, low)\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        System.out.println(\"\\te.g. 1 high\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * Notifies the user that their task\u0027s priority has been set"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public void prioritySet() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        System.out.println(\"Your task\u0027s priority has been set\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Prompt user to enter the second index"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void promptSecondIndex() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Please enter the index to swap to\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void showReordering() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Reordering the task list...\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    public void helpList() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        System.out.println(\"Here are a list of commands you can input: \\n add \\n delete \\n list \\n done \\n restore \\n find \\n priority \\n snooze \\n reorder \\n subtask \\n update \\n sort \\n log \\n\" +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                \"For more information about a specific command you can \\nEnter help followed by a command, eg. help add\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Show the message of an error encountered"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @param e the encountered error"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public void showError(Exception e){"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        System.out.println(e);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public void showLogSuccess(String filePath) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        System.out.println(\"Log has been successfully written to \" + filePath);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public void showUpdated (int index) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        System.out.println(\"Great! I\u0027ve updated task \" + index);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    public static void showProgress(TaskList taskList) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        new ProgressBar(taskList.getSize(), taskList.getDoneSize()).showBar();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    public static void clearScreen() throws IOException, InterruptedException {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        new ProcessBuilder(\"cmd\", \"/c\", \"cls\").inheritIO().start().waitFor();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void showBar(String bar) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(bar);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public void showChangeInPriority(SortType sortType) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.out.println(\"Your sorting preferences have been set to \" + sortType.toString());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void showSort() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        System.out.print(\"sort: \");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        if( TaskList.getSortType().equals(SortType.priority) ) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            System.out.println(\"Priority\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        } else if( TaskList.getSortType().equals(SortType.alphabetical) ) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            System.out.println(\"Alphabetical\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            System.out.println(\"Deadline\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 64,
      "benitokun123": 37,
      "tyeryan": 86,
      "calebtay": 19,
      "-": 80
    }
  },
  {
    "path": "src/main/java/Operations/subTaskCreator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calebtay"
        },
        "content": "package Operations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import CustomExceptions.RoomShareException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Enums.ExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Model_Classes.Assignment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calebtay"
        },
        "content": "public class subTaskCreator {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * creates sub tasks for Assignments. Appends the information to the Assignment class"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * checks for duplicate subTasks"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * throws RoomShareException if there are mistakes in the formatting of sub tasks"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param index index of the task to add sub tasks to"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @param subTasks list of sub tasks to be added to the task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * @throws RoomShareException when the sub tasks are added to non assignment classes"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public subTaskCreator(int index, String subTasks) throws RoomShareException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        boolean error \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        if (TaskList.get(index) instanceof Assignment) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            ArrayList\u003cString\u003e temp \u003d  new ArrayList\u003c\u003e(Arrays.asList(subTasks.trim().split(\",\")));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            ArrayList\u003cString\u003e subtasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            for( int i\u003d0; i\u003ctemp.size(); i++ ) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                temp.set(i, temp.get(i).trim());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                boolean duplicate \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                if( !subtasks.isEmpty() ) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    for( int m\u003d0; m\u003csubtasks.size(); m++ ) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                        if( temp.get(i).equals(subtasks.get(m)) ) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                            duplicate \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                            error \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                if( !duplicate ) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    subtasks.add(temp.get(i));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            ((Assignment) TaskList.currentList().get(index)).setSubTasks(subtasks);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            if( error ) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                throw new RoomShareException(ExceptionType.duplicateSubtask);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            throw new RoomShareException(ExceptionType.subTaskError);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calebtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 7,
      "benitokun123": 2,
      "calebtay": 40
    }
  },
  {
    "path": "src/main/java/RoomShare.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import CustomExceptions.RoomShareException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.ExceptionType;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.SortType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.TaskType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.TimeUnit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Model_Classes.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Operations.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benitokun123"
        },
        "content": " * Main class of the RoomShare program."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public class RoomShare {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private RecurHandler recurHandler;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private TempDeleteList tempDeleteList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private TaskCreator taskCreator;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private Help help;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private ListRoutine listRoutine;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Constructor of a RoomShare class. Creates all necessary objects and collections for RoomShare to run"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     * Also loads the ArrayList of tasks from the data.txt file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    public RoomShare() throws RoomShareException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        help \u003d new Help();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        ui.startUp();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        taskCreator \u003d new TaskCreator();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        ArrayList\u003cTask\u003e tempStorage \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        tempDeleteList \u003d new TempDeleteList(tempStorage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            taskList \u003d new TaskList(storage.loadFile(\"data.txt\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            ui.showLoadError();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            ArrayList\u003cTask\u003e emptyList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            taskList \u003d new TaskList(emptyList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        listRoutine \u003d new ListRoutine(taskList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        recurHandler \u003d new RecurHandler(taskList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        if (recurHandler.checkRecurrence()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            ui.showChangeInTaskList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            taskList.list();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        listRoutine.list();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Deals with the operation flow of RoomShare."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    public void run() throws RoomShareException, IOException, InterruptedException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            String command \u003d parser.getCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            TaskType type;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                type \u003d TaskType.valueOf(command);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                type \u003d TaskType.others;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            case help:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                Ui.clearScreen();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                ui.startUp();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                help.helpCommandList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                help.showHelp(parser.getCommandLine());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            case bye:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                isExit \u003d true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    storage.writeFile(TaskList.currentList(), \"data.txt\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    ui.showError(e);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                parser.close();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                ui.showBye();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            case list:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                Ui.clearScreen();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                ui.startUp();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                listRoutine.list();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            case done:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                Ui.clearScreen();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                ui.startUp();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    String input \u003d parser.getCommandLine();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    int[] index \u003d parser.getIndexRange(input);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    taskList.done(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    ui.showDone();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    ui.showError(e);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                listRoutine.list();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            case delete:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                Ui.clearScreen();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                ui.startUp();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    String input \u003d parser.getCommandLine();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    int[] index \u003d parser.getIndexRange(input);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    taskList.delete(index, tempDeleteList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    ui.showDeleted(index);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    ui.showError(e);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                listRoutine.list();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            case restore:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                Ui.clearScreen();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                ui.startUp();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    String input \u003d parser.getCommandLine();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    int restoreIndex \u003d parser.getIndex(input);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    tempDeleteList.restore(restoreIndex, taskList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    ui.showError(e);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                listRoutine.list();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            case find:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                Ui.clearScreen();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                ui.startUp();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                listRoutine.list();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                ui.showFind();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                taskList.find(parser.getKey().toLowerCase());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            case priority:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                Ui.clearScreen();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                ui.startUp();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                boolean success \u003d true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    taskList.list();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    ui.priorityInstruction();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    taskList.setPriority(parser.getPriority());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    success \u003d false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    ui.showError(e);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    ui.priorityInstruction();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    if (success) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                        TaskList.sortTasks();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                        ui.prioritySet();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                listRoutine.list();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            case add:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                Ui.clearScreen();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                ui.startUp();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    String input \u003d parser.getCommandLine();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    if(!(CheckAnomaly.checkTask((taskCreator.create(input))))) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                        if( !(CheckAnomaly.checkDuplicate((taskCreator.create(input)))) ) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            taskList.add(taskCreator.create(input));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                            ui.showAdd();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                            throw new RoomShareException(ExceptionType.duplicateTask);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                        throw new RoomShareException(ExceptionType.timeClash);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    ui.showError(e);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                listRoutine.list();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            case snooze:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                Ui.clearScreen();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                ui.startUp();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    String input \u003d parser.getCommandLine();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    int index \u003d parser.getIndex(input);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    int amount \u003d parser.getAmount(input);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    TimeUnit timeUnit \u003d parser.getTimeUnit(input);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    if (amount \u003c 0)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                        throw new RoomShareException(ExceptionType.negativeTimeAmount);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    taskList.snooze(index, amount, timeUnit);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    ui.showSnoozeComplete(index + 1, amount, timeUnit);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    ui.showError(e);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                listRoutine.list();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            case reorder:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                Ui.clearScreen();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                ui.startUp();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    String input \u003d parser.getCommandLine();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    int firstIndex \u003d parser.getIndex(input, 0);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    int secondIndex \u003d parser.getIndex(input, 1);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    taskList.reorder(firstIndex, secondIndex);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    ui.showReordering();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    ui.showError(e);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                listRoutine.list();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            case subtask:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                Ui.clearScreen();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                ui.startUp();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    String input \u003d parser.getCommandLine();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    int index \u003d parser.getIndexSubtask(input);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    String subTasks \u003d parser.getSubTasks(input);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    new subTaskCreator(index, subTasks);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                    ui.showError(e);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                listRoutine.list();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            case update:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                Ui.clearScreen();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                ui.startUp();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    String input \u003d parser.getCommandLine();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    int index \u003d parser.getIndex(input);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    Task oldTask \u003d taskList.get(index);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    taskCreator.updateTask(input,oldTask);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    ui.showUpdated(index+1);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    ui.showError(e);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                listRoutine.list();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            case sort:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                Ui.clearScreen();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                ui.startUp();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                SortType sortType;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    String input \u003d parser.getCommandLine();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    sortType \u003d parser.getSort(input);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    ui.showError(e);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                    sortType \u003d SortType.priority;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                TaskList.changeSort(sortType);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                ui.showChangeInPriority(sortType);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                listRoutine.list();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            case log:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                Ui.clearScreen();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                ui.startUp();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    String filePath \u003d storage.writeLogFile(TaskList.currentList());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    ui.showLogSuccess(filePath);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    ui.showError(e);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                listRoutine.list();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            case completed:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                Ui.clearScreen();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                ui.startUp();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                listRoutine.list();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    taskList.showCompleted();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                    ui.showError(e);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "calebtay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                ui.showCommandError();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Main function of RoomShare."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * Creates a new instance of RoomShare class"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     * @param args command line arguments"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "     * @throws RoomShareException Custom exception class within RoomShare program"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "calebtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    public static void main(String[] args) throws RoomShareException, IOException, InterruptedException {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        new RoomShare().run();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 140,
      "benitokun123": 86,
      "tyeryan": 25,
      "calebtay": 50,
      "-": 2
    }
  },
  {
    "path": "src/test/java/AssignmentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.Priority;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.RecurrenceScheduleType;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Model_Classes.Assignment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public class AssignmentTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private static SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private static Date date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            date \u003d format.parse(\"22/12/2019 18:00\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private Assignment assignment \u003d new Assignment(\"description\", date);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    void getDescription() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(assignment.getDescription(), \"description\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    void getDate() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(assignment.getDate().toString(), \"Sun Dec 22 18:00:00 SGT 2019\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    void getDone() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertFalse(assignment.getDone());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    void getPriority() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(assignment.getPriority(), Priority.low);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    void getAssignee() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(assignment.getAssignee(), \"everyone\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    void getRecurrenceSchedule() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(assignment.getRecurrenceSchedule(), RecurrenceScheduleType.none);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 56
    }
  },
  {
    "path": "src/test/java/CheckAnomalyTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import CustomExceptions.RoomShareException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Enums.TimeUnit;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Model_Classes.Meeting;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Operations.CheckAnomaly;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Operations.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Operations.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Operations.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calebtay"
        },
        "content": "public class CheckAnomalyTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    private static final Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    private static final Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    private static Meeting meeting1, meeting2, meeting3, meeting4, meeting5;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    private static Date at1, at2, at3, at4, at5;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    private static TaskList taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            at1 \u003d parser.formatDateCustom_1(\"12/12/2019 17:00\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            at2 \u003d parser.formatDateCustom_1(\"12/12/2019 19:00\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            at3 \u003d parser.formatDateCustom_1(\"12/12/2019 10:00\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            at4 \u003d parser.formatDateCustom_1(\"12/12/2019 09:00\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            at5 \u003d parser.formatDateCustom_1(\"21/12/2019 13:00\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            taskList \u003d new TaskList(storage.loadFile(\"test.txt\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            meeting1 \u003d new Meeting(\"test1\", at1, 2, TimeUnit.hours);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            meeting2 \u003d new Meeting(\"test2\", at2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            meeting3 \u003d new Meeting(\"test3\", at3);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            meeting4 \u003d new Meeting(\"test4\", at4, 2, TimeUnit.hours);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            meeting5 \u003d new Meeting(\"test5\", at5);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void durationClashOverlap() { assertEquals(true, new CheckAnomaly().checkTask(meeting1)); }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void durationClashIntersect() { assertEquals(true, new CheckAnomaly().checkTask(meeting2)); }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void fixedClashIntersect() { assertEquals(true, new CheckAnomaly().checkTask(meeting3)); }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void fixedClashOverlap() { assertEquals(true, new CheckAnomaly().checkTask(meeting4)); }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void noClash() { assertEquals(false, new CheckAnomaly().checkTask(meeting5)); }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "calebtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 5,
      "benitokun123": 3,
      "calebtay": 45
    }
  },
  {
    "path": "src/test/java/LeaveTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.Priority;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.RecurrenceScheduleType;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Model_Classes.Leave;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public class LeaveTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private static SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private static Date from;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private static Date to;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private static String user \u003d \"user\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            from \u003d format.parse(\"22/12/2019 18:00\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            to \u003d format.parse(\"24/12/2019 22:00\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private Leave leave \u003d new Leave(\"description\", user, from, to);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    void getDescription() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(leave.getDescription(), \"description\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    void getStartDate() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(leave.getStartDate().toString(), \"Sun Dec 22 18:00:00 SGT 2019\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    void getEndDate() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(leave.getEndDate().toString(), \"Tue Dec 24 22:00:00 SGT 2019\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    void getAssignee() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(leave.getAssignee(), \"user\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    void getPriority() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(leave.getPriority(), Priority.low);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    void getDone() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertFalse(leave.getDone());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    void getRecurrenceSchedule() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(leave.getRecurrenceSchedule(), RecurrenceScheduleType.none);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 64
    }
  },
  {
    "path": "src/test/java/MeetingTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.Priority;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.RecurrenceScheduleType;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.TimeUnit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Model_Classes.Meeting;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public class MeetingTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private static SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private static Date date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            date \u003d format.parse(\"22/12/2019 18:00\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private static Meeting meeting1 \u003d new Meeting(\"description\", date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private static Meeting meeting2 \u003d new Meeting(\"description\", date, 2, TimeUnit.hours);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    void getDescription() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(meeting1.getDescription(), \"description\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(meeting2.getDescription(), \"description\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    void getDone() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertFalse(meeting1.getDone());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        meeting2.setDone(true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertTrue(meeting2.getDone());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    void getDate() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(meeting1.getDate().toString(), \"Sun Dec 22 18:00:00 SGT 2019\" );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    void getPriority() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(meeting1.getPriority(), Priority.low);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        meeting2.setPriority(Priority.high);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(meeting2.getPriority(), Priority.high);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    void getAssignee() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(meeting1.getAssignee(), \"everyone\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        meeting2.setAssignee(\"john\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(meeting2.getAssignee(), \"john\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    void getTimeUnit() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(meeting2.getTimeUnit(), TimeUnit.hours);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    void getDuration() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(meeting2.getDuration(), \"2\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    void getRecurrenceSchedule() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(meeting1.getRecurrenceSchedule(), RecurrenceScheduleType.none);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(meeting2.getRecurrenceSchedule(), RecurrenceScheduleType.none);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 74
    }
  },
  {
    "path": "src/test/java/ProgressBarTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Model_Classes.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Operations.TaskList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public class ProgressBarTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private float total \u003d 5;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private float done \u003d 5;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private ProgressBar pg \u003d new ProgressBar(total, done);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    void showBar() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(pg.showBar(), \"[\u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d \u003d] 100.0%\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 17
    }
  },
  {
    "path": "src/test/java/RecurHandlerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public class RecurHandlerTest {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 2
    }
  },
  {
    "path": "src/test/java/StorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import CustomExceptions.RoomShareException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import Model_Classes.Assignment;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import Model_Classes.Leave;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import Model_Classes.Meeting;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import Model_Classes.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import Operations.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import CustomExceptions.RoomShareException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import Enums.*;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import Model_Classes.*;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    private static SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    private static Date date, to;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            date \u003d format.parse(\"22/12/2019 18:00\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            to \u003d format.parse(\"24/12/2019 18:00\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    private String fileName \u003d \"testdata.txt\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    private ArrayList\u003cTask\u003e altest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    private ArrayList\u003cTask\u003e al \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "//    private static TaskList tl1 \u003d new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    private Assignment ts \u003d new Assignment(\"assign\", date);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    private Meeting ts1 \u003d new Meeting(\"meet\", date);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    private Leave ts2 \u003d new Leave(\"leave\", \"user\", date, to);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    private Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    private static String[] GetStringArray(ArrayList\u003cTask\u003e arr)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        // declaration and initialise String Array"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        String str[] \u003d new String[arr.size()];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        int i \u003d0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        // ArrayList to Array Conversion"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        for (Task s : arr) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            // Assign each value to String array"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            str[i] \u003d s.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    void loadFile() throws RoomShareException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        altest \u003d storage.loadFile(fileName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        al.add(ts);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        al.add(ts1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        al.add(ts2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        ts1.setDone(true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        String[] str \u003d GetStringArray(altest);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        String[] str1 \u003d GetStringArray(al);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        assertEquals(str.toString(), str1.toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    void convertForStorage() throws RoomShareException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        assertEquals(\"22/12/2019 18:00\", storage.convertForStorage(ts1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    void convertForStorageLeave() throws RoomShareException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        assertEquals(\"22/12/2019 18:00-24/12/2019 18:00\", storage.convertForStorageLeave(ts2));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 2,
      "tyeryan": 81
    }
  },
  {
    "path": "src/test/java/TaskCreatorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import CustomExceptions.RoomShareException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.Priority;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.RecurrenceScheduleType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.TimeUnit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Model_Classes.Leave;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Model_Classes.Meeting;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Operations.TaskCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public class TaskCreatorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private static TaskCreator taskCreator \u003d new TaskCreator();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private static String input1 \u003d \"add #meeting# (description) \u002622/12/2019 18:00\u0026 *high* %week% \" +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            \"@john@ ^2 hours^ !R!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private static String input2 \u003d \"add #meeting# (description) \u002623/12/2019 18:00\u0026\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    private static String input3 \u003d \"add #leave# (description) \u002624/12/2019 18:00\u002625/12/2019 18:00\u0026 @Harry@\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    private static String updates \u003d \"update 1 (another description) \u002622/12/2020 19:00\u0026 *medium* %day% \" +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            \"@bob@ ^120 minutes^\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    void extractDescription() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            assertEquals(taskCreator.extractDescription(input1), \"description\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    void extractDate() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        Date date1 \u003d new Date();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        Date date2 \u003d new Date();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        Date date3 \u003d new Date();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            date1 \u003d format.parse(\"22/12/2019 18:00\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            date2 \u003d format.parse(\"24/12/2019 18:00\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            date3 \u003d format.parse(\"25/12/2019 18:00\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        ArrayList\u003cDate\u003e dates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        ArrayList\u003cDate\u003e dates2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        dates2.add(date2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        dates2.add(date3);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        dates.add(date1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            assertEquals(taskCreator.extractDate(input1), dates);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            assertEquals(taskCreator.extractDate(input3), dates2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    void extractType() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            assertEquals(taskCreator.extractType(input1), \"meeting\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            assertEquals(taskCreator.extractType(input2), \"meeting\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            assertEquals(taskCreator.extractType(input3), \"leave\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    void extractPriority() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(taskCreator.extractPriority(input1), Priority.high);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(taskCreator.extractPriority(input2), Priority.low);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    void extractAssignee() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(taskCreator.extractAssignee(input1), \"john\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(taskCreator.extractAssignee(input2), \"everyone\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    void extractRecurrence() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(taskCreator.extractRecurrence(input1), RecurrenceScheduleType.week);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(taskCreator.extractRecurrence(input2), RecurrenceScheduleType.none);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    void extractDuration() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        Pair\u003cInteger, TimeUnit\u003e pair \u003d new Pair\u003c\u003e(2, TimeUnit.hours);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        Pair\u003cInteger, TimeUnit\u003e pair2 \u003d new Pair\u003c\u003e(0, TimeUnit.unDefined);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(taskCreator.extractDuration(input1), pair);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertEquals(taskCreator.extractDuration(input2), pair2);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    void extractReminder() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertTrue(taskCreator.extractReminder(input1));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        assertFalse(taskCreator.extractReminder(input2));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    void create() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        Pair\u003cInteger, TimeUnit\u003e pair \u003d new Pair\u003c\u003e(2, TimeUnit.hours);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        Pair\u003cInteger, TimeUnit\u003e pair2 \u003d new Pair\u003c\u003e(0, TimeUnit.unDefined);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        Date date1 \u003d new Date();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        Date date2 \u003d new Date();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        Date date3 \u003d new Date();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        Date date4 \u003d new Date();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            date1 \u003d format.parse(\"22/12/2019 18:00\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            date2 \u003d format.parse(\"23/12/2019 18:00\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            date3 \u003d format.parse(\"24/12/2019 18:00\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            date4 \u003d format.parse(\"25/12/2019 18:00\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            Meeting meeting1 \u003d (Meeting) taskCreator.create(input1);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            assertFalse(meeting1.getDone());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            assertEquals(meeting1.getRecurrenceSchedule(), RecurrenceScheduleType.week);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            assertEquals(meeting1.getDuration(), \"2\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            assertEquals(meeting1.getTimeUnit(), TimeUnit.hours);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            assertEquals(meeting1.getAssignee(), \"john\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            assertEquals(meeting1.getDate(), date1);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            assertEquals(meeting1.getPriority(), Priority.high);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            assertEquals(meeting1.getDescription(), \"description\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            Meeting meeting2 \u003d (Meeting) taskCreator.create(input2);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            assertFalse(meeting2.getDone());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            assertFalse(meeting2.isFixedDuration());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            assertEquals(meeting2.getDescription(), \"description\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            assertEquals(meeting2.getPriority(), Priority.low);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            assertEquals(meeting2.getDate(), date2);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            assertEquals(meeting2.getAssignee(), \"everyone\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            assertEquals(meeting2.getTimeUnit(), TimeUnit.unDefined);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            assertEquals(meeting2.getDuration(), \"0\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            assertEquals(meeting2.getRecurrenceSchedule(), RecurrenceScheduleType.none);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            Leave leave \u003d (Leave) taskCreator.create(input3);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            assertFalse(leave.getDone());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            assertFalse(leave.hasRecurring());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            assertEquals(leave.getAssignee(), \"Harry\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            assertEquals(leave.getEndDate(), date4);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            assertEquals(leave.getStartDate(), date3);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            assertEquals(leave.getDescription(), \"description\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            assertEquals(leave.getPriority(), Priority.low);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            assertEquals(leave.getRecurrenceSchedule(), RecurrenceScheduleType.none);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    void updateTask() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            Date newDate \u003d format.parse(\"22/12/2020 19:00\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            Meeting meeting \u003d (Meeting) taskCreator.create(input1);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            taskCreator.updateTask(updates,meeting);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            assertFalse(meeting.getDone());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            assertEquals(meeting.getDescription(), \"another description\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            assertEquals(meeting.getDate(),newDate);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            assertEquals(meeting.getPriority(), Priority.medium);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            assertEquals(meeting.getAssignee(), \"bob\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            assertEquals(meeting.getDuration(), \"120\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            assertEquals(meeting.getTimeUnit(), TimeUnit.minutes);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            assertEquals(meeting.getRecurrenceSchedule(), RecurrenceScheduleType.day);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        } catch (RoomShareException | ParseException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 172,
      "benitokun123": 25
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import CustomExceptions.RoomShareException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Enums.Priority;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "import Enums.TimeUnit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import Model_Classes.Assignment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import Model_Classes.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import Operations.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    private static SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    private static Date date1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    private static Date date2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    private static Date date3;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    private static Date date4;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            date1 \u003d format.parse(\"22/12/2019 18:00\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            date2 \u003d format.parse(\"22/12/2019 18:00\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            date3 \u003d format.parse(\"22/12/2019 18:00\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            date4 \u003d format.parse(\"22/12/2019 18:00\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    private static String description \u003d \"task1\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    private static Assignment ts \u003d new Assignment(description, date1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    private static Assignment ts2 \u003d new Assignment(\"task2\", date2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    private static Assignment assignment1 \u003d new Assignment (\"as1\", date3);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    private static Assignment assignment2 \u003d new Assignment(\"as2\", date4);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    private static TaskList tl \u003d new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    void add() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        tl.add(ts);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        tl.add(ts2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        tl.add(assignment1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        tl.add(assignment2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            assertEquals(\"[A][\\u2718] task1 (everyone) (by: Sun Dec 22 18:00:00 SGT 2019)\", tl.get(0).toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            assertEquals(\"[A][\\u2718] task2 (everyone) (by: Sun Dec 22 18:00:00 SGT 2019)\", tl.get(1).toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            assertEquals(\"[A][\\u2718] as1 (everyone) (by: Sun Dec 22 18:00:00 SGT 2019)\", tl.get(2).toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            assertEquals(\"[A][\\u2718] as2 (everyone) (by: Sun Dec 22 18:00:00 SGT 2019)\", tl.get(3).toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benitokun123"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    void done() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        tl.add(ts);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        tl.add(ts2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        int[] array \u003d {0, 1};"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            tl.done(array);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            assertEquals(\"[A][\\u2713] task1 (everyone) (by: Sun Dec 22 18:00:00 SGT 2019)\\n\" +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                            \"[A][\\u2713] task2 (everyone) (by: Sun Dec 22 18:00:00 SGT 2019)\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    tl.get(0).toString()+ \"\\n\" + tl.get(1).toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    void find() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        tl.add(ts);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "        tl.find(\"task\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            assertEquals(\"[A][\\u2718] task1 (everyone) (by: Sun Dec 22 18:00:00 SGT 2019)\", tl.get(0).toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    void setPriority() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        tl.add(ts);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        String[] array \u003d {\"1\", \"high\"};"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            tl.setPriority(array);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            assertEquals(tl.get(0).getPriority(), Priority.high);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tyeryan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    void reorder() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        tl.add(ts);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        tl.add(ts2);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        tl.reorder(0, 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            assertEquals(\"[A][\\u2718] task2 (everyone) (by: Sun Dec 22 18:00:00 SGT 2019)\\n\" +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "                    \"[A][\\u2718] task1 (everyone) (by: Sun Dec 22 18:00:00 SGT 2019)\", tl.get(0).toString() + \"\\n\" + tl.get(1).toString());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    void replace() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        tl.add(ts);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        tl.replace(0,ts2);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            assertEquals(\"[A][\\u2718] task2 (everyone) (by: Sun Dec 22 18:00:00 SGT 2019)\", tl.get(0).toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "    void snooze() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        tl.add(ts);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        tl.add(ts2);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "        tl.add(assignment1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            tl.snooze(0, 1, TimeUnit.hours);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            tl.snooze(1,10, TimeUnit.minutes);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            tl.snooze(2, 1, TimeUnit.day);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            assertEquals(\"[A][\\u2718] task1 (everyone) (by: Sun Dec 22 19:00:00 SGT 2019)\", tl.get(0).toString());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            assertEquals(\"[A][\\u2718] task2 (everyone) (by: Sun Dec 22 18:10:00 SGT 2019)\", tl.get(1).toString());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "benitokun123"
        },
        "content": "            assertEquals(\"[A][\\u2718] as1 (everyone) (by: Mon Dec 23 18:00:00 SGT 2019)\", tl.get(2).toString());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tyeryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 33,
      "benitokun123": 75,
      "tyeryan": 25
    }
  },
  {
    "path": "src/test/java/TempDeleteListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "public class TempDeleteListTest {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TehZiHuai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TehZiHuai": 2
    }
  },
  {
    "path": "src/test/java/subTaskCreatorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import CustomExceptions.RoomShareException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Model_Classes.Assignment;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Operations.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import Operations.subTaskCreator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "calebtay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "calebtay"
        },
        "content": "class subTaskCreatorTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    private static final Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    private static final Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    private static TaskList taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    private static Date by;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    private static Assignment assignment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            taskList \u003d new TaskList(storage.loadFile(\"test.txt\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            by \u003d parser.formatDateCustom_1(\"12/12/2019 17:00\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            assignment \u003d new Assignment(\"test\", by);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            taskList.add(assignment);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            new subTaskCreator(3, \"one,two\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        } catch (RoomShareException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "calebtay"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "calebtay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    public void testSubtask() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        String one \u003d ((Assignment) TaskList.currentList().get(3)).getSubTasks().get(0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        String two \u003d ((Assignment) TaskList.currentList().get(3)).getSubTasks().get(1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        assertEquals(one, \"one\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "calebtay"
        },
        "content": "        assertEquals(two, \"two\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "calebtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "calebtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "calebtay": 39
    }
  }
]
